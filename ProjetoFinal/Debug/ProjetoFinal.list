
ProjetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  0800d168  0800d168  0000e168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e188  0800e188  00010288  2**0
                  CONTENTS
  4 .ARM          00000008  0800e188  0800e188  0000f188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e190  0800e190  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e190  0800e190  0000f190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e194  0800e194  0000f194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  0800e198  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  20000288  0800e420  00010288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  0800e420  00010b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d6  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033be  00000000  00000000  00023a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00026e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dde  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bd8  00000000  00000000  00028e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bae  00000000  00000000  0004ea06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e11c4  00000000  00000000  000675b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148778  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  001487bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014e76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d150 	.word	0x0800d150

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	0800d150 	.word	0x0800d150

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC1_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <MX_ADC1_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_ADC1_Init+0x98>)
 80010de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_ADC1_Init+0x98>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_ADC1_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <MX_ADC1_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_ADC1_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_ADC1_Init+0x98>)
 8001126:	f003 f97f 	bl	8004428 <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001130:	f001 fd8e 	bl	8002c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_ADC1_Init+0x98>)
 8001146:	f003 fa93 	bl	8004670 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001150:	f001 fd7e 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002a4 	.word	0x200002a4
 8001160:	40012000 	.word	0x40012000
 8001164:	0f000001 	.word	0x0f000001

08001168 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_ADC_MspInit+0x7c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d127      	bne.n	80011da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <HAL_ADC_MspInit+0x84>)
 80011d6:	f004 f929 	bl	800542c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012000 	.word	0x40012000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000

080011f0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6


// função que realiza a inicialização do sensor com configurações default
void bmp280_init_default_params(bmp280_params_t *params) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	715a      	strb	r2, [r3, #5]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <read_register16>:

// função que realiza a leitura do registrador de 16 bits
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	460b      	mov	r3, r1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	b29a      	uxth	r2, r3
 8001246:	8af9      	ldrh	r1, [r7, #22]
 8001248:	f241 3388 	movw	r3, #5000	@ 0x1388
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2302      	movs	r3, #2
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	f004 fe1b 	bl	8005e94 <HAL_I2C_Mem_Read>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10b      	bne.n	800127c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001264:	7d7b      	ldrb	r3, [r7, #21]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7d3b      	ldrb	r3, [r7, #20]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	801a      	strh	r2, [r3, #0]
		return true;
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <read_register16+0x56>
	} else
		return false;
 800127c:	2300      	movs	r3, #0

}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <read_data>:

// função que realiza a leitura de dados
static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001286:	b590      	push	{r4, r7, lr}
 8001288:	b08b      	sub	sp, #44	@ 0x2c
 800128a:	af04      	add	r7, sp, #16
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	461a      	mov	r2, r3
 8001292:	460b      	mov	r3, r1
 8001294:	72fb      	strb	r3, [r7, #11]
 8001296:	4613      	mov	r3, r2
 8001298:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	8af9      	ldrh	r1, [r7, #22]
 80012b0:	f241 3488 	movw	r4, #5000	@ 0x1388
 80012b4:	9402      	str	r4, [sp, #8]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	f004 fde9 	bl	8005e94 <HAL_I2C_Mem_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <read_data+0x46>
		return 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e000      	b.n	80012ce <read_data+0x48>
	else
		return 1;
 80012cc:	2301      	movs	r3, #1

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}

080012d6 <read_calibration_data>:

// função que realiza a leitura de calibração a partir dos registradores
static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2188      	movs	r1, #136	@ 0x88
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff9f 	bl	8001228 <read_register16>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d06f      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3302      	adds	r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	218a      	movs	r1, #138	@ 0x8a
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff95 	bl	8001228 <read_register16>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d065      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	461a      	mov	r2, r3
 800130a:	218c      	movs	r1, #140	@ 0x8c
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff8b 	bl	8001228 <read_register16>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3306      	adds	r3, #6
 800131c:	461a      	mov	r2, r3
 800131e:	218e      	movs	r1, #142	@ 0x8e
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff81 	bl	8001228 <read_register16>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d051      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3308      	adds	r3, #8
 8001330:	461a      	mov	r2, r3
 8001332:	2190      	movs	r1, #144	@ 0x90
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff77 	bl	8001228 <read_register16>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d047      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	330a      	adds	r3, #10
 8001344:	461a      	mov	r2, r3
 8001346:	2192      	movs	r1, #146	@ 0x92
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff6d 	bl	8001228 <read_register16>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d03d      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
 8001358:	461a      	mov	r2, r3
 800135a:	2194      	movs	r1, #148	@ 0x94
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff63 	bl	8001228 <read_register16>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d033      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	330e      	adds	r3, #14
 800136c:	461a      	mov	r2, r3
 800136e:	2196      	movs	r1, #150	@ 0x96
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff59 	bl	8001228 <read_register16>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d029      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3310      	adds	r3, #16
 8001380:	461a      	mov	r2, r3
 8001382:	2198      	movs	r1, #152	@ 0x98
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff4f 	bl	8001228 <read_register16>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01f      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3312      	adds	r3, #18
 8001394:	461a      	mov	r2, r3
 8001396:	219a      	movs	r1, #154	@ 0x9a
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff45 	bl	8001228 <read_register16>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d015      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3314      	adds	r3, #20
 80013a8:	461a      	mov	r2, r3
 80013aa:	219c      	movs	r1, #156	@ 0x9c
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff3b 	bl	8001228 <read_register16>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00b      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013bc:	461a      	mov	r2, r3
 80013be:	219e      	movs	r1, #158	@ 0x9e
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff31 	bl	8001228 <read_register16>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <read_calibration_data+0xfa>

		return true;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <read_calibration_data+0xfc>
	}

	return false;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <read_hum_calibration_data>:

// função que realiza a calibração dos dados de umidade
static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f103 0218 	add.w	r2, r3, #24
 80013e8:	2301      	movs	r3, #1
 80013ea:	21a1      	movs	r1, #161	@ 0xa1
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff4a 	bl	8001286 <read_data>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d14b      	bne.n	8001490 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	331a      	adds	r3, #26
 80013fc:	461a      	mov	r2, r3
 80013fe:	21e1      	movs	r1, #225	@ 0xe1
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff11 	bl	8001228 <read_register16>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d041      	beq.n	8001490 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f103 021c 	add.w	r2, r3, #28
 8001412:	2301      	movs	r3, #1
 8001414:	21e3      	movs	r1, #227	@ 0xe3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff35 	bl	8001286 <read_data>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d136      	bne.n	8001490 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001422:	f107 030e 	add.w	r3, r7, #14
 8001426:	461a      	mov	r2, r3
 8001428:	21e4      	movs	r1, #228	@ 0xe4
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fefc 	bl	8001228 <read_register16>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d02c      	beq.n	8001490 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	461a      	mov	r2, r3
 800143c:	21e5      	movs	r1, #229	@ 0xe5
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fef2 	bl	8001228 <read_register16>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d022      	beq.n	8001490 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001450:	2301      	movs	r3, #1
 8001452:	21e7      	movs	r1, #231	@ 0xe7
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff16 	bl	8001286 <read_data>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d117      	bne.n	8001490 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b21b      	sxth	r3, r3
 8001466:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800146a:	b21a      	sxth	r2, r3
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	121b      	asrs	r3, r3, #8
 8001470:	b21b      	sxth	r3, r3
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001480:	89bb      	ldrh	r3, [r7, #12]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	841a      	strh	r2, [r3, #32]

		return true;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <write_register8>:

// função que realiza a escrita em um registrador
static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b088      	sub	sp, #32
 800149e:	af04      	add	r7, sp, #16
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
 80014a6:	4613      	mov	r3, r2
 80014a8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	89f9      	ldrh	r1, [r7, #14]
 80014bc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2301      	movs	r3, #1
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	1cbb      	adds	r3, r7, #2
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	f004 fbe8 	bl	8005ca0 <HAL_I2C_Mem_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <write_register8+0x40>
		return false;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <write_register8+0x42>
	else
		return true;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <bmp280_init>:

// função de inicialização do sensor
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014f2:	2b76      	cmp	r3, #118	@ 0x76
 80014f4:	d005      	beq.n	8001502 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014fa:	2b77      	cmp	r3, #119	@ 0x77
 80014fc:	d001      	beq.n	8001502 <bmp280_init+0x1e>

		return false;
 80014fe:	2300      	movs	r3, #0
 8001500:	e099      	b.n	8001636 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001508:	2301      	movs	r3, #1
 800150a:	21d0      	movs	r1, #208	@ 0xd0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff feba 	bl	8001286 <read_data>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <bmp280_init+0x38>
		return false;
 8001518:	2300      	movs	r3, #0
 800151a:	e08c      	b.n	8001636 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001522:	2b58      	cmp	r3, #88	@ 0x58
 8001524:	d006      	beq.n	8001534 <bmp280_init+0x50>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800152c:	2b60      	cmp	r3, #96	@ 0x60
 800152e:	d001      	beq.n	8001534 <bmp280_init+0x50>

		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e080      	b.n	8001636 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001534:	22b6      	movs	r2, #182	@ 0xb6
 8001536:	21e0      	movs	r1, #224	@ 0xe0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffae 	bl	800149a <write_register8>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <bmp280_init+0x64>
		return false;
 8001544:	2300      	movs	r3, #0
 8001546:	e076      	b.n	8001636 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001548:	f107 020c 	add.w	r2, r7, #12
 800154c:	2301      	movs	r3, #1
 800154e:	21f3      	movs	r1, #243	@ 0xf3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fe98 	bl	8001286 <read_data>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f5      	bne.n	8001548 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800155c:	7b3b      	ldrb	r3, [r7, #12]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff feb5 	bl	80012d6 <read_calibration_data>
 800156c:	4603      	mov	r3, r0
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d100      	bne.n	800157a <bmp280_init+0x96>
 8001578:	e001      	b.n	800157e <bmp280_init+0x9a>
		return false;
 800157a:	2300      	movs	r3, #0
 800157c:	e05b      	b.n	8001636 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001584:	2b60      	cmp	r3, #96	@ 0x60
 8001586:	d10a      	bne.n	800159e <bmp280_init+0xba>
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff26 	bl	80013da <read_hum_calibration_data>
 800158e:	4603      	mov	r3, r0
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <bmp280_init+0xba>
		return false;
 800159a:	2300      	movs	r3, #0
 800159c:	e04b      	b.n	8001636 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	795b      	ldrb	r3, [r3, #5]
 80015a2:	015b      	lsls	r3, r3, #5
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	461a      	mov	r2, r3
 80015b8:	21f5      	movs	r1, #245	@ 0xf5
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff6d 	bl	800149a <write_register8>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <bmp280_init+0xe6>
		return false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e035      	b.n	8001636 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	78db      	ldrb	r3, [r3, #3]
 80015dc:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015f6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80015fe:	2b60      	cmp	r3, #96	@ 0x60
 8001600:	d10d      	bne.n	800161e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	461a      	mov	r2, r3
 800160c:	21f2      	movs	r1, #242	@ 0xf2
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff43 	bl	800149a <write_register8>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <bmp280_init+0x13a>
			return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e00b      	b.n	8001636 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	461a      	mov	r2, r3
 8001622:	21f4      	movs	r1, #244	@ 0xf4
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff38 	bl	800149a <write_register8>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <bmp280_init+0x150>
		return false;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <bmp280_init+0x152>
	}

	return true;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <compensate_temperature>:
	return false;
}

// função de compensação da leitura de temperatura
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800163e:	b480      	push	{r7}
 8001640:	b087      	sub	sp, #28
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	10da      	asrs	r2, r3, #3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800165c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001660:	12db      	asrs	r3, r3, #11
 8001662:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	111b      	asrs	r3, r3, #4
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	1112      	asrs	r2, r2, #4
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	8809      	ldrh	r1, [r1, #0]
 8001676:	1a52      	subs	r2, r2, r1
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001684:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001688:	139b      	asrs	r3, r3, #14
 800168a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	441a      	add	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3380      	adds	r3, #128	@ 0x80
 80016a2:	121b      	asrs	r3, r3, #8
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <compensate_pressure>:

// função de compensação da leitura de pressão
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp){
 80016b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	b09b      	sub	sp, #108	@ 0x6c
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80016ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80016bc:	647a      	str	r2, [r7, #68]	@ 0x44
	int64_t var1, var2, p;

	var1 = ((int64_t) fine_temp/2) - 64000;
 80016be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016c0:	0fd3      	lsrs	r3, r2, #31
 80016c2:	4413      	add	r3, r2
 80016c4:	105b      	asrs	r3, r3, #1
 80016c6:	17da      	asrs	r2, r3, #31
 80016c8:	461c      	mov	r4, r3
 80016ca:	4615      	mov	r5, r2
 80016cc:	f5b4 4a7a 	subs.w	sl, r4, #64000	@ 0xfa00
 80016d0:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016d4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
	var2 = var1*var1*((double)dev->dig_P6)/32768;
 80016d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016dc:	fb03 f102 	mul.w	r1, r3, r2
 80016e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	18ca      	adds	r2, r1, r3
 80016ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016ec:	fba3 8903 	umull	r8, r9, r3, r3
 80016f0:	eb02 0309 	add.w	r3, r2, r9
 80016f4:	4699      	mov	r9, r3
 80016f6:	4640      	mov	r0, r8
 80016f8:	4649      	mov	r1, r9
 80016fa:	f7fe ff6f 	bl	80005dc <__aeabi_l2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001704:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff2b 	bl	8000564 <__aeabi_i2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7fe ff8f 	bl	8000638 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b86      	ldr	r3, [pc, #536]	@ (8001940 <compensate_pressure+0x290>)
 8001728:	f7ff f8b0 	bl	800088c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fb30 	bl	8000d98 <__aeabi_d2lz>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var2 = var2+var1*((double)dev->dig_P5)*2;
 8001740:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001744:	f7fe ff4a 	bl	80005dc <__aeabi_l2d>
 8001748:	4680      	mov	r8, r0
 800174a:	4689      	mov	r9, r1
 800174c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001750:	f7fe ff44 	bl	80005dc <__aeabi_l2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800175a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff00 	bl	8000564 <__aeabi_i2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe ff64 	bl	8000638 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	f7fe fda6 	bl	80002cc <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4640      	mov	r0, r8
 8001786:	4649      	mov	r1, r9
 8001788:	f7fe fda0 	bl	80002cc <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fb00 	bl	8000d98 <__aeabi_d2lz>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var2 = (var2/4)+((double)dev->dig_P4)*65536;
 80017a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da06      	bge.n	80017b6 <compensate_pressure+0x106>
 80017a8:	1cd1      	adds	r1, r2, #3
 80017aa:	61b9      	str	r1, [r7, #24]
 80017ac:	f143 0300 	adc.w	r3, r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0890      	lsrs	r0, r2, #2
 80017c0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80017c4:	1099      	asrs	r1, r3, #2
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7fe ff05 	bl	80005dc <__aeabi_l2d>
 80017d2:	4604      	mov	r4, r0
 80017d4:	460d      	mov	r5, r1
 80017d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fec1 	bl	8000564 <__aeabi_i2d>
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <compensate_pressure+0x294>)
 80017e8:	f7fe ff26 	bl	8000638 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fd6a 	bl	80002cc <__adddf3>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff faca 	bl	8000d98 <__aeabi_d2lz>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var1 = (((double)dev->dig_P3)*var1*var1/524288+((double)dev->dig_P2)*var1)/5242888;
 800180c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea6 	bl	8000564 <__aeabi_i2d>
 8001818:	4604      	mov	r4, r0
 800181a:	460d      	mov	r5, r1
 800181c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001820:	f7fe fedc 	bl	80005dc <__aeabi_l2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe ff04 	bl	8000638 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800183c:	f7fe fece 	bl	80005dc <__aeabi_l2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7fe fef6 	bl	8000638 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <compensate_pressure+0x298>)
 800185a:	f7ff f817 	bl	800088c <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4690      	mov	r8, r2
 8001864:	4699      	mov	r9, r3
 8001866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001868:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe79 	bl	8000564 <__aeabi_i2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800187a:	f7fe feaf 	bl	80005dc <__aeabi_l2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fed7 	bl	8000638 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4640      	mov	r0, r8
 8001890:	4649      	mov	r1, r9
 8001892:	f7fe fd1b 	bl	80002cc <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	a326      	add	r3, pc, #152	@ (adr r3, 8001938 <compensate_pressure+0x288>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fff2 	bl	800088c <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff fa72 	bl	8000d98 <__aeabi_d2lz>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	var1 = (1 + var1/32768)*((double)dev->dig_P1);
 80018bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da08      	bge.n	80018d6 <compensate_pressure+0x226>
 80018c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018c8:	1851      	adds	r1, r2, r1
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	f143 0300 	adc.w	r3, r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0bd0      	lsrs	r0, r2, #15
 80018e0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80018e4:	13d9      	asrs	r1, r3, #15
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	1c51      	adds	r1, r2, #1
 80018ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80018ee:	f143 0300 	adc.w	r3, r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018f8:	f7fe fe70 	bl	80005dc <__aeabi_l2d>
 80018fc:	4604      	mov	r4, r0
 80018fe:	460d      	mov	r5, r1
 8001900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001902:	88db      	ldrh	r3, [r3, #6]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe1d 	bl	8000544 <__aeabi_ui2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fe91 	bl	8000638 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff fa3b 	bl	8000d98 <__aeabi_d2lz>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (var1 == 0){
 800192a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800192e:	4313      	orrs	r3, r2
 8001930:	d10c      	bne.n	800194c <compensate_pressure+0x29c>
		return 0;
 8001932:	2300      	movs	r3, #0
 8001934:	e0f9      	b.n	8001b2a <compensate_pressure+0x47a>
 8001936:	bf00      	nop
 8001938:	00000000 	.word	0x00000000
 800193c:	41540002 	.word	0x41540002
 8001940:	40e00000 	.word	0x40e00000
 8001944:	40f00000 	.word	0x40f00000
 8001948:	41200000 	.word	0x41200000
	}

	p = 1048576 - (double)adc_press;
 800194c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800194e:	f7fe fe09 	bl	8000564 <__aeabi_i2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	4976      	ldr	r1, [pc, #472]	@ (8001b34 <compensate_pressure+0x484>)
 800195c:	f7fe fcb4 	bl	80002c8 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff fa16 	bl	8000d98 <__aeabi_d2lz>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	p = (p-(var2/4096))*6250/var1;
 8001974:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	2900      	cmp	r1, #0
 800197e:	da08      	bge.n	8001992 <compensate_pressure+0x2e2>
 8001980:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001984:	18c3      	adds	r3, r0, r3
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	f141 0300 	adc.w	r3, r1, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	0b02      	lsrs	r2, r0, #12
 800199c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80019a0:	130b      	asrs	r3, r1, #12
 80019a2:	2100      	movs	r1, #0
 80019a4:	4250      	negs	r0, r2
 80019a6:	6038      	str	r0, [r7, #0]
 80019a8:	eb61 0303 	sbc.w	r3, r1, r3
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019b6:	1884      	adds	r4, r0, r2
 80019b8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80019ba:	eb41 0303 	adc.w	r3, r1, r3
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c0:	f641 036a 	movw	r3, #6250	@ 0x186a
 80019c4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80019c8:	462a      	mov	r2, r5
 80019ca:	fb03 f202 	mul.w	r2, r3, r2
 80019ce:	2300      	movs	r3, #0
 80019d0:	4621      	mov	r1, r4
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	f641 026a 	movw	r2, #6250	@ 0x186a
 80019dc:	4621      	mov	r1, r4
 80019de:	fba1 1202 	umull	r1, r2, r1, r2
 80019e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019e4:	460a      	mov	r2, r1
 80019e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80019e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019ea:	4413      	add	r3, r2
 80019ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80019f6:	f7ff f967 	bl	8000cc8 <__aeabi_ldivmod>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	var1 = ((double)dev->dig_P9)*p*p/2147483648;
 8001a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdab 	bl	8000564 <__aeabi_i2d>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	460d      	mov	r5, r1
 8001a12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a16:	f7fe fde1 	bl	80005dc <__aeabi_l2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fe09 	bl	8000638 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a32:	f7fe fdd3 	bl	80005dc <__aeabi_l2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7fe fdfb 	bl	8000638 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <compensate_pressure+0x488>)
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f99c 	bl	8000d98 <__aeabi_d2lz>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	var2 = p*((double)dev->dig_P8)/32768;
 8001a68:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a6c:	f7fe fdb6 	bl	80005dc <__aeabi_l2d>
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a76:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd72 	bl	8000564 <__aeabi_i2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fdd6 	bl	8000638 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <compensate_pressure+0x48c>)
 8001a9a:	f7fe fef7 	bl	800088c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f977 	bl	8000d98 <__aeabi_d2lz>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	p = p + (var1 + var2 + ((double)dev->dig_P7))/16;
 8001ab2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ab6:	f7fe fd91 	bl	80005dc <__aeabi_l2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ac6:	1886      	adds	r6, r0, r2
 8001ac8:	623e      	str	r6, [r7, #32]
 8001aca:	eb41 0303 	adc.w	r3, r1, r3
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ad4:	f7fe fd82 	bl	80005dc <__aeabi_l2d>
 8001ad8:	4680      	mov	r8, r0
 8001ada:	4689      	mov	r9, r1
 8001adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ade:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd3e 	bl	8000564 <__aeabi_i2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4640      	mov	r0, r8
 8001aee:	4649      	mov	r1, r9
 8001af0:	f7fe fbec 	bl	80002cc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <compensate_pressure+0x490>)
 8001b02:	f7fe fec3 	bl	800088c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbdd 	bl	80002cc <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f93d 	bl	8000d98 <__aeabi_d2lz>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	return p*256;
 8001b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b28:	021b      	lsls	r3, r3, #8
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	376c      	adds	r7, #108	@ 0x6c
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b34:	41300000 	.word	0x41300000
 8001b38:	41e00000 	.word	0x41e00000
 8001b3c:	40e00000 	.word	0x40e00000
 8001b40:	40300000 	.word	0x40300000

08001b44 <compensate_humidity>:


// função de compensação da umidade
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001b56:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	039a      	lsls	r2, r3, #14
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b62:	051b      	lsls	r3, r3, #20
 8001b64:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b7a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001b82:	4611      	mov	r1, r2
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	fb01 f202 	mul.w	r2, r1, r2
 8001b8a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	7f09      	ldrb	r1, [r1, #28]
 8001b90:	4608      	mov	r0, r1
 8001b92:	6979      	ldr	r1, [r7, #20]
 8001b94:	fb00 f101 	mul.w	r1, r0, r1
 8001b98:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b9a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b9e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ba2:	1292      	asrs	r2, r2, #10
 8001ba4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001bae:	fb01 f202 	mul.w	r2, r1, r2
 8001bb2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001bb6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	13db      	asrs	r3, r3, #15
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	13d2      	asrs	r2, r2, #15
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	7e12      	ldrb	r2, [r2, #24]
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001be2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001bea:	bfa8      	it	ge
 8001bec:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001bf0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	131b      	asrs	r3, r3, #12
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <bmp280_read_fixed>:

// função de leitura dos dados compensados
bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b08c      	sub	sp, #48	@ 0x30
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c16:	2b60      	cmp	r3, #96	@ 0x60
 8001c18:	d007      	beq.n	8001c2a <bmp280_read_fixed+0x28>
		if (humidity)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <bmp280_read_fixed+0x32>
 8001c30:	2308      	movs	r3, #8
 8001c32:	e000      	b.n	8001c36 <bmp280_read_fixed+0x34>
 8001c34:	2306      	movs	r3, #6
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f107 0218 	add.w	r2, r7, #24
 8001c40:	21f7      	movs	r1, #247	@ 0xf7
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fb1f 	bl	8001286 <read_data>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <bmp280_read_fixed+0x50>
		return false;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e038      	b.n	8001cc4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001c52:	7e3b      	ldrb	r3, [r7, #24]
 8001c54:	031a      	lsls	r2, r3, #12
 8001c56:	7e7b      	ldrb	r3, [r7, #25]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	7eba      	ldrb	r2, [r7, #26]
 8001c5e:	0912      	lsrs	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	4313      	orrs	r3, r2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001c66:	7efb      	ldrb	r3, [r7, #27]
 8001c68:	031a      	lsls	r2, r3, #12
 8001c6a:	7f3b      	ldrb	r3, [r7, #28]
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	7f7a      	ldrb	r2, [r7, #29]
 8001c72:	0912      	lsrs	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	4313      	orrs	r3, r2
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fcdb 	bl	800163e <compensate_temperature>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	461a      	mov	r2, r3
 8001c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fd0b 	bl	80016b0 <compensate_pressure>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00d      	beq.n	8001cc2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001ca6:	7fbb      	ldrb	r3, [r7, #30]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	7ffa      	ldrb	r2, [r7, #31]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff ff44 	bl	8001b44 <compensate_humidity>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3730      	adds	r7, #48	@ 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <bmp280_read_float>:

// função que realiza a leitura de todos as medições
bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <bmp280_read_float+0x1a>
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	e000      	b.n	8001ce8 <bmp280_read_float+0x1c>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f107 0218 	add.w	r2, r7, #24
 8001cec:	f107 011c 	add.w	r1, r7, #28
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff ff86 	bl	8001c02 <bmp280_read_fixed>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d028      	beq.n	8001d4e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001d58 <bmp280_read_float+0x8c>
 8001d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d1e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001d5c <bmp280_read_float+0x90>
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d3c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001d60 <bmp280_read_float+0x94>
 8001d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <bmp280_read_float+0x84>
	}

	return false;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	42c80000 	.word	0x42c80000
 8001d5c:	43800000 	.word	0x43800000
 8001d60:	44800000 	.word	0x44800000

08001d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	200b      	movs	r0, #11
 8001d8c:	f002 ff79 	bl	8004c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d90:	200b      	movs	r0, #11
 8001d92:	f002 ff92 	bl	8004cba <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a40      	ldr	r2, [pc, #256]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIGGER_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2160      	movs	r1, #96	@ 0x60
 8001e2e:	4826      	ldr	r0, [pc, #152]	@ (8001ec8 <MX_GPIO_Init+0x124>)
 8001e30:	f003 fca8 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	4824      	ldr	r0, [pc, #144]	@ (8001ecc <MX_GPIO_Init+0x128>)
 8001e3a:	f003 fca3 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	481e      	ldr	r0, [pc, #120]	@ (8001ed0 <MX_GPIO_Init+0x12c>)
 8001e56:	f003 fae9 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIGGER_Pin;
 8001e5a:	2360      	movs	r3, #96	@ 0x60
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <MX_GPIO_Init+0x124>)
 8001e72:	f003 fadb 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	480f      	ldr	r0, [pc, #60]	@ (8001ec8 <MX_GPIO_Init+0x124>)
 8001e8a:	f003 facf 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <MX_GPIO_Init+0x128>)
 8001ea6:	f003 fac1 	bl	800542c <HAL_GPIO_Init>



  /* USER CODE BEGIN MX_GPIO_Init_2 */
   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2028      	movs	r0, #40	@ 0x28
 8001eb0:	f002 fee7 	bl	8004c82 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eb4:	2028      	movs	r0, #40	@ 0x28
 8001eb6:	f002 ff00 	bl	8004cba <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800

08001ed4 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 2 */
void EXTI15_10_IRQHandler(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ed8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001edc:	f003 fc86 	bl	80057ec <HAL_GPIO_EXTI_IRQHandler>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f003 fc7b 	bl	800581c <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f000 fe90 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002ec 	.word	0x200002ec
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	00061a80 	.word	0x00061a80

08001f40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a30      	ldr	r2, [pc, #192]	@ (8002020 <HAL_I2C_MspInit+0xe0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d15a      	bne.n	8002018 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f90:	2304      	movs	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4823      	ldr	r0, [pc, #140]	@ (8002028 <HAL_I2C_MspInit+0xe8>)
 8001f9c:	f003 fa46 	bl	800542c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001faa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_I2C_MspInit+0xf0>)
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ffc:	480b      	ldr	r0, [pc, #44]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001ffe:	f002 fe77 	bl	8004cf0 <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002008:	f000 fe22 	bl	8002c50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a07      	ldr	r2, [pc, #28]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8002010:	639a      	str	r2, [r3, #56]	@ 0x38
 8002012:	4a06      	ldr	r2, [pc, #24]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40005400 	.word	0x40005400
 8002024:	40023800 	.word	0x40023800
 8002028:	40020400 	.word	0x40020400
 800202c:	20000340 	.word	0x20000340
 8002030:	40026010 	.word	0x40026010

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002038:	f002 f960 	bl	80042fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800203c:	f000 f86a 	bl	8002114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002040:	f7ff feb0 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002044:	f7ff fe8e 	bl	8001d64 <MX_DMA_Init>
  MX_I2C1_Init();
 8002048:	f7ff ff4c 	bl	8001ee4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800204c:	f001 ffb0 	bl	8003fb0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002050:	f7ff f838 	bl	80010c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002054:	f001 ff0c 	bl	8003e70 <MX_TIM1_Init>
  MX_TIM6_Init();
 8002058:	f002 f846 	bl	80040e8 <MX_TIM6_Init>
  MX_TIM3_Init();
 800205c:	f001 fff6 	bl	800404c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // inicialização do sensor de pressão e temperatura BMP280
  bmp280_init_default_params(&bmp280.params);
 8002060:	4821      	ldr	r0, [pc, #132]	@ (80020e8 <main+0xb4>)
 8002062:	f7ff f8c5 	bl	80011f0 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002066:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <main+0xb8>)
 8002068:	2276      	movs	r2, #118	@ 0x76
 800206a:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 800206c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <main+0xb8>)
 800206e:	4a20      	ldr	r2, [pc, #128]	@ (80020f0 <main+0xbc>)
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
  while(!bmp280_init(&bmp280, &bmp280.params))
 8002072:	e001      	b.n	8002078 <main+0x44>

  SSD1306_Init (); // inicialização do display OLED
 8002074:	f001 f9ac 	bl	80033d0 <SSD1306_Init>
  while(!bmp280_init(&bmp280, &bmp280.params))
 8002078:	491b      	ldr	r1, [pc, #108]	@ (80020e8 <main+0xb4>)
 800207a:	481c      	ldr	r0, [pc, #112]	@ (80020ec <main+0xb8>)
 800207c:	f7ff fa32 	bl	80014e4 <bmp280_init>
 8002080:	4603      	mov	r3, r0
 8002082:	f083 0301 	eor.w	r3, r3, #1
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f3      	bne.n	8002074 <main+0x40>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // inicialização de PWM
 800208c:	2100      	movs	r1, #0
 800208e:	4819      	ldr	r0, [pc, #100]	@ (80020f4 <main+0xc0>)
 8002090:	f006 f8c0 	bl	8008214 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1); // inicialização de ADC
 8002094:	4818      	ldr	r0, [pc, #96]	@ (80020f8 <main+0xc4>)
 8002096:	f002 fa0b 	bl	80044b0 <HAL_ADC_Start>
  while (MPU6050_Init(&hi2c1) == 1); //Inicialização do MPU6050
 800209a:	bf00      	nop
 800209c:	4814      	ldr	r0, [pc, #80]	@ (80020f0 <main+0xbc>)
 800209e:	f000 fddd 	bl	8002c5c <MPU6050_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d0f9      	beq.n	800209c <main+0x68>
  System_Start(); // inicialização do sistema
 80020a8:	f000 fa18 	bl	80024dc <System_Start>

  HAL_TIM_Base_Start(&htim3); // inicialização de timer
 80020ac:	4813      	ldr	r0, [pc, #76]	@ (80020fc <main+0xc8>)
 80020ae:	f005 ff7f 	bl	8007fb0 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // garantia de que o TRIG do HC-SR04 inicie com valor baixo
 80020b2:	2200      	movs	r2, #0
 80020b4:	2140      	movs	r1, #64	@ 0x40
 80020b6:	4812      	ldr	r0, [pc, #72]	@ (8002100 <main+0xcc>)
 80020b8:	f003 fb64 	bl	8005784 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6); // inicialização de timer em modo de interrupção
 80020bc:	4811      	ldr	r0, [pc, #68]	@ (8002104 <main+0xd0>)
 80020be:	f005 ffdf 	bl	8008080 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // inicialização de timer em modo de interrupção
 80020c2:	4811      	ldr	r0, [pc, #68]	@ (8002108 <main+0xd4>)
 80020c4:	f005 ffdc 	bl	8008080 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(flagit==1){
 80020c8:	4b10      	ldr	r3, [pc, #64]	@ (800210c <main+0xd8>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <main+0xa2>
		Update_MPU6050();
 80020d0:	f000 fb62 	bl	8002798 <Update_MPU6050>
 80020d4:	e005      	b.n	80020e2 <main+0xae>
	}

	else if(flagBmp==1){
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <main+0xdc>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <main+0xae>
		Update_BMP_HCSR04();
 80020de:	f000 fa7b 	bl	80025d8 <Update_BMP_HCSR04>
	}

	Pos_Servo();
 80020e2:	f000 fc2d 	bl	8002940 <Pos_Servo>
	if(flagit==1){
 80020e6:	e7ef      	b.n	80020c8 <main+0x94>
 80020e8:	200004b4 	.word	0x200004b4
 80020ec:	20000488 	.word	0x20000488
 80020f0:	200002ec 	.word	0x200002ec
 80020f4:	200008f0 	.word	0x200008f0
 80020f8:	200002a4 	.word	0x200002a4
 80020fc:	20000980 	.word	0x20000980
 8002100:	40020000 	.word	0x40020000
 8002104:	200009c8 	.word	0x200009c8
 8002108:	20000938 	.word	0x20000938
 800210c:	20000485 	.word	0x20000485
 8002110:	20000486 	.word	0x20000486

08002114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b094      	sub	sp, #80	@ 0x50
 8002118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	2234      	movs	r2, #52	@ 0x34
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f007 fd5b 	bl	8009bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <SystemClock_Config+0xd4>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <SystemClock_Config+0xd4>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002146:	6413      	str	r3, [r2, #64]	@ 0x40
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <SystemClock_Config+0xd4>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <SystemClock_Config+0xd8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002160:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <SystemClock_Config+0xd8>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <SystemClock_Config+0xd8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002174:	2302      	movs	r3, #2
 8002176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002178:	2301      	movs	r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800217c:	2310      	movs	r3, #16
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002180:	2302      	movs	r3, #2
 8002182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002184:	2300      	movs	r3, #0
 8002186:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002188:	2310      	movs	r3, #16
 800218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800218c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002190:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002192:	2304      	movs	r3, #4
 8002194:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002196:	2302      	movs	r3, #2
 8002198:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4618      	mov	r0, r3
 80021a4:	f005 fc16 	bl	80079d4 <HAL_RCC_OscConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80021ae:	f000 fd4f 	bl	8002c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b2:	230f      	movs	r3, #15
 80021b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b6:	2302      	movs	r3, #2
 80021b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	2102      	movs	r1, #2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f005 f8ca 	bl	8007368 <HAL_RCC_ClockConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80021da:	f000 fd39 	bl	8002c50 <Error_Handler>
  }
}
 80021de:	bf00      	nop
 80021e0:	3750      	adds	r7, #80	@ 0x50
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40007000 	.word	0x40007000

080021f0 <Screens>:

/* USER CODE BEGIN 4 */

// função para a organização das telas no display OLED
void Screens(){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	if(tela ==0){
 80021f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002494 <Screens+0x2a4>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d17e      	bne.n	80022fa <Screens+0x10a>
		SSD1306_Clear();
 80021fc:	f001 fc47 	bl	8003a8e <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 8002200:	2100      	movs	r1, #0
 8002202:	2000      	movs	r0, #0
 8002204:	f001 fa4e 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Giroscopio:",&Font_7x10, 1);
 8002208:	2201      	movs	r2, #1
 800220a:	49a3      	ldr	r1, [pc, #652]	@ (8002498 <Screens+0x2a8>)
 800220c:	48a3      	ldr	r0, [pc, #652]	@ (800249c <Screens+0x2ac>)
 800220e:	f001 fadd 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,17);
 8002212:	2111      	movs	r1, #17
 8002214:	2000      	movs	r0, #0
 8002216:	f001 fa45 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 800221a:	2201      	movs	r2, #1
 800221c:	499e      	ldr	r1, [pc, #632]	@ (8002498 <Screens+0x2a8>)
 800221e:	48a0      	ldr	r0, [pc, #640]	@ (80024a0 <Screens+0x2b0>)
 8002220:	f001 fad4 	bl	80037cc <SSD1306_Puts>
		SSD1306_DrawCircle(74, 18, 2, SSD1306_COLOR_WHITE);
 8002224:	2301      	movs	r3, #1
 8002226:	2202      	movs	r2, #2
 8002228:	2112      	movs	r1, #18
 800222a:	204a      	movs	r0, #74	@ 0x4a
 800222c:	f001 faf3 	bl	8003816 <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,17);
 8002230:	2111      	movs	r1, #17
 8002232:	204d      	movs	r0, #77	@ 0x4d
 8002234:	f001 fa36 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 8002238:	2201      	movs	r2, #1
 800223a:	4997      	ldr	r1, [pc, #604]	@ (8002498 <Screens+0x2a8>)
 800223c:	4899      	ldr	r0, [pc, #612]	@ (80024a4 <Screens+0x2b4>)
 800223e:	f001 fac5 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,29);
 8002242:	211d      	movs	r1, #29
 8002244:	2000      	movs	r0, #0
 8002246:	f001 fa2d 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 800224a:	2201      	movs	r2, #1
 800224c:	4992      	ldr	r1, [pc, #584]	@ (8002498 <Screens+0x2a8>)
 800224e:	4896      	ldr	r0, [pc, #600]	@ (80024a8 <Screens+0x2b8>)
 8002250:	f001 fabc 	bl	80037cc <SSD1306_Puts>
		SSD1306_DrawCircle(74, 30, 2, SSD1306_COLOR_WHITE);
 8002254:	2301      	movs	r3, #1
 8002256:	2202      	movs	r2, #2
 8002258:	211e      	movs	r1, #30
 800225a:	204a      	movs	r0, #74	@ 0x4a
 800225c:	f001 fadb 	bl	8003816 <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,29);
 8002260:	211d      	movs	r1, #29
 8002262:	204d      	movs	r0, #77	@ 0x4d
 8002264:	f001 fa1e 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 8002268:	2201      	movs	r2, #1
 800226a:	498b      	ldr	r1, [pc, #556]	@ (8002498 <Screens+0x2a8>)
 800226c:	488d      	ldr	r0, [pc, #564]	@ (80024a4 <Screens+0x2b4>)
 800226e:	f001 faad 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,41);
 8002272:	2129      	movs	r1, #41	@ 0x29
 8002274:	2000      	movs	r0, #0
 8002276:	f001 fa15 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Z:",&Font_7x10, 1);
 800227a:	2201      	movs	r2, #1
 800227c:	4986      	ldr	r1, [pc, #536]	@ (8002498 <Screens+0x2a8>)
 800227e:	488b      	ldr	r0, [pc, #556]	@ (80024ac <Screens+0x2bc>)
 8002280:	f001 faa4 	bl	80037cc <SSD1306_Puts>
		SSD1306_DrawCircle(74, 42, 2, SSD1306_COLOR_WHITE);
 8002284:	2301      	movs	r3, #1
 8002286:	2202      	movs	r2, #2
 8002288:	212a      	movs	r1, #42	@ 0x2a
 800228a:	204a      	movs	r0, #74	@ 0x4a
 800228c:	f001 fac3 	bl	8003816 <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,41);
 8002290:	2129      	movs	r1, #41	@ 0x29
 8002292:	204d      	movs	r0, #77	@ 0x4d
 8002294:	f001 fa06 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 8002298:	2201      	movs	r2, #1
 800229a:	497f      	ldr	r1, [pc, #508]	@ (8002498 <Screens+0x2a8>)
 800229c:	4881      	ldr	r0, [pc, #516]	@ (80024a4 <Screens+0x2b4>)
 800229e:	f001 fa95 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,53);
 80022a2:	2135      	movs	r1, #53	@ 0x35
 80022a4:	2000      	movs	r0, #0
 80022a6:	f001 f9fd 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Tmp:",&Font_7x10, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	497a      	ldr	r1, [pc, #488]	@ (8002498 <Screens+0x2a8>)
 80022ae:	4880      	ldr	r0, [pc, #512]	@ (80024b0 <Screens+0x2c0>)
 80022b0:	f001 fa8c 	bl	80037cc <SSD1306_Puts>
		SSD1306_DrawCircle(46, 54, 2, SSD1306_COLOR_WHITE);
 80022b4:	2301      	movs	r3, #1
 80022b6:	2202      	movs	r2, #2
 80022b8:	2136      	movs	r1, #54	@ 0x36
 80022ba:	202e      	movs	r0, #46	@ 0x2e
 80022bc:	f001 faab 	bl	8003816 <SSD1306_DrawCircle>
		SSD1306_GotoXY (49,53);
 80022c0:	2135      	movs	r1, #53	@ 0x35
 80022c2:	2031      	movs	r0, #49	@ 0x31
 80022c4:	f001 f9ee 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("C",&Font_7x10, 1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	4973      	ldr	r1, [pc, #460]	@ (8002498 <Screens+0x2a8>)
 80022cc:	4879      	ldr	r0, [pc, #484]	@ (80024b4 <Screens+0x2c4>)
 80022ce:	f001 fa7d 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (64,53);
 80022d2:	2135      	movs	r1, #53	@ 0x35
 80022d4:	2040      	movs	r0, #64	@ 0x40
 80022d6:	f001 f9e5 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("P:",&Font_7x10, 1);
 80022da:	2201      	movs	r2, #1
 80022dc:	496e      	ldr	r1, [pc, #440]	@ (8002498 <Screens+0x2a8>)
 80022de:	4876      	ldr	r0, [pc, #472]	@ (80024b8 <Screens+0x2c8>)
 80022e0:	f001 fa74 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (99,53);
 80022e4:	2135      	movs	r1, #53	@ 0x35
 80022e6:	2063      	movs	r0, #99	@ 0x63
 80022e8:	f001 f9dc 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("kPa",&Font_7x10, 1);
 80022ec:	2201      	movs	r2, #1
 80022ee:	496a      	ldr	r1, [pc, #424]	@ (8002498 <Screens+0x2a8>)
 80022f0:	4872      	ldr	r0, [pc, #456]	@ (80024bc <Screens+0x2cc>)
 80022f2:	f001 fa6b 	bl	80037cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80022f6:	f001 f92f 	bl	8003558 <SSD1306_UpdateScreen>
	}

	if(tela ==1){
 80022fa:	4b66      	ldr	r3, [pc, #408]	@ (8002494 <Screens+0x2a4>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d16c      	bne.n	80023dc <Screens+0x1ec>
		SSD1306_Clear();
 8002302:	f001 fbc4 	bl	8003a8e <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 8002306:	2100      	movs	r1, #0
 8002308:	2000      	movs	r0, #0
 800230a:	f001 f9cb 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Acelerometro:",&Font_7x10, 1);
 800230e:	2201      	movs	r2, #1
 8002310:	4961      	ldr	r1, [pc, #388]	@ (8002498 <Screens+0x2a8>)
 8002312:	486b      	ldr	r0, [pc, #428]	@ (80024c0 <Screens+0x2d0>)
 8002314:	f001 fa5a 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,17);
 8002318:	2111      	movs	r1, #17
 800231a:	2000      	movs	r0, #0
 800231c:	f001 f9c2 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 8002320:	2201      	movs	r2, #1
 8002322:	495d      	ldr	r1, [pc, #372]	@ (8002498 <Screens+0x2a8>)
 8002324:	485e      	ldr	r0, [pc, #376]	@ (80024a0 <Screens+0x2b0>)
 8002326:	f001 fa51 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (65,17);
 800232a:	2111      	movs	r1, #17
 800232c:	2041      	movs	r0, #65	@ 0x41
 800232e:	f001 f9b9 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("g",&Font_7x10, 1);
 8002332:	2201      	movs	r2, #1
 8002334:	4958      	ldr	r1, [pc, #352]	@ (8002498 <Screens+0x2a8>)
 8002336:	4863      	ldr	r0, [pc, #396]	@ (80024c4 <Screens+0x2d4>)
 8002338:	f001 fa48 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,29);
 800233c:	211d      	movs	r1, #29
 800233e:	2000      	movs	r0, #0
 8002340:	f001 f9b0 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 8002344:	2201      	movs	r2, #1
 8002346:	4954      	ldr	r1, [pc, #336]	@ (8002498 <Screens+0x2a8>)
 8002348:	4857      	ldr	r0, [pc, #348]	@ (80024a8 <Screens+0x2b8>)
 800234a:	f001 fa3f 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (65,29);
 800234e:	211d      	movs	r1, #29
 8002350:	2041      	movs	r0, #65	@ 0x41
 8002352:	f001 f9a7 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("g",&Font_7x10, 1);
 8002356:	2201      	movs	r2, #1
 8002358:	494f      	ldr	r1, [pc, #316]	@ (8002498 <Screens+0x2a8>)
 800235a:	485a      	ldr	r0, [pc, #360]	@ (80024c4 <Screens+0x2d4>)
 800235c:	f001 fa36 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,41);
 8002360:	2129      	movs	r1, #41	@ 0x29
 8002362:	2000      	movs	r0, #0
 8002364:	f001 f99e 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Z:",&Font_7x10, 1);
 8002368:	2201      	movs	r2, #1
 800236a:	494b      	ldr	r1, [pc, #300]	@ (8002498 <Screens+0x2a8>)
 800236c:	484f      	ldr	r0, [pc, #316]	@ (80024ac <Screens+0x2bc>)
 800236e:	f001 fa2d 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (65,41);
 8002372:	2129      	movs	r1, #41	@ 0x29
 8002374:	2041      	movs	r0, #65	@ 0x41
 8002376:	f001 f995 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("g",&Font_7x10, 1);
 800237a:	2201      	movs	r2, #1
 800237c:	4946      	ldr	r1, [pc, #280]	@ (8002498 <Screens+0x2a8>)
 800237e:	4851      	ldr	r0, [pc, #324]	@ (80024c4 <Screens+0x2d4>)
 8002380:	f001 fa24 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (0,53);
 8002384:	2135      	movs	r1, #53	@ 0x35
 8002386:	2000      	movs	r0, #0
 8002388:	f001 f98c 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Tmp:",&Font_7x10, 1);
 800238c:	2201      	movs	r2, #1
 800238e:	4942      	ldr	r1, [pc, #264]	@ (8002498 <Screens+0x2a8>)
 8002390:	4847      	ldr	r0, [pc, #284]	@ (80024b0 <Screens+0x2c0>)
 8002392:	f001 fa1b 	bl	80037cc <SSD1306_Puts>
		SSD1306_DrawCircle(46, 54, 2, SSD1306_COLOR_WHITE);
 8002396:	2301      	movs	r3, #1
 8002398:	2202      	movs	r2, #2
 800239a:	2136      	movs	r1, #54	@ 0x36
 800239c:	202e      	movs	r0, #46	@ 0x2e
 800239e:	f001 fa3a 	bl	8003816 <SSD1306_DrawCircle>
		SSD1306_GotoXY (49,53);
 80023a2:	2135      	movs	r1, #53	@ 0x35
 80023a4:	2031      	movs	r0, #49	@ 0x31
 80023a6:	f001 f97d 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("C",&Font_7x10, 1);
 80023aa:	2201      	movs	r2, #1
 80023ac:	493a      	ldr	r1, [pc, #232]	@ (8002498 <Screens+0x2a8>)
 80023ae:	4841      	ldr	r0, [pc, #260]	@ (80024b4 <Screens+0x2c4>)
 80023b0:	f001 fa0c 	bl	80037cc <SSD1306_Puts>

		SSD1306_GotoXY (64,53);
 80023b4:	2135      	movs	r1, #53	@ 0x35
 80023b6:	2040      	movs	r0, #64	@ 0x40
 80023b8:	f001 f974 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("P:",&Font_7x10, 1);
 80023bc:	2201      	movs	r2, #1
 80023be:	4936      	ldr	r1, [pc, #216]	@ (8002498 <Screens+0x2a8>)
 80023c0:	483d      	ldr	r0, [pc, #244]	@ (80024b8 <Screens+0x2c8>)
 80023c2:	f001 fa03 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (99,53);
 80023c6:	2135      	movs	r1, #53	@ 0x35
 80023c8:	2063      	movs	r0, #99	@ 0x63
 80023ca:	f001 f96b 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("kPa",&Font_7x10, 1);
 80023ce:	2201      	movs	r2, #1
 80023d0:	4931      	ldr	r1, [pc, #196]	@ (8002498 <Screens+0x2a8>)
 80023d2:	483a      	ldr	r0, [pc, #232]	@ (80024bc <Screens+0x2cc>)
 80023d4:	f001 f9fa 	bl	80037cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80023d8:	f001 f8be 	bl	8003558 <SSD1306_UpdateScreen>
	}

	if(tela ==2){
 80023dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <Screens+0x2a4>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d154      	bne.n	800248e <Screens+0x29e>
		SSD1306_Clear();
 80023e4:	f001 fb53 	bl	8003a8e <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 80023e8:	2100      	movs	r1, #0
 80023ea:	2000      	movs	r0, #0
 80023ec:	f001 f95a 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Angulo & Altitude:",&Font_7x10, 1);
 80023f0:	2201      	movs	r2, #1
 80023f2:	4929      	ldr	r1, [pc, #164]	@ (8002498 <Screens+0x2a8>)
 80023f4:	4834      	ldr	r0, [pc, #208]	@ (80024c8 <Screens+0x2d8>)
 80023f6:	f001 f9e9 	bl	80037cc <SSD1306_Puts>


		SSD1306_GotoXY (0,17);
 80023fa:	2111      	movs	r1, #17
 80023fc:	2000      	movs	r0, #0
 80023fe:	f001 f951 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 8002402:	2201      	movs	r2, #1
 8002404:	4924      	ldr	r1, [pc, #144]	@ (8002498 <Screens+0x2a8>)
 8002406:	4826      	ldr	r0, [pc, #152]	@ (80024a0 <Screens+0x2b0>)
 8002408:	f001 f9e0 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (65,17);
 800240c:	2111      	movs	r1, #17
 800240e:	2041      	movs	r0, #65	@ 0x41
 8002410:	f001 f948 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_DrawCircle(74, 18, 2, SSD1306_COLOR_WHITE);
 8002414:	2301      	movs	r3, #1
 8002416:	2202      	movs	r2, #2
 8002418:	2112      	movs	r1, #18
 800241a:	204a      	movs	r0, #74	@ 0x4a
 800241c:	f001 f9fb 	bl	8003816 <SSD1306_DrawCircle>

		SSD1306_GotoXY (0,29);
 8002420:	211d      	movs	r1, #29
 8002422:	2000      	movs	r0, #0
 8002424:	f001 f93e 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 8002428:	2201      	movs	r2, #1
 800242a:	491b      	ldr	r1, [pc, #108]	@ (8002498 <Screens+0x2a8>)
 800242c:	481e      	ldr	r0, [pc, #120]	@ (80024a8 <Screens+0x2b8>)
 800242e:	f001 f9cd 	bl	80037cc <SSD1306_Puts>
		SSD1306_DrawCircle(74, 30, 2, SSD1306_COLOR_WHITE);
 8002432:	2301      	movs	r3, #1
 8002434:	2202      	movs	r2, #2
 8002436:	211e      	movs	r1, #30
 8002438:	204a      	movs	r0, #74	@ 0x4a
 800243a:	f001 f9ec 	bl	8003816 <SSD1306_DrawCircle>
		SSD1306_UpdateScreen();
 800243e:	f001 f88b 	bl	8003558 <SSD1306_UpdateScreen>

		SSD1306_GotoXY (0,41);
 8002442:	2129      	movs	r1, #41	@ 0x29
 8002444:	2000      	movs	r0, #0
 8002446:	f001 f92d 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("h:",&Font_7x10, 1);
 800244a:	2201      	movs	r2, #1
 800244c:	4912      	ldr	r1, [pc, #72]	@ (8002498 <Screens+0x2a8>)
 800244e:	481f      	ldr	r0, [pc, #124]	@ (80024cc <Screens+0x2dc>)
 8002450:	f001 f9bc 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (74,41);
 8002454:	2129      	movs	r1, #41	@ 0x29
 8002456:	204a      	movs	r0, #74	@ 0x4a
 8002458:	f001 f924 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("m",&Font_7x10, 1);
 800245c:	2201      	movs	r2, #1
 800245e:	490e      	ldr	r1, [pc, #56]	@ (8002498 <Screens+0x2a8>)
 8002460:	481b      	ldr	r0, [pc, #108]	@ (80024d0 <Screens+0x2e0>)
 8002462:	f001 f9b3 	bl	80037cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002466:	f001 f877 	bl	8003558 <SSD1306_UpdateScreen>

		SSD1306_GotoXY (0,53);
 800246a:	2135      	movs	r1, #53	@ 0x35
 800246c:	2000      	movs	r0, #0
 800246e:	f001 f919 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("Tanque:",&Font_7x10, 1);
 8002472:	2201      	movs	r2, #1
 8002474:	4908      	ldr	r1, [pc, #32]	@ (8002498 <Screens+0x2a8>)
 8002476:	4817      	ldr	r0, [pc, #92]	@ (80024d4 <Screens+0x2e4>)
 8002478:	f001 f9a8 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (81,53);
 800247c:	2135      	movs	r1, #53	@ 0x35
 800247e:	2051      	movs	r0, #81	@ 0x51
 8002480:	f001 f910 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts ("L",&Font_7x10, 1);
 8002484:	2201      	movs	r2, #1
 8002486:	4904      	ldr	r1, [pc, #16]	@ (8002498 <Screens+0x2a8>)
 8002488:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <Screens+0x2e8>)
 800248a:	f001 f99f 	bl	80037cc <SSD1306_Puts>
	}
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000484 	.word	0x20000484
 8002498:	20000000 	.word	0x20000000
 800249c:	0800d168 	.word	0x0800d168
 80024a0:	0800d174 	.word	0x0800d174
 80024a4:	0800d178 	.word	0x0800d178
 80024a8:	0800d17c 	.word	0x0800d17c
 80024ac:	0800d180 	.word	0x0800d180
 80024b0:	0800d184 	.word	0x0800d184
 80024b4:	0800d18c 	.word	0x0800d18c
 80024b8:	0800d190 	.word	0x0800d190
 80024bc:	0800d194 	.word	0x0800d194
 80024c0:	0800d198 	.word	0x0800d198
 80024c4:	0800d1a8 	.word	0x0800d1a8
 80024c8:	0800d1ac 	.word	0x0800d1ac
 80024cc:	0800d1c0 	.word	0x0800d1c0
 80024d0:	0800d1c4 	.word	0x0800d1c4
 80024d4:	0800d1c8 	.word	0x0800d1c8
 80024d8:	0800d1d0 	.word	0x0800d1d0

080024dc <System_Start>:

// função para a inicialização do sistema implementado
void System_Start(void){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af02      	add	r7, sp, #8
	SSD1306_Init ();
 80024e2:	f000 ff75 	bl	80033d0 <SSD1306_Init>
	SSD1306_Clear();
 80024e6:	f001 fad2 	bl	8003a8e <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, aviao, 128, 64, SSD1306_COLOR_WHITE);
 80024ea:	2301      	movs	r3, #1
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	2340      	movs	r3, #64	@ 0x40
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	4a09      	ldr	r2, [pc, #36]	@ (800251c <System_Start+0x40>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f001 fa60 	bl	80039be <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80024fe:	f001 f82b 	bl	8003558 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 8002502:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002506:	f001 ff6b 	bl	80043e0 <HAL_Delay>
	tela=0;
 800250a:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <System_Start+0x44>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
	Screens();
 8002510:	f7ff fe6e 	bl	80021f0 <Screens>
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	0800d1ec 	.word	0x0800d1ec
 8002520:	20000484 	.word	0x20000484

08002524 <HAL_GPIO_EXTI_Callback>:

// função de interrupção externa do botão
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002534:	d112      	bne.n	800255c <HAL_GPIO_EXTI_Callback+0x38>
		tela = (tela+1)%3;
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x40>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x44>)
 800253e:	fb83 3102 	smull	r3, r1, r3, r2
 8002542:	17d3      	asrs	r3, r2, #31
 8002544:	1ac9      	subs	r1, r1, r3
 8002546:	460b      	mov	r3, r1
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	440b      	add	r3, r1
 800254c:	1ad1      	subs	r1, r2, r3
 800254e:	b2ca      	uxtb	r2, r1
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x40>)
 8002552:	701a      	strb	r2, [r3, #0]
		Screens();
 8002554:	f7ff fe4c 	bl	80021f0 <Screens>
		Update_BMP_HCSR04();
 8002558:	f000 f83e 	bl	80025d8 <Update_BMP_HCSR04>
	}
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000484 	.word	0x20000484
 8002568:	55555556 	.word	0x55555556

0800256c <HAL_I2C_MemRxCpltCallback>:

// função de callback I2C para o sensor MPU6050 via DMA
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a04      	ldr	r2, [pc, #16]	@ (800258c <HAL_I2C_MemRxCpltCallback+0x20>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d102      	bne.n	8002584 <HAL_I2C_MemRxCpltCallback+0x18>
	    MPU6050_Process_Data(&MPU6050);
 800257e:	4804      	ldr	r0, [pc, #16]	@ (8002590 <HAL_I2C_MemRxCpltCallback+0x24>)
 8002580:	f000 fbda 	bl	8002d38 <MPU6050_Process_Data>
	}
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40005400 	.word	0x40005400
 8002590:	200003a0 	.word	0x200003a0

08002594 <HAL_TIM_PeriodElapsedCallback>:

// função de callback com timer 
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a4:	d102      	bne.n	80025ac <HAL_TIM_PeriodElapsedCallback+0x18>
		flagit=1;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6){
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a06      	ldr	r2, [pc, #24]	@ (80025cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d102      	bne.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x28>
		flagBmp=1;
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
	}
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	20000485 	.word	0x20000485
 80025cc:	40001000 	.word	0x40001000
 80025d0:	20000486 	.word	0x20000486
 80025d4:	00000000 	.word	0x00000000

080025d8 <Update_BMP_HCSR04>:

// Atualiza o sensor BMP280 e o nível do líquido a partir da medição através do HC-SR04
void Update_BMP_HCSR04(){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	double volume = Ler_Nivel(); // variável que recebe o valor da medição atráves do HC-SR04
 80025de:	f000 fa5f 	bl	8002aa0 <Ler_Nivel>
 80025e2:	ee10 3a10 	vmov	r3, s0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffce 	bl	8000588 <__aeabi_f2d>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	e9c7 2300 	strd	r2, r3, [r7]

	// estrutura condicional para evitar leituras negativas (errôneas) do sensor ultrassônico
	if(volume < 0){
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002600:	f7fe fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <Update_BMP_HCSR04+0x3e>
		volume = 0;
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9c7 2300 	strd	r2, r3, [r7]
	}

	bmp280_read_float(&bmp280, &temperatura, &pressao, NULL); // função que faz a leitura das medições do sensor BMP280
 8002616:	2300      	movs	r3, #0
 8002618:	4a4f      	ldr	r2, [pc, #316]	@ (8002758 <Update_BMP_HCSR04+0x180>)
 800261a:	4950      	ldr	r1, [pc, #320]	@ (800275c <Update_BMP_HCSR04+0x184>)
 800261c:	4850      	ldr	r0, [pc, #320]	@ (8002760 <Update_BMP_HCSR04+0x188>)
 800261e:	f7ff fb55 	bl	8001ccc <bmp280_read_float>
	altitude = 44330.0 * (1.0 - pow((pressao / (100*1013.25)), 0.1903)); // cálculo da altitude a partir da leitura do sensor BMP280
 8002622:	4b4d      	ldr	r3, [pc, #308]	@ (8002758 <Update_BMP_HCSR04+0x180>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ffae 	bl	8000588 <__aeabi_f2d>
 800262c:	a344      	add	r3, pc, #272	@ (adr r3, 8002740 <Update_BMP_HCSR04+0x168>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fe f92b 	bl	800088c <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	ec43 2b17 	vmov	d7, r2, r3
 800263e:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8002748 <Update_BMP_HCSR04+0x170>
 8002642:	eeb0 0a47 	vmov.f32	s0, s14
 8002646:	eef0 0a67 	vmov.f32	s1, s15
 800264a:	f009 fb93 	bl	800bd74 <pow>
 800264e:	ec53 2b10 	vmov	r2, r3, d0
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	4943      	ldr	r1, [pc, #268]	@ (8002764 <Update_BMP_HCSR04+0x18c>)
 8002658:	f7fd fe36 	bl	80002c8 <__aeabi_dsub>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	a33a      	add	r3, pc, #232	@ (adr r3, 8002750 <Update_BMP_HCSR04+0x178>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffe5 	bl	8000638 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe fad7 	bl	8000c28 <__aeabi_d2f>
 800267a:	4603      	mov	r3, r0
 800267c:	4a3a      	ldr	r2, [pc, #232]	@ (8002768 <Update_BMP_HCSR04+0x190>)
 800267e:	6013      	str	r3, [r2, #0]
	sprintf(Buffer1, "%.0f", temperatura);
 8002680:	4b36      	ldr	r3, [pc, #216]	@ (800275c <Update_BMP_HCSR04+0x184>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4937      	ldr	r1, [pc, #220]	@ (800276c <Update_BMP_HCSR04+0x194>)
 8002690:	4837      	ldr	r0, [pc, #220]	@ (8002770 <Update_BMP_HCSR04+0x198>)
 8002692:	f007 fa41 	bl	8009b18 <siprintf>
	sprintf(Buffer2, "%.0f", pressao/1000);
 8002696:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <Update_BMP_HCSR04+0x180>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002774 <Update_BMP_HCSR04+0x19c>
 80026a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026a4:	ee16 0a90 	vmov	r0, s13
 80026a8:	f7fd ff6e 	bl	8000588 <__aeabi_f2d>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	492e      	ldr	r1, [pc, #184]	@ (800276c <Update_BMP_HCSR04+0x194>)
 80026b2:	4831      	ldr	r0, [pc, #196]	@ (8002778 <Update_BMP_HCSR04+0x1a0>)
 80026b4:	f007 fa30 	bl	8009b18 <siprintf>
	sprintf(Buffer3, "%.1f", altitude);
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <Update_BMP_HCSR04+0x190>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff63 	bl	8000588 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	492d      	ldr	r1, [pc, #180]	@ (800277c <Update_BMP_HCSR04+0x1a4>)
 80026c8:	482d      	ldr	r0, [pc, #180]	@ (8002780 <Update_BMP_HCSR04+0x1a8>)
 80026ca:	f007 fa25 	bl	8009b18 <siprintf>
	sprintf(Buffer4, "%.2f", volume);
 80026ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026d2:	492c      	ldr	r1, [pc, #176]	@ (8002784 <Update_BMP_HCSR04+0x1ac>)
 80026d4:	482c      	ldr	r0, [pc, #176]	@ (8002788 <Update_BMP_HCSR04+0x1b0>)
 80026d6:	f007 fa1f 	bl	8009b18 <siprintf>

	// atualiza a altitude e o nível do líquido na tela 3
	if(tela==2){
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <Update_BMP_HCSR04+0x1b4>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d112      	bne.n	8002708 <Update_BMP_HCSR04+0x130>
		SSD1306_GotoXY (21,41);
 80026e2:	2129      	movs	r1, #41	@ 0x29
 80026e4:	2015      	movs	r0, #21
 80026e6:	f000 ffdd 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 80026ea:	2201      	movs	r2, #1
 80026ec:	4928      	ldr	r1, [pc, #160]	@ (8002790 <Update_BMP_HCSR04+0x1b8>)
 80026ee:	4824      	ldr	r0, [pc, #144]	@ (8002780 <Update_BMP_HCSR04+0x1a8>)
 80026f0:	f001 f86c 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (49,53);
 80026f4:	2135      	movs	r1, #53	@ 0x35
 80026f6:	2031      	movs	r0, #49	@ 0x31
 80026f8:	f000 ffd4 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer4,&Font_7x10, 1);
 80026fc:	2201      	movs	r2, #1
 80026fe:	4924      	ldr	r1, [pc, #144]	@ (8002790 <Update_BMP_HCSR04+0x1b8>)
 8002700:	4821      	ldr	r0, [pc, #132]	@ (8002788 <Update_BMP_HCSR04+0x1b0>)
 8002702:	f001 f863 	bl	80037cc <SSD1306_Puts>
 8002706:	e011      	b.n	800272c <Update_BMP_HCSR04+0x154>
	}

	// atualiza temperatura e pressão nas telas
	else{
		SSD1306_GotoXY (28,53);
 8002708:	2135      	movs	r1, #53	@ 0x35
 800270a:	201c      	movs	r0, #28
 800270c:	f000 ffca 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 8002710:	2201      	movs	r2, #1
 8002712:	491f      	ldr	r1, [pc, #124]	@ (8002790 <Update_BMP_HCSR04+0x1b8>)
 8002714:	4816      	ldr	r0, [pc, #88]	@ (8002770 <Update_BMP_HCSR04+0x198>)
 8002716:	f001 f859 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (78,53);
 800271a:	2135      	movs	r1, #53	@ 0x35
 800271c:	204e      	movs	r0, #78	@ 0x4e
 800271e:	f000 ffc1 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 8002722:	2201      	movs	r2, #1
 8002724:	491a      	ldr	r1, [pc, #104]	@ (8002790 <Update_BMP_HCSR04+0x1b8>)
 8002726:	4814      	ldr	r0, [pc, #80]	@ (8002778 <Update_BMP_HCSR04+0x1a0>)
 8002728:	f001 f850 	bl	80037cc <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 800272c:	f000 ff14 	bl	8003558 <SSD1306_UpdateScreen>
	flagBmp=0;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <Update_BMP_HCSR04+0x1bc>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	00000000 	.word	0x00000000
 8002744:	40f8bcd0 	.word	0x40f8bcd0
 8002748:	1a36e2eb 	.word	0x1a36e2eb
 800274c:	3fc85bc0 	.word	0x3fc85bc0
 8002750:	00000000 	.word	0x00000000
 8002754:	40e5a540 	.word	0x40e5a540
 8002758:	200003fc 	.word	0x200003fc
 800275c:	200003f8 	.word	0x200003f8
 8002760:	20000488 	.word	0x20000488
 8002764:	3ff00000 	.word	0x3ff00000
 8002768:	20000400 	.word	0x20000400
 800276c:	0800d1d4 	.word	0x0800d1d4
 8002770:	20000404 	.word	0x20000404
 8002774:	447a0000 	.word	0x447a0000
 8002778:	20000424 	.word	0x20000424
 800277c:	0800d1dc 	.word	0x0800d1dc
 8002780:	20000444 	.word	0x20000444
 8002784:	0800d1e4 	.word	0x0800d1e4
 8002788:	20000464 	.word	0x20000464
 800278c:	20000484 	.word	0x20000484
 8002790:	20000000 	.word	0x20000000
 8002794:	20000486 	.word	0x20000486

08002798 <Update_MPU6050>:

// função que atualiza as medidas em cada tela e emite alertas sonoros através do buzzer
void Update_MPU6050(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1);
 800279c:	485c      	ldr	r0, [pc, #368]	@ (8002910 <Update_MPU6050+0x178>)
 800279e:	f000 fab5 	bl	8002d0c <MPU6050_Read_All>

	if(temperatura > 27){
 80027a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <Update_MPU6050+0x17c>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 80027ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	dd02      	ble.n	80027bc <Update_MPU6050+0x24>
		alerta();
 80027b6:	f000 f949 	bl	8002a4c <alerta>
 80027ba:	e009      	b.n	80027d0 <Update_MPU6050+0x38>
	}

	else{
		HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2101      	movs	r1, #1
 80027c0:	4855      	ldr	r0, [pc, #340]	@ (8002918 <Update_MPU6050+0x180>)
 80027c2:	f002 ffdf 	bl	8005784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2120      	movs	r1, #32
 80027ca:	4854      	ldr	r0, [pc, #336]	@ (800291c <Update_MPU6050+0x184>)
 80027cc:	f002 ffda 	bl	8005784 <HAL_GPIO_WritePin>
	}

	if(tela ==0){
 80027d0:	4b53      	ldr	r3, [pc, #332]	@ (8002920 <Update_MPU6050+0x188>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d135      	bne.n	8002844 <Update_MPU6050+0xac>
		flagit=0;
 80027d8:	4b52      	ldr	r3, [pc, #328]	@ (8002924 <Update_MPU6050+0x18c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.Gx);
 80027de:	4b52      	ldr	r3, [pc, #328]	@ (8002928 <Update_MPU6050+0x190>)
 80027e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80027e4:	4951      	ldr	r1, [pc, #324]	@ (800292c <Update_MPU6050+0x194>)
 80027e6:	4852      	ldr	r0, [pc, #328]	@ (8002930 <Update_MPU6050+0x198>)
 80027e8:	f007 f996 	bl	8009b18 <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.Gy);
 80027ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002928 <Update_MPU6050+0x190>)
 80027ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80027f2:	494e      	ldr	r1, [pc, #312]	@ (800292c <Update_MPU6050+0x194>)
 80027f4:	484f      	ldr	r0, [pc, #316]	@ (8002934 <Update_MPU6050+0x19c>)
 80027f6:	f007 f98f 	bl	8009b18 <siprintf>
		sprintf(Buffer3, "%.2f", MPU6050.Gz);
 80027fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <Update_MPU6050+0x190>)
 80027fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002800:	494a      	ldr	r1, [pc, #296]	@ (800292c <Update_MPU6050+0x194>)
 8002802:	484d      	ldr	r0, [pc, #308]	@ (8002938 <Update_MPU6050+0x1a0>)
 8002804:	f007 f988 	bl	8009b18 <siprintf>
		SSD1306_GotoXY (21,17);
 8002808:	2111      	movs	r1, #17
 800280a:	2015      	movs	r0, #21
 800280c:	f000 ff4a 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 8002810:	2201      	movs	r2, #1
 8002812:	494a      	ldr	r1, [pc, #296]	@ (800293c <Update_MPU6050+0x1a4>)
 8002814:	4846      	ldr	r0, [pc, #280]	@ (8002930 <Update_MPU6050+0x198>)
 8002816:	f000 ffd9 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 800281a:	211d      	movs	r1, #29
 800281c:	2015      	movs	r0, #21
 800281e:	f000 ff41 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 8002822:	2201      	movs	r2, #1
 8002824:	4945      	ldr	r1, [pc, #276]	@ (800293c <Update_MPU6050+0x1a4>)
 8002826:	4843      	ldr	r0, [pc, #268]	@ (8002934 <Update_MPU6050+0x19c>)
 8002828:	f000 ffd0 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (21,41);
 800282c:	2129      	movs	r1, #41	@ 0x29
 800282e:	2015      	movs	r0, #21
 8002830:	f000 ff38 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 8002834:	2201      	movs	r2, #1
 8002836:	4941      	ldr	r1, [pc, #260]	@ (800293c <Update_MPU6050+0x1a4>)
 8002838:	483f      	ldr	r0, [pc, #252]	@ (8002938 <Update_MPU6050+0x1a0>)
 800283a:	f000 ffc7 	bl	80037cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800283e:	f000 fe8b 	bl	8003558 <SSD1306_UpdateScreen>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
		SSD1306_GotoXY (21,29);
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
		SSD1306_UpdateScreen();
	}
}
 8002842:	e062      	b.n	800290a <Update_MPU6050+0x172>
	else if(tela ==1){
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <Update_MPU6050+0x188>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d135      	bne.n	80028b8 <Update_MPU6050+0x120>
		flagit=0;
 800284c:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <Update_MPU6050+0x18c>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.Ax);
 8002852:	4b35      	ldr	r3, [pc, #212]	@ (8002928 <Update_MPU6050+0x190>)
 8002854:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002858:	4934      	ldr	r1, [pc, #208]	@ (800292c <Update_MPU6050+0x194>)
 800285a:	4835      	ldr	r0, [pc, #212]	@ (8002930 <Update_MPU6050+0x198>)
 800285c:	f007 f95c 	bl	8009b18 <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.Ay);
 8002860:	4b31      	ldr	r3, [pc, #196]	@ (8002928 <Update_MPU6050+0x190>)
 8002862:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002866:	4931      	ldr	r1, [pc, #196]	@ (800292c <Update_MPU6050+0x194>)
 8002868:	4832      	ldr	r0, [pc, #200]	@ (8002934 <Update_MPU6050+0x19c>)
 800286a:	f007 f955 	bl	8009b18 <siprintf>
		sprintf(Buffer3, "%.2f", MPU6050.Az);
 800286e:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <Update_MPU6050+0x190>)
 8002870:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002874:	492d      	ldr	r1, [pc, #180]	@ (800292c <Update_MPU6050+0x194>)
 8002876:	4830      	ldr	r0, [pc, #192]	@ (8002938 <Update_MPU6050+0x1a0>)
 8002878:	f007 f94e 	bl	8009b18 <siprintf>
		SSD1306_GotoXY (21,17);
 800287c:	2111      	movs	r1, #17
 800287e:	2015      	movs	r0, #21
 8002880:	f000 ff10 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 8002884:	2201      	movs	r2, #1
 8002886:	492d      	ldr	r1, [pc, #180]	@ (800293c <Update_MPU6050+0x1a4>)
 8002888:	4829      	ldr	r0, [pc, #164]	@ (8002930 <Update_MPU6050+0x198>)
 800288a:	f000 ff9f 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 800288e:	211d      	movs	r1, #29
 8002890:	2015      	movs	r0, #21
 8002892:	f000 ff07 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 8002896:	2201      	movs	r2, #1
 8002898:	4928      	ldr	r1, [pc, #160]	@ (800293c <Update_MPU6050+0x1a4>)
 800289a:	4826      	ldr	r0, [pc, #152]	@ (8002934 <Update_MPU6050+0x19c>)
 800289c:	f000 ff96 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (21,41);
 80028a0:	2129      	movs	r1, #41	@ 0x29
 80028a2:	2015      	movs	r0, #21
 80028a4:	f000 fefe 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 80028a8:	2201      	movs	r2, #1
 80028aa:	4924      	ldr	r1, [pc, #144]	@ (800293c <Update_MPU6050+0x1a4>)
 80028ac:	4822      	ldr	r0, [pc, #136]	@ (8002938 <Update_MPU6050+0x1a0>)
 80028ae:	f000 ff8d 	bl	80037cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80028b2:	f000 fe51 	bl	8003558 <SSD1306_UpdateScreen>
}
 80028b6:	e028      	b.n	800290a <Update_MPU6050+0x172>
	else if(tela ==2){
 80028b8:	4b19      	ldr	r3, [pc, #100]	@ (8002920 <Update_MPU6050+0x188>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d124      	bne.n	800290a <Update_MPU6050+0x172>
		flagit=0;
 80028c0:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <Update_MPU6050+0x18c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.KalmanAngleX);
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <Update_MPU6050+0x190>)
 80028c8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80028cc:	4917      	ldr	r1, [pc, #92]	@ (800292c <Update_MPU6050+0x194>)
 80028ce:	4818      	ldr	r0, [pc, #96]	@ (8002930 <Update_MPU6050+0x198>)
 80028d0:	f007 f922 	bl	8009b18 <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.KalmanAngleY);
 80028d4:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <Update_MPU6050+0x190>)
 80028d6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80028da:	4914      	ldr	r1, [pc, #80]	@ (800292c <Update_MPU6050+0x194>)
 80028dc:	4815      	ldr	r0, [pc, #84]	@ (8002934 <Update_MPU6050+0x19c>)
 80028de:	f007 f91b 	bl	8009b18 <siprintf>
		SSD1306_GotoXY (21,17);
 80028e2:	2111      	movs	r1, #17
 80028e4:	2015      	movs	r0, #21
 80028e6:	f000 fedd 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 80028ea:	2201      	movs	r2, #1
 80028ec:	4913      	ldr	r1, [pc, #76]	@ (800293c <Update_MPU6050+0x1a4>)
 80028ee:	4810      	ldr	r0, [pc, #64]	@ (8002930 <Update_MPU6050+0x198>)
 80028f0:	f000 ff6c 	bl	80037cc <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 80028f4:	211d      	movs	r1, #29
 80028f6:	2015      	movs	r0, #21
 80028f8:	f000 fed4 	bl	80036a4 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 80028fc:	2201      	movs	r2, #1
 80028fe:	490f      	ldr	r1, [pc, #60]	@ (800293c <Update_MPU6050+0x1a4>)
 8002900:	480c      	ldr	r0, [pc, #48]	@ (8002934 <Update_MPU6050+0x19c>)
 8002902:	f000 ff63 	bl	80037cc <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002906:	f000 fe27 	bl	8003558 <SSD1306_UpdateScreen>
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200002ec 	.word	0x200002ec
 8002914:	200003f8 	.word	0x200003f8
 8002918:	40020400 	.word	0x40020400
 800291c:	40020000 	.word	0x40020000
 8002920:	20000484 	.word	0x20000484
 8002924:	20000485 	.word	0x20000485
 8002928:	200003a0 	.word	0x200003a0
 800292c:	0800d1e4 	.word	0x0800d1e4
 8002930:	20000404 	.word	0x20000404
 8002934:	20000424 	.word	0x20000424
 8002938:	20000444 	.word	0x20000444
 800293c:	20000000 	.word	0x20000000

08002940 <Pos_Servo>:

// função que gerencia o controle do servo-motor a partir da leitura com ADC de um potenciômetro
static void Pos_Servo(void){
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
    static float arr_suavizado =  460;  // Valor inicial

    uint32_t leitura = HAL_ADC_GetValue(&hadc1);
 8002946:	483e      	ldr	r0, [pc, #248]	@ (8002a40 <Pos_Servo+0x100>)
 8002948:	f001 fe84 	bl	8004654 <HAL_ADC_GetValue>
 800294c:	6078      	str	r0, [r7, #4]
    float arr;

    // Calcula o valor arr diretamente com base na leitura do ADC
    arr = (1900.0 / 3.3) * (leitura * 3.3 / 4095.0) + 460;
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd fdf8 	bl	8000544 <__aeabi_ui2d>
 8002954:	a32e      	add	r3, pc, #184	@ (adr r3, 8002a10 <Pos_Servo+0xd0>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fd fe6d 	bl	8000638 <__aeabi_dmul>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	a32c      	add	r3, pc, #176	@ (adr r3, 8002a18 <Pos_Servo+0xd8>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd ff8e 	bl	800088c <__aeabi_ddiv>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	a329      	add	r3, pc, #164	@ (adr r3, 8002a20 <Pos_Servo+0xe0>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fe5b 	bl	8000638 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	a327      	add	r3, pc, #156	@ (adr r3, 8002a28 <Pos_Servo+0xe8>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fc9c 	bl	80002cc <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f944 	bl	8000c28 <__aeabi_d2f>
 80029a0:	4603      	mov	r3, r0
 80029a2:	603b      	str	r3, [r7, #0]

    // Aplica suavização exponencial (filtro de baixa frequência)
    arr_suavizado = arr_suavizado * 0.85 + arr * 0.1;  // Fator de suavização (0.9 e 0.1)
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <Pos_Servo+0x104>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fded 	bl	8000588 <__aeabi_f2d>
 80029ae:	a320      	add	r3, pc, #128	@ (adr r3, 8002a30 <Pos_Servo+0xf0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fe40 	bl	8000638 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	6838      	ldr	r0, [r7, #0]
 80029c2:	f7fd fde1 	bl	8000588 <__aeabi_f2d>
 80029c6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002a38 <Pos_Servo+0xf8>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe34 	bl	8000638 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4620      	mov	r0, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7fd fc78 	bl	80002cc <__adddf3>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f7fe f920 	bl	8000c28 <__aeabi_d2f>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <Pos_Servo+0x104>)
 80029ec:	6013      	str	r3, [r2, #0]

    // Atualiza o PWM com o valor suavizado
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)arr_suavizado);
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <Pos_Servo+0x104>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 3a90 	vmov	r3, s15
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <Pos_Servo+0x108>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	f3af 8000 	nop.w
 8002a10:	66666666 	.word	0x66666666
 8002a14:	400a6666 	.word	0x400a6666
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40affe00 	.word	0x40affe00
 8002a20:	83e0f83e 	.word	0x83e0f83e
 8002a24:	4081fe0f 	.word	0x4081fe0f
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	407cc000 	.word	0x407cc000
 8002a30:	33333333 	.word	0x33333333
 8002a34:	3feb3333 	.word	0x3feb3333
 8002a38:	9999999a 	.word	0x9999999a
 8002a3c:	3fb99999 	.word	0x3fb99999
 8002a40:	200002a4 	.word	0x200002a4
 8002a44:	20000008 	.word	0x20000008
 8002a48:	200008f0 	.word	0x200008f0

08002a4c <alerta>:

// função que emite alertas sonoros (através do buzzer) e, além disso, luminosos, utilizando o LED da F446RE
static void alerta(void){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	static uint8_t contador = 0; // contador para controle dos ticks do buzzer
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002a50:	2120      	movs	r1, #32
 8002a52:	4810      	ldr	r0, [pc, #64]	@ (8002a94 <alerta+0x48>)
 8002a54:	f002 feaf 	bl	80057b6 <HAL_GPIO_TogglePin>

	if(contador == 7){
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <alerta+0x4c>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b07      	cmp	r3, #7
 8002a5e:	d105      	bne.n	8002a6c <alerta+0x20>
		HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 1);
 8002a60:	2201      	movs	r2, #1
 8002a62:	2101      	movs	r1, #1
 8002a64:	480d      	ldr	r0, [pc, #52]	@ (8002a9c <alerta+0x50>)
 8002a66:	f002 fe8d 	bl	8005784 <HAL_GPIO_WritePin>
 8002a6a:	e00b      	b.n	8002a84 <alerta+0x38>
	}

	else if(contador == 15){
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <alerta+0x4c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b0f      	cmp	r3, #15
 8002a72:	d107      	bne.n	8002a84 <alerta+0x38>
		HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2101      	movs	r1, #1
 8002a78:	4808      	ldr	r0, [pc, #32]	@ (8002a9c <alerta+0x50>)
 8002a7a:	f002 fe83 	bl	8005784 <HAL_GPIO_WritePin>
		contador = 0;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <alerta+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
	}

	contador++;
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <alerta+0x4c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b02      	ldr	r3, [pc, #8]	@ (8002a98 <alerta+0x4c>)
 8002a8e:	701a      	strb	r2, [r3, #0]
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40020000 	.word	0x40020000
 8002a98:	200004bc 	.word	0x200004bc
 8002a9c:	40020400 	.word	0x40020400

08002aa0 <Ler_Nivel>:

// função que implementa a leitura do nível de líquido que foi consumido e retorna o volume restante no tanque
static float Ler_Nivel(){
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b08b      	sub	sp, #44	@ 0x2c
 8002aa4:	af00      	add	r7, sp, #0
	static uint32_t tmili;
	static uint32_t Valor1 = 0;
	static uint32_t Valor2 = 0;
	static uint16_t Distancia  = 0;
	const double capacidade = 28.4; // altura em cm
 8002aa6:	a368      	add	r3, pc, #416	@ (adr r3, 8002c48 <Ler_Nivel+0x1a8>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double raio = 3.75; // diametro em cm
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c28 <Ler_Nivel+0x188>)
 8002ab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double volume;
	double restante;
	const double PI = 3.141592;
 8002aba:	a357      	add	r3, pc, #348	@ (adr r3, 8002c18 <Ler_Nivel+0x178>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // TRIG com valor alto para enviar o pulso sonoro
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2140      	movs	r1, #64	@ 0x40
 8002ac8:	4858      	ldr	r0, [pc, #352]	@ (8002c2c <Ler_Nivel+0x18c>)
 8002aca:	f002 fe5b 	bl	8005784 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002ace:	4b58      	ldr	r3, [pc, #352]	@ (8002c30 <Ler_Nivel+0x190>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // espera de 10 milissegundos de acordo com o datasheet
 8002ad6:	bf00      	nop
 8002ad8:	4b55      	ldr	r3, [pc, #340]	@ (8002c30 <Ler_Nivel+0x190>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	d9fa      	bls.n	8002ad8 <Ler_Nivel+0x38>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // TRIG com valor baixo para parar de enviar o pulso sonoro
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	4851      	ldr	r0, [pc, #324]	@ (8002c2c <Ler_Nivel+0x18c>)
 8002ae8:	f002 fe4c 	bl	8005784 <HAL_GPIO_WritePin>

	tmili = HAL_GetTick(); // evita loop infinito
 8002aec:	f001 fc6c 	bl	80043c8 <HAL_GetTick>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a50      	ldr	r2, [pc, #320]	@ (8002c34 <Ler_Nivel+0x194>)
 8002af4:	6013      	str	r3, [r2, #0]
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && tmili + 10 >  HAL_GetTick()); // espera até o ECHO tem valor alto
 8002af6:	bf00      	nop
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	484c      	ldr	r0, [pc, #304]	@ (8002c2c <Ler_Nivel+0x18c>)
 8002afc:	f002 fe2a 	bl	8005754 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d108      	bne.n	8002b18 <Ler_Nivel+0x78>
 8002b06:	4b4b      	ldr	r3, [pc, #300]	@ (8002c34 <Ler_Nivel+0x194>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f103 040a 	add.w	r4, r3, #10
 8002b0e:	f001 fc5b 	bl	80043c8 <HAL_GetTick>
 8002b12:	4603      	mov	r3, r0
 8002b14:	429c      	cmp	r4, r3
 8002b16:	d8ef      	bhi.n	8002af8 <Ler_Nivel+0x58>
	Valor1 = __HAL_TIM_GET_COUNTER (&htim3); // recebe o instante de tempo em que o ECHO recebe valor alto
 8002b18:	4b45      	ldr	r3, [pc, #276]	@ (8002c30 <Ler_Nivel+0x190>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	4a46      	ldr	r2, [pc, #280]	@ (8002c38 <Ler_Nivel+0x198>)
 8002b20:	6013      	str	r3, [r2, #0]

	tmili = HAL_GetTick(); // evita loop infinito
 8002b22:	f001 fc51 	bl	80043c8 <HAL_GetTick>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a42      	ldr	r2, [pc, #264]	@ (8002c34 <Ler_Nivel+0x194>)
 8002b2a:	6013      	str	r3, [r2, #0]

	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && tmili + 50 > HAL_GetTick()); // espera até o ECHO ter valor baixo
 8002b2c:	bf00      	nop
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	483e      	ldr	r0, [pc, #248]	@ (8002c2c <Ler_Nivel+0x18c>)
 8002b32:	f002 fe0f 	bl	8005754 <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <Ler_Nivel+0xae>
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c34 <Ler_Nivel+0x194>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8002b44:	f001 fc40 	bl	80043c8 <HAL_GetTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	429c      	cmp	r4, r3
 8002b4c:	d8ef      	bhi.n	8002b2e <Ler_Nivel+0x8e>
	Valor2 = __HAL_TIM_GET_COUNTER (&htim3); // recebe o instante de tempo em que o ECHO recebeu valor baixo
 8002b4e:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <Ler_Nivel+0x190>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	4a39      	ldr	r2, [pc, #228]	@ (8002c3c <Ler_Nivel+0x19c>)
 8002b56:	6013      	str	r3, [r2, #0]

	Distancia = (Valor2-Valor1)* 0.0343/2; // cálculo da distância
 8002b58:	4b38      	ldr	r3, [pc, #224]	@ (8002c3c <Ler_Nivel+0x19c>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <Ler_Nivel+0x198>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fcee 	bl	8000544 <__aeabi_ui2d>
 8002b68:	a32d      	add	r3, pc, #180	@ (adr r3, 8002c20 <Ler_Nivel+0x180>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fd63 	bl	8000638 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b82:	f7fd fe83 	bl	800088c <__aeabi_ddiv>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f82b 	bl	8000be8 <__aeabi_d2uiz>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <Ler_Nivel+0x1a0>)
 8002b98:	801a      	strh	r2, [r3, #0]

	restante = capacidade - Distancia; // cálculo do nível de líquido restante
 8002b9a:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <Ler_Nivel+0x1a0>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fce0 	bl	8000564 <__aeabi_i2d>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002bac:	f7fd fb8c 	bl	80002c8 <__aeabi_dsub>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	volume = PI * raio * raio * restante/1000; // cálculo do volume de líquido restante
 8002bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bc0:	f7fd fd3a 	bl	8000638 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd0:	f7fd fd32 	bl	8000638 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be0:	f7fd fd2a 	bl	8000638 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <Ler_Nivel+0x1a4>)
 8002bf2:	f7fd fe4b 	bl	800088c <__aeabi_ddiv>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	e9c7 2300 	strd	r2, r3, [r7]
	return(volume);
 8002bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c02:	f7fe f811 	bl	8000c28 <__aeabi_d2f>
 8002c06:	4603      	mov	r3, r0
 8002c08:	ee07 3a90 	vmov	s15, r3
}
 8002c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c10:	372c      	adds	r7, #44	@ 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	fc8b007a 	.word	0xfc8b007a
 8002c1c:	400921fa 	.word	0x400921fa
 8002c20:	04816f00 	.word	0x04816f00
 8002c24:	3fa18fc5 	.word	0x3fa18fc5
 8002c28:	400e0000 	.word	0x400e0000
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	20000980 	.word	0x20000980
 8002c34:	200004c0 	.word	0x200004c0
 8002c38:	200004c4 	.word	0x200004c4
 8002c3c:	200004c8 	.word	0x200004c8
 8002c40:	200004cc 	.word	0x200004cc
 8002c44:	408f4000 	.word	0x408f4000
 8002c48:	66666666 	.word	0x66666666
 8002c4c:	403c6666 	.word	0x403c6666

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <Error_Handler+0x8>

08002c5c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002c64:	2364      	movs	r3, #100	@ 0x64
 8002c66:	9302      	str	r3, [sp, #8]
 8002c68:	2301      	movs	r3, #1
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	f107 030f 	add.w	r3, r7, #15
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2301      	movs	r3, #1
 8002c74:	2275      	movs	r2, #117	@ 0x75
 8002c76:	21d0      	movs	r1, #208	@ 0xd0
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f003 f90b 	bl	8005e94 <HAL_I2C_Mem_Read>

    if (check == 104)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b68      	cmp	r3, #104	@ 0x68
 8002c82:	d13d      	bne.n	8002d00 <MPU6050_Init+0xa4>
    {
        // inicialização do giroscópio a partir do registrador de gerenciamento de potência deste
        Data = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002c88:	2364      	movs	r3, #100	@ 0x64
 8002c8a:	9302      	str	r3, [sp, #8]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	f107 030e 	add.w	r3, r7, #14
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2301      	movs	r3, #1
 8002c98:	226b      	movs	r2, #107	@ 0x6b
 8002c9a:	21d0      	movs	r1, #208	@ 0xd0
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f002 ffff 	bl	8005ca0 <HAL_I2C_Mem_Write>

        // setup da taxa de dados em 1 kHz
        Data = 0x07;
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002ca6:	2364      	movs	r3, #100	@ 0x64
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	2301      	movs	r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	f107 030e 	add.w	r3, r7, #14
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2219      	movs	r2, #25
 8002cb8:	21d0      	movs	r1, #208	@ 0xd0
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f002 fff0 	bl	8005ca0 <HAL_I2C_Mem_Write>

        // setup da configuração do acelerômetro
        Data = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cc4:	2364      	movs	r3, #100	@ 0x64
 8002cc6:	9302      	str	r3, [sp, #8]
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	f107 030e 	add.w	r3, r7, #14
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	221c      	movs	r2, #28
 8002cd6:	21d0      	movs	r1, #208	@ 0xd0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f002 ffe1 	bl	8005ca0 <HAL_I2C_Mem_Write>

        // setup da configuração do giroscópio
        Data = 0x00;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ce2:	2364      	movs	r3, #100	@ 0x64
 8002ce4:	9302      	str	r3, [sp, #8]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	f107 030e 	add.w	r3, r7, #14
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	221b      	movs	r2, #27
 8002cf4:	21d0      	movs	r1, #208	@ 0xd0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f002 ffd2 	bl	8005ca0 <HAL_I2C_Mem_Write>
        return 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <MPU6050_Init+0xa6>
    }
    return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	6078      	str	r0, [r7, #4]
    // realiza leitura de dados do registrador via DMA
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14);
 8002d14:	230e      	movs	r3, #14
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <MPU6050_Read_All+0x24>)
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	223b      	movs	r2, #59	@ 0x3b
 8002d20:	21d0      	movs	r1, #208	@ 0xd0
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f003 fae8 	bl	80062f8 <HAL_I2C_Mem_Read_DMA>
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200004d4 	.word	0x200004d4
 8002d34:	00000000 	.word	0x00000000

08002d38 <MPU6050_Process_Data>:

// função que realiza o processamento dos dados
void MPU6050_Process_Data(MPU6050_t *DataStruct)  {
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b08c      	sub	sp, #48	@ 0x30
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
    int16_t temp;
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002d42:	4b95      	ldr	r3, [pc, #596]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	4b93      	ldr	r3, [pc, #588]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002d58:	4b8f      	ldr	r3, [pc, #572]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d5a:	789b      	ldrb	r3, [r3, #2]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	4b8d      	ldr	r3, [pc, #564]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d62:	78db      	ldrb	r3, [r3, #3]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002d6e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d70:	791b      	ldrb	r3, [r3, #4]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d78:	795b      	ldrb	r3, [r3, #5]
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002d84:	4b84      	ldr	r3, [pc, #528]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	4b82      	ldr	r3, [pc, #520]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d8e:	79db      	ldrb	r3, [r3, #7]
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	84fb      	strh	r3, [r7, #38]	@ 0x26
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002d96:	4b80      	ldr	r3, [pc, #512]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002d98:	7a1b      	ldrb	r3, [r3, #8]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002da0:	7a5b      	ldrb	r3, [r3, #9]
 8002da2:	b21b      	sxth	r3, r3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002dac:	4b7a      	ldr	r3, [pc, #488]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002dae:	7a9b      	ldrb	r3, [r3, #10]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	4b78      	ldr	r3, [pc, #480]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002db6:	7adb      	ldrb	r3, [r3, #11]
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002dc2:	4b75      	ldr	r3, [pc, #468]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002dc4:	7b1b      	ldrb	r3, [r3, #12]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	4b73      	ldr	r3, [pc, #460]	@ (8002f98 <MPU6050_Process_Data+0x260>)
 8002dcc:	7b5b      	ldrb	r3, [r3, #13]
 8002dce:	b21b      	sxth	r3, r3
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	b21a      	sxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fbc0 	bl	8000564 <__aeabi_i2d>
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f9c <MPU6050_Process_Data+0x264>)
 8002dea:	f7fd fd4f 	bl	800088c <__aeabi_ddiv>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fbb0 	bl	8000564 <__aeabi_i2d>
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	4b64      	ldr	r3, [pc, #400]	@ (8002f9c <MPU6050_Process_Data+0x264>)
 8002e0a:	f7fd fd3f 	bl	800088c <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fba0 	bl	8000564 <__aeabi_i2d>
 8002e24:	a356      	add	r3, pc, #344	@ (adr r3, 8002f80 <MPU6050_Process_Data+0x248>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fd2f 	bl	800088c <__aeabi_ddiv>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002e38:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e44:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002fa0 <MPU6050_Process_Data+0x268>
 8002e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e4c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002fa4 <MPU6050_Process_Data+0x26c>
 8002e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fb7f 	bl	8000564 <__aeabi_i2d>
 8002e66:	a348      	add	r3, pc, #288	@ (adr r3, 8002f88 <MPU6050_Process_Data+0x250>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fd0e 	bl	800088c <__aeabi_ddiv>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb6f 	bl	8000564 <__aeabi_i2d>
 8002e86:	a340      	add	r3, pc, #256	@ (adr r3, 8002f88 <MPU6050_Process_Data+0x250>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fcfe 	bl	800088c <__aeabi_ddiv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fb5f 	bl	8000564 <__aeabi_i2d>
 8002ea6:	a338      	add	r3, pc, #224	@ (adr r3, 8002f88 <MPU6050_Process_Data+0x250>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f7fd fcee 	bl	800088c <__aeabi_ddiv>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // resolução dos ângulos via filtro de Kalman
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002eba:	f001 fa85 	bl	80043c8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <MPU6050_Process_Data+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb3c 	bl	8000544 <__aeabi_ui2d>
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	4b36      	ldr	r3, [pc, #216]	@ (8002fac <MPU6050_Process_Data+0x274>)
 8002ed2:	f7fd fcdb 	bl	800088c <__aeabi_ddiv>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 8002ede:	f001 fa73 	bl	80043c8 <HAL_GetTick>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4a30      	ldr	r2, [pc, #192]	@ (8002fa8 <MPU6050_Process_Data+0x270>)
 8002ee6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef6:	fb03 f202 	mul.w	r2, r3, r2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f00:	4619      	mov	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fb28 	bl	8000564 <__aeabi_i2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	ec43 2b10 	vmov	d0, r2, r3
 8002f1c:	f008 ff9a 	bl	800be54 <sqrt>
 8002f20:	ed87 0b04 	vstr	d0, [r7, #16]

    if (roll_sqrt != 0.0)
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f30:	f7fd fdea 	bl	8000b08 <__aeabi_dcmpeq>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d13a      	bne.n	8002fb0 <MPU6050_Process_Data+0x278>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fb0f 	bl	8000564 <__aeabi_i2d>
 8002f46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f4a:	f7fd fc9f 	bl	800088c <__aeabi_ddiv>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	ec43 2b17 	vmov	d7, r2, r3
 8002f56:	eeb0 0a47 	vmov.f32	s0, s14
 8002f5a:	eef0 0a67 	vmov.f32	s1, s15
 8002f5e:	f008 ffa7 	bl	800beb0 <atan>
 8002f62:	ec51 0b10 	vmov	r0, r1, d0
 8002f66:	a30a      	add	r3, pc, #40	@ (adr r3, 8002f90 <MPU6050_Process_Data+0x258>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fb64 	bl	8000638 <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002f78:	e020      	b.n	8002fbc <MPU6050_Process_Data+0x284>
 8002f7a:	bf00      	nop
 8002f7c:	f3af 8000 	nop.w
 8002f80:	00000000 	.word	0x00000000
 8002f84:	40cc2900 	.word	0x40cc2900
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	40606000 	.word	0x40606000
 8002f90:	1a63c1f8 	.word	0x1a63c1f8
 8002f94:	404ca5dc 	.word	0x404ca5dc
 8002f98:	200004d4 	.word	0x200004d4
 8002f9c:	40d00000 	.word	0x40d00000
 8002fa0:	43aa0000 	.word	0x43aa0000
 8002fa4:	42121eb8 	.word	0x42121eb8
 8002fa8:	200004d0 	.word	0x200004d0
 8002fac:	408f4000 	.word	0x408f4000
    }

    else
    {
        roll = 0.0;
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }

    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc2:	425b      	negs	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd facd 	bl	8000564 <__aeabi_i2d>
 8002fca:	4682      	mov	sl, r0
 8002fcc:	468b      	mov	fp, r1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fac5 	bl	8000564 <__aeabi_i2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	ec43 2b11 	vmov	d1, r2, r3
 8002fe2:	ec4b ab10 	vmov	d0, sl, fp
 8002fe6:	f008 fec3 	bl	800bd70 <atan2>
 8002fea:	ec51 0b10 	vmov	r0, r1, d0
 8002fee:	a348      	add	r3, pc, #288	@ (adr r3, 8003110 <MPU6050_Process_Data+0x3d8>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb20 	bl	8000638 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	4b3e      	ldr	r3, [pc, #248]	@ (8003100 <MPU6050_Process_Data+0x3c8>)
 8003006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800300a:	f7fd fd87 	bl	8000b1c <__aeabi_dcmplt>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <MPU6050_Process_Data+0x2f2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <MPU6050_Process_Data+0x3cc>)
 8003020:	f7fd fd9a 	bl	8000b58 <__aeabi_dcmpgt>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d114      	bne.n	8003054 <MPU6050_Process_Data+0x31c>
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b35      	ldr	r3, [pc, #212]	@ (8003104 <MPU6050_Process_Data+0x3cc>)
 8003030:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003034:	f7fd fd90 	bl	8000b58 <__aeabi_dcmpgt>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <MPU6050_Process_Data+0x332>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	4b2d      	ldr	r3, [pc, #180]	@ (8003100 <MPU6050_Process_Data+0x3c8>)
 800304a:	f7fd fd67 	bl	8000b1c <__aeabi_dcmplt>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <MPU6050_Process_Data+0x332>
    {
        KalmanY.angle = pitch;
 8003054:	492c      	ldr	r1, [pc, #176]	@ (8003108 <MPU6050_Process_Data+0x3d0>)
 8003056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800305a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003064:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8003068:	e014      	b.n	8003094 <MPU6050_Process_Data+0x35c>
    }

    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8003070:	ed97 2b06 	vldr	d2, [r7, #24]
 8003074:	eeb0 1a47 	vmov.f32	s2, s14
 8003078:	eef0 1a67 	vmov.f32	s3, s15
 800307c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003080:	4821      	ldr	r0, [pc, #132]	@ (8003108 <MPU6050_Process_Data+0x3d0>)
 8003082:	f000 f849 	bl	8003118 <Kalman_getAngle>
 8003086:	eeb0 7a40 	vmov.f32	s14, s0
 800308a:	eef0 7a60 	vmov.f32	s15, s1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800309a:	4690      	mov	r8, r2
 800309c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4b17      	ldr	r3, [pc, #92]	@ (8003104 <MPU6050_Process_Data+0x3cc>)
 80030a6:	4640      	mov	r0, r8
 80030a8:	4649      	mov	r1, r9
 80030aa:	f7fd fd55 	bl	8000b58 <__aeabi_dcmpgt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <MPU6050_Process_Data+0x38e>
        DataStruct->Gx = -DataStruct->Gx;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80030ba:	4614      	mov	r4, r2
 80030bc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80030cc:	ed97 2b06 	vldr	d2, [r7, #24]
 80030d0:	eeb0 1a47 	vmov.f32	s2, s14
 80030d4:	eef0 1a67 	vmov.f32	s3, s15
 80030d8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80030dc:	480b      	ldr	r0, [pc, #44]	@ (800310c <MPU6050_Process_Data+0x3d4>)
 80030de:	f000 f81b 	bl	8003118 <Kalman_getAngle>
 80030e2:	eeb0 7a40 	vmov.f32	s14, s0
 80030e6:	eef0 7a60 	vmov.f32	s15, s1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 80030f0:	bf00      	nop
 80030f2:	3730      	adds	r7, #48	@ 0x30
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w
 8003100:	c0568000 	.word	0xc0568000
 8003104:	40568000 	.word	0x40568000
 8003108:	20000058 	.word	0x20000058
 800310c:	20000010 	.word	0x20000010
 8003110:	1a63c1f8 	.word	0x1a63c1f8
 8003114:	404ca5dc 	.word	0x404ca5dc

08003118 <Kalman_getAngle>:

// obtenção dos ângulos via filtro de Kalman
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	b096      	sub	sp, #88	@ 0x58
 800311c:	af00      	add	r7, sp, #0
 800311e:	61f8      	str	r0, [r7, #28]
 8003120:	ed87 0b04 	vstr	d0, [r7, #16]
 8003124:	ed87 1b02 	vstr	d1, [r7, #8]
 8003128:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003136:	f7fd f8c7 	bl	80002c8 <__aeabi_dsub>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800314c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003150:	f7fd fa72 	bl	8000638 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f7fd f8b6 	bl	80002cc <__adddf3>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	69f9      	ldr	r1, [r7, #28]
 8003166:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800317a:	f7fd fa5d 	bl	8000638 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800318c:	f7fd f89c 	bl	80002c8 <__aeabi_dsub>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800319e:	f7fd f893 	bl	80002c8 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd f88c 	bl	80002cc <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031c0:	f7fd fa3a 	bl	8000638 <__aeabi_dmul>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd f87e 	bl	80002cc <__adddf3>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	69f9      	ldr	r1, [r7, #28]
 80031d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80031e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ea:	f7fd fa25 	bl	8000638 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7fd f867 	bl	80002c8 <__aeabi_dsub>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	69f9      	ldr	r1, [r7, #28]
 8003200:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003214:	f7fd fa10 	bl	8000638 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fd f852 	bl	80002c8 <__aeabi_dsub>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	69f9      	ldr	r1, [r7, #28]
 800322a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800323a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323e:	f7fd f9fb 	bl	8000638 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f7fd f83f 	bl	80002cc <__adddf3>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	69f9      	ldr	r1, [r7, #28]
 8003254:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003264:	f7fd f832 	bl	80002cc <__adddf3>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003276:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800327a:	f7fd fb07 	bl	800088c <__aeabi_ddiv>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800328c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003290:	f7fd fafc 	bl	800088c <__aeabi_ddiv>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032a6:	f7fd f80f 	bl	80002c8 <__aeabi_dsub>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80032b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032c0:	f7fd f9ba 	bl	8000638 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fc fffe 	bl	80002cc <__adddf3>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	69f9      	ldr	r1, [r7, #28]
 80032d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80032e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032e8:	f7fd f9a6 	bl	8000638 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4620      	mov	r0, r4
 80032f2:	4629      	mov	r1, r5
 80032f4:	f7fc ffea 	bl	80002cc <__adddf3>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	69f9      	ldr	r1, [r7, #28]
 80032fe:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003308:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003312:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800331c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003324:	f7fd f988 	bl	8000638 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4620      	mov	r0, r4
 800332e:	4629      	mov	r1, r5
 8003330:	f7fc ffca 	bl	80002c8 <__aeabi_dsub>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	69f9      	ldr	r1, [r7, #28]
 800333a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003344:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003348:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800334c:	f7fd f974 	bl	8000638 <__aeabi_dmul>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4620      	mov	r0, r4
 8003356:	4629      	mov	r1, r5
 8003358:	f7fc ffb6 	bl	80002c8 <__aeabi_dsub>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	69f9      	ldr	r1, [r7, #28]
 8003362:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800336c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003374:	f7fd f960 	bl	8000638 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fc ffa2 	bl	80002c8 <__aeabi_dsub>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	69f9      	ldr	r1, [r7, #28]
 800338a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003394:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003398:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800339c:	f7fd f94c 	bl	8000638 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fc ff8e 	bl	80002c8 <__aeabi_dsub>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	69f9      	ldr	r1, [r7, #28]
 80033b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033bc:	ec43 2b17 	vmov	d7, r2, r3
};
 80033c0:	eeb0 0a47 	vmov.f32	s0, s14
 80033c4:	eef0 0a67 	vmov.f32	s1, s15
 80033c8:	3758      	adds	r7, #88	@ 0x58
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033d0 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80033d6:	f000 fb63 	bl	8003aa0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80033da:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80033de:	2201      	movs	r2, #1
 80033e0:	2178      	movs	r1, #120	@ 0x78
 80033e2:	485b      	ldr	r0, [pc, #364]	@ (8003550 <SSD1306_Init+0x180>)
 80033e4:	f003 f918 	bl	8006618 <HAL_I2C_IsDeviceReady>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e0a9      	b.n	8003546 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80033f2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80033f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033f8:	e002      	b.n	8003400 <SSD1306_Init+0x30>
		p--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f9      	bne.n	80033fa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003406:	22ae      	movs	r2, #174	@ 0xae
 8003408:	2100      	movs	r1, #0
 800340a:	2078      	movs	r0, #120	@ 0x78
 800340c:	f000 fbc4 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003410:	2220      	movs	r2, #32
 8003412:	2100      	movs	r1, #0
 8003414:	2078      	movs	r0, #120	@ 0x78
 8003416:	f000 fbbf 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800341a:	2210      	movs	r2, #16
 800341c:	2100      	movs	r1, #0
 800341e:	2078      	movs	r0, #120	@ 0x78
 8003420:	f000 fbba 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003424:	22b0      	movs	r2, #176	@ 0xb0
 8003426:	2100      	movs	r1, #0
 8003428:	2078      	movs	r0, #120	@ 0x78
 800342a:	f000 fbb5 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800342e:	22c8      	movs	r2, #200	@ 0xc8
 8003430:	2100      	movs	r1, #0
 8003432:	2078      	movs	r0, #120	@ 0x78
 8003434:	f000 fbb0 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2078      	movs	r0, #120	@ 0x78
 800343e:	f000 fbab 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003442:	2210      	movs	r2, #16
 8003444:	2100      	movs	r1, #0
 8003446:	2078      	movs	r0, #120	@ 0x78
 8003448:	f000 fba6 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800344c:	2240      	movs	r2, #64	@ 0x40
 800344e:	2100      	movs	r1, #0
 8003450:	2078      	movs	r0, #120	@ 0x78
 8003452:	f000 fba1 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003456:	2281      	movs	r2, #129	@ 0x81
 8003458:	2100      	movs	r1, #0
 800345a:	2078      	movs	r0, #120	@ 0x78
 800345c:	f000 fb9c 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003460:	22ff      	movs	r2, #255	@ 0xff
 8003462:	2100      	movs	r1, #0
 8003464:	2078      	movs	r0, #120	@ 0x78
 8003466:	f000 fb97 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800346a:	22a1      	movs	r2, #161	@ 0xa1
 800346c:	2100      	movs	r1, #0
 800346e:	2078      	movs	r0, #120	@ 0x78
 8003470:	f000 fb92 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003474:	22a6      	movs	r2, #166	@ 0xa6
 8003476:	2100      	movs	r1, #0
 8003478:	2078      	movs	r0, #120	@ 0x78
 800347a:	f000 fb8d 	bl	8003b98 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800347e:	22a8      	movs	r2, #168	@ 0xa8
 8003480:	2100      	movs	r1, #0
 8003482:	2078      	movs	r0, #120	@ 0x78
 8003484:	f000 fb88 	bl	8003b98 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8003488:	223f      	movs	r2, #63	@ 0x3f
 800348a:	2100      	movs	r1, #0
 800348c:	2078      	movs	r0, #120	@ 0x78
 800348e:	f000 fb83 	bl	8003b98 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003492:	22a4      	movs	r2, #164	@ 0xa4
 8003494:	2100      	movs	r1, #0
 8003496:	2078      	movs	r0, #120	@ 0x78
 8003498:	f000 fb7e 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800349c:	22d3      	movs	r2, #211	@ 0xd3
 800349e:	2100      	movs	r1, #0
 80034a0:	2078      	movs	r0, #120	@ 0x78
 80034a2:	f000 fb79 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	2078      	movs	r0, #120	@ 0x78
 80034ac:	f000 fb74 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80034b0:	22d5      	movs	r2, #213	@ 0xd5
 80034b2:	2100      	movs	r1, #0
 80034b4:	2078      	movs	r0, #120	@ 0x78
 80034b6:	f000 fb6f 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80034ba:	22f0      	movs	r2, #240	@ 0xf0
 80034bc:	2100      	movs	r1, #0
 80034be:	2078      	movs	r0, #120	@ 0x78
 80034c0:	f000 fb6a 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80034c4:	22d9      	movs	r2, #217	@ 0xd9
 80034c6:	2100      	movs	r1, #0
 80034c8:	2078      	movs	r0, #120	@ 0x78
 80034ca:	f000 fb65 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80034ce:	2222      	movs	r2, #34	@ 0x22
 80034d0:	2100      	movs	r1, #0
 80034d2:	2078      	movs	r0, #120	@ 0x78
 80034d4:	f000 fb60 	bl	8003b98 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80034d8:	22da      	movs	r2, #218	@ 0xda
 80034da:	2100      	movs	r1, #0
 80034dc:	2078      	movs	r0, #120	@ 0x78
 80034de:	f000 fb5b 	bl	8003b98 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80034e2:	2212      	movs	r2, #18
 80034e4:	2100      	movs	r1, #0
 80034e6:	2078      	movs	r0, #120	@ 0x78
 80034e8:	f000 fb56 	bl	8003b98 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80034ec:	22db      	movs	r2, #219	@ 0xdb
 80034ee:	2100      	movs	r1, #0
 80034f0:	2078      	movs	r0, #120	@ 0x78
 80034f2:	f000 fb51 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80034f6:	2220      	movs	r2, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	2078      	movs	r0, #120	@ 0x78
 80034fc:	f000 fb4c 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003500:	228d      	movs	r2, #141	@ 0x8d
 8003502:	2100      	movs	r1, #0
 8003504:	2078      	movs	r0, #120	@ 0x78
 8003506:	f000 fb47 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800350a:	2214      	movs	r2, #20
 800350c:	2100      	movs	r1, #0
 800350e:	2078      	movs	r0, #120	@ 0x78
 8003510:	f000 fb42 	bl	8003b98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003514:	22af      	movs	r2, #175	@ 0xaf
 8003516:	2100      	movs	r1, #0
 8003518:	2078      	movs	r0, #120	@ 0x78
 800351a:	f000 fb3d 	bl	8003b98 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800351e:	222e      	movs	r2, #46	@ 0x2e
 8003520:	2100      	movs	r1, #0
 8003522:	2078      	movs	r0, #120	@ 0x78
 8003524:	f000 fb38 	bl	8003b98 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003528:	2000      	movs	r0, #0
 800352a:	f000 f843 	bl	80035b4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800352e:	f000 f813 	bl	8003558 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003532:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <SSD1306_Init+0x184>)
 8003534:	2200      	movs	r2, #0
 8003536:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003538:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <SSD1306_Init+0x184>)
 800353a:	2200      	movs	r2, #0
 800353c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800353e:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <SSD1306_Init+0x184>)
 8003540:	2201      	movs	r2, #1
 8003542:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003544:	2301      	movs	r3, #1
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200002ec 	.word	0x200002ec
 8003554:	200008e4 	.word	0x200008e4

08003558 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800355e:	2300      	movs	r3, #0
 8003560:	71fb      	strb	r3, [r7, #7]
 8003562:	e01d      	b.n	80035a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	3b50      	subs	r3, #80	@ 0x50
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	2100      	movs	r1, #0
 800356e:	2078      	movs	r0, #120	@ 0x78
 8003570:	f000 fb12 	bl	8003b98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003574:	2200      	movs	r2, #0
 8003576:	2100      	movs	r1, #0
 8003578:	2078      	movs	r0, #120	@ 0x78
 800357a:	f000 fb0d 	bl	8003b98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800357e:	2210      	movs	r2, #16
 8003580:	2100      	movs	r1, #0
 8003582:	2078      	movs	r0, #120	@ 0x78
 8003584:	f000 fb08 	bl	8003b98 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	01db      	lsls	r3, r3, #7
 800358c:	4a08      	ldr	r2, [pc, #32]	@ (80035b0 <SSD1306_UpdateScreen+0x58>)
 800358e:	441a      	add	r2, r3
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	2140      	movs	r1, #64	@ 0x40
 8003594:	2078      	movs	r0, #120	@ 0x78
 8003596:	f000 fa99 	bl	8003acc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	3301      	adds	r3, #1
 800359e:	71fb      	strb	r3, [r7, #7]
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b07      	cmp	r3, #7
 80035a4:	d9de      	bls.n	8003564 <SSD1306_UpdateScreen+0xc>
	}
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200004e4 	.word	0x200004e4

080035b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <SSD1306_Fill+0x14>
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <SSD1306_Fill+0x16>
 80035c8:	23ff      	movs	r3, #255	@ 0xff
 80035ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ce:	4619      	mov	r1, r3
 80035d0:	4803      	ldr	r0, [pc, #12]	@ (80035e0 <SSD1306_Fill+0x2c>)
 80035d2:	f006 fb04 	bl	8009bde <memset>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200004e4 	.word	0x200004e4

080035e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	460b      	mov	r3, r1
 80035f0:	80bb      	strh	r3, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	70fb      	strb	r3, [r7, #3]
	if (
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80035fa:	d848      	bhi.n	800368e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80035fc:	88bb      	ldrh	r3, [r7, #4]
 80035fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003600:	d845      	bhi.n	800368e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003602:	4b26      	ldr	r3, [pc, #152]	@ (800369c <SSD1306_DrawPixel+0xb8>)
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d11a      	bne.n	8003654 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	88bb      	ldrh	r3, [r7, #4]
 8003622:	08db      	lsrs	r3, r3, #3
 8003624:	b298      	uxth	r0, r3
 8003626:	4603      	mov	r3, r0
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	4413      	add	r3, r2
 800362c:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <SSD1306_DrawPixel+0xbc>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	b25a      	sxtb	r2, r3
 8003632:	88bb      	ldrh	r3, [r7, #4]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	b25b      	sxtb	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b259      	sxtb	r1, r3
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	4603      	mov	r3, r0
 8003648:	01db      	lsls	r3, r3, #7
 800364a:	4413      	add	r3, r2
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <SSD1306_DrawPixel+0xbc>)
 8003650:	54d1      	strb	r1, [r2, r3]
 8003652:	e01d      	b.n	8003690 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	88bb      	ldrh	r3, [r7, #4]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	b298      	uxth	r0, r3
 800365c:	4603      	mov	r3, r0
 800365e:	01db      	lsls	r3, r3, #7
 8003660:	4413      	add	r3, r2
 8003662:	4a0f      	ldr	r2, [pc, #60]	@ (80036a0 <SSD1306_DrawPixel+0xbc>)
 8003664:	5cd3      	ldrb	r3, [r2, r3]
 8003666:	b25a      	sxtb	r2, r3
 8003668:	88bb      	ldrh	r3, [r7, #4]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	b25b      	sxtb	r3, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	b25b      	sxtb	r3, r3
 800367a:	4013      	ands	r3, r2
 800367c:	b259      	sxtb	r1, r3
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	4603      	mov	r3, r0
 8003682:	01db      	lsls	r3, r3, #7
 8003684:	4413      	add	r3, r2
 8003686:	b2c9      	uxtb	r1, r1
 8003688:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <SSD1306_DrawPixel+0xbc>)
 800368a:	54d1      	strb	r1, [r2, r3]
 800368c:	e000      	b.n	8003690 <SSD1306_DrawPixel+0xac>
		return;
 800368e:	bf00      	nop
	}
}
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	200008e4 	.word	0x200008e4
 80036a0:	200004e4 	.word	0x200004e4

080036a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	460a      	mov	r2, r1
 80036ae:	80fb      	strh	r3, [r7, #6]
 80036b0:	4613      	mov	r3, r2
 80036b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80036b4:	4a05      	ldr	r2, [pc, #20]	@ (80036cc <SSD1306_GotoXY+0x28>)
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80036ba:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <SSD1306_GotoXY+0x28>)
 80036bc:	88bb      	ldrh	r3, [r7, #4]
 80036be:	8053      	strh	r3, [r2, #2]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	200008e4 	.word	0x200008e4

080036d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
 80036dc:	4613      	mov	r3, r2
 80036de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80036e0:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <SSD1306_Putc+0xf8>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	4413      	add	r3, r2
	if (
 80036ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80036ee:	dc07      	bgt.n	8003700 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80036f0:	4b35      	ldr	r3, [pc, #212]	@ (80037c8 <SSD1306_Putc+0xf8>)
 80036f2:	885b      	ldrh	r3, [r3, #2]
 80036f4:	461a      	mov	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80036fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80036fe:	dd01      	ble.n	8003704 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003700:	2300      	movs	r3, #0
 8003702:	e05d      	b.n	80037c0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e04b      	b.n	80037a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	3b20      	subs	r3, #32
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	7849      	ldrb	r1, [r1, #1]
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4619      	mov	r1, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	440b      	add	r3, r1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4413      	add	r3, r2
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e030      	b.n	8003790 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d010      	beq.n	8003760 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800373e:	4b22      	ldr	r3, [pc, #136]	@ (80037c8 <SSD1306_Putc+0xf8>)
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	b29b      	uxth	r3, r3
 8003746:	4413      	add	r3, r2
 8003748:	b298      	uxth	r0, r3
 800374a:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <SSD1306_Putc+0xf8>)
 800374c:	885a      	ldrh	r2, [r3, #2]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	b29b      	uxth	r3, r3
 8003752:	4413      	add	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	79ba      	ldrb	r2, [r7, #6]
 8003758:	4619      	mov	r1, r3
 800375a:	f7ff ff43 	bl	80035e4 <SSD1306_DrawPixel>
 800375e:	e014      	b.n	800378a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <SSD1306_Putc+0xf8>)
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	b29b      	uxth	r3, r3
 8003768:	4413      	add	r3, r2
 800376a:	b298      	uxth	r0, r3
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <SSD1306_Putc+0xf8>)
 800376e:	885a      	ldrh	r2, [r3, #2]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4413      	add	r3, r2
 8003776:	b299      	uxth	r1, r3
 8003778:	79bb      	ldrb	r3, [r7, #6]
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	f7ff ff2d 	bl	80035e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	3301      	adds	r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4293      	cmp	r3, r2
 800379a:	d3c8      	bcc.n	800372e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	3301      	adds	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	461a      	mov	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d3ad      	bcc.n	800370a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <SSD1306_Putc+0xf8>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <SSD1306_Putc+0xf8>)
 80037bc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80037be:	79fb      	ldrb	r3, [r7, #7]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200008e4 	.word	0x200008e4

080037cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80037da:	e012      	b.n	8003802 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	79fa      	ldrb	r2, [r7, #7]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff ff73 	bl	80036d0 <SSD1306_Putc>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d002      	beq.n	80037fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	e008      	b.n	800380e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e8      	bne.n	80037dc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	781b      	ldrb	r3, [r3, #0]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8003816:	b590      	push	{r4, r7, lr}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	4604      	mov	r4, r0
 800381e:	4608      	mov	r0, r1
 8003820:	4611      	mov	r1, r2
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	80fb      	strh	r3, [r7, #6]
 8003828:	4603      	mov	r3, r0
 800382a:	80bb      	strh	r3, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	f1c3 0301 	rsb	r3, r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	461a      	mov	r2, r3
 8003846:	03d2      	lsls	r2, r2, #15
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8003858:	88f8      	ldrh	r0, [r7, #6]
 800385a:	88ba      	ldrh	r2, [r7, #4]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4413      	add	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	787a      	ldrb	r2, [r7, #1]
 8003864:	4619      	mov	r1, r3
 8003866:	f7ff febd 	bl	80035e4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800386a:	88f8      	ldrh	r0, [r7, #6]
 800386c:	88ba      	ldrh	r2, [r7, #4]
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	787a      	ldrb	r2, [r7, #1]
 8003876:	4619      	mov	r1, r3
 8003878:	f7ff feb4 	bl	80035e4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	4413      	add	r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	88b9      	ldrh	r1, [r7, #4]
 8003886:	787a      	ldrb	r2, [r7, #1]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff feab 	bl	80035e4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	b29b      	uxth	r3, r3
 8003896:	88b9      	ldrh	r1, [r7, #4]
 8003898:	787a      	ldrb	r2, [r7, #1]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fea2 	bl	80035e4 <SSD1306_DrawPixel>

    while (x < y) {
 80038a0:	e081      	b.n	80039a6 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80038a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0e      	blt.n	80038c8 <SSD1306_DrawCircle+0xb2>
            y--;
 80038aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80038b6:	8a7b      	ldrh	r3, [r7, #18]
 80038b8:	3302      	adds	r3, #2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80038be:	8afa      	ldrh	r2, [r7, #22]
 80038c0:	8a7b      	ldrh	r3, [r7, #18]
 80038c2:	4413      	add	r3, r2
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80038c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80038d4:	8abb      	ldrh	r3, [r7, #20]
 80038d6:	3302      	adds	r3, #2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80038dc:	8afa      	ldrh	r2, [r7, #22]
 80038de:	8abb      	ldrh	r3, [r7, #20]
 80038e0:	4413      	add	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	8a3b      	ldrh	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	b298      	uxth	r0, r3
 80038ee:	88ba      	ldrh	r2, [r7, #4]
 80038f0:	89fb      	ldrh	r3, [r7, #14]
 80038f2:	4413      	add	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	787a      	ldrb	r2, [r7, #1]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f7ff fe73 	bl	80035e4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	8a3b      	ldrh	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b298      	uxth	r0, r3
 8003906:	88ba      	ldrh	r2, [r7, #4]
 8003908:	89fb      	ldrh	r3, [r7, #14]
 800390a:	4413      	add	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	787a      	ldrb	r2, [r7, #1]
 8003910:	4619      	mov	r1, r3
 8003912:	f7ff fe67 	bl	80035e4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	8a3b      	ldrh	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	b298      	uxth	r0, r3
 800391e:	88ba      	ldrh	r2, [r7, #4]
 8003920:	89fb      	ldrh	r3, [r7, #14]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	b29b      	uxth	r3, r3
 8003926:	787a      	ldrb	r2, [r7, #1]
 8003928:	4619      	mov	r1, r3
 800392a:	f7ff fe5b 	bl	80035e4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	8a3b      	ldrh	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	b298      	uxth	r0, r3
 8003936:	88ba      	ldrh	r2, [r7, #4]
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	787a      	ldrb	r2, [r7, #1]
 8003940:	4619      	mov	r1, r3
 8003942:	f7ff fe4f 	bl	80035e4 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	89fb      	ldrh	r3, [r7, #14]
 800394a:	4413      	add	r3, r2
 800394c:	b298      	uxth	r0, r3
 800394e:	88ba      	ldrh	r2, [r7, #4]
 8003950:	8a3b      	ldrh	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	787a      	ldrb	r2, [r7, #1]
 8003958:	4619      	mov	r1, r3
 800395a:	f7ff fe43 	bl	80035e4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	b298      	uxth	r0, r3
 8003966:	88ba      	ldrh	r2, [r7, #4]
 8003968:	8a3b      	ldrh	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	787a      	ldrb	r2, [r7, #1]
 8003970:	4619      	mov	r1, r3
 8003972:	f7ff fe37 	bl	80035e4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	89fb      	ldrh	r3, [r7, #14]
 800397a:	4413      	add	r3, r2
 800397c:	b298      	uxth	r0, r3
 800397e:	88ba      	ldrh	r2, [r7, #4]
 8003980:	8a3b      	ldrh	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	b29b      	uxth	r3, r3
 8003986:	787a      	ldrb	r2, [r7, #1]
 8003988:	4619      	mov	r1, r3
 800398a:	f7ff fe2b 	bl	80035e4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	89fb      	ldrh	r3, [r7, #14]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	b298      	uxth	r0, r3
 8003996:	88ba      	ldrh	r2, [r7, #4]
 8003998:	8a3b      	ldrh	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	787a      	ldrb	r2, [r7, #1]
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7ff fe1f 	bl	80035e4 <SSD1306_DrawPixel>
    while (x < y) {
 80039a6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80039aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	f6ff af77 	blt.w	80038a2 <SSD1306_DrawCircle+0x8c>
    }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd90      	pop	{r4, r7, pc}

080039be <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60ba      	str	r2, [r7, #8]
 80039c6:	461a      	mov	r2, r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	81fb      	strh	r3, [r7, #14]
 80039cc:	460b      	mov	r3, r1
 80039ce:	81bb      	strh	r3, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80039d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d8:	3307      	adds	r3, #7
 80039da:	2b00      	cmp	r3, #0
 80039dc:	da00      	bge.n	80039e0 <SSD1306_DrawBitmap+0x22>
 80039de:	3307      	adds	r3, #7
 80039e0:	10db      	asrs	r3, r3, #3
 80039e2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	82bb      	strh	r3, [r7, #20]
 80039ec:	e044      	b.n	8003a78 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	827b      	strh	r3, [r7, #18]
 80039f2:	e02f      	b.n	8003a54 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80039f4:	8a7b      	ldrh	r3, [r7, #18]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
 8003a04:	e012      	b.n	8003a2c <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003a06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a0e:	fb03 f202 	mul.w	r2, r3, r2
 8003a12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da00      	bge.n	8003a1c <SSD1306_DrawBitmap+0x5e>
 8003a1a:	3307      	adds	r3, #7
 8003a1c:	10db      	asrs	r3, r3, #3
 8003a1e:	b21b      	sxth	r3, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da09      	bge.n	8003a48 <SSD1306_DrawBitmap+0x8a>
 8003a34:	89fa      	ldrh	r2, [r7, #14]
 8003a36:	8a7b      	ldrh	r3, [r7, #18]
 8003a38:	4413      	add	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	89b9      	ldrh	r1, [r7, #12]
 8003a3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fdce 	bl	80035e4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8003a48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	827b      	strh	r3, [r7, #18]
 8003a54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	dbc9      	blt.n	80039f4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8003a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	82bb      	strh	r3, [r7, #20]
 8003a6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	81bb      	strh	r3, [r7, #12]
 8003a78:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dbb4      	blt.n	80039ee <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7ff fd8e 	bl	80035b4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003a98:	f7ff fd5e 	bl	8003558 <SSD1306_UpdateScreen>
}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <ssd1306_I2C_Init+0x28>)
 8003aa8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003aaa:	e002      	b.n	8003ab2 <ssd1306_I2C_Init+0x12>
		p--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f9      	bne.n	8003aac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	0003d090 	.word	0x0003d090

08003acc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b0c7      	sub	sp, #284	@ 0x11c
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003ada:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8003ade:	600a      	str	r2, [r1, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ae6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003aea:	4622      	mov	r2, r4
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003af2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003af6:	4602      	mov	r2, r0
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003afe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b02:	460a      	mov	r2, r1
 8003b04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003b06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b12:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003b20:	e015      	b.n	8003b4e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003b22:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b2a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	441a      	add	r2, r3
 8003b32:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b36:	3301      	adds	r3, #1
 8003b38:	7811      	ldrb	r1, [r2, #0]
 8003b3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b3e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003b42:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003b44:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003b4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003b58:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d8df      	bhi.n	8003b22 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8003b62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b66:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b299      	uxth	r1, r3
 8003b6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003b72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f107 020c 	add.w	r2, r7, #12
 8003b80:	200a      	movs	r0, #10
 8003b82:	9000      	str	r0, [sp, #0]
 8003b84:	4803      	ldr	r0, [pc, #12]	@ (8003b94 <ssd1306_I2C_WriteMulti+0xc8>)
 8003b86:	f001 ff8d 	bl	8005aa4 <HAL_I2C_Master_Transmit>
}
 8003b8a:	bf00      	nop
 8003b8c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd90      	pop	{r4, r7, pc}
 8003b94:	200002ec 	.word	0x200002ec

08003b98 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	71bb      	strb	r3, [r7, #6]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003bae:	797b      	ldrb	r3, [r7, #5]
 8003bb0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	b299      	uxth	r1, r3
 8003bb6:	f107 020c 	add.w	r2, r7, #12
 8003bba:	230a      	movs	r3, #10
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	4803      	ldr	r0, [pc, #12]	@ (8003bd0 <ssd1306_I2C_Write+0x38>)
 8003bc2:	f001 ff6f 	bl	8005aa4 <HAL_I2C_Master_Transmit>
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200002ec 	.word	0x200002ec

08003bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a0f      	ldr	r2, [pc, #60]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_MspInit+0x4c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003c12:	2007      	movs	r0, #7
 8003c14:	f001 f82a 	bl	8004c6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800

08003c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c28:	bf00      	nop
 8003c2a:	e7fd      	b.n	8003c28 <NMI_Handler+0x4>

08003c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <HardFault_Handler+0x4>

08003c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c38:	bf00      	nop
 8003c3a:	e7fd      	b.n	8003c38 <MemManage_Handler+0x4>

08003c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <BusFault_Handler+0x4>

08003c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <UsageFault_Handler+0x4>

08003c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c7a:	f000 fb91 	bl	80043a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003c88:	4802      	ldr	r0, [pc, #8]	@ (8003c94 <DMA1_Stream0_IRQHandler+0x10>)
 8003c8a:	f001 f959 	bl	8004f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000340 	.word	0x20000340

08003c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c9c:	4802      	ldr	r0, [pc, #8]	@ (8003ca8 <TIM2_IRQHandler+0x10>)
 8003c9e:	f004 fb81 	bl	80083a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000938 	.word	0x20000938

08003cac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cb0:	4802      	ldr	r0, [pc, #8]	@ (8003cbc <TIM6_DAC_IRQHandler+0x10>)
 8003cb2:	f004 fb77 	bl	80083a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200009c8 	.word	0x200009c8

08003cc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return 1;
 8003cc4:	2301      	movs	r3, #1
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_kill>:

int _kill(int pid, int sig)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cda:	f005 ffd3 	bl	8009c84 <__errno>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2216      	movs	r2, #22
 8003ce2:	601a      	str	r2, [r3, #0]
  return -1;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_exit>:

void _exit (int status)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ffe7 	bl	8003cd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d02:	bf00      	nop
 8003d04:	e7fd      	b.n	8003d02 <_exit+0x12>

08003d06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e00a      	b.n	8003d2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d18:	f3af 8000 	nop.w
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	60ba      	str	r2, [r7, #8]
 8003d24:	b2ca      	uxtb	r2, r1
 8003d26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	dbf0      	blt.n	8003d18 <_read+0x12>
  }

  return len;
 8003d36:	687b      	ldr	r3, [r7, #4]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e009      	b.n	8003d66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	60ba      	str	r2, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	dbf1      	blt.n	8003d52 <_write+0x12>
  }
  return len;
 8003d6e:	687b      	ldr	r3, [r7, #4]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_close>:

int _close(int file)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003da0:	605a      	str	r2, [r3, #4]
  return 0;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <_isatty>:

int _isatty(int file)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003db8:	2301      	movs	r3, #1
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003de8:	4a14      	ldr	r2, [pc, #80]	@ (8003e3c <_sbrk+0x5c>)
 8003dea:	4b15      	ldr	r3, [pc, #84]	@ (8003e40 <_sbrk+0x60>)
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003df4:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <_sbrk+0x64>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	@ (8003e44 <_sbrk+0x64>)
 8003dfe:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <_sbrk+0x68>)
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e02:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <_sbrk+0x64>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d207      	bcs.n	8003e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e10:	f005 ff38 	bl	8009c84 <__errno>
 8003e14:	4603      	mov	r3, r0
 8003e16:	220c      	movs	r2, #12
 8003e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1e:	e009      	b.n	8003e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e20:	4b08      	ldr	r3, [pc, #32]	@ (8003e44 <_sbrk+0x64>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <_sbrk+0x64>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	4a05      	ldr	r2, [pc, #20]	@ (8003e44 <_sbrk+0x64>)
 8003e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e32:	68fb      	ldr	r3, [r7, #12]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20020000 	.word	0x20020000
 8003e40:	00000400 	.word	0x00000400
 8003e44:	200008ec 	.word	0x200008ec
 8003e48:	20000b60 	.word	0x20000b60

08003e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e50:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <SystemInit+0x20>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	4a05      	ldr	r2, [pc, #20]	@ (8003e6c <SystemInit+0x20>)
 8003e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b096      	sub	sp, #88	@ 0x58
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	609a      	str	r2, [r3, #8]
 8003e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	611a      	str	r2, [r3, #16]
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ea2:	1d3b      	adds	r3, r7, #4
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 fe98 	bl	8009bde <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003eae:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fac <MX_TIM1_Init+0x13c>)
 8003eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003eb6:	2253      	movs	r2, #83	@ 0x53
 8003eb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eba:	4b3b      	ldr	r3, [pc, #236]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8003ec0:	4b39      	ldr	r3, [pc, #228]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003ec2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003ec6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec8:	4b37      	ldr	r3, [pc, #220]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ece:	4b36      	ldr	r3, [pc, #216]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ed4:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003eda:	4833      	ldr	r0, [pc, #204]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003edc:	f004 f818 	bl	8007f10 <HAL_TIM_Base_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003ee6:	f7fe feb3 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ef0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	482c      	ldr	r0, [pc, #176]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003ef8:	f004 fc06 	bl	8008708 <HAL_TIM_ConfigClockSource>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003f02:	f7fe fea5 	bl	8002c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f06:	4828      	ldr	r0, [pc, #160]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003f08:	f004 f92a 	bl	8008160 <HAL_TIM_PWM_Init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003f12:	f7fe fe9d 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f22:	4619      	mov	r1, r3
 8003f24:	4820      	ldr	r0, [pc, #128]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003f26:	f004 fffb 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003f30:	f7fe fe8e 	bl	8002c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f34:	2360      	movs	r3, #96	@ 0x60
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f40:	2300      	movs	r3, #0
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f54:	2200      	movs	r2, #0
 8003f56:	4619      	mov	r1, r3
 8003f58:	4813      	ldr	r0, [pc, #76]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003f5a:	f004 fb13 	bl	8008584 <HAL_TIM_PWM_ConfigChannel>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003f64:	f7fe fe74 	bl	8002c50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4807      	ldr	r0, [pc, #28]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003f8c:	f005 f844 	bl	8009018 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003f96:	f7fe fe5b 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f9a:	4803      	ldr	r0, [pc, #12]	@ (8003fa8 <MX_TIM1_Init+0x138>)
 8003f9c:	f000 f94a 	bl	8004234 <HAL_TIM_MspPostInit>

}
 8003fa0:	bf00      	nop
 8003fa2:	3758      	adds	r7, #88	@ 0x58
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200008f0 	.word	0x200008f0
 8003fac:	40010000 	.word	0x40010000

08003fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003fce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003fd6:	f240 3247 	movw	r2, #839	@ 0x347
 8003fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400-1;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003fe4:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8003fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fea:	4b17      	ldr	r3, [pc, #92]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff0:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ff6:	4814      	ldr	r0, [pc, #80]	@ (8004048 <MX_TIM2_Init+0x98>)
 8003ff8:	f003 ff8a 	bl	8007f10 <HAL_TIM_Base_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004002:	f7fe fe25 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800400a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	4619      	mov	r1, r3
 8004012:	480d      	ldr	r0, [pc, #52]	@ (8004048 <MX_TIM2_Init+0x98>)
 8004014:	f004 fb78 	bl	8008708 <HAL_TIM_ConfigClockSource>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800401e:	f7fe fe17 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800402a:	463b      	mov	r3, r7
 800402c:	4619      	mov	r1, r3
 800402e:	4806      	ldr	r0, [pc, #24]	@ (8004048 <MX_TIM2_Init+0x98>)
 8004030:	f004 ff76 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800403a:	f7fe fe09 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000938 	.word	0x20000938

0800404c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	463b      	mov	r3, r7
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004068:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <MX_TIM3_Init+0x94>)
 800406a:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <MX_TIM3_Init+0x98>)
 800406c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800406e:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <MX_TIM3_Init+0x94>)
 8004070:	2253      	movs	r2, #83	@ 0x53
 8004072:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <MX_TIM3_Init+0x94>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800407a:	4b19      	ldr	r3, [pc, #100]	@ (80040e0 <MX_TIM3_Init+0x94>)
 800407c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004080:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004082:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <MX_TIM3_Init+0x94>)
 8004084:	2200      	movs	r2, #0
 8004086:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004088:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <MX_TIM3_Init+0x94>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800408e:	4814      	ldr	r0, [pc, #80]	@ (80040e0 <MX_TIM3_Init+0x94>)
 8004090:	f003 ff3e 	bl	8007f10 <HAL_TIM_Base_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800409a:	f7fe fdd9 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800409e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040a4:	f107 0308 	add.w	r3, r7, #8
 80040a8:	4619      	mov	r1, r3
 80040aa:	480d      	ldr	r0, [pc, #52]	@ (80040e0 <MX_TIM3_Init+0x94>)
 80040ac:	f004 fb2c 	bl	8008708 <HAL_TIM_ConfigClockSource>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80040b6:	f7fe fdcb 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040c2:	463b      	mov	r3, r7
 80040c4:	4619      	mov	r1, r3
 80040c6:	4806      	ldr	r0, [pc, #24]	@ (80040e0 <MX_TIM3_Init+0x94>)
 80040c8:	f004 ff2a 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80040d2:	f7fe fdbd 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000980 	.word	0x20000980
 80040e4:	40000400 	.word	0x40000400

080040e8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040ee:	463b      	mov	r3, r7
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040f6:	4b15      	ldr	r3, [pc, #84]	@ (800414c <MX_TIM6_Init+0x64>)
 80040f8:	4a15      	ldr	r2, [pc, #84]	@ (8004150 <MX_TIM6_Init+0x68>)
 80040fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80040fc:	4b13      	ldr	r3, [pc, #76]	@ (800414c <MX_TIM6_Init+0x64>)
 80040fe:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004102:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b11      	ldr	r3, [pc, #68]	@ (800414c <MX_TIM6_Init+0x64>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000-1;
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <MX_TIM6_Init+0x64>)
 800410c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004110:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004112:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <MX_TIM6_Init+0x64>)
 8004114:	2280      	movs	r2, #128	@ 0x80
 8004116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004118:	480c      	ldr	r0, [pc, #48]	@ (800414c <MX_TIM6_Init+0x64>)
 800411a:	f003 fef9 	bl	8007f10 <HAL_TIM_Base_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004124:	f7fe fd94 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004128:	2300      	movs	r3, #0
 800412a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412c:	2300      	movs	r3, #0
 800412e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004130:	463b      	mov	r3, r7
 8004132:	4619      	mov	r1, r3
 8004134:	4805      	ldr	r0, [pc, #20]	@ (800414c <MX_TIM6_Init+0x64>)
 8004136:	f004 fef3 	bl	8008f20 <HAL_TIMEx_MasterConfigSynchronization>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004140:	f7fe fd86 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	200009c8 	.word	0x200009c8
 8004150:	40001000 	.word	0x40001000

08004154 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a30      	ldr	r2, [pc, #192]	@ (8004224 <HAL_TIM_Base_MspInit+0xd0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	4b2f      	ldr	r3, [pc, #188]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	4a2e      	ldr	r2, [pc, #184]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6453      	str	r3, [r2, #68]	@ 0x44
 8004176:	4b2c      	ldr	r3, [pc, #176]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004182:	e04a      	b.n	800421a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418c:	d116      	bne.n	80041bc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	4b25      	ldr	r3, [pc, #148]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	4a24      	ldr	r2, [pc, #144]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6413      	str	r3, [r2, #64]	@ 0x40
 800419e:	4b22      	ldr	r3, [pc, #136]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2100      	movs	r1, #0
 80041ae:	201c      	movs	r0, #28
 80041b0:	f000 fd67 	bl	8004c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041b4:	201c      	movs	r0, #28
 80041b6:	f000 fd80 	bl	8004cba <HAL_NVIC_EnableIRQ>
}
 80041ba:	e02e      	b.n	800421a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1a      	ldr	r2, [pc, #104]	@ (800422c <HAL_TIM_Base_MspInit+0xd8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10e      	bne.n	80041e4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b17      	ldr	r3, [pc, #92]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	4a16      	ldr	r2, [pc, #88]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d6:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	e01a      	b.n	800421a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a11      	ldr	r2, [pc, #68]	@ (8004230 <HAL_TIM_Base_MspInit+0xdc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d115      	bne.n	800421a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 80041f8:	f043 0310 	orr.w	r3, r3, #16
 80041fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <HAL_TIM_Base_MspInit+0xd4>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800420a:	2200      	movs	r2, #0
 800420c:	2100      	movs	r1, #0
 800420e:	2036      	movs	r0, #54	@ 0x36
 8004210:	f000 fd37 	bl	8004c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004214:	2036      	movs	r0, #54	@ 0x36
 8004216:	f000 fd50 	bl	8004cba <HAL_NVIC_EnableIRQ>
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000
 8004228:	40023800 	.word	0x40023800
 800422c:	40000400 	.word	0x40000400
 8004230:	40001000 	.word	0x40001000

08004234 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <HAL_TIM_MspPostInit+0x68>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d11e      	bne.n	8004294 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a10      	ldr	r2, [pc, #64]	@ (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <HAL_TIM_MspPostInit+0x6c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004276:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004280:	2300      	movs	r3, #0
 8004282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004284:	2301      	movs	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	4619      	mov	r1, r3
 800428e:	4805      	ldr	r0, [pc, #20]	@ (80042a4 <HAL_TIM_MspPostInit+0x70>)
 8004290:	f001 f8cc 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004294:	bf00      	nop
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40010000 	.word	0x40010000
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020000 	.word	0x40020000

080042a8 <Reset_Handler>:
 80042a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042e0 <LoopFillZerobss+0xe>
 80042ac:	f7ff fdce 	bl	8003e4c <SystemInit>
 80042b0:	480c      	ldr	r0, [pc, #48]	@ (80042e4 <LoopFillZerobss+0x12>)
 80042b2:	490d      	ldr	r1, [pc, #52]	@ (80042e8 <LoopFillZerobss+0x16>)
 80042b4:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <LoopFillZerobss+0x1a>)
 80042b6:	2300      	movs	r3, #0
 80042b8:	e002      	b.n	80042c0 <LoopCopyDataInit>

080042ba <CopyDataInit>:
 80042ba:	58d4      	ldr	r4, [r2, r3]
 80042bc:	50c4      	str	r4, [r0, r3]
 80042be:	3304      	adds	r3, #4

080042c0 <LoopCopyDataInit>:
 80042c0:	18c4      	adds	r4, r0, r3
 80042c2:	428c      	cmp	r4, r1
 80042c4:	d3f9      	bcc.n	80042ba <CopyDataInit>
 80042c6:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <LoopFillZerobss+0x1e>)
 80042c8:	4c0a      	ldr	r4, [pc, #40]	@ (80042f4 <LoopFillZerobss+0x22>)
 80042ca:	2300      	movs	r3, #0
 80042cc:	e001      	b.n	80042d2 <LoopFillZerobss>

080042ce <FillZerobss>:
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	3204      	adds	r2, #4

080042d2 <LoopFillZerobss>:
 80042d2:	42a2      	cmp	r2, r4
 80042d4:	d3fb      	bcc.n	80042ce <FillZerobss>
 80042d6:	f005 fcdb 	bl	8009c90 <__libc_init_array>
 80042da:	f7fd feab 	bl	8002034 <main>
 80042de:	4770      	bx	lr
 80042e0:	20020000 	.word	0x20020000
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000288 	.word	0x20000288
 80042ec:	0800e198 	.word	0x0800e198
 80042f0:	20000288 	.word	0x20000288
 80042f4:	20000b60 	.word	0x20000b60

080042f8 <ADC_IRQHandler>:
 80042f8:	e7fe      	b.n	80042f8 <ADC_IRQHandler>
	...

080042fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004300:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <HAL_Init+0x40>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <HAL_Init+0x40>)
 8004306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800430a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800430c:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <HAL_Init+0x40>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <HAL_Init+0x40>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004318:	4b08      	ldr	r3, [pc, #32]	@ (800433c <HAL_Init+0x40>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a07      	ldr	r2, [pc, #28]	@ (800433c <HAL_Init+0x40>)
 800431e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004324:	2003      	movs	r0, #3
 8004326:	f000 fca1 	bl	8004c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800432a:	2000      	movs	r0, #0
 800432c:	f000 f808 	bl	8004340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004330:	f7ff fc50 	bl	8003bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023c00 	.word	0x40023c00

08004340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004348:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <HAL_InitTick+0x54>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <HAL_InitTick+0x58>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004356:	fbb3 f3f1 	udiv	r3, r3, r1
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fcb9 	bl	8004cd6 <HAL_SYSTICK_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e00e      	b.n	800438c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0f      	cmp	r3, #15
 8004372:	d80a      	bhi.n	800438a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004374:	2200      	movs	r2, #0
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	f000 fc81 	bl	8004c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004380:	4a06      	ldr	r2, [pc, #24]	@ (800439c <HAL_InitTick+0x5c>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	200000a0 	.word	0x200000a0
 8004398:	200000a8 	.word	0x200000a8
 800439c:	200000a4 	.word	0x200000a4

080043a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_IncTick+0x20>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_IncTick+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <HAL_IncTick+0x24>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	200000a8 	.word	0x200000a8
 80043c4:	20000a10 	.word	0x20000a10

080043c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return uwTick;
 80043cc:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <HAL_GetTick+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000a10 	.word	0x20000a10

080043e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff ffee 	bl	80043c8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d005      	beq.n	8004406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <HAL_Delay+0x44>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004406:	bf00      	nop
 8004408:	f7ff ffde 	bl	80043c8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d8f7      	bhi.n	8004408 <HAL_Delay+0x28>
  {
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	200000a8 	.word	0x200000a8

08004428 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e033      	b.n	80044a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fe8e 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800446e:	f023 0302 	bic.w	r3, r3, #2
 8004472:	f043 0202 	orr.w	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa2a 	bl	80048d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40
 8004496:	e001      	b.n	800449c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_Start+0x1a>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0b2      	b.n	8004630 <HAL_ADC_Start+0x180>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d018      	beq.n	8004512 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044f0:	4b52      	ldr	r3, [pc, #328]	@ (800463c <HAL_ADC_Start+0x18c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a52      	ldr	r2, [pc, #328]	@ (8004640 <HAL_ADC_Start+0x190>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0c9a      	lsrs	r2, r3, #18
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004504:	e002      	b.n	800450c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3b01      	subs	r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f9      	bne.n	8004506 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d17a      	bne.n	8004616 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800454a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455e:	d106      	bne.n	800456e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004564:	f023 0206 	bic.w	r2, r3, #6
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	645a      	str	r2, [r3, #68]	@ 0x44
 800456c:	e002      	b.n	8004574 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800457c:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_ADC_Start+0x194>)
 800457e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004588:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2b00      	cmp	r3, #0
 8004594:	d12a      	bne.n	80045ec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2b      	ldr	r2, [pc, #172]	@ (8004648 <HAL_ADC_Start+0x198>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d015      	beq.n	80045cc <HAL_ADC_Start+0x11c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a29      	ldr	r2, [pc, #164]	@ (800464c <HAL_ADC_Start+0x19c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d105      	bne.n	80045b6 <HAL_ADC_Start+0x106>
 80045aa:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <HAL_ADC_Start+0x194>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a25      	ldr	r2, [pc, #148]	@ (8004650 <HAL_ADC_Start+0x1a0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d136      	bne.n	800462e <HAL_ADC_Start+0x17e>
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_ADC_Start+0x194>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d130      	bne.n	800462e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d129      	bne.n	800462e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045e8:	609a      	str	r2, [r3, #8]
 80045ea:	e020      	b.n	800462e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a15      	ldr	r2, [pc, #84]	@ (8004648 <HAL_ADC_Start+0x198>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d11b      	bne.n	800462e <HAL_ADC_Start+0x17e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d114      	bne.n	800462e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	e00b      	b.n	800462e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f043 0210 	orr.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f043 0201 	orr.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	200000a0 	.word	0x200000a0
 8004640:	431bde83 	.word	0x431bde83
 8004644:	40012300 	.word	0x40012300
 8004648:	40012000 	.word	0x40012000
 800464c:	40012100 	.word	0x40012100
 8004650:	40012200 	.word	0x40012200

08004654 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e113      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x244>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b09      	cmp	r3, #9
 800469a:	d925      	bls.n	80046e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	3b1e      	subs	r3, #30
 80046b2:	2207      	movs	r2, #7
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43da      	mvns	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	400a      	ands	r2, r1
 80046c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68d9      	ldr	r1, [r3, #12]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4618      	mov	r0, r3
 80046d4:	4603      	mov	r3, r0
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4403      	add	r3, r0
 80046da:	3b1e      	subs	r3, #30
 80046dc:	409a      	lsls	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e022      	b.n	800472e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	2207      	movs	r2, #7
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	43da      	mvns	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	400a      	ands	r2, r1
 800470a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6919      	ldr	r1, [r3, #16]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4618      	mov	r0, r3
 800471e:	4603      	mov	r3, r0
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4403      	add	r3, r0
 8004724:	409a      	lsls	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d824      	bhi.n	8004780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b05      	subs	r3, #5
 8004748:	221f      	movs	r2, #31
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	400a      	ands	r2, r1
 8004756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	4618      	mov	r0, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	3b05      	subs	r3, #5
 8004772:	fa00 f203 	lsl.w	r2, r0, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34
 800477e:	e04c      	b.n	800481a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d824      	bhi.n	80047d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	3b23      	subs	r3, #35	@ 0x23
 800479a:	221f      	movs	r2, #31
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43da      	mvns	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	400a      	ands	r2, r1
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	3b23      	subs	r3, #35	@ 0x23
 80047c4:	fa00 f203 	lsl.w	r2, r0, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80047d0:	e023      	b.n	800481a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	3b41      	subs	r3, #65	@ 0x41
 80047e4:	221f      	movs	r2, #31
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43da      	mvns	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	400a      	ands	r2, r1
 80047f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	3b41      	subs	r3, #65	@ 0x41
 800480e:	fa00 f203 	lsl.w	r2, r0, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800481a:	4b29      	ldr	r3, [pc, #164]	@ (80048c0 <HAL_ADC_ConfigChannel+0x250>)
 800481c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_ADC_ConfigChannel+0x254>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d10f      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x1d8>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b12      	cmp	r3, #18
 800482e:	d10b      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <HAL_ADC_ConfigChannel+0x254>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d12b      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x23a>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1c      	ldr	r2, [pc, #112]	@ (80048c8 <HAL_ADC_ConfigChannel+0x258>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x1f4>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b11      	cmp	r3, #17
 8004862:	d122      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a11      	ldr	r2, [pc, #68]	@ (80048c8 <HAL_ADC_ConfigChannel+0x258>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d111      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004886:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <HAL_ADC_ConfigChannel+0x25c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a11      	ldr	r2, [pc, #68]	@ (80048d0 <HAL_ADC_ConfigChannel+0x260>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0c9a      	lsrs	r2, r3, #18
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800489c:	e002      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f9      	bne.n	800489e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40012300 	.word	0x40012300
 80048c4:	40012000 	.word	0x40012000
 80048c8:	10000012 	.word	0x10000012
 80048cc:	200000a0 	.word	0x200000a0
 80048d0:	431bde83 	.word	0x431bde83

080048d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048dc:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <ADC_Init+0x1f0>)
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	021a      	lsls	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800492c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6899      	ldr	r1, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	4a58      	ldr	r2, [pc, #352]	@ (8004ac8 <ADC_Init+0x1f4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d022      	beq.n	80049b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800497a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6899      	ldr	r1, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800499c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6899      	ldr	r1, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e00f      	b.n	80049d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0202 	bic.w	r2, r2, #2
 80049e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6899      	ldr	r1, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	7e1b      	ldrb	r3, [r3, #24]
 80049ec:	005a      	lsls	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	035a      	lsls	r2, r3, #13
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e007      	b.n	8004a48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	051a      	lsls	r2, r3, #20
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a8a:	025a      	lsls	r2, r3, #9
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	029a      	lsls	r2, r3, #10
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012300 	.word	0x40012300
 8004ac8:	0f000001 	.word	0x0f000001

08004acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004adc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afe:	4a04      	ldr	r2, [pc, #16]	@ (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	60d3      	str	r3, [r2, #12]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b18:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <__NVIC_GetPriorityGrouping+0x18>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f003 0307 	and.w	r3, r3, #7
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db0b      	blt.n	8004b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	f003 021f 	and.w	r2, r3, #31
 8004b48:	4907      	ldr	r1, [pc, #28]	@ (8004b68 <__NVIC_EnableIRQ+0x38>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2001      	movs	r0, #1
 8004b52:	fa00 f202 	lsl.w	r2, r0, r2
 8004b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000e100 	.word	0xe000e100

08004b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0a      	blt.n	8004b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	490c      	ldr	r1, [pc, #48]	@ (8004bb8 <__NVIC_SetPriority+0x4c>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b94:	e00a      	b.n	8004bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4908      	ldr	r1, [pc, #32]	@ (8004bbc <__NVIC_SetPriority+0x50>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	0112      	lsls	r2, r2, #4
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	761a      	strb	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f1c3 0307 	rsb	r3, r3, #7
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf28      	it	cs
 8004bde:	2304      	movcs	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3304      	adds	r3, #4
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d902      	bls.n	8004bf0 <NVIC_EncodePriority+0x30>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3b03      	subs	r3, #3
 8004bee:	e000      	b.n	8004bf2 <NVIC_EncodePriority+0x32>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c08:	f04f 31ff 	mov.w	r1, #4294967295
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43d9      	mvns	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	4313      	orrs	r3, r2
         );
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	@ 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c38:	d301      	bcc.n	8004c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e00f      	b.n	8004c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c68 <SysTick_Config+0x40>)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c46:	210f      	movs	r1, #15
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	f7ff ff8e 	bl	8004b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c50:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <SysTick_Config+0x40>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c56:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <SysTick_Config+0x40>)
 8004c58:	2207      	movs	r2, #7
 8004c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	e000e010 	.word	0xe000e010

08004c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff29 	bl	8004acc <__NVIC_SetPriorityGrouping>
}
 8004c7a:	bf00      	nop
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	4603      	mov	r3, r0
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
 8004c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c94:	f7ff ff3e 	bl	8004b14 <__NVIC_GetPriorityGrouping>
 8004c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	6978      	ldr	r0, [r7, #20]
 8004ca0:	f7ff ff8e 	bl	8004bc0 <NVIC_EncodePriority>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff ff5d 	bl	8004b6c <__NVIC_SetPriority>
}
 8004cb2:	bf00      	nop
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff31 	bl	8004b30 <__NVIC_EnableIRQ>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff ffa2 	bl	8004c28 <SysTick_Config>
 8004ce4:	4603      	mov	r3, r0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004cfc:	f7ff fb64 	bl	80043c8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e099      	b.n	8004e40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d2c:	e00f      	b.n	8004d4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d2e:	f7ff fb4b 	bl	80043c8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d908      	bls.n	8004d4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2203      	movs	r2, #3
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e078      	b.n	8004e40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e8      	bne.n	8004d2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4b38      	ldr	r3, [pc, #224]	@ (8004e48 <HAL_DMA_Init+0x158>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d107      	bne.n	8004db8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db0:	4313      	orrs	r3, r2
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d117      	bne.n	8004e12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fa9d 	bl	8005334 <DMA_CheckFifoParam>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e016      	b.n	8004e40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa54 	bl	80052c8 <DMA_CalcBaseAndBitshift>
 8004e20:	4603      	mov	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e28:	223f      	movs	r2, #63	@ 0x3f
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	f010803f 	.word	0xf010803f

08004e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_DMA_Start_IT+0x26>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e040      	b.n	8004ef4 <HAL_DMA_Start_IT+0xa8>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d12f      	bne.n	8004ee6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f9e6 	bl	800526c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea4:	223f      	movs	r2, #63	@ 0x3f
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0216 	orr.w	r2, r2, #22
 8004eba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0208 	orr.w	r2, r2, #8
 8004ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e005      	b.n	8004ef2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d004      	beq.n	8004f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2280      	movs	r2, #128	@ 0x80
 8004f14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00c      	b.n	8004f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2205      	movs	r2, #5
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8005188 <HAL_DMA_IRQHandler+0x248>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a8e      	ldr	r2, [pc, #568]	@ (800518c <HAL_DMA_IRQHandler+0x24c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0a9b      	lsrs	r3, r3, #10
 8004f58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01a      	beq.n	8004fac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	2208      	movs	r2, #8
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d012      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	2201      	movs	r2, #1
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f043 0202 	orr.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	2204      	movs	r2, #4
 8005006:	409a      	lsls	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	f043 0204 	orr.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	2210      	movs	r2, #16
 800501e:	409a      	lsls	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d043      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03c      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503a:	2210      	movs	r2, #16
 800503c:	409a      	lsls	r2, r3
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d018      	beq.n	8005082 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d024      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
 800506e:	e01f      	b.n	80050b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01b      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
 8005080:	e016      	b.n	80050b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d107      	bne.n	80050a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0208 	bic.w	r2, r2, #8
 800509e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b4:	2220      	movs	r2, #32
 80050b6:	409a      	lsls	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 808f 	beq.w	80051e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8087 	beq.w	80051e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	2220      	movs	r2, #32
 80050d8:	409a      	lsls	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b05      	cmp	r3, #5
 80050e8:	d136      	bne.n	8005158 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0216 	bic.w	r2, r2, #22
 80050f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005108:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <HAL_DMA_IRQHandler+0x1da>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0208 	bic.w	r2, r2, #8
 8005128:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	223f      	movs	r2, #63	@ 0x3f
 8005130:	409a      	lsls	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d07e      	beq.n	800524c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
        }
        return;
 8005156:	e079      	b.n	800524c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01d      	beq.n	80051a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	2b00      	cmp	r3, #0
 800517a:	d031      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
 8005184:	e02c      	b.n	80051e0 <HAL_DMA_IRQHandler+0x2a0>
 8005186:	bf00      	nop
 8005188:	200000a0 	.word	0x200000a0
 800518c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d023      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	4798      	blx	r3
 80051a0:	e01e      	b.n	80051e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0210 	bic.w	r2, r2, #16
 80051be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d032      	beq.n	800524e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d022      	beq.n	800523a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2205      	movs	r2, #5
 80051f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	3301      	adds	r3, #1
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	429a      	cmp	r2, r3
 8005216:	d307      	bcc.n	8005228 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f2      	bne.n	800520c <HAL_DMA_IRQHandler+0x2cc>
 8005226:	e000      	b.n	800522a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005228:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
 800524a:	e000      	b.n	800524e <HAL_DMA_IRQHandler+0x30e>
        return;
 800524c:	bf00      	nop
    }
  }
}
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b40      	cmp	r3, #64	@ 0x40
 8005298:	d108      	bne.n	80052ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052aa:	e007      	b.n	80052bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3b10      	subs	r3, #16
 80052d8:	4a14      	ldr	r2, [pc, #80]	@ (800532c <DMA_CalcBaseAndBitshift+0x64>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052e2:	4a13      	ldr	r2, [pc, #76]	@ (8005330 <DMA_CalcBaseAndBitshift+0x68>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d909      	bls.n	800530a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	659a      	str	r2, [r3, #88]	@ 0x58
 8005308:	e007      	b.n	800531a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	aaaaaaab 	.word	0xaaaaaaab
 8005330:	0800dd70 	.word	0x0800dd70

08005334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d11f      	bne.n	800538e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d856      	bhi.n	8005402 <DMA_CheckFifoParam+0xce>
 8005354:	a201      	add	r2, pc, #4	@ (adr r2, 800535c <DMA_CheckFifoParam+0x28>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800537f 	.word	0x0800537f
 8005364:	0800536d 	.word	0x0800536d
 8005368:	08005403 	.word	0x08005403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d046      	beq.n	8005406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800537c:	e043      	b.n	8005406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005386:	d140      	bne.n	800540a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538c:	e03d      	b.n	800540a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005396:	d121      	bne.n	80053dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d837      	bhi.n	800540e <DMA_CheckFifoParam+0xda>
 800539e:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <DMA_CheckFifoParam+0x70>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053bb 	.word	0x080053bb
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	080053cd 	.word	0x080053cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e030      	b.n	800541c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d025      	beq.n	8005412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ca:	e022      	b.n	8005412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053d4:	d11f      	bne.n	8005416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053da:	e01c      	b.n	8005416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d903      	bls.n	80053ea <DMA_CheckFifoParam+0xb6>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d003      	beq.n	80053f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053e8:	e018      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
      break;
 80053ee:	e015      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e00b      	b.n	800541a <DMA_CheckFifoParam+0xe6>
      break;
 8005402:	bf00      	nop
 8005404:	e00a      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 8005406:	bf00      	nop
 8005408:	e008      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800540a:	bf00      	nop
 800540c:	e006      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800540e:	bf00      	nop
 8005410:	e004      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;   
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800541a:	bf00      	nop
    }
  } 
  
  return status; 
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800542c:	b480      	push	{r7}
 800542e:	b089      	sub	sp, #36	@ 0x24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800543e:	2300      	movs	r3, #0
 8005440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	e165      	b.n	8005714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005448:	2201      	movs	r2, #1
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	429a      	cmp	r2, r3
 8005462:	f040 8154 	bne.w	800570e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d005      	beq.n	800547e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800547a:	2b02      	cmp	r3, #2
 800547c:	d130      	bne.n	80054e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	2203      	movs	r2, #3
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054b4:	2201      	movs	r2, #1
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	43db      	mvns	r3, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 0201 	and.w	r2, r3, #1
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d017      	beq.n	800551c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	2203      	movs	r2, #3
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d123      	bne.n	8005570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	08da      	lsrs	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3208      	adds	r2, #8
 8005530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	220f      	movs	r2, #15
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4313      	orrs	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	08da      	lsrs	r2, r3, #3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3208      	adds	r2, #8
 800556a:	69b9      	ldr	r1, [r7, #24]
 800556c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	2203      	movs	r2, #3
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 0203 	and.w	r2, r3, #3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4313      	orrs	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80ae 	beq.w	800570e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	4b5d      	ldr	r3, [pc, #372]	@ (800572c <HAL_GPIO_Init+0x300>)
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	4a5c      	ldr	r2, [pc, #368]	@ (800572c <HAL_GPIO_Init+0x300>)
 80055bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80055c2:	4b5a      	ldr	r3, [pc, #360]	@ (800572c <HAL_GPIO_Init+0x300>)
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ce:	4a58      	ldr	r2, [pc, #352]	@ (8005730 <HAL_GPIO_Init+0x304>)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	3302      	adds	r3, #2
 80055d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	220f      	movs	r2, #15
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005734 <HAL_GPIO_Init+0x308>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d025      	beq.n	8005646 <HAL_GPIO_Init+0x21a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a4e      	ldr	r2, [pc, #312]	@ (8005738 <HAL_GPIO_Init+0x30c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d01f      	beq.n	8005642 <HAL_GPIO_Init+0x216>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a4d      	ldr	r2, [pc, #308]	@ (800573c <HAL_GPIO_Init+0x310>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d019      	beq.n	800563e <HAL_GPIO_Init+0x212>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a4c      	ldr	r2, [pc, #304]	@ (8005740 <HAL_GPIO_Init+0x314>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d013      	beq.n	800563a <HAL_GPIO_Init+0x20e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a4b      	ldr	r2, [pc, #300]	@ (8005744 <HAL_GPIO_Init+0x318>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00d      	beq.n	8005636 <HAL_GPIO_Init+0x20a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a4a      	ldr	r2, [pc, #296]	@ (8005748 <HAL_GPIO_Init+0x31c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <HAL_GPIO_Init+0x206>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a49      	ldr	r2, [pc, #292]	@ (800574c <HAL_GPIO_Init+0x320>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d101      	bne.n	800562e <HAL_GPIO_Init+0x202>
 800562a:	2306      	movs	r3, #6
 800562c:	e00c      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 800562e:	2307      	movs	r3, #7
 8005630:	e00a      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 8005632:	2305      	movs	r3, #5
 8005634:	e008      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 8005636:	2304      	movs	r3, #4
 8005638:	e006      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 800563a:	2303      	movs	r3, #3
 800563c:	e004      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 800563e:	2302      	movs	r3, #2
 8005640:	e002      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_GPIO_Init+0x21c>
 8005646:	2300      	movs	r3, #0
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	f002 0203 	and.w	r2, r2, #3
 800564e:	0092      	lsls	r2, r2, #2
 8005650:	4093      	lsls	r3, r2
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005658:	4935      	ldr	r1, [pc, #212]	@ (8005730 <HAL_GPIO_Init+0x304>)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	089b      	lsrs	r3, r3, #2
 800565e:	3302      	adds	r3, #2
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005666:	4b3a      	ldr	r3, [pc, #232]	@ (8005750 <HAL_GPIO_Init+0x324>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800568a:	4a31      	ldr	r2, [pc, #196]	@ (8005750 <HAL_GPIO_Init+0x324>)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005690:	4b2f      	ldr	r3, [pc, #188]	@ (8005750 <HAL_GPIO_Init+0x324>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056b4:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <HAL_GPIO_Init+0x324>)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056ba:	4b25      	ldr	r3, [pc, #148]	@ (8005750 <HAL_GPIO_Init+0x324>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056de:	4a1c      	ldr	r2, [pc, #112]	@ (8005750 <HAL_GPIO_Init+0x324>)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005750 <HAL_GPIO_Init+0x324>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005708:	4a11      	ldr	r2, [pc, #68]	@ (8005750 <HAL_GPIO_Init+0x324>)
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	3301      	adds	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	f67f ae96 	bls.w	8005448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3724      	adds	r7, #36	@ 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800
 8005730:	40013800 	.word	0x40013800
 8005734:	40020000 	.word	0x40020000
 8005738:	40020400 	.word	0x40020400
 800573c:	40020800 	.word	0x40020800
 8005740:	40020c00 	.word	0x40020c00
 8005744:	40021000 	.word	0x40021000
 8005748:	40021400 	.word	0x40021400
 800574c:	40021800 	.word	0x40021800
 8005750:	40013c00 	.word	0x40013c00

08005754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	887b      	ldrh	r3, [r7, #2]
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e001      	b.n	8005776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005772:	2300      	movs	r3, #0
 8005774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
 8005790:	4613      	mov	r3, r2
 8005792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005794:	787b      	ldrb	r3, [r7, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057a0:	e003      	b.n	80057aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	041a      	lsls	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	619a      	str	r2, [r3, #24]
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057c8:	887a      	ldrh	r2, [r7, #2]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4013      	ands	r3, r2
 80057ce:	041a      	lsls	r2, r3, #16
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	43d9      	mvns	r1, r3
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	400b      	ands	r3, r1
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057f6:	4b08      	ldr	r3, [pc, #32]	@ (8005818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d006      	beq.n	8005810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005802:	4a05      	ldr	r2, [pc, #20]	@ (8005818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fc fe8a 	bl	8002524 <HAL_GPIO_EXTI_Callback>
  }
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40013c00 	.word	0x40013c00

0800581c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e12b      	b.n	8005a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fb7c 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	@ 0x24
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800586e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800587e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005880:	f001 fe64 	bl	800754c <HAL_RCC_GetPCLK1Freq>
 8005884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4a81      	ldr	r2, [pc, #516]	@ (8005a90 <HAL_I2C_Init+0x274>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d807      	bhi.n	80058a0 <HAL_I2C_Init+0x84>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a80      	ldr	r2, [pc, #512]	@ (8005a94 <HAL_I2C_Init+0x278>)
 8005894:	4293      	cmp	r3, r2
 8005896:	bf94      	ite	ls
 8005898:	2301      	movls	r3, #1
 800589a:	2300      	movhi	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e006      	b.n	80058ae <HAL_I2C_Init+0x92>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005a98 <HAL_I2C_Init+0x27c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bf94      	ite	ls
 80058a8:	2301      	movls	r3, #1
 80058aa:	2300      	movhi	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0e7      	b.n	8005a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a78      	ldr	r2, [pc, #480]	@ (8005a9c <HAL_I2C_Init+0x280>)
 80058ba:	fba2 2303 	umull	r2, r3, r2, r3
 80058be:	0c9b      	lsrs	r3, r3, #18
 80058c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005a90 <HAL_I2C_Init+0x274>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d802      	bhi.n	80058f0 <HAL_I2C_Init+0xd4>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	3301      	adds	r3, #1
 80058ee:	e009      	b.n	8005904 <HAL_I2C_Init+0xe8>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	4a69      	ldr	r2, [pc, #420]	@ (8005aa0 <HAL_I2C_Init+0x284>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	099b      	lsrs	r3, r3, #6
 8005902:	3301      	adds	r3, #1
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	430b      	orrs	r3, r1
 800590a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005916:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	495c      	ldr	r1, [pc, #368]	@ (8005a90 <HAL_I2C_Init+0x274>)
 8005920:	428b      	cmp	r3, r1
 8005922:	d819      	bhi.n	8005958 <HAL_I2C_Init+0x13c>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1e59      	subs	r1, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005938:	400b      	ands	r3, r1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_I2C_Init+0x138>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1e59      	subs	r1, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	fbb1 f3f3 	udiv	r3, r1, r3
 800594c:	3301      	adds	r3, #1
 800594e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005952:	e051      	b.n	80059f8 <HAL_I2C_Init+0x1dc>
 8005954:	2304      	movs	r3, #4
 8005956:	e04f      	b.n	80059f8 <HAL_I2C_Init+0x1dc>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d111      	bne.n	8005984 <HAL_I2C_Init+0x168>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1e58      	subs	r0, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6859      	ldr	r1, [r3, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	440b      	add	r3, r1
 800596e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005972:	3301      	adds	r3, #1
 8005974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e012      	b.n	80059aa <HAL_I2C_Init+0x18e>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	1e58      	subs	r0, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	0099      	lsls	r1, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	fbb0 f3f3 	udiv	r3, r0, r3
 800599a:	3301      	adds	r3, #1
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_I2C_Init+0x196>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e022      	b.n	80059f8 <HAL_I2C_Init+0x1dc>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10e      	bne.n	80059d8 <HAL_I2C_Init+0x1bc>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1e58      	subs	r0, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	440b      	add	r3, r1
 80059c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80059cc:	3301      	adds	r3, #1
 80059ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d6:	e00f      	b.n	80059f8 <HAL_I2C_Init+0x1dc>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1e58      	subs	r0, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	0099      	lsls	r1, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	6809      	ldr	r1, [r1, #0]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6911      	ldr	r1, [r2, #16]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	68d2      	ldr	r2, [r2, #12]
 8005a32:	4311      	orrs	r1, r2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695a      	ldr	r2, [r3, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	000186a0 	.word	0x000186a0
 8005a94:	001e847f 	.word	0x001e847f
 8005a98:	003d08ff 	.word	0x003d08ff
 8005a9c:	431bde83 	.word	0x431bde83
 8005aa0:	10624dd3 	.word	0x10624dd3

08005aa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	817b      	strh	r3, [r7, #10]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ab8:	f7fe fc86 	bl	80043c8 <HAL_GetTick>
 8005abc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	f040 80e0 	bne.w	8005c8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2319      	movs	r3, #25
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4970      	ldr	r1, [pc, #448]	@ (8005c98 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 fa10 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e0d3      	b.n	8005c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_I2C_Master_Transmit+0x50>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0cc      	b.n	8005c8e <HAL_I2C_Master_Transmit+0x1ea>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d007      	beq.n	8005b1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2221      	movs	r2, #33	@ 0x21
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2210      	movs	r2, #16
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	893a      	ldrh	r2, [r7, #8]
 8005b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a50      	ldr	r2, [pc, #320]	@ (8005c9c <HAL_I2C_Master_Transmit+0x1f8>)
 8005b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b5c:	8979      	ldrh	r1, [r7, #10]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 feae 	bl	80068c4 <I2C_MasterRequestWrite>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e08d      	b.n	8005c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b88:	e066      	b.n	8005c58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	6a39      	ldr	r1, [r7, #32]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f001 face 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d107      	bne.n	8005bb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e06b      	b.n	8005c8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d11b      	bne.n	8005c2c <HAL_I2C_Master_Transmit+0x188>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	6a39      	ldr	r1, [r7, #32]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f001 fac5 	bl	80071c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d107      	bne.n	8005c54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e01a      	b.n	8005c8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d194      	bne.n	8005b8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	00100002 	.word	0x00100002
 8005c9c:	ffff0000 	.word	0xffff0000

08005ca0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	817b      	strh	r3, [r7, #10]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	813b      	strh	r3, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cba:	f7fe fb85 	bl	80043c8 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	f040 80d9 	bne.w	8005e80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	2319      	movs	r3, #25
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	496d      	ldr	r1, [pc, #436]	@ (8005e8c <HAL_I2C_Mem_Write+0x1ec>)
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f001 f90f 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e0cc      	b.n	8005e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_I2C_Mem_Write+0x56>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e0c5      	b.n	8005e82 <HAL_I2C_Mem_Write+0x1e2>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d007      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2221      	movs	r2, #33	@ 0x21
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e90 <HAL_I2C_Mem_Write+0x1f0>)
 8005d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d5e:	88f8      	ldrh	r0, [r7, #6]
 8005d60:	893a      	ldrh	r2, [r7, #8]
 8005d62:	8979      	ldrh	r1, [r7, #10]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fe2a 	bl	80069c8 <I2C_RequestMemoryWrite>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d052      	beq.n	8005e20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e081      	b.n	8005e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f001 f9d4 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d107      	bne.n	8005da6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e06b      	b.n	8005e82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	781a      	ldrb	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d11b      	bne.n	8005e20 <HAL_I2C_Mem_Write+0x180>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d017      	beq.n	8005e20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1aa      	bne.n	8005d7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f001 f9c7 	bl	80071c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d107      	bne.n	8005e50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e016      	b.n	8005e82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e000      	b.n	8005e82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	00100002 	.word	0x00100002
 8005e90:	ffff0000 	.word	0xffff0000

08005e94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	@ 0x30
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	817b      	strh	r3, [r7, #10]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	813b      	strh	r3, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eae:	f7fe fa8b 	bl	80043c8 <HAL_GetTick>
 8005eb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	f040 8214 	bne.w	80062ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	2319      	movs	r3, #25
 8005ec8:	2201      	movs	r2, #1
 8005eca:	497b      	ldr	r1, [pc, #492]	@ (80060b8 <HAL_I2C_Mem_Read+0x224>)
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f001 f815 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e207      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_I2C_Mem_Read+0x56>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e200      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d007      	beq.n	8005f10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2222      	movs	r2, #34	@ 0x22
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2240      	movs	r2, #64	@ 0x40
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80060bc <HAL_I2C_Mem_Read+0x228>)
 8005f50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f52:	88f8      	ldrh	r0, [r7, #6]
 8005f54:	893a      	ldrh	r2, [r7, #8]
 8005f56:	8979      	ldrh	r1, [r7, #10]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	4603      	mov	r3, r0
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fdc6 	bl	8006af4 <I2C_RequestMemoryRead>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e1bc      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d113      	bne.n	8005fa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	623b      	str	r3, [r7, #32]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e190      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e170      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d11b      	bne.n	8006022 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	e150      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006038:	e144      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603e:	2b03      	cmp	r3, #3
 8006040:	f200 80f1 	bhi.w	8006226 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006048:	2b01      	cmp	r3, #1
 800604a:	d123      	bne.n	8006094 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f001 f8fd 	bl	8007250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e145      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006092:	e117      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006098:	2b02      	cmp	r3, #2
 800609a:	d14e      	bne.n	800613a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2200      	movs	r2, #0
 80060a4:	4906      	ldr	r1, [pc, #24]	@ (80060c0 <HAL_I2C_Mem_Read+0x22c>)
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 ff28 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e11a      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
 80060b6:	bf00      	nop
 80060b8:	00100002 	.word	0x00100002
 80060bc:	ffff0000 	.word	0xffff0000
 80060c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006138:	e0c4      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	2200      	movs	r2, #0
 8006142:	496c      	ldr	r1, [pc, #432]	@ (80062f4 <HAL_I2C_Mem_Read+0x460>)
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fed9 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0cb      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619c:	2200      	movs	r2, #0
 800619e:	4955      	ldr	r1, [pc, #340]	@ (80062f4 <HAL_I2C_Mem_Read+0x460>)
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 feab 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e09d      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691a      	ldr	r2, [r3, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006224:	e04e      	b.n	80062c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006228:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 f810 	bl	8007250 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e058      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b04      	cmp	r3, #4
 8006278:	d124      	bne.n	80062c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627e:	2b03      	cmp	r3, #3
 8006280:	d107      	bne.n	8006292 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006290:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691a      	ldr	r2, [r3, #16]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f47f aeb6 	bne.w	800603a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e000      	b.n	80062ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3728      	adds	r7, #40	@ 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	00010004 	.word	0x00010004

080062f8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08c      	sub	sp, #48	@ 0x30
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	461a      	mov	r2, r3
 8006306:	4603      	mov	r3, r0
 8006308:	817b      	strh	r3, [r7, #10]
 800630a:	460b      	mov	r3, r1
 800630c:	813b      	strh	r3, [r7, #8]
 800630e:	4613      	mov	r3, r2
 8006310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006312:	f7fe f859 	bl	80043c8 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b20      	cmp	r3, #32
 8006326:	f040 8172 	bne.w	800660e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800632a:	4b93      	ldr	r3, [pc, #588]	@ (8006578 <HAL_I2C_Mem_Read_DMA+0x280>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	4a92      	ldr	r2, [pc, #584]	@ (800657c <HAL_I2C_Mem_Read_DMA+0x284>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0a1a      	lsrs	r2, r3, #8
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009a      	lsls	r2, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3b01      	subs	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d112      	bne.n	8006376 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006372:	2302      	movs	r3, #2
 8006374:	e14c      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b02      	cmp	r3, #2
 8006382:	d0df      	beq.n	8006344 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <HAL_I2C_Mem_Read_DMA+0x9a>
 800638e:	2302      	movs	r3, #2
 8006390:	e13e      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d007      	beq.n	80063b8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2222      	movs	r2, #34	@ 0x22
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80063e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a62      	ldr	r2, [pc, #392]	@ (8006580 <HAL_I2C_Mem_Read_DMA+0x288>)
 80063f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80063fa:	897a      	ldrh	r2, [r7, #10]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006400:	893a      	ldrh	r2, [r7, #8]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 80cc 	beq.w	80065b4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d02d      	beq.n	8006480 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	4a56      	ldr	r2, [pc, #344]	@ (8006584 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800642a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	4a55      	ldr	r2, [pc, #340]	@ (8006588 <HAL_I2C_Mem_Read_DMA+0x290>)
 8006432:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	2200      	movs	r2, #0
 800643a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	2200      	movs	r2, #0
 8006442:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	2200      	movs	r2, #0
 800644a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	2200      	movs	r2, #0
 8006452:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3310      	adds	r3, #16
 800645e:	4619      	mov	r1, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006464:	461a      	mov	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646a:	f7fe fcef 	bl	8004e4c <HAL_DMA_Start_IT>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 8087 	bne.w	800658c <HAL_I2C_Mem_Read_DMA+0x294>
 800647e:	e013      	b.n	80064a8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b3      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80064a8:	88f8      	ldrh	r0, [r7, #6]
 80064aa:	893a      	ldrh	r2, [r7, #8]
 80064ac:	8979      	ldrh	r1, [r7, #10]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	2323      	movs	r3, #35	@ 0x23
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4603      	mov	r3, r0
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fb1b 	bl	8006af4 <I2C_RequestMemoryRead>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d023      	beq.n	800650c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fd17 	bl	8004efc <HAL_DMA_Abort_IT>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	2200      	movs	r2, #0
 80064da:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e081      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	2b01      	cmp	r3, #1
 8006512:	d108      	bne.n	8006526 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e007      	b.n	8006536 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006534:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006536:	2300      	movs	r3, #0
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006562:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	e049      	b.n	800660a <HAL_I2C_Mem_Read_DMA+0x312>
 8006576:	bf00      	nop
 8006578:	200000a0 	.word	0x200000a0
 800657c:	14f8b589 	.word	0x14f8b589
 8006580:	ffff0000 	.word	0xffff0000
 8006584:	08006cc5 	.word	0x08006cc5
 8006588:	08006e83 	.word	0x08006e83
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	f043 0210 	orr.w	r2, r3, #16
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e02d      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80065b4:	88f8      	ldrh	r0, [r7, #6]
 80065b6:	893a      	ldrh	r2, [r7, #8]
 80065b8:	8979      	ldrh	r1, [r7, #10]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	2323      	movs	r3, #35	@ 0x23
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	4603      	mov	r3, r0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fa95 	bl	8006af4 <I2C_RequestMemoryRead>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e01d      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	e000      	b.n	8006610 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3728      	adds	r7, #40	@ 0x28
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	@ 0x28
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	460b      	mov	r3, r1
 8006626:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006628:	f7fd fece 	bl	80043c8 <HAL_GetTick>
 800662c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b20      	cmp	r3, #32
 800663c:	f040 8111 	bne.w	8006862 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2319      	movs	r3, #25
 8006646:	2201      	movs	r2, #1
 8006648:	4988      	ldr	r1, [pc, #544]	@ (800686c <HAL_I2C_IsDeviceReady+0x254>)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fc56 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	e104      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_I2C_IsDeviceReady+0x50>
 8006664:	2302      	movs	r3, #2
 8006666:	e0fd      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d007      	beq.n	800668e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800669c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2224      	movs	r2, #36	@ 0x24
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4a70      	ldr	r2, [pc, #448]	@ (8006870 <HAL_I2C_IsDeviceReady+0x258>)
 80066b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fc14 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e8:	d103      	bne.n	80066f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e0b6      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066f6:	897b      	ldrh	r3, [r7, #10]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006704:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006706:	f7fd fe5f 	bl	80043c8 <HAL_GetTick>
 800670a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	bf0c      	ite	eq
 800671a:	2301      	moveq	r3, #1
 800671c:	2300      	movne	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800673a:	e025      	b.n	8006788 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800673c:	f7fd fe44 	bl	80043c8 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d302      	bcc.n	8006752 <HAL_I2C_IsDeviceReady+0x13a>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	22a0      	movs	r2, #160	@ 0xa0
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	bf0c      	ite	eq
 8006768:	2301      	moveq	r3, #1
 800676a:	2300      	movne	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800677a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2ba0      	cmp	r3, #160	@ 0xa0
 8006792:	d005      	beq.n	80067a0 <HAL_I2C_IsDeviceReady+0x188>
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <HAL_I2C_IsDeviceReady+0x188>
 800679a:	7dbb      	ldrb	r3, [r7, #22]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0cd      	beq.n	800673c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d129      	bne.n	800680a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2319      	movs	r3, #25
 80067e2:	2201      	movs	r2, #1
 80067e4:	4921      	ldr	r1, [pc, #132]	@ (800686c <HAL_I2C_IsDeviceReady+0x254>)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fb88 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e036      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e02c      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006818:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006822:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2319      	movs	r3, #25
 800682a:	2201      	movs	r2, #1
 800682c:	490f      	ldr	r1, [pc, #60]	@ (800686c <HAL_I2C_IsDeviceReady+0x254>)
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fb64 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e012      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	3301      	adds	r3, #1
 8006842:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	429a      	cmp	r2, r3
 800684a:	f4ff af32 	bcc.w	80066b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006862:	2302      	movs	r3, #2
  }
}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	00100002 	.word	0x00100002
 8006870:	ffff0000 	.word	0xffff0000

08006874 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	460b      	mov	r3, r1
 80068d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d006      	beq.n	80068ee <I2C_MasterRequestWrite+0x2a>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d003      	beq.n	80068ee <I2C_MasterRequestWrite+0x2a>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068ec:	d108      	bne.n	8006900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e00b      	b.n	8006918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006904:	2b12      	cmp	r3, #18
 8006906:	d107      	bne.n	8006918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fae9 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00d      	beq.n	800694c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693e:	d103      	bne.n	8006948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e035      	b.n	80069b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006954:	d108      	bne.n	8006968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006956:	897b      	ldrh	r3, [r7, #10]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006964:	611a      	str	r2, [r3, #16]
 8006966:	e01b      	b.n	80069a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006968:	897b      	ldrh	r3, [r7, #10]
 800696a:	11db      	asrs	r3, r3, #7
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0306 	and.w	r3, r3, #6
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f063 030f 	orn	r3, r3, #15
 8006978:	b2da      	uxtb	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	490e      	ldr	r1, [pc, #56]	@ (80069c0 <I2C_MasterRequestWrite+0xfc>)
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fb32 	bl	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e010      	b.n	80069b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006996:	897b      	ldrh	r3, [r7, #10]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4907      	ldr	r1, [pc, #28]	@ (80069c4 <I2C_MasterRequestWrite+0x100>)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fb22 	bl	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	00010008 	.word	0x00010008
 80069c4:	00010002 	.word	0x00010002

080069c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	817b      	strh	r3, [r7, #10]
 80069da:	460b      	mov	r3, r1
 80069dc:	813b      	strh	r3, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fa7c 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a18:	d103      	bne.n	8006a22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e05f      	b.n	8006ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a26:	897b      	ldrh	r3, [r7, #10]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	492d      	ldr	r1, [pc, #180]	@ (8006af0 <I2C_RequestMemoryWrite+0x128>)
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fad7 	bl	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e04c      	b.n	8006ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a64:	6a39      	ldr	r1, [r7, #32]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fb62 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d107      	bne.n	8006a8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e02b      	b.n	8006ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a8e:	88fb      	ldrh	r3, [r7, #6]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d105      	bne.n	8006aa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a94:	893b      	ldrh	r3, [r7, #8]
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	e021      	b.n	8006ae4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006aa0:	893b      	ldrh	r3, [r7, #8]
 8006aa2:	0a1b      	lsrs	r3, r3, #8
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab0:	6a39      	ldr	r1, [r7, #32]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fb3c 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d107      	bne.n	8006ad6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e005      	b.n	8006ae6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ada:	893b      	ldrh	r3, [r7, #8]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	00010002 	.word	0x00010002

08006af4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	4608      	mov	r0, r1
 8006afe:	4611      	mov	r1, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	817b      	strh	r3, [r7, #10]
 8006b06:	460b      	mov	r3, r1
 8006b08:	813b      	strh	r3, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f9de 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b54:	d103      	bne.n	8006b5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e0aa      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b62:	897b      	ldrh	r3, [r7, #10]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	6a3a      	ldr	r2, [r7, #32]
 8006b76:	4952      	ldr	r1, [pc, #328]	@ (8006cc0 <I2C_RequestMemoryRead+0x1cc>)
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fa39 	bl	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e097      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	617b      	str	r3, [r7, #20]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba0:	6a39      	ldr	r1, [r7, #32]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fac4 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00d      	beq.n	8006bca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d107      	bne.n	8006bc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e076      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d105      	bne.n	8006bdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd0:	893b      	ldrh	r3, [r7, #8]
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	611a      	str	r2, [r3, #16]
 8006bda:	e021      	b.n	8006c20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bdc:	893b      	ldrh	r3, [r7, #8]
 8006bde:	0a1b      	lsrs	r3, r3, #8
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bec:	6a39      	ldr	r1, [r7, #32]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fa9e 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00d      	beq.n	8006c16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d107      	bne.n	8006c12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e050      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c16:	893b      	ldrh	r3, [r7, #8]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c22:	6a39      	ldr	r1, [r7, #32]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fa83 	bl	8007130 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d107      	bne.n	8006c48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e035      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f947 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c82:	d103      	bne.n	8006c8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e013      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c90:	897b      	ldrh	r3, [r7, #10]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	6a3a      	ldr	r2, [r7, #32]
 8006ca4:	4906      	ldr	r1, [pc, #24]	@ (8006cc0 <I2C_RequestMemoryRead+0x1cc>)
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f9a2 	bl	8006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	00010002 	.word	0x00010002

08006cc4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ce0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006cf6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d04:	2200      	movs	r2, #0
 8006d06:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	2200      	movs	r2, #0
 8006d16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006d18:	7cfb      	ldrb	r3, [r7, #19]
 8006d1a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006d1e:	2b21      	cmp	r3, #33	@ 0x21
 8006d20:	d007      	beq.n	8006d32 <I2C_DMAXferCplt+0x6e>
 8006d22:	7cfb      	ldrb	r3, [r7, #19]
 8006d24:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006d28:	2b22      	cmp	r3, #34	@ 0x22
 8006d2a:	d131      	bne.n	8006d90 <I2C_DMAXferCplt+0xcc>
 8006d2c:	7cbb      	ldrb	r3, [r7, #18]
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d12e      	bne.n	8006d90 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d40:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006d48:	7cfb      	ldrb	r3, [r7, #19]
 8006d4a:	2b29      	cmp	r3, #41	@ 0x29
 8006d4c:	d10a      	bne.n	8006d64 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2221      	movs	r2, #33	@ 0x21
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2228      	movs	r2, #40	@ 0x28
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d5c:	6978      	ldr	r0, [r7, #20]
 8006d5e:	f7ff fd93 	bl	8006888 <HAL_I2C_SlaveTxCpltCallback>
 8006d62:	e00c      	b.n	8006d7e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d68:	d109      	bne.n	8006d7e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2222      	movs	r2, #34	@ 0x22
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2228      	movs	r2, #40	@ 0x28
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d78:	6978      	ldr	r0, [r7, #20]
 8006d7a:	f7ff fd8f 	bl	800689c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d8c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d8e:	e074      	b.n	8006e7a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d06e      	beq.n	8006e7a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d107      	bne.n	8006db6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006db4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006dc4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dcc:	d009      	beq.n	8006de2 <I2C_DMAXferCplt+0x11e>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d006      	beq.n	8006de2 <I2C_DMAXferCplt+0x11e>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006dda:	d002      	beq.n	8006de2 <I2C_DMAXferCplt+0x11e>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d107      	bne.n	8006df2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e00:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e10:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006e20:	6978      	ldr	r0, [r7, #20]
 8006e22:	f7ff fd45 	bl	80068b0 <HAL_I2C_ErrorCallback>
}
 8006e26:	e028      	b.n	8006e7a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	d10a      	bne.n	8006e52 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2200      	movs	r2, #0
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006e4a:	6978      	ldr	r0, [r7, #20]
 8006e4c:	f7fb fb8e 	bl	800256c <HAL_I2C_MemRxCpltCallback>
}
 8006e50:	e013      	b.n	8006e7a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d002      	beq.n	8006e66 <I2C_DMAXferCplt+0x1a2>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d103      	bne.n	8006e6e <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e6c:	e002      	b.n	8006e74 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2212      	movs	r2, #18
 8006e72:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e74:	6978      	ldr	r0, [r7, #20]
 8006e76:	f7ff fcfd 	bl	8006874 <HAL_I2C_MasterRxCpltCallback>
}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eac:	2200      	movs	r2, #0
 8006eae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fe f9cf 	bl	8005254 <HAL_DMA_GetError>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d01b      	beq.n	8006ef4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eca:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	f043 0210 	orr.w	r2, r3, #16
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fcde 	bl	80068b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f0c:	e048      	b.n	8006fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d044      	beq.n	8006fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fd fa57 	bl	80043c8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d139      	bne.n	8006fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d10d      	bne.n	8006f52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	43da      	mvns	r2, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4013      	ands	r3, r2
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf0c      	ite	eq
 8006f48:	2301      	moveq	r3, #1
 8006f4a:	2300      	movne	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	e00c      	b.n	8006f6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	43da      	mvns	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d116      	bne.n	8006fa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8c:	f043 0220 	orr.w	r2, r3, #32
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e023      	b.n	8006fe8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d10d      	bne.n	8006fc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	43da      	mvns	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf0c      	ite	eq
 8006fbc:	2301      	moveq	r3, #1
 8006fbe:	2300      	movne	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	e00c      	b.n	8006fe0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	43da      	mvns	r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d093      	beq.n	8006f0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ffe:	e071      	b.n	80070e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800700a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700e:	d123      	bne.n	8007058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800701e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007028:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	f043 0204 	orr.w	r2, r3, #4
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e067      	b.n	8007128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d041      	beq.n	80070e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007060:	f7fd f9b2 	bl	80043c8 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d136      	bne.n	80070e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10c      	bne.n	800709a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	43da      	mvns	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4013      	ands	r3, r2
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	e00b      	b.n	80070b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	43da      	mvns	r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4013      	ands	r3, r2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d0:	f043 0220 	orr.w	r2, r3, #32
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e021      	b.n	8007128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d10c      	bne.n	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	43da      	mvns	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	4013      	ands	r3, r2
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	e00b      	b.n	8007120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	43da      	mvns	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4013      	ands	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	bf14      	ite	ne
 800711a:	2301      	movne	r3, #1
 800711c:	2300      	moveq	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	f47f af6d 	bne.w	8007000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800713c:	e034      	b.n	80071a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f8e3 	bl	800730a <I2C_IsAcknowledgeFailed>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e034      	b.n	80071b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d028      	beq.n	80071a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fd f937 	bl	80043c8 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	429a      	cmp	r2, r3
 8007164:	d302      	bcc.n	800716c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11d      	bne.n	80071a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007176:	2b80      	cmp	r3, #128	@ 0x80
 8007178:	d016      	beq.n	80071a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007194:	f043 0220 	orr.w	r2, r3, #32
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e007      	b.n	80071b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d1c3      	bne.n	800713e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071cc:	e034      	b.n	8007238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f89b 	bl	800730a <I2C_IsAcknowledgeFailed>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e034      	b.n	8007248 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d028      	beq.n	8007238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071e6:	f7fd f8ef 	bl	80043c8 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d302      	bcc.n	80071fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11d      	bne.n	8007238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b04      	cmp	r3, #4
 8007208:	d016      	beq.n	8007238 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	f043 0220 	orr.w	r2, r3, #32
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e007      	b.n	8007248 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b04      	cmp	r3, #4
 8007244:	d1c3      	bne.n	80071ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800725c:	e049      	b.n	80072f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	f003 0310 	and.w	r3, r3, #16
 8007268:	2b10      	cmp	r3, #16
 800726a:	d119      	bne.n	80072a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0210 	mvn.w	r2, #16
 8007274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e030      	b.n	8007302 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072a0:	f7fd f892 	bl	80043c8 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d11d      	bne.n	80072f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d016      	beq.n	80072f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072de:	f043 0220 	orr.w	r2, r3, #32
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e007      	b.n	8007302 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d1ae      	bne.n	800725e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007320:	d11b      	bne.n	800735a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800732a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	f043 0204 	orr.w	r2, r3, #4
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e000      	b.n	800735c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0cc      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800737c:	4b68      	ldr	r3, [pc, #416]	@ (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d90c      	bls.n	80073a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b65      	ldr	r3, [pc, #404]	@ (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b63      	ldr	r3, [pc, #396]	@ (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 030f 	and.w	r3, r3, #15
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e0b8      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d020      	beq.n	80073f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073bc:	4b59      	ldr	r3, [pc, #356]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4a58      	ldr	r2, [pc, #352]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80073c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073d4:	4b53      	ldr	r3, [pc, #332]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	4a52      	ldr	r2, [pc, #328]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80073de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073e0:	4b50      	ldr	r3, [pc, #320]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	494d      	ldr	r1, [pc, #308]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d044      	beq.n	8007488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d107      	bne.n	8007416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007406:	4b47      	ldr	r3, [pc, #284]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d119      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e07f      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d003      	beq.n	8007426 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007422:	2b03      	cmp	r3, #3
 8007424:	d107      	bne.n	8007436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007426:	4b3f      	ldr	r3, [pc, #252]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e06f      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007436:	4b3b      	ldr	r3, [pc, #236]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e067      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007446:	4b37      	ldr	r3, [pc, #220]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f023 0203 	bic.w	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	4934      	ldr	r1, [pc, #208]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007454:	4313      	orrs	r3, r2
 8007456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007458:	f7fc ffb6 	bl	80043c8 <HAL_GetTick>
 800745c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745e:	e00a      	b.n	8007476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007460:	f7fc ffb2 	bl	80043c8 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e04f      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007476:	4b2b      	ldr	r3, [pc, #172]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 020c 	and.w	r2, r3, #12
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	429a      	cmp	r2, r3
 8007486:	d1eb      	bne.n	8007460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007488:	4b25      	ldr	r3, [pc, #148]	@ (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d20c      	bcs.n	80074b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007496:	4b22      	ldr	r3, [pc, #136]	@ (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800749e:	4b20      	ldr	r3, [pc, #128]	@ (8007520 <HAL_RCC_ClockConfig+0x1b8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d001      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e032      	b.n	8007516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d008      	beq.n	80074ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074bc:	4b19      	ldr	r3, [pc, #100]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	4916      	ldr	r1, [pc, #88]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074da:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	00db      	lsls	r3, r3, #3
 80074e8:	490e      	ldr	r1, [pc, #56]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074ee:	f000 f841 	bl	8007574 <HAL_RCC_GetSysClockFreq>
 80074f2:	4602      	mov	r2, r0
 80074f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	490a      	ldr	r1, [pc, #40]	@ (8007528 <HAL_RCC_ClockConfig+0x1c0>)
 8007500:	5ccb      	ldrb	r3, [r1, r3]
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	4a09      	ldr	r2, [pc, #36]	@ (800752c <HAL_RCC_ClockConfig+0x1c4>)
 8007508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800750a:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <HAL_RCC_ClockConfig+0x1c8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f7fc ff16 	bl	8004340 <HAL_InitTick>

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40023c00 	.word	0x40023c00
 8007524:	40023800 	.word	0x40023800
 8007528:	0800dd58 	.word	0x0800dd58
 800752c:	200000a0 	.word	0x200000a0
 8007530:	200000a4 	.word	0x200000a4

08007534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007538:	4b03      	ldr	r3, [pc, #12]	@ (8007548 <HAL_RCC_GetHCLKFreq+0x14>)
 800753a:	681b      	ldr	r3, [r3, #0]
}
 800753c:	4618      	mov	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	200000a0 	.word	0x200000a0

0800754c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007550:	f7ff fff0 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 8007554:	4602      	mov	r2, r0
 8007556:	4b05      	ldr	r3, [pc, #20]	@ (800756c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	0a9b      	lsrs	r3, r3, #10
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	4903      	ldr	r1, [pc, #12]	@ (8007570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007562:	5ccb      	ldrb	r3, [r1, r3]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40023800 	.word	0x40023800
 8007570:	0800dd68 	.word	0x0800dd68

08007574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007578:	b0ae      	sub	sp, #184	@ 0xb8
 800757a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800759a:	4bcb      	ldr	r3, [pc, #812]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 030c 	and.w	r3, r3, #12
 80075a2:	2b0c      	cmp	r3, #12
 80075a4:	f200 8206 	bhi.w	80079b4 <HAL_RCC_GetSysClockFreq+0x440>
 80075a8:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	080075e5 	.word	0x080075e5
 80075b4:	080079b5 	.word	0x080079b5
 80075b8:	080079b5 	.word	0x080079b5
 80075bc:	080079b5 	.word	0x080079b5
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	080079b5 	.word	0x080079b5
 80075c8:	080079b5 	.word	0x080079b5
 80075cc:	080079b5 	.word	0x080079b5
 80075d0:	080075f5 	.word	0x080075f5
 80075d4:	080079b5 	.word	0x080079b5
 80075d8:	080079b5 	.word	0x080079b5
 80075dc:	080079b5 	.word	0x080079b5
 80075e0:	080077e5 	.word	0x080077e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075e4:	4bb9      	ldr	r3, [pc, #740]	@ (80078cc <HAL_RCC_GetSysClockFreq+0x358>)
 80075e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80075ea:	e1e7      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075ec:	4bb8      	ldr	r3, [pc, #736]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80075ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80075f2:	e1e3      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075f4:	4bb4      	ldr	r3, [pc, #720]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007600:	4bb1      	ldr	r3, [pc, #708]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d071      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800760c:	4bae      	ldr	r3, [pc, #696]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	099b      	lsrs	r3, r3, #6
 8007612:	2200      	movs	r2, #0
 8007614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007618:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800761c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800762e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	f04f 0000 	mov.w	r0, #0
 800763a:	f04f 0100 	mov.w	r1, #0
 800763e:	0159      	lsls	r1, r3, #5
 8007640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007644:	0150      	lsls	r0, r2, #5
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4621      	mov	r1, r4
 800764c:	1a51      	subs	r1, r2, r1
 800764e:	6439      	str	r1, [r7, #64]	@ 0x40
 8007650:	4629      	mov	r1, r5
 8007652:	eb63 0301 	sbc.w	r3, r3, r1
 8007656:	647b      	str	r3, [r7, #68]	@ 0x44
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007664:	4649      	mov	r1, r9
 8007666:	018b      	lsls	r3, r1, #6
 8007668:	4641      	mov	r1, r8
 800766a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800766e:	4641      	mov	r1, r8
 8007670:	018a      	lsls	r2, r1, #6
 8007672:	4641      	mov	r1, r8
 8007674:	1a51      	subs	r1, r2, r1
 8007676:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007678:	4649      	mov	r1, r9
 800767a:	eb63 0301 	sbc.w	r3, r3, r1
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800768c:	4649      	mov	r1, r9
 800768e:	00cb      	lsls	r3, r1, #3
 8007690:	4641      	mov	r1, r8
 8007692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007696:	4641      	mov	r1, r8
 8007698:	00ca      	lsls	r2, r1, #3
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	4622      	mov	r2, r4
 80076a2:	189b      	adds	r3, r3, r2
 80076a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076a6:	462b      	mov	r3, r5
 80076a8:	460a      	mov	r2, r1
 80076aa:	eb42 0303 	adc.w	r3, r2, r3
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80076bc:	4629      	mov	r1, r5
 80076be:	024b      	lsls	r3, r1, #9
 80076c0:	4621      	mov	r1, r4
 80076c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076c6:	4621      	mov	r1, r4
 80076c8:	024a      	lsls	r2, r1, #9
 80076ca:	4610      	mov	r0, r2
 80076cc:	4619      	mov	r1, r3
 80076ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d2:	2200      	movs	r2, #0
 80076d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80076e0:	f7f9 fb42 	bl	8000d68 <__aeabi_uldivmod>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4613      	mov	r3, r2
 80076ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076ee:	e067      	b.n	80077c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f0:	4b75      	ldr	r3, [pc, #468]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	099b      	lsrs	r3, r3, #6
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800770a:	2300      	movs	r3, #0
 800770c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800770e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007712:	4622      	mov	r2, r4
 8007714:	462b      	mov	r3, r5
 8007716:	f04f 0000 	mov.w	r0, #0
 800771a:	f04f 0100 	mov.w	r1, #0
 800771e:	0159      	lsls	r1, r3, #5
 8007720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007724:	0150      	lsls	r0, r2, #5
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4621      	mov	r1, r4
 800772c:	1a51      	subs	r1, r2, r1
 800772e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007730:	4629      	mov	r1, r5
 8007732:	eb63 0301 	sbc.w	r3, r3, r1
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007744:	4649      	mov	r1, r9
 8007746:	018b      	lsls	r3, r1, #6
 8007748:	4641      	mov	r1, r8
 800774a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800774e:	4641      	mov	r1, r8
 8007750:	018a      	lsls	r2, r1, #6
 8007752:	4641      	mov	r1, r8
 8007754:	ebb2 0a01 	subs.w	sl, r2, r1
 8007758:	4649      	mov	r1, r9
 800775a:	eb63 0b01 	sbc.w	fp, r3, r1
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	f04f 0300 	mov.w	r3, #0
 8007766:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800776a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800776e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007772:	4692      	mov	sl, r2
 8007774:	469b      	mov	fp, r3
 8007776:	4623      	mov	r3, r4
 8007778:	eb1a 0303 	adds.w	r3, sl, r3
 800777c:	623b      	str	r3, [r7, #32]
 800777e:	462b      	mov	r3, r5
 8007780:	eb4b 0303 	adc.w	r3, fp, r3
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007792:	4629      	mov	r1, r5
 8007794:	028b      	lsls	r3, r1, #10
 8007796:	4621      	mov	r1, r4
 8007798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800779c:	4621      	mov	r1, r4
 800779e:	028a      	lsls	r2, r1, #10
 80077a0:	4610      	mov	r0, r2
 80077a2:	4619      	mov	r1, r3
 80077a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077a8:	2200      	movs	r2, #0
 80077aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80077ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80077ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80077b2:	f7f9 fad9 	bl	8000d68 <__aeabi_uldivmod>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4613      	mov	r3, r2
 80077bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80077c0:	4b41      	ldr	r3, [pc, #260]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	0c1b      	lsrs	r3, r3, #16
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	3301      	adds	r3, #1
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80077d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077da:	fbb2 f3f3 	udiv	r3, r2, r3
 80077de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80077e2:	e0eb      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077e4:	4b38      	ldr	r3, [pc, #224]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077f0:	4b35      	ldr	r3, [pc, #212]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d06b      	beq.n	80078d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077fc:	4b32      	ldr	r3, [pc, #200]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	099b      	lsrs	r3, r3, #6
 8007802:	2200      	movs	r2, #0
 8007804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007806:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800780a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007810:	2300      	movs	r3, #0
 8007812:	667b      	str	r3, [r7, #100]	@ 0x64
 8007814:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007818:	4622      	mov	r2, r4
 800781a:	462b      	mov	r3, r5
 800781c:	f04f 0000 	mov.w	r0, #0
 8007820:	f04f 0100 	mov.w	r1, #0
 8007824:	0159      	lsls	r1, r3, #5
 8007826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800782a:	0150      	lsls	r0, r2, #5
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4621      	mov	r1, r4
 8007832:	1a51      	subs	r1, r2, r1
 8007834:	61b9      	str	r1, [r7, #24]
 8007836:	4629      	mov	r1, r5
 8007838:	eb63 0301 	sbc.w	r3, r3, r1
 800783c:	61fb      	str	r3, [r7, #28]
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800784a:	4659      	mov	r1, fp
 800784c:	018b      	lsls	r3, r1, #6
 800784e:	4651      	mov	r1, sl
 8007850:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007854:	4651      	mov	r1, sl
 8007856:	018a      	lsls	r2, r1, #6
 8007858:	4651      	mov	r1, sl
 800785a:	ebb2 0801 	subs.w	r8, r2, r1
 800785e:	4659      	mov	r1, fp
 8007860:	eb63 0901 	sbc.w	r9, r3, r1
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007870:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007874:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007878:	4690      	mov	r8, r2
 800787a:	4699      	mov	r9, r3
 800787c:	4623      	mov	r3, r4
 800787e:	eb18 0303 	adds.w	r3, r8, r3
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	462b      	mov	r3, r5
 8007886:	eb49 0303 	adc.w	r3, r9, r3
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	f04f 0200 	mov.w	r2, #0
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007898:	4629      	mov	r1, r5
 800789a:	024b      	lsls	r3, r1, #9
 800789c:	4621      	mov	r1, r4
 800789e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078a2:	4621      	mov	r1, r4
 80078a4:	024a      	lsls	r2, r1, #9
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078ae:	2200      	movs	r2, #0
 80078b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80078b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078b8:	f7f9 fa56 	bl	8000d68 <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4613      	mov	r3, r2
 80078c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078c6:	e065      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0x420>
 80078c8:	40023800 	.word	0x40023800
 80078cc:	00f42400 	.word	0x00f42400
 80078d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d4:	4b3d      	ldr	r3, [pc, #244]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x458>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	099b      	lsrs	r3, r3, #6
 80078da:	2200      	movs	r2, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	4611      	mov	r1, r2
 80078e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80078e6:	2300      	movs	r3, #0
 80078e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80078ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80078ee:	4642      	mov	r2, r8
 80078f0:	464b      	mov	r3, r9
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f04f 0100 	mov.w	r1, #0
 80078fa:	0159      	lsls	r1, r3, #5
 80078fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007900:	0150      	lsls	r0, r2, #5
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4641      	mov	r1, r8
 8007908:	1a51      	subs	r1, r2, r1
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4649      	mov	r1, r9
 800790e:	eb63 0301 	sbc.w	r3, r3, r1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007920:	4659      	mov	r1, fp
 8007922:	018b      	lsls	r3, r1, #6
 8007924:	4651      	mov	r1, sl
 8007926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800792a:	4651      	mov	r1, sl
 800792c:	018a      	lsls	r2, r1, #6
 800792e:	4651      	mov	r1, sl
 8007930:	1a54      	subs	r4, r2, r1
 8007932:	4659      	mov	r1, fp
 8007934:	eb63 0501 	sbc.w	r5, r3, r1
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	00eb      	lsls	r3, r5, #3
 8007942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007946:	00e2      	lsls	r2, r4, #3
 8007948:	4614      	mov	r4, r2
 800794a:	461d      	mov	r5, r3
 800794c:	4643      	mov	r3, r8
 800794e:	18e3      	adds	r3, r4, r3
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	464b      	mov	r3, r9
 8007954:	eb45 0303 	adc.w	r3, r5, r3
 8007958:	607b      	str	r3, [r7, #4]
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007966:	4629      	mov	r1, r5
 8007968:	028b      	lsls	r3, r1, #10
 800796a:	4621      	mov	r1, r4
 800796c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007970:	4621      	mov	r1, r4
 8007972:	028a      	lsls	r2, r1, #10
 8007974:	4610      	mov	r0, r2
 8007976:	4619      	mov	r1, r3
 8007978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800797c:	2200      	movs	r2, #0
 800797e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007980:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007982:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007986:	f7f9 f9ef 	bl	8000d68 <__aeabi_uldivmod>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4613      	mov	r3, r2
 8007990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007994:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x458>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	0f1b      	lsrs	r3, r3, #28
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80079a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80079b2:	e003      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079b4:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80079b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80079ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	37b8      	adds	r7, #184	@ 0xb8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800
 80079d0:	00f42400 	.word	0x00f42400

080079d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e28d      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8083 	beq.w	8007afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80079f4:	4b94      	ldr	r3, [pc, #592]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 030c 	and.w	r3, r3, #12
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d019      	beq.n	8007a34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007a00:	4b91      	ldr	r3, [pc, #580]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 030c 	and.w	r3, r3, #12
        || \
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a18:	d00c      	beq.n	8007a34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007a22:	2b0c      	cmp	r3, #12
 8007a24:	d112      	bne.n	8007a4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a26:	4b88      	ldr	r3, [pc, #544]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a32:	d10b      	bne.n	8007a4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a34:	4b84      	ldr	r3, [pc, #528]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d05b      	beq.n	8007af8 <HAL_RCC_OscConfig+0x124>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d157      	bne.n	8007af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e25a      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a54:	d106      	bne.n	8007a64 <HAL_RCC_OscConfig+0x90>
 8007a56:	4b7c      	ldr	r3, [pc, #496]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a7b      	ldr	r2, [pc, #492]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e01d      	b.n	8007aa0 <HAL_RCC_OscConfig+0xcc>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCC_OscConfig+0xb4>
 8007a6e:	4b76      	ldr	r3, [pc, #472]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a75      	ldr	r2, [pc, #468]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	4b73      	ldr	r3, [pc, #460]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a72      	ldr	r2, [pc, #456]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	e00b      	b.n	8007aa0 <HAL_RCC_OscConfig+0xcc>
 8007a88:	4b6f      	ldr	r3, [pc, #444]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	4b6c      	ldr	r3, [pc, #432]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a6b      	ldr	r2, [pc, #428]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d013      	beq.n	8007ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa8:	f7fc fc8e 	bl	80043c8 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ab0:	f7fc fc8a 	bl	80043c8 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b64      	cmp	r3, #100	@ 0x64
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e21f      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ac2:	4b61      	ldr	r3, [pc, #388]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0f0      	beq.n	8007ab0 <HAL_RCC_OscConfig+0xdc>
 8007ace:	e014      	b.n	8007afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad0:	f7fc fc7a 	bl	80043c8 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fc fc76 	bl	80043c8 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	@ 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e20b      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aea:	4b57      	ldr	r3, [pc, #348]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x104>
 8007af6:	e000      	b.n	8007afa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d06f      	beq.n	8007be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007b06:	4b50      	ldr	r3, [pc, #320]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d017      	beq.n	8007b42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007b12:	4b4d      	ldr	r3, [pc, #308]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 030c 	and.w	r3, r3, #12
        || \
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d105      	bne.n	8007b2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b2a:	4b47      	ldr	r3, [pc, #284]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007b32:	2b0c      	cmp	r3, #12
 8007b34:	d11c      	bne.n	8007b70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b36:	4b44      	ldr	r3, [pc, #272]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d116      	bne.n	8007b70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b42:	4b41      	ldr	r3, [pc, #260]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_RCC_OscConfig+0x186>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d001      	beq.n	8007b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e1d3      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	4937      	ldr	r1, [pc, #220]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b6e:	e03a      	b.n	8007be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d020      	beq.n	8007bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b78:	4b34      	ldr	r3, [pc, #208]	@ (8007c4c <HAL_RCC_OscConfig+0x278>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7e:	f7fc fc23 	bl	80043c8 <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b84:	e008      	b.n	8007b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b86:	f7fc fc1f 	bl	80043c8 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e1b4      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b98:	4b2b      	ldr	r3, [pc, #172]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0f0      	beq.n	8007b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ba4:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	4925      	ldr	r1, [pc, #148]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	600b      	str	r3, [r1, #0]
 8007bb8:	e015      	b.n	8007be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bba:	4b24      	ldr	r3, [pc, #144]	@ (8007c4c <HAL_RCC_OscConfig+0x278>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fc fc02 	bl	80043c8 <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bc8:	f7fc fbfe 	bl	80043c8 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e193      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bda:	4b1b      	ldr	r3, [pc, #108]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f0      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d036      	beq.n	8007c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d016      	beq.n	8007c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bfa:	4b15      	ldr	r3, [pc, #84]	@ (8007c50 <HAL_RCC_OscConfig+0x27c>)
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c00:	f7fc fbe2 	bl	80043c8 <HAL_GetTick>
 8007c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c06:	e008      	b.n	8007c1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c08:	f7fc fbde 	bl	80043c8 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d901      	bls.n	8007c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e173      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c48 <HAL_RCC_OscConfig+0x274>)
 8007c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0f0      	beq.n	8007c08 <HAL_RCC_OscConfig+0x234>
 8007c26:	e01b      	b.n	8007c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c28:	4b09      	ldr	r3, [pc, #36]	@ (8007c50 <HAL_RCC_OscConfig+0x27c>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c2e:	f7fc fbcb 	bl	80043c8 <HAL_GetTick>
 8007c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c34:	e00e      	b.n	8007c54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c36:	f7fc fbc7 	bl	80043c8 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d907      	bls.n	8007c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e15c      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	42470000 	.word	0x42470000
 8007c50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c54:	4b8a      	ldr	r3, [pc, #552]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1ea      	bne.n	8007c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 8097 	beq.w	8007d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c72:	4b83      	ldr	r3, [pc, #524]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10f      	bne.n	8007c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	4b7f      	ldr	r3, [pc, #508]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c86:	4a7e      	ldr	r2, [pc, #504]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c9e:	4b79      	ldr	r3, [pc, #484]	@ (8007e84 <HAL_RCC_OscConfig+0x4b0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d118      	bne.n	8007cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007caa:	4b76      	ldr	r3, [pc, #472]	@ (8007e84 <HAL_RCC_OscConfig+0x4b0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a75      	ldr	r2, [pc, #468]	@ (8007e84 <HAL_RCC_OscConfig+0x4b0>)
 8007cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cb6:	f7fc fb87 	bl	80043c8 <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cbc:	e008      	b.n	8007cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cbe:	f7fc fb83 	bl	80043c8 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d901      	bls.n	8007cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e118      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8007e84 <HAL_RCC_OscConfig+0x4b0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0f0      	beq.n	8007cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x31e>
 8007ce4:	4b66      	ldr	r3, [pc, #408]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce8:	4a65      	ldr	r2, [pc, #404]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cf0:	e01c      	b.n	8007d2c <HAL_RCC_OscConfig+0x358>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCC_OscConfig+0x340>
 8007cfa:	4b61      	ldr	r3, [pc, #388]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cfe:	4a60      	ldr	r2, [pc, #384]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d00:	f043 0304 	orr.w	r3, r3, #4
 8007d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d06:	4b5e      	ldr	r3, [pc, #376]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d0c:	f043 0301 	orr.w	r3, r3, #1
 8007d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d12:	e00b      	b.n	8007d2c <HAL_RCC_OscConfig+0x358>
 8007d14:	4b5a      	ldr	r3, [pc, #360]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d18:	4a59      	ldr	r2, [pc, #356]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d20:	4b57      	ldr	r3, [pc, #348]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d24:	4a56      	ldr	r2, [pc, #344]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d26:	f023 0304 	bic.w	r3, r3, #4
 8007d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d015      	beq.n	8007d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d34:	f7fc fb48 	bl	80043c8 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d3c:	f7fc fb44 	bl	80043c8 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e0d7      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d52:	4b4b      	ldr	r3, [pc, #300]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0ee      	beq.n	8007d3c <HAL_RCC_OscConfig+0x368>
 8007d5e:	e014      	b.n	8007d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d60:	f7fc fb32 	bl	80043c8 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d66:	e00a      	b.n	8007d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d68:	f7fc fb2e 	bl	80043c8 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e0c1      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d7e:	4b40      	ldr	r3, [pc, #256]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1ee      	bne.n	8007d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d105      	bne.n	8007d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d90:	4b3b      	ldr	r3, [pc, #236]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d94:	4a3a      	ldr	r2, [pc, #232]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80ad 	beq.w	8007f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007da6:	4b36      	ldr	r3, [pc, #216]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 030c 	and.w	r3, r3, #12
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d060      	beq.n	8007e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d145      	bne.n	8007e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dba:	4b33      	ldr	r3, [pc, #204]	@ (8007e88 <HAL_RCC_OscConfig+0x4b4>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fc fb02 	bl	80043c8 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc8:	f7fc fafe 	bl	80043c8 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e093      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dda:	4b29      	ldr	r3, [pc, #164]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f0      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69da      	ldr	r2, [r3, #28]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	019b      	lsls	r3, r3, #6
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	061b      	lsls	r3, r3, #24
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e10:	071b      	lsls	r3, r3, #28
 8007e12:	491b      	ldr	r1, [pc, #108]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e18:	4b1b      	ldr	r3, [pc, #108]	@ (8007e88 <HAL_RCC_OscConfig+0x4b4>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1e:	f7fc fad3 	bl	80043c8 <HAL_GetTick>
 8007e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e24:	e008      	b.n	8007e38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e26:	f7fc facf 	bl	80043c8 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e064      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e38:	4b11      	ldr	r3, [pc, #68]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0f0      	beq.n	8007e26 <HAL_RCC_OscConfig+0x452>
 8007e44:	e05c      	b.n	8007f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e46:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <HAL_RCC_OscConfig+0x4b4>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fc fabc 	bl	80043c8 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e54:	f7fc fab8 	bl	80043c8 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e04d      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e66:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <HAL_RCC_OscConfig+0x4ac>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x480>
 8007e72:	e045      	b.n	8007f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e040      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
 8007e80:	40023800 	.word	0x40023800
 8007e84:	40007000 	.word	0x40007000
 8007e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8007f0c <HAL_RCC_OscConfig+0x538>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d030      	beq.n	8007efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d129      	bne.n	8007efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d122      	bne.n	8007efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d119      	bne.n	8007efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d10f      	bne.n	8007efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d107      	bne.n	8007efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d001      	beq.n	8007f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40023800 	.word	0x40023800

08007f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e041      	b.n	8007fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7fc f90c 	bl	8004154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f000 fcca 	bl	80088e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d001      	beq.n	8007fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e046      	b.n	8008056 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a23      	ldr	r2, [pc, #140]	@ (8008064 <HAL_TIM_Base_Start+0xb4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe2:	d01d      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8008068 <HAL_TIM_Base_Start+0xb8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800806c <HAL_TIM_Base_Start+0xbc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8008070 <HAL_TIM_Base_Start+0xc0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1b      	ldr	r2, [pc, #108]	@ (8008074 <HAL_TIM_Base_Start+0xc4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a19      	ldr	r2, [pc, #100]	@ (8008078 <HAL_TIM_Base_Start+0xc8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_TIM_Base_Start+0x70>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a18      	ldr	r2, [pc, #96]	@ (800807c <HAL_TIM_Base_Start+0xcc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d111      	bne.n	8008044 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b06      	cmp	r3, #6
 8008030:	d010      	beq.n	8008054 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0201 	orr.w	r2, r2, #1
 8008040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008042:	e007      	b.n	8008054 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40010000 	.word	0x40010000
 8008068:	40000400 	.word	0x40000400
 800806c:	40000800 	.word	0x40000800
 8008070:	40000c00 	.word	0x40000c00
 8008074:	40010400 	.word	0x40010400
 8008078:	40014000 	.word	0x40014000
 800807c:	40001800 	.word	0x40001800

08008080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d001      	beq.n	8008098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e04e      	b.n	8008136 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a23      	ldr	r2, [pc, #140]	@ (8008144 <HAL_TIM_Base_Start_IT+0xc4>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d022      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c2:	d01d      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008148 <HAL_TIM_Base_Start_IT+0xc8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d018      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1e      	ldr	r2, [pc, #120]	@ (800814c <HAL_TIM_Base_Start_IT+0xcc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d013      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <HAL_TIM_Base_Start_IT+0xd0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00e      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <HAL_TIM_Base_Start_IT+0xd4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d009      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a19      	ldr	r2, [pc, #100]	@ (8008158 <HAL_TIM_Base_Start_IT+0xd8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d004      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x80>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a18      	ldr	r2, [pc, #96]	@ (800815c <HAL_TIM_Base_Start_IT+0xdc>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d111      	bne.n	8008124 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b06      	cmp	r3, #6
 8008110:	d010      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f042 0201 	orr.w	r2, r2, #1
 8008120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008122:	e007      	b.n	8008134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0201 	orr.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	40010000 	.word	0x40010000
 8008148:	40000400 	.word	0x40000400
 800814c:	40000800 	.word	0x40000800
 8008150:	40000c00 	.word	0x40000c00
 8008154:	40010400 	.word	0x40010400
 8008158:	40014000 	.word	0x40014000
 800815c:	40001800 	.word	0x40001800

08008160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e041      	b.n	80081f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d106      	bne.n	800818c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f839 	bl	80081fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f000 fba2 	bl	80088e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <HAL_TIM_PWM_Start+0x24>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	bf14      	ite	ne
 8008230:	2301      	movne	r3, #1
 8008232:	2300      	moveq	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	e022      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b04      	cmp	r3, #4
 800823c:	d109      	bne.n	8008252 <HAL_TIM_PWM_Start+0x3e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	bf14      	ite	ne
 800824a:	2301      	movne	r3, #1
 800824c:	2300      	moveq	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	e015      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d109      	bne.n	800826c <HAL_TIM_PWM_Start+0x58>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	e008      	b.n	800827e <HAL_TIM_PWM_Start+0x6a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e07c      	b.n	8008380 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <HAL_TIM_PWM_Start+0x82>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008294:	e013      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_PWM_Start+0x92>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a4:	e00b      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d104      	bne.n	80082b6 <HAL_TIM_PWM_Start+0xa2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082b4:	e003      	b.n	80082be <HAL_TIM_PWM_Start+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fe04 	bl	8008ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008388 <HAL_TIM_PWM_Start+0x174>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d004      	beq.n	80082e0 <HAL_TIM_PWM_Start+0xcc>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2c      	ldr	r2, [pc, #176]	@ (800838c <HAL_TIM_PWM_Start+0x178>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d101      	bne.n	80082e4 <HAL_TIM_PWM_Start+0xd0>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <HAL_TIM_PWM_Start+0xd2>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d007      	beq.n	80082fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a22      	ldr	r2, [pc, #136]	@ (8008388 <HAL_TIM_PWM_Start+0x174>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d022      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800830c:	d01d      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1f      	ldr	r2, [pc, #124]	@ (8008390 <HAL_TIM_PWM_Start+0x17c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d018      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1d      	ldr	r2, [pc, #116]	@ (8008394 <HAL_TIM_PWM_Start+0x180>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d013      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1c      	ldr	r2, [pc, #112]	@ (8008398 <HAL_TIM_PWM_Start+0x184>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00e      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a16      	ldr	r2, [pc, #88]	@ (800838c <HAL_TIM_PWM_Start+0x178>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d009      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a18      	ldr	r2, [pc, #96]	@ (800839c <HAL_TIM_PWM_Start+0x188>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_TIM_PWM_Start+0x136>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a16      	ldr	r2, [pc, #88]	@ (80083a0 <HAL_TIM_PWM_Start+0x18c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d111      	bne.n	800836e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b06      	cmp	r3, #6
 800835a:	d010      	beq.n	800837e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0201 	orr.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836c:	e007      	b.n	800837e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0201 	orr.w	r2, r2, #1
 800837c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	40010000 	.word	0x40010000
 800838c:	40010400 	.word	0x40010400
 8008390:	40000400 	.word	0x40000400
 8008394:	40000800 	.word	0x40000800
 8008398:	40000c00 	.word	0x40000c00
 800839c:	40014000 	.word	0x40014000
 80083a0:	40001800 	.word	0x40001800

080083a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d020      	beq.n	8008408 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01b      	beq.n	8008408 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f06f 0202 	mvn.w	r2, #2
 80083d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa5b 	bl	80088aa <HAL_TIM_IC_CaptureCallback>
 80083f4:	e005      	b.n	8008402 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa4d 	bl	8008896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa5e 	bl	80088be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	d020      	beq.n	8008454 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01b      	beq.n	8008454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0204 	mvn.w	r2, #4
 8008424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa35 	bl	80088aa <HAL_TIM_IC_CaptureCallback>
 8008440:	e005      	b.n	800844e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa27 	bl	8008896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa38 	bl	80088be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f003 0308 	and.w	r3, r3, #8
 800845a:	2b00      	cmp	r3, #0
 800845c:	d020      	beq.n	80084a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0208 	mvn.w	r2, #8
 8008470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2204      	movs	r2, #4
 8008476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa0f 	bl	80088aa <HAL_TIM_IC_CaptureCallback>
 800848c:	e005      	b.n	800849a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa01 	bl	8008896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fa12 	bl	80088be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d020      	beq.n	80084ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01b      	beq.n	80084ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0210 	mvn.w	r2, #16
 80084bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2208      	movs	r2, #8
 80084c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9e9 	bl	80088aa <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f9db 	bl	8008896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9ec 	bl	80088be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00c      	beq.n	8008510 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d007      	beq.n	8008510 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0201 	mvn.w	r2, #1
 8008508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fa f842 	bl	8002594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fdce 	bl	80090d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f9bd 	bl	80088d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0220 	mvn.w	r2, #32
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fda0 	bl	80090bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800859e:	2302      	movs	r3, #2
 80085a0:	e0ae      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b0c      	cmp	r3, #12
 80085ae:	f200 809f 	bhi.w	80086f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085b2:	a201      	add	r2, pc, #4	@ (adr r2, 80085b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085ed 	.word	0x080085ed
 80085bc:	080086f1 	.word	0x080086f1
 80085c0:	080086f1 	.word	0x080086f1
 80085c4:	080086f1 	.word	0x080086f1
 80085c8:	0800862d 	.word	0x0800862d
 80085cc:	080086f1 	.word	0x080086f1
 80085d0:	080086f1 	.word	0x080086f1
 80085d4:	080086f1 	.word	0x080086f1
 80085d8:	0800866f 	.word	0x0800866f
 80085dc:	080086f1 	.word	0x080086f1
 80085e0:	080086f1 	.word	0x080086f1
 80085e4:	080086f1 	.word	0x080086f1
 80085e8:	080086af 	.word	0x080086af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fa24 	bl	8008a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699a      	ldr	r2, [r3, #24]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0208 	orr.w	r2, r2, #8
 8008606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0204 	bic.w	r2, r2, #4
 8008616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6999      	ldr	r1, [r3, #24]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	691a      	ldr	r2, [r3, #16]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	619a      	str	r2, [r3, #24]
      break;
 800862a:	e064      	b.n	80086f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fa74 	bl	8008b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699a      	ldr	r2, [r3, #24]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6999      	ldr	r1, [r3, #24]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	021a      	lsls	r2, r3, #8
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	619a      	str	r2, [r3, #24]
      break;
 800866c:	e043      	b.n	80086f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fac9 	bl	8008c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	69da      	ldr	r2, [r3, #28]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0208 	orr.w	r2, r2, #8
 8008688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0204 	bic.w	r2, r2, #4
 8008698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69d9      	ldr	r1, [r3, #28]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	61da      	str	r2, [r3, #28]
      break;
 80086ac:	e023      	b.n	80086f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fb1d 	bl	8008cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69d9      	ldr	r1, [r3, #28]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	021a      	lsls	r2, r3, #8
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	61da      	str	r2, [r3, #28]
      break;
 80086ee:	e002      	b.n	80086f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	75fb      	strb	r3, [r7, #23]
      break;
 80086f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_TIM_ConfigClockSource+0x1c>
 8008720:	2302      	movs	r3, #2
 8008722:	e0b4      	b.n	800888e <HAL_TIM_ConfigClockSource+0x186>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800875c:	d03e      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0xd4>
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008762:	f200 8087 	bhi.w	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876a:	f000 8086 	beq.w	800887a <HAL_TIM_ConfigClockSource+0x172>
 800876e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008772:	d87f      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 8008774:	2b70      	cmp	r3, #112	@ 0x70
 8008776:	d01a      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0xa6>
 8008778:	2b70      	cmp	r3, #112	@ 0x70
 800877a:	d87b      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 800877c:	2b60      	cmp	r3, #96	@ 0x60
 800877e:	d050      	beq.n	8008822 <HAL_TIM_ConfigClockSource+0x11a>
 8008780:	2b60      	cmp	r3, #96	@ 0x60
 8008782:	d877      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 8008784:	2b50      	cmp	r3, #80	@ 0x50
 8008786:	d03c      	beq.n	8008802 <HAL_TIM_ConfigClockSource+0xfa>
 8008788:	2b50      	cmp	r3, #80	@ 0x50
 800878a:	d873      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 800878c:	2b40      	cmp	r3, #64	@ 0x40
 800878e:	d058      	beq.n	8008842 <HAL_TIM_ConfigClockSource+0x13a>
 8008790:	2b40      	cmp	r3, #64	@ 0x40
 8008792:	d86f      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 8008794:	2b30      	cmp	r3, #48	@ 0x30
 8008796:	d064      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0x15a>
 8008798:	2b30      	cmp	r3, #48	@ 0x30
 800879a:	d86b      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 800879c:	2b20      	cmp	r3, #32
 800879e:	d060      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0x15a>
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d867      	bhi.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d05c      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0x15a>
 80087a8:	2b10      	cmp	r3, #16
 80087aa:	d05a      	beq.n	8008862 <HAL_TIM_ConfigClockSource+0x15a>
 80087ac:	e062      	b.n	8008874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087be:	f000 fb69 	bl	8008e94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	609a      	str	r2, [r3, #8]
      break;
 80087da:	e04f      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087ec:	f000 fb52 	bl	8008e94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087fe:	609a      	str	r2, [r3, #8]
      break;
 8008800:	e03c      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800880e:	461a      	mov	r2, r3
 8008810:	f000 fac6 	bl	8008da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2150      	movs	r1, #80	@ 0x50
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fb1f 	bl	8008e5e <TIM_ITRx_SetConfig>
      break;
 8008820:	e02c      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800882e:	461a      	mov	r2, r3
 8008830:	f000 fae5 	bl	8008dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2160      	movs	r1, #96	@ 0x60
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fb0f 	bl	8008e5e <TIM_ITRx_SetConfig>
      break;
 8008840:	e01c      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800884e:	461a      	mov	r2, r3
 8008850:	f000 faa6 	bl	8008da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2140      	movs	r1, #64	@ 0x40
 800885a:	4618      	mov	r0, r3
 800885c:	f000 faff 	bl	8008e5e <TIM_ITRx_SetConfig>
      break;
 8008860:	e00c      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4619      	mov	r1, r3
 800886c:	4610      	mov	r0, r2
 800886e:	f000 faf6 	bl	8008e5e <TIM_ITRx_SetConfig>
      break;
 8008872:	e003      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	73fb      	strb	r3, [r7, #15]
      break;
 8008878:	e000      	b.n	800887c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800887a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088b2:	bf00      	nop
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a46      	ldr	r2, [pc, #280]	@ (8008a14 <TIM_Base_SetConfig+0x12c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d013      	beq.n	8008928 <TIM_Base_SetConfig+0x40>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008906:	d00f      	beq.n	8008928 <TIM_Base_SetConfig+0x40>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a43      	ldr	r2, [pc, #268]	@ (8008a18 <TIM_Base_SetConfig+0x130>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00b      	beq.n	8008928 <TIM_Base_SetConfig+0x40>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a42      	ldr	r2, [pc, #264]	@ (8008a1c <TIM_Base_SetConfig+0x134>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d007      	beq.n	8008928 <TIM_Base_SetConfig+0x40>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a41      	ldr	r2, [pc, #260]	@ (8008a20 <TIM_Base_SetConfig+0x138>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d003      	beq.n	8008928 <TIM_Base_SetConfig+0x40>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a40      	ldr	r2, [pc, #256]	@ (8008a24 <TIM_Base_SetConfig+0x13c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d108      	bne.n	800893a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a35      	ldr	r2, [pc, #212]	@ (8008a14 <TIM_Base_SetConfig+0x12c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d02b      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008948:	d027      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a32      	ldr	r2, [pc, #200]	@ (8008a18 <TIM_Base_SetConfig+0x130>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d023      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a31      	ldr	r2, [pc, #196]	@ (8008a1c <TIM_Base_SetConfig+0x134>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d01f      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a30      	ldr	r2, [pc, #192]	@ (8008a20 <TIM_Base_SetConfig+0x138>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d01b      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a2f      	ldr	r2, [pc, #188]	@ (8008a24 <TIM_Base_SetConfig+0x13c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d017      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a2e      	ldr	r2, [pc, #184]	@ (8008a28 <TIM_Base_SetConfig+0x140>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d013      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2d      	ldr	r2, [pc, #180]	@ (8008a2c <TIM_Base_SetConfig+0x144>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00f      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2c      	ldr	r2, [pc, #176]	@ (8008a30 <TIM_Base_SetConfig+0x148>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00b      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2b      	ldr	r2, [pc, #172]	@ (8008a34 <TIM_Base_SetConfig+0x14c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d007      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a2a      	ldr	r2, [pc, #168]	@ (8008a38 <TIM_Base_SetConfig+0x150>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d003      	beq.n	800899a <TIM_Base_SetConfig+0xb2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a29      	ldr	r2, [pc, #164]	@ (8008a3c <TIM_Base_SetConfig+0x154>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d108      	bne.n	80089ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a10      	ldr	r2, [pc, #64]	@ (8008a14 <TIM_Base_SetConfig+0x12c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_Base_SetConfig+0xf8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a12      	ldr	r2, [pc, #72]	@ (8008a24 <TIM_Base_SetConfig+0x13c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d103      	bne.n	80089e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d105      	bne.n	8008a06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f023 0201 	bic.w	r2, r3, #1
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	611a      	str	r2, [r3, #16]
  }
}
 8008a06:	bf00      	nop
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800
 8008a20:	40000c00 	.word	0x40000c00
 8008a24:	40010400 	.word	0x40010400
 8008a28:	40014000 	.word	0x40014000
 8008a2c:	40014400 	.word	0x40014400
 8008a30:	40014800 	.word	0x40014800
 8008a34:	40001800 	.word	0x40001800
 8008a38:	40001c00 	.word	0x40001c00
 8008a3c:	40002000 	.word	0x40002000

08008a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f023 0201 	bic.w	r2, r3, #1
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f023 0302 	bic.w	r3, r3, #2
 8008a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a20      	ldr	r2, [pc, #128]	@ (8008b18 <TIM_OC1_SetConfig+0xd8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d003      	beq.n	8008aa4 <TIM_OC1_SetConfig+0x64>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b1c <TIM_OC1_SetConfig+0xdc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d10c      	bne.n	8008abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0308 	bic.w	r3, r3, #8
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f023 0304 	bic.w	r3, r3, #4
 8008abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a15      	ldr	r2, [pc, #84]	@ (8008b18 <TIM_OC1_SetConfig+0xd8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_OC1_SetConfig+0x8e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a14      	ldr	r2, [pc, #80]	@ (8008b1c <TIM_OC1_SetConfig+0xdc>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d111      	bne.n	8008af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	621a      	str	r2, [r3, #32]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40010400 	.word	0x40010400

08008b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f023 0210 	bic.w	r2, r3, #16
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0320 	bic.w	r3, r3, #32
 8008b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a22      	ldr	r2, [pc, #136]	@ (8008c04 <TIM_OC2_SetConfig+0xe4>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_OC2_SetConfig+0x68>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a21      	ldr	r2, [pc, #132]	@ (8008c08 <TIM_OC2_SetConfig+0xe8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d10d      	bne.n	8008ba4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	011b      	lsls	r3, r3, #4
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a17      	ldr	r2, [pc, #92]	@ (8008c04 <TIM_OC2_SetConfig+0xe4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d003      	beq.n	8008bb4 <TIM_OC2_SetConfig+0x94>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a16      	ldr	r2, [pc, #88]	@ (8008c08 <TIM_OC2_SetConfig+0xe8>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d113      	bne.n	8008bdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40010400 	.word	0x40010400

08008c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	021b      	lsls	r3, r3, #8
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a21      	ldr	r2, [pc, #132]	@ (8008cec <TIM_OC3_SetConfig+0xe0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d003      	beq.n	8008c72 <TIM_OC3_SetConfig+0x66>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a20      	ldr	r2, [pc, #128]	@ (8008cf0 <TIM_OC3_SetConfig+0xe4>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d10d      	bne.n	8008c8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a16      	ldr	r2, [pc, #88]	@ (8008cec <TIM_OC3_SetConfig+0xe0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d003      	beq.n	8008c9e <TIM_OC3_SetConfig+0x92>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <TIM_OC3_SetConfig+0xe4>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d113      	bne.n	8008cc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	621a      	str	r2, [r3, #32]
}
 8008ce0:	bf00      	nop
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40010400 	.word	0x40010400

08008cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	031b      	lsls	r3, r3, #12
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a12      	ldr	r2, [pc, #72]	@ (8008d98 <TIM_OC4_SetConfig+0xa4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d003      	beq.n	8008d5c <TIM_OC4_SetConfig+0x68>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a11      	ldr	r2, [pc, #68]	@ (8008d9c <TIM_OC4_SetConfig+0xa8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d109      	bne.n	8008d70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	019b      	lsls	r3, r3, #6
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40010400 	.word	0x40010400

08008da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	f023 0201 	bic.w	r2, r3, #1
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 030a 	bic.w	r3, r3, #10
 8008ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b087      	sub	sp, #28
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	f023 0210 	bic.w	r2, r3, #16
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	031b      	lsls	r3, r3, #12
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b085      	sub	sp, #20
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f043 0307 	orr.w	r3, r3, #7
 8008e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	609a      	str	r2, [r3, #8]
}
 8008e88:	bf00      	nop
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	021a      	lsls	r2, r3, #8
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	609a      	str	r2, [r3, #8]
}
 8008ec8:	bf00      	nop
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f003 031f 	and.w	r3, r3, #31
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a1a      	ldr	r2, [r3, #32]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a1a      	ldr	r2, [r3, #32]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 031f 	and.w	r3, r3, #31
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e05a      	b.n	8008fee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a21      	ldr	r2, [pc, #132]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d022      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f84:	d01d      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8009000 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d018      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1b      	ldr	r2, [pc, #108]	@ (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009008 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00e      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a18      	ldr	r2, [pc, #96]	@ (800900c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d009      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a17      	ldr	r2, [pc, #92]	@ (8009010 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d004      	beq.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a15      	ldr	r2, [pc, #84]	@ (8009014 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d10c      	bne.n	8008fdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40000400 	.word	0x40000400
 8009004:	40000800 	.word	0x40000800
 8009008:	40000c00 	.word	0x40000c00
 800900c:	40010400 	.word	0x40010400
 8009010:	40014000 	.word	0x40014000
 8009014:	40001800 	.word	0x40001800

08009018 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009030:	2302      	movs	r3, #2
 8009032:	e03d      	b.n	80090b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <__cvt>:
 80090e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	ec57 6b10 	vmov	r6, r7, d0
 80090ec:	2f00      	cmp	r7, #0
 80090ee:	460c      	mov	r4, r1
 80090f0:	4619      	mov	r1, r3
 80090f2:	463b      	mov	r3, r7
 80090f4:	bfbb      	ittet	lt
 80090f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80090fa:	461f      	movlt	r7, r3
 80090fc:	2300      	movge	r3, #0
 80090fe:	232d      	movlt	r3, #45	@ 0x2d
 8009100:	700b      	strb	r3, [r1, #0]
 8009102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009104:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009108:	4691      	mov	r9, r2
 800910a:	f023 0820 	bic.w	r8, r3, #32
 800910e:	bfbc      	itt	lt
 8009110:	4632      	movlt	r2, r6
 8009112:	4616      	movlt	r6, r2
 8009114:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009118:	d005      	beq.n	8009126 <__cvt+0x42>
 800911a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800911e:	d100      	bne.n	8009122 <__cvt+0x3e>
 8009120:	3401      	adds	r4, #1
 8009122:	2102      	movs	r1, #2
 8009124:	e000      	b.n	8009128 <__cvt+0x44>
 8009126:	2103      	movs	r1, #3
 8009128:	ab03      	add	r3, sp, #12
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	ab02      	add	r3, sp, #8
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	ec47 6b10 	vmov	d0, r6, r7
 8009134:	4653      	mov	r3, sl
 8009136:	4622      	mov	r2, r4
 8009138:	f000 fe5a 	bl	8009df0 <_dtoa_r>
 800913c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009140:	4605      	mov	r5, r0
 8009142:	d119      	bne.n	8009178 <__cvt+0x94>
 8009144:	f019 0f01 	tst.w	r9, #1
 8009148:	d00e      	beq.n	8009168 <__cvt+0x84>
 800914a:	eb00 0904 	add.w	r9, r0, r4
 800914e:	2200      	movs	r2, #0
 8009150:	2300      	movs	r3, #0
 8009152:	4630      	mov	r0, r6
 8009154:	4639      	mov	r1, r7
 8009156:	f7f7 fcd7 	bl	8000b08 <__aeabi_dcmpeq>
 800915a:	b108      	cbz	r0, 8009160 <__cvt+0x7c>
 800915c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009160:	2230      	movs	r2, #48	@ 0x30
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	454b      	cmp	r3, r9
 8009166:	d31e      	bcc.n	80091a6 <__cvt+0xc2>
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800916c:	1b5b      	subs	r3, r3, r5
 800916e:	4628      	mov	r0, r5
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	b004      	add	sp, #16
 8009174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800917c:	eb00 0904 	add.w	r9, r0, r4
 8009180:	d1e5      	bne.n	800914e <__cvt+0x6a>
 8009182:	7803      	ldrb	r3, [r0, #0]
 8009184:	2b30      	cmp	r3, #48	@ 0x30
 8009186:	d10a      	bne.n	800919e <__cvt+0xba>
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	4630      	mov	r0, r6
 800918e:	4639      	mov	r1, r7
 8009190:	f7f7 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 8009194:	b918      	cbnz	r0, 800919e <__cvt+0xba>
 8009196:	f1c4 0401 	rsb	r4, r4, #1
 800919a:	f8ca 4000 	str.w	r4, [sl]
 800919e:	f8da 3000 	ldr.w	r3, [sl]
 80091a2:	4499      	add	r9, r3
 80091a4:	e7d3      	b.n	800914e <__cvt+0x6a>
 80091a6:	1c59      	adds	r1, r3, #1
 80091a8:	9103      	str	r1, [sp, #12]
 80091aa:	701a      	strb	r2, [r3, #0]
 80091ac:	e7d9      	b.n	8009162 <__cvt+0x7e>

080091ae <__exponent>:
 80091ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091b0:	2900      	cmp	r1, #0
 80091b2:	bfba      	itte	lt
 80091b4:	4249      	neglt	r1, r1
 80091b6:	232d      	movlt	r3, #45	@ 0x2d
 80091b8:	232b      	movge	r3, #43	@ 0x2b
 80091ba:	2909      	cmp	r1, #9
 80091bc:	7002      	strb	r2, [r0, #0]
 80091be:	7043      	strb	r3, [r0, #1]
 80091c0:	dd29      	ble.n	8009216 <__exponent+0x68>
 80091c2:	f10d 0307 	add.w	r3, sp, #7
 80091c6:	461d      	mov	r5, r3
 80091c8:	270a      	movs	r7, #10
 80091ca:	461a      	mov	r2, r3
 80091cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80091d0:	fb07 1416 	mls	r4, r7, r6, r1
 80091d4:	3430      	adds	r4, #48	@ 0x30
 80091d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80091da:	460c      	mov	r4, r1
 80091dc:	2c63      	cmp	r4, #99	@ 0x63
 80091de:	f103 33ff 	add.w	r3, r3, #4294967295
 80091e2:	4631      	mov	r1, r6
 80091e4:	dcf1      	bgt.n	80091ca <__exponent+0x1c>
 80091e6:	3130      	adds	r1, #48	@ 0x30
 80091e8:	1e94      	subs	r4, r2, #2
 80091ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80091ee:	1c41      	adds	r1, r0, #1
 80091f0:	4623      	mov	r3, r4
 80091f2:	42ab      	cmp	r3, r5
 80091f4:	d30a      	bcc.n	800920c <__exponent+0x5e>
 80091f6:	f10d 0309 	add.w	r3, sp, #9
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	42ac      	cmp	r4, r5
 80091fe:	bf88      	it	hi
 8009200:	2300      	movhi	r3, #0
 8009202:	3302      	adds	r3, #2
 8009204:	4403      	add	r3, r0
 8009206:	1a18      	subs	r0, r3, r0
 8009208:	b003      	add	sp, #12
 800920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009210:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009214:	e7ed      	b.n	80091f2 <__exponent+0x44>
 8009216:	2330      	movs	r3, #48	@ 0x30
 8009218:	3130      	adds	r1, #48	@ 0x30
 800921a:	7083      	strb	r3, [r0, #2]
 800921c:	70c1      	strb	r1, [r0, #3]
 800921e:	1d03      	adds	r3, r0, #4
 8009220:	e7f1      	b.n	8009206 <__exponent+0x58>
	...

08009224 <_printf_float>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	b08d      	sub	sp, #52	@ 0x34
 800922a:	460c      	mov	r4, r1
 800922c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009230:	4616      	mov	r6, r2
 8009232:	461f      	mov	r7, r3
 8009234:	4605      	mov	r5, r0
 8009236:	f000 fcdb 	bl	8009bf0 <_localeconv_r>
 800923a:	6803      	ldr	r3, [r0, #0]
 800923c:	9304      	str	r3, [sp, #16]
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 f836 	bl	80002b0 <strlen>
 8009244:	2300      	movs	r3, #0
 8009246:	930a      	str	r3, [sp, #40]	@ 0x28
 8009248:	f8d8 3000 	ldr.w	r3, [r8]
 800924c:	9005      	str	r0, [sp, #20]
 800924e:	3307      	adds	r3, #7
 8009250:	f023 0307 	bic.w	r3, r3, #7
 8009254:	f103 0208 	add.w	r2, r3, #8
 8009258:	f894 a018 	ldrb.w	sl, [r4, #24]
 800925c:	f8d4 b000 	ldr.w	fp, [r4]
 8009260:	f8c8 2000 	str.w	r2, [r8]
 8009264:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009268:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009272:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800927a:	4b9c      	ldr	r3, [pc, #624]	@ (80094ec <_printf_float+0x2c8>)
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	f7f7 fc74 	bl	8000b6c <__aeabi_dcmpun>
 8009284:	bb70      	cbnz	r0, 80092e4 <_printf_float+0xc0>
 8009286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800928a:	4b98      	ldr	r3, [pc, #608]	@ (80094ec <_printf_float+0x2c8>)
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	f7f7 fc4e 	bl	8000b30 <__aeabi_dcmple>
 8009294:	bb30      	cbnz	r0, 80092e4 <_printf_float+0xc0>
 8009296:	2200      	movs	r2, #0
 8009298:	2300      	movs	r3, #0
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	f7f7 fc3d 	bl	8000b1c <__aeabi_dcmplt>
 80092a2:	b110      	cbz	r0, 80092aa <_printf_float+0x86>
 80092a4:	232d      	movs	r3, #45	@ 0x2d
 80092a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092aa:	4a91      	ldr	r2, [pc, #580]	@ (80094f0 <_printf_float+0x2cc>)
 80092ac:	4b91      	ldr	r3, [pc, #580]	@ (80094f4 <_printf_float+0x2d0>)
 80092ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092b2:	bf94      	ite	ls
 80092b4:	4690      	movls	r8, r2
 80092b6:	4698      	movhi	r8, r3
 80092b8:	2303      	movs	r3, #3
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	f02b 0304 	bic.w	r3, fp, #4
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	9700      	str	r7, [sp, #0]
 80092c8:	4633      	mov	r3, r6
 80092ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80092cc:	4621      	mov	r1, r4
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f9d2 	bl	8009678 <_printf_common>
 80092d4:	3001      	adds	r0, #1
 80092d6:	f040 808d 	bne.w	80093f4 <_printf_float+0x1d0>
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	b00d      	add	sp, #52	@ 0x34
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	4642      	mov	r2, r8
 80092e6:	464b      	mov	r3, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f7 fc3e 	bl	8000b6c <__aeabi_dcmpun>
 80092f0:	b140      	cbz	r0, 8009304 <_printf_float+0xe0>
 80092f2:	464b      	mov	r3, r9
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfbc      	itt	lt
 80092f8:	232d      	movlt	r3, #45	@ 0x2d
 80092fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80092fe:	4a7e      	ldr	r2, [pc, #504]	@ (80094f8 <_printf_float+0x2d4>)
 8009300:	4b7e      	ldr	r3, [pc, #504]	@ (80094fc <_printf_float+0x2d8>)
 8009302:	e7d4      	b.n	80092ae <_printf_float+0x8a>
 8009304:	6863      	ldr	r3, [r4, #4]
 8009306:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800930a:	9206      	str	r2, [sp, #24]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	d13b      	bne.n	8009388 <_printf_float+0x164>
 8009310:	2306      	movs	r3, #6
 8009312:	6063      	str	r3, [r4, #4]
 8009314:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009318:	2300      	movs	r3, #0
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	9303      	str	r3, [sp, #12]
 800931e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009320:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009324:	ab09      	add	r3, sp, #36	@ 0x24
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	6861      	ldr	r1, [r4, #4]
 800932a:	ec49 8b10 	vmov	d0, r8, r9
 800932e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009332:	4628      	mov	r0, r5
 8009334:	f7ff fed6 	bl	80090e4 <__cvt>
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800933c:	2b47      	cmp	r3, #71	@ 0x47
 800933e:	4680      	mov	r8, r0
 8009340:	d129      	bne.n	8009396 <_printf_float+0x172>
 8009342:	1cc8      	adds	r0, r1, #3
 8009344:	db02      	blt.n	800934c <_printf_float+0x128>
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	4299      	cmp	r1, r3
 800934a:	dd41      	ble.n	80093d0 <_printf_float+0x1ac>
 800934c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009350:	fa5f fa8a 	uxtb.w	sl, sl
 8009354:	3901      	subs	r1, #1
 8009356:	4652      	mov	r2, sl
 8009358:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800935c:	9109      	str	r1, [sp, #36]	@ 0x24
 800935e:	f7ff ff26 	bl	80091ae <__exponent>
 8009362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009364:	1813      	adds	r3, r2, r0
 8009366:	2a01      	cmp	r2, #1
 8009368:	4681      	mov	r9, r0
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	dc02      	bgt.n	8009374 <_printf_float+0x150>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	07d2      	lsls	r2, r2, #31
 8009372:	d501      	bpl.n	8009378 <_printf_float+0x154>
 8009374:	3301      	adds	r3, #1
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0a2      	beq.n	80092c6 <_printf_float+0xa2>
 8009380:	232d      	movs	r3, #45	@ 0x2d
 8009382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009386:	e79e      	b.n	80092c6 <_printf_float+0xa2>
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	2a47      	cmp	r2, #71	@ 0x47
 800938c:	d1c2      	bne.n	8009314 <_printf_float+0xf0>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1c0      	bne.n	8009314 <_printf_float+0xf0>
 8009392:	2301      	movs	r3, #1
 8009394:	e7bd      	b.n	8009312 <_printf_float+0xee>
 8009396:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800939a:	d9db      	bls.n	8009354 <_printf_float+0x130>
 800939c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093a0:	d118      	bne.n	80093d4 <_printf_float+0x1b0>
 80093a2:	2900      	cmp	r1, #0
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	dd0b      	ble.n	80093c0 <_printf_float+0x19c>
 80093a8:	6121      	str	r1, [r4, #16]
 80093aa:	b913      	cbnz	r3, 80093b2 <_printf_float+0x18e>
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	07d0      	lsls	r0, r2, #31
 80093b0:	d502      	bpl.n	80093b8 <_printf_float+0x194>
 80093b2:	3301      	adds	r3, #1
 80093b4:	440b      	add	r3, r1
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093ba:	f04f 0900 	mov.w	r9, #0
 80093be:	e7db      	b.n	8009378 <_printf_float+0x154>
 80093c0:	b913      	cbnz	r3, 80093c8 <_printf_float+0x1a4>
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	07d2      	lsls	r2, r2, #31
 80093c6:	d501      	bpl.n	80093cc <_printf_float+0x1a8>
 80093c8:	3302      	adds	r3, #2
 80093ca:	e7f4      	b.n	80093b6 <_printf_float+0x192>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e7f2      	b.n	80093b6 <_printf_float+0x192>
 80093d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80093d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093d6:	4299      	cmp	r1, r3
 80093d8:	db05      	blt.n	80093e6 <_printf_float+0x1c2>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	6121      	str	r1, [r4, #16]
 80093de:	07d8      	lsls	r0, r3, #31
 80093e0:	d5ea      	bpl.n	80093b8 <_printf_float+0x194>
 80093e2:	1c4b      	adds	r3, r1, #1
 80093e4:	e7e7      	b.n	80093b6 <_printf_float+0x192>
 80093e6:	2900      	cmp	r1, #0
 80093e8:	bfd4      	ite	le
 80093ea:	f1c1 0202 	rsble	r2, r1, #2
 80093ee:	2201      	movgt	r2, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	e7e0      	b.n	80093b6 <_printf_float+0x192>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	055a      	lsls	r2, r3, #21
 80093f8:	d407      	bmi.n	800940a <_printf_float+0x1e6>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	4642      	mov	r2, r8
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	d12b      	bne.n	8009460 <_printf_float+0x23c>
 8009408:	e767      	b.n	80092da <_printf_float+0xb6>
 800940a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800940e:	f240 80dd 	bls.w	80095cc <_printf_float+0x3a8>
 8009412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	f7f7 fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800941e:	2800      	cmp	r0, #0
 8009420:	d033      	beq.n	800948a <_printf_float+0x266>
 8009422:	4a37      	ldr	r2, [pc, #220]	@ (8009500 <_printf_float+0x2dc>)
 8009424:	2301      	movs	r3, #1
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f af54 	beq.w	80092da <_printf_float+0xb6>
 8009432:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009436:	4543      	cmp	r3, r8
 8009438:	db02      	blt.n	8009440 <_printf_float+0x21c>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	07d8      	lsls	r0, r3, #31
 800943e:	d50f      	bpl.n	8009460 <_printf_float+0x23c>
 8009440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f af45 	beq.w	80092da <_printf_float+0xb6>
 8009450:	f04f 0900 	mov.w	r9, #0
 8009454:	f108 38ff 	add.w	r8, r8, #4294967295
 8009458:	f104 0a1a 	add.w	sl, r4, #26
 800945c:	45c8      	cmp	r8, r9
 800945e:	dc09      	bgt.n	8009474 <_printf_float+0x250>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	079b      	lsls	r3, r3, #30
 8009464:	f100 8103 	bmi.w	800966e <_printf_float+0x44a>
 8009468:	68e0      	ldr	r0, [r4, #12]
 800946a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800946c:	4298      	cmp	r0, r3
 800946e:	bfb8      	it	lt
 8009470:	4618      	movlt	r0, r3
 8009472:	e734      	b.n	80092de <_printf_float+0xba>
 8009474:	2301      	movs	r3, #1
 8009476:	4652      	mov	r2, sl
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f af2b 	beq.w	80092da <_printf_float+0xb6>
 8009484:	f109 0901 	add.w	r9, r9, #1
 8009488:	e7e8      	b.n	800945c <_printf_float+0x238>
 800948a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948c:	2b00      	cmp	r3, #0
 800948e:	dc39      	bgt.n	8009504 <_printf_float+0x2e0>
 8009490:	4a1b      	ldr	r2, [pc, #108]	@ (8009500 <_printf_float+0x2dc>)
 8009492:	2301      	movs	r3, #1
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af1d 	beq.w	80092da <_printf_float+0xb6>
 80094a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094a4:	ea59 0303 	orrs.w	r3, r9, r3
 80094a8:	d102      	bne.n	80094b0 <_printf_float+0x28c>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	07d9      	lsls	r1, r3, #31
 80094ae:	d5d7      	bpl.n	8009460 <_printf_float+0x23c>
 80094b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	f43f af0d 	beq.w	80092da <_printf_float+0xb6>
 80094c0:	f04f 0a00 	mov.w	sl, #0
 80094c4:	f104 0b1a 	add.w	fp, r4, #26
 80094c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ca:	425b      	negs	r3, r3
 80094cc:	4553      	cmp	r3, sl
 80094ce:	dc01      	bgt.n	80094d4 <_printf_float+0x2b0>
 80094d0:	464b      	mov	r3, r9
 80094d2:	e793      	b.n	80093fc <_printf_float+0x1d8>
 80094d4:	2301      	movs	r3, #1
 80094d6:	465a      	mov	r2, fp
 80094d8:	4631      	mov	r1, r6
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	f43f aefb 	beq.w	80092da <_printf_float+0xb6>
 80094e4:	f10a 0a01 	add.w	sl, sl, #1
 80094e8:	e7ee      	b.n	80094c8 <_printf_float+0x2a4>
 80094ea:	bf00      	nop
 80094ec:	7fefffff 	.word	0x7fefffff
 80094f0:	0800dd78 	.word	0x0800dd78
 80094f4:	0800dd7c 	.word	0x0800dd7c
 80094f8:	0800dd80 	.word	0x0800dd80
 80094fc:	0800dd84 	.word	0x0800dd84
 8009500:	0800dd88 	.word	0x0800dd88
 8009504:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009506:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800950a:	4553      	cmp	r3, sl
 800950c:	bfa8      	it	ge
 800950e:	4653      	movge	r3, sl
 8009510:	2b00      	cmp	r3, #0
 8009512:	4699      	mov	r9, r3
 8009514:	dc36      	bgt.n	8009584 <_printf_float+0x360>
 8009516:	f04f 0b00 	mov.w	fp, #0
 800951a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800951e:	f104 021a 	add.w	r2, r4, #26
 8009522:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009524:	9306      	str	r3, [sp, #24]
 8009526:	eba3 0309 	sub.w	r3, r3, r9
 800952a:	455b      	cmp	r3, fp
 800952c:	dc31      	bgt.n	8009592 <_printf_float+0x36e>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	459a      	cmp	sl, r3
 8009532:	dc3a      	bgt.n	80095aa <_printf_float+0x386>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	07da      	lsls	r2, r3, #31
 8009538:	d437      	bmi.n	80095aa <_printf_float+0x386>
 800953a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953c:	ebaa 0903 	sub.w	r9, sl, r3
 8009540:	9b06      	ldr	r3, [sp, #24]
 8009542:	ebaa 0303 	sub.w	r3, sl, r3
 8009546:	4599      	cmp	r9, r3
 8009548:	bfa8      	it	ge
 800954a:	4699      	movge	r9, r3
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	dc33      	bgt.n	80095ba <_printf_float+0x396>
 8009552:	f04f 0800 	mov.w	r8, #0
 8009556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800955a:	f104 0b1a 	add.w	fp, r4, #26
 800955e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009560:	ebaa 0303 	sub.w	r3, sl, r3
 8009564:	eba3 0309 	sub.w	r3, r3, r9
 8009568:	4543      	cmp	r3, r8
 800956a:	f77f af79 	ble.w	8009460 <_printf_float+0x23c>
 800956e:	2301      	movs	r3, #1
 8009570:	465a      	mov	r2, fp
 8009572:	4631      	mov	r1, r6
 8009574:	4628      	mov	r0, r5
 8009576:	47b8      	blx	r7
 8009578:	3001      	adds	r0, #1
 800957a:	f43f aeae 	beq.w	80092da <_printf_float+0xb6>
 800957e:	f108 0801 	add.w	r8, r8, #1
 8009582:	e7ec      	b.n	800955e <_printf_float+0x33a>
 8009584:	4642      	mov	r2, r8
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	d1c2      	bne.n	8009516 <_printf_float+0x2f2>
 8009590:	e6a3      	b.n	80092da <_printf_float+0xb6>
 8009592:	2301      	movs	r3, #1
 8009594:	4631      	mov	r1, r6
 8009596:	4628      	mov	r0, r5
 8009598:	9206      	str	r2, [sp, #24]
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f ae9c 	beq.w	80092da <_printf_float+0xb6>
 80095a2:	9a06      	ldr	r2, [sp, #24]
 80095a4:	f10b 0b01 	add.w	fp, fp, #1
 80095a8:	e7bb      	b.n	8009522 <_printf_float+0x2fe>
 80095aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1c0      	bne.n	800953a <_printf_float+0x316>
 80095b8:	e68f      	b.n	80092da <_printf_float+0xb6>
 80095ba:	9a06      	ldr	r2, [sp, #24]
 80095bc:	464b      	mov	r3, r9
 80095be:	4442      	add	r2, r8
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	d1c3      	bne.n	8009552 <_printf_float+0x32e>
 80095ca:	e686      	b.n	80092da <_printf_float+0xb6>
 80095cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095d0:	f1ba 0f01 	cmp.w	sl, #1
 80095d4:	dc01      	bgt.n	80095da <_printf_float+0x3b6>
 80095d6:	07db      	lsls	r3, r3, #31
 80095d8:	d536      	bpl.n	8009648 <_printf_float+0x424>
 80095da:	2301      	movs	r3, #1
 80095dc:	4642      	mov	r2, r8
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f ae78 	beq.w	80092da <_printf_float+0xb6>
 80095ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ee:	4631      	mov	r1, r6
 80095f0:	4628      	mov	r0, r5
 80095f2:	47b8      	blx	r7
 80095f4:	3001      	adds	r0, #1
 80095f6:	f43f ae70 	beq.w	80092da <_printf_float+0xb6>
 80095fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009606:	f7f7 fa7f 	bl	8000b08 <__aeabi_dcmpeq>
 800960a:	b9c0      	cbnz	r0, 800963e <_printf_float+0x41a>
 800960c:	4653      	mov	r3, sl
 800960e:	f108 0201 	add.w	r2, r8, #1
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d10c      	bne.n	8009636 <_printf_float+0x412>
 800961c:	e65d      	b.n	80092da <_printf_float+0xb6>
 800961e:	2301      	movs	r3, #1
 8009620:	465a      	mov	r2, fp
 8009622:	4631      	mov	r1, r6
 8009624:	4628      	mov	r0, r5
 8009626:	47b8      	blx	r7
 8009628:	3001      	adds	r0, #1
 800962a:	f43f ae56 	beq.w	80092da <_printf_float+0xb6>
 800962e:	f108 0801 	add.w	r8, r8, #1
 8009632:	45d0      	cmp	r8, sl
 8009634:	dbf3      	blt.n	800961e <_printf_float+0x3fa>
 8009636:	464b      	mov	r3, r9
 8009638:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800963c:	e6df      	b.n	80093fe <_printf_float+0x1da>
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	f104 0b1a 	add.w	fp, r4, #26
 8009646:	e7f4      	b.n	8009632 <_printf_float+0x40e>
 8009648:	2301      	movs	r3, #1
 800964a:	4642      	mov	r2, r8
 800964c:	e7e1      	b.n	8009612 <_printf_float+0x3ee>
 800964e:	2301      	movs	r3, #1
 8009650:	464a      	mov	r2, r9
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f ae3e 	beq.w	80092da <_printf_float+0xb6>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	68e3      	ldr	r3, [r4, #12]
 8009664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009666:	1a5b      	subs	r3, r3, r1
 8009668:	4543      	cmp	r3, r8
 800966a:	dcf0      	bgt.n	800964e <_printf_float+0x42a>
 800966c:	e6fc      	b.n	8009468 <_printf_float+0x244>
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	f104 0919 	add.w	r9, r4, #25
 8009676:	e7f4      	b.n	8009662 <_printf_float+0x43e>

08009678 <_printf_common>:
 8009678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800967c:	4616      	mov	r6, r2
 800967e:	4698      	mov	r8, r3
 8009680:	688a      	ldr	r2, [r1, #8]
 8009682:	690b      	ldr	r3, [r1, #16]
 8009684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009688:	4293      	cmp	r3, r2
 800968a:	bfb8      	it	lt
 800968c:	4613      	movlt	r3, r2
 800968e:	6033      	str	r3, [r6, #0]
 8009690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009694:	4607      	mov	r7, r0
 8009696:	460c      	mov	r4, r1
 8009698:	b10a      	cbz	r2, 800969e <_printf_common+0x26>
 800969a:	3301      	adds	r3, #1
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	0699      	lsls	r1, r3, #26
 80096a2:	bf42      	ittt	mi
 80096a4:	6833      	ldrmi	r3, [r6, #0]
 80096a6:	3302      	addmi	r3, #2
 80096a8:	6033      	strmi	r3, [r6, #0]
 80096aa:	6825      	ldr	r5, [r4, #0]
 80096ac:	f015 0506 	ands.w	r5, r5, #6
 80096b0:	d106      	bne.n	80096c0 <_printf_common+0x48>
 80096b2:	f104 0a19 	add.w	sl, r4, #25
 80096b6:	68e3      	ldr	r3, [r4, #12]
 80096b8:	6832      	ldr	r2, [r6, #0]
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	42ab      	cmp	r3, r5
 80096be:	dc26      	bgt.n	800970e <_printf_common+0x96>
 80096c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	3b00      	subs	r3, #0
 80096c8:	bf18      	it	ne
 80096ca:	2301      	movne	r3, #1
 80096cc:	0692      	lsls	r2, r2, #26
 80096ce:	d42b      	bmi.n	8009728 <_printf_common+0xb0>
 80096d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096d4:	4641      	mov	r1, r8
 80096d6:	4638      	mov	r0, r7
 80096d8:	47c8      	blx	r9
 80096da:	3001      	adds	r0, #1
 80096dc:	d01e      	beq.n	800971c <_printf_common+0xa4>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	6922      	ldr	r2, [r4, #16]
 80096e2:	f003 0306 	and.w	r3, r3, #6
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	bf02      	ittt	eq
 80096ea:	68e5      	ldreq	r5, [r4, #12]
 80096ec:	6833      	ldreq	r3, [r6, #0]
 80096ee:	1aed      	subeq	r5, r5, r3
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	bf0c      	ite	eq
 80096f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f8:	2500      	movne	r5, #0
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bfc4      	itt	gt
 80096fe:	1a9b      	subgt	r3, r3, r2
 8009700:	18ed      	addgt	r5, r5, r3
 8009702:	2600      	movs	r6, #0
 8009704:	341a      	adds	r4, #26
 8009706:	42b5      	cmp	r5, r6
 8009708:	d11a      	bne.n	8009740 <_printf_common+0xc8>
 800970a:	2000      	movs	r0, #0
 800970c:	e008      	b.n	8009720 <_printf_common+0xa8>
 800970e:	2301      	movs	r3, #1
 8009710:	4652      	mov	r2, sl
 8009712:	4641      	mov	r1, r8
 8009714:	4638      	mov	r0, r7
 8009716:	47c8      	blx	r9
 8009718:	3001      	adds	r0, #1
 800971a:	d103      	bne.n	8009724 <_printf_common+0xac>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	3501      	adds	r5, #1
 8009726:	e7c6      	b.n	80096b6 <_printf_common+0x3e>
 8009728:	18e1      	adds	r1, r4, r3
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	2030      	movs	r0, #48	@ 0x30
 800972e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009732:	4422      	add	r2, r4
 8009734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800973c:	3302      	adds	r3, #2
 800973e:	e7c7      	b.n	80096d0 <_printf_common+0x58>
 8009740:	2301      	movs	r3, #1
 8009742:	4622      	mov	r2, r4
 8009744:	4641      	mov	r1, r8
 8009746:	4638      	mov	r0, r7
 8009748:	47c8      	blx	r9
 800974a:	3001      	adds	r0, #1
 800974c:	d0e6      	beq.n	800971c <_printf_common+0xa4>
 800974e:	3601      	adds	r6, #1
 8009750:	e7d9      	b.n	8009706 <_printf_common+0x8e>
	...

08009754 <_printf_i>:
 8009754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	7e0f      	ldrb	r7, [r1, #24]
 800975a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800975c:	2f78      	cmp	r7, #120	@ 0x78
 800975e:	4691      	mov	r9, r2
 8009760:	4680      	mov	r8, r0
 8009762:	460c      	mov	r4, r1
 8009764:	469a      	mov	sl, r3
 8009766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800976a:	d807      	bhi.n	800977c <_printf_i+0x28>
 800976c:	2f62      	cmp	r7, #98	@ 0x62
 800976e:	d80a      	bhi.n	8009786 <_printf_i+0x32>
 8009770:	2f00      	cmp	r7, #0
 8009772:	f000 80d2 	beq.w	800991a <_printf_i+0x1c6>
 8009776:	2f58      	cmp	r7, #88	@ 0x58
 8009778:	f000 80b9 	beq.w	80098ee <_printf_i+0x19a>
 800977c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009784:	e03a      	b.n	80097fc <_printf_i+0xa8>
 8009786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800978a:	2b15      	cmp	r3, #21
 800978c:	d8f6      	bhi.n	800977c <_printf_i+0x28>
 800978e:	a101      	add	r1, pc, #4	@ (adr r1, 8009794 <_printf_i+0x40>)
 8009790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009794:	080097ed 	.word	0x080097ed
 8009798:	08009801 	.word	0x08009801
 800979c:	0800977d 	.word	0x0800977d
 80097a0:	0800977d 	.word	0x0800977d
 80097a4:	0800977d 	.word	0x0800977d
 80097a8:	0800977d 	.word	0x0800977d
 80097ac:	08009801 	.word	0x08009801
 80097b0:	0800977d 	.word	0x0800977d
 80097b4:	0800977d 	.word	0x0800977d
 80097b8:	0800977d 	.word	0x0800977d
 80097bc:	0800977d 	.word	0x0800977d
 80097c0:	08009901 	.word	0x08009901
 80097c4:	0800982b 	.word	0x0800982b
 80097c8:	080098bb 	.word	0x080098bb
 80097cc:	0800977d 	.word	0x0800977d
 80097d0:	0800977d 	.word	0x0800977d
 80097d4:	08009923 	.word	0x08009923
 80097d8:	0800977d 	.word	0x0800977d
 80097dc:	0800982b 	.word	0x0800982b
 80097e0:	0800977d 	.word	0x0800977d
 80097e4:	0800977d 	.word	0x0800977d
 80097e8:	080098c3 	.word	0x080098c3
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	1d1a      	adds	r2, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6032      	str	r2, [r6, #0]
 80097f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097fc:	2301      	movs	r3, #1
 80097fe:	e09d      	b.n	800993c <_printf_i+0x1e8>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	6820      	ldr	r0, [r4, #0]
 8009804:	1d19      	adds	r1, r3, #4
 8009806:	6031      	str	r1, [r6, #0]
 8009808:	0606      	lsls	r6, r0, #24
 800980a:	d501      	bpl.n	8009810 <_printf_i+0xbc>
 800980c:	681d      	ldr	r5, [r3, #0]
 800980e:	e003      	b.n	8009818 <_printf_i+0xc4>
 8009810:	0645      	lsls	r5, r0, #25
 8009812:	d5fb      	bpl.n	800980c <_printf_i+0xb8>
 8009814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009818:	2d00      	cmp	r5, #0
 800981a:	da03      	bge.n	8009824 <_printf_i+0xd0>
 800981c:	232d      	movs	r3, #45	@ 0x2d
 800981e:	426d      	negs	r5, r5
 8009820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009824:	4859      	ldr	r0, [pc, #356]	@ (800998c <_printf_i+0x238>)
 8009826:	230a      	movs	r3, #10
 8009828:	e011      	b.n	800984e <_printf_i+0xfa>
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	0608      	lsls	r0, r1, #24
 8009830:	f853 5b04 	ldr.w	r5, [r3], #4
 8009834:	d402      	bmi.n	800983c <_printf_i+0xe8>
 8009836:	0649      	lsls	r1, r1, #25
 8009838:	bf48      	it	mi
 800983a:	b2ad      	uxthmi	r5, r5
 800983c:	2f6f      	cmp	r7, #111	@ 0x6f
 800983e:	4853      	ldr	r0, [pc, #332]	@ (800998c <_printf_i+0x238>)
 8009840:	6033      	str	r3, [r6, #0]
 8009842:	bf14      	ite	ne
 8009844:	230a      	movne	r3, #10
 8009846:	2308      	moveq	r3, #8
 8009848:	2100      	movs	r1, #0
 800984a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800984e:	6866      	ldr	r6, [r4, #4]
 8009850:	60a6      	str	r6, [r4, #8]
 8009852:	2e00      	cmp	r6, #0
 8009854:	bfa2      	ittt	ge
 8009856:	6821      	ldrge	r1, [r4, #0]
 8009858:	f021 0104 	bicge.w	r1, r1, #4
 800985c:	6021      	strge	r1, [r4, #0]
 800985e:	b90d      	cbnz	r5, 8009864 <_printf_i+0x110>
 8009860:	2e00      	cmp	r6, #0
 8009862:	d04b      	beq.n	80098fc <_printf_i+0x1a8>
 8009864:	4616      	mov	r6, r2
 8009866:	fbb5 f1f3 	udiv	r1, r5, r3
 800986a:	fb03 5711 	mls	r7, r3, r1, r5
 800986e:	5dc7      	ldrb	r7, [r0, r7]
 8009870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009874:	462f      	mov	r7, r5
 8009876:	42bb      	cmp	r3, r7
 8009878:	460d      	mov	r5, r1
 800987a:	d9f4      	bls.n	8009866 <_printf_i+0x112>
 800987c:	2b08      	cmp	r3, #8
 800987e:	d10b      	bne.n	8009898 <_printf_i+0x144>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	07df      	lsls	r7, r3, #31
 8009884:	d508      	bpl.n	8009898 <_printf_i+0x144>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	6861      	ldr	r1, [r4, #4]
 800988a:	4299      	cmp	r1, r3
 800988c:	bfde      	ittt	le
 800988e:	2330      	movle	r3, #48	@ 0x30
 8009890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009894:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009898:	1b92      	subs	r2, r2, r6
 800989a:	6122      	str	r2, [r4, #16]
 800989c:	f8cd a000 	str.w	sl, [sp]
 80098a0:	464b      	mov	r3, r9
 80098a2:	aa03      	add	r2, sp, #12
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f7ff fee6 	bl	8009678 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d14a      	bne.n	8009946 <_printf_i+0x1f2>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b004      	add	sp, #16
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	4833      	ldr	r0, [pc, #204]	@ (8009990 <_printf_i+0x23c>)
 80098c4:	2778      	movs	r7, #120	@ 0x78
 80098c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	6831      	ldr	r1, [r6, #0]
 80098ce:	061f      	lsls	r7, r3, #24
 80098d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80098d4:	d402      	bmi.n	80098dc <_printf_i+0x188>
 80098d6:	065f      	lsls	r7, r3, #25
 80098d8:	bf48      	it	mi
 80098da:	b2ad      	uxthmi	r5, r5
 80098dc:	6031      	str	r1, [r6, #0]
 80098de:	07d9      	lsls	r1, r3, #31
 80098e0:	bf44      	itt	mi
 80098e2:	f043 0320 	orrmi.w	r3, r3, #32
 80098e6:	6023      	strmi	r3, [r4, #0]
 80098e8:	b11d      	cbz	r5, 80098f2 <_printf_i+0x19e>
 80098ea:	2310      	movs	r3, #16
 80098ec:	e7ac      	b.n	8009848 <_printf_i+0xf4>
 80098ee:	4827      	ldr	r0, [pc, #156]	@ (800998c <_printf_i+0x238>)
 80098f0:	e7e9      	b.n	80098c6 <_printf_i+0x172>
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	f023 0320 	bic.w	r3, r3, #32
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	e7f6      	b.n	80098ea <_printf_i+0x196>
 80098fc:	4616      	mov	r6, r2
 80098fe:	e7bd      	b.n	800987c <_printf_i+0x128>
 8009900:	6833      	ldr	r3, [r6, #0]
 8009902:	6825      	ldr	r5, [r4, #0]
 8009904:	6961      	ldr	r1, [r4, #20]
 8009906:	1d18      	adds	r0, r3, #4
 8009908:	6030      	str	r0, [r6, #0]
 800990a:	062e      	lsls	r6, r5, #24
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	d501      	bpl.n	8009914 <_printf_i+0x1c0>
 8009910:	6019      	str	r1, [r3, #0]
 8009912:	e002      	b.n	800991a <_printf_i+0x1c6>
 8009914:	0668      	lsls	r0, r5, #25
 8009916:	d5fb      	bpl.n	8009910 <_printf_i+0x1bc>
 8009918:	8019      	strh	r1, [r3, #0]
 800991a:	2300      	movs	r3, #0
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	4616      	mov	r6, r2
 8009920:	e7bc      	b.n	800989c <_printf_i+0x148>
 8009922:	6833      	ldr	r3, [r6, #0]
 8009924:	1d1a      	adds	r2, r3, #4
 8009926:	6032      	str	r2, [r6, #0]
 8009928:	681e      	ldr	r6, [r3, #0]
 800992a:	6862      	ldr	r2, [r4, #4]
 800992c:	2100      	movs	r1, #0
 800992e:	4630      	mov	r0, r6
 8009930:	f7f6 fc6e 	bl	8000210 <memchr>
 8009934:	b108      	cbz	r0, 800993a <_printf_i+0x1e6>
 8009936:	1b80      	subs	r0, r0, r6
 8009938:	6060      	str	r0, [r4, #4]
 800993a:	6863      	ldr	r3, [r4, #4]
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	2300      	movs	r3, #0
 8009940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009944:	e7aa      	b.n	800989c <_printf_i+0x148>
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	4632      	mov	r2, r6
 800994a:	4649      	mov	r1, r9
 800994c:	4640      	mov	r0, r8
 800994e:	47d0      	blx	sl
 8009950:	3001      	adds	r0, #1
 8009952:	d0ad      	beq.n	80098b0 <_printf_i+0x15c>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	079b      	lsls	r3, r3, #30
 8009958:	d413      	bmi.n	8009982 <_printf_i+0x22e>
 800995a:	68e0      	ldr	r0, [r4, #12]
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	4298      	cmp	r0, r3
 8009960:	bfb8      	it	lt
 8009962:	4618      	movlt	r0, r3
 8009964:	e7a6      	b.n	80098b4 <_printf_i+0x160>
 8009966:	2301      	movs	r3, #1
 8009968:	4632      	mov	r2, r6
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	47d0      	blx	sl
 8009970:	3001      	adds	r0, #1
 8009972:	d09d      	beq.n	80098b0 <_printf_i+0x15c>
 8009974:	3501      	adds	r5, #1
 8009976:	68e3      	ldr	r3, [r4, #12]
 8009978:	9903      	ldr	r1, [sp, #12]
 800997a:	1a5b      	subs	r3, r3, r1
 800997c:	42ab      	cmp	r3, r5
 800997e:	dcf2      	bgt.n	8009966 <_printf_i+0x212>
 8009980:	e7eb      	b.n	800995a <_printf_i+0x206>
 8009982:	2500      	movs	r5, #0
 8009984:	f104 0619 	add.w	r6, r4, #25
 8009988:	e7f5      	b.n	8009976 <_printf_i+0x222>
 800998a:	bf00      	nop
 800998c:	0800dd8a 	.word	0x0800dd8a
 8009990:	0800dd9b 	.word	0x0800dd9b

08009994 <std>:
 8009994:	2300      	movs	r3, #0
 8009996:	b510      	push	{r4, lr}
 8009998:	4604      	mov	r4, r0
 800999a:	e9c0 3300 	strd	r3, r3, [r0]
 800999e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a2:	6083      	str	r3, [r0, #8]
 80099a4:	8181      	strh	r1, [r0, #12]
 80099a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80099a8:	81c2      	strh	r2, [r0, #14]
 80099aa:	6183      	str	r3, [r0, #24]
 80099ac:	4619      	mov	r1, r3
 80099ae:	2208      	movs	r2, #8
 80099b0:	305c      	adds	r0, #92	@ 0x5c
 80099b2:	f000 f914 	bl	8009bde <memset>
 80099b6:	4b0d      	ldr	r3, [pc, #52]	@ (80099ec <std+0x58>)
 80099b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099ba:	4b0d      	ldr	r3, [pc, #52]	@ (80099f0 <std+0x5c>)
 80099bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099be:	4b0d      	ldr	r3, [pc, #52]	@ (80099f4 <std+0x60>)
 80099c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099c2:	4b0d      	ldr	r3, [pc, #52]	@ (80099f8 <std+0x64>)
 80099c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80099c6:	4b0d      	ldr	r3, [pc, #52]	@ (80099fc <std+0x68>)
 80099c8:	6224      	str	r4, [r4, #32]
 80099ca:	429c      	cmp	r4, r3
 80099cc:	d006      	beq.n	80099dc <std+0x48>
 80099ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099d2:	4294      	cmp	r4, r2
 80099d4:	d002      	beq.n	80099dc <std+0x48>
 80099d6:	33d0      	adds	r3, #208	@ 0xd0
 80099d8:	429c      	cmp	r4, r3
 80099da:	d105      	bne.n	80099e8 <std+0x54>
 80099dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e4:	f000 b978 	b.w	8009cd8 <__retarget_lock_init_recursive>
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	08009b59 	.word	0x08009b59
 80099f0:	08009b7b 	.word	0x08009b7b
 80099f4:	08009bb3 	.word	0x08009bb3
 80099f8:	08009bd7 	.word	0x08009bd7
 80099fc:	20000a14 	.word	0x20000a14

08009a00 <stdio_exit_handler>:
 8009a00:	4a02      	ldr	r2, [pc, #8]	@ (8009a0c <stdio_exit_handler+0xc>)
 8009a02:	4903      	ldr	r1, [pc, #12]	@ (8009a10 <stdio_exit_handler+0x10>)
 8009a04:	4803      	ldr	r0, [pc, #12]	@ (8009a14 <stdio_exit_handler+0x14>)
 8009a06:	f000 b869 	b.w	8009adc <_fwalk_sglue>
 8009a0a:	bf00      	nop
 8009a0c:	200000ac 	.word	0x200000ac
 8009a10:	0800b635 	.word	0x0800b635
 8009a14:	200000bc 	.word	0x200000bc

08009a18 <cleanup_stdio>:
 8009a18:	6841      	ldr	r1, [r0, #4]
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <cleanup_stdio+0x34>)
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	b510      	push	{r4, lr}
 8009a20:	4604      	mov	r4, r0
 8009a22:	d001      	beq.n	8009a28 <cleanup_stdio+0x10>
 8009a24:	f001 fe06 	bl	800b634 <_fflush_r>
 8009a28:	68a1      	ldr	r1, [r4, #8]
 8009a2a:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <cleanup_stdio+0x38>)
 8009a2c:	4299      	cmp	r1, r3
 8009a2e:	d002      	beq.n	8009a36 <cleanup_stdio+0x1e>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fdff 	bl	800b634 <_fflush_r>
 8009a36:	68e1      	ldr	r1, [r4, #12]
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <cleanup_stdio+0x3c>)
 8009a3a:	4299      	cmp	r1, r3
 8009a3c:	d004      	beq.n	8009a48 <cleanup_stdio+0x30>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a44:	f001 bdf6 	b.w	800b634 <_fflush_r>
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000a14 	.word	0x20000a14
 8009a50:	20000a7c 	.word	0x20000a7c
 8009a54:	20000ae4 	.word	0x20000ae4

08009a58 <global_stdio_init.part.0>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a88 <global_stdio_init.part.0+0x30>)
 8009a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a8c <global_stdio_init.part.0+0x34>)
 8009a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a90 <global_stdio_init.part.0+0x38>)
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	4620      	mov	r0, r4
 8009a64:	2200      	movs	r2, #0
 8009a66:	2104      	movs	r1, #4
 8009a68:	f7ff ff94 	bl	8009994 <std>
 8009a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a70:	2201      	movs	r2, #1
 8009a72:	2109      	movs	r1, #9
 8009a74:	f7ff ff8e 	bl	8009994 <std>
 8009a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a82:	2112      	movs	r1, #18
 8009a84:	f7ff bf86 	b.w	8009994 <std>
 8009a88:	20000b4c 	.word	0x20000b4c
 8009a8c:	20000a14 	.word	0x20000a14
 8009a90:	08009a01 	.word	0x08009a01

08009a94 <__sfp_lock_acquire>:
 8009a94:	4801      	ldr	r0, [pc, #4]	@ (8009a9c <__sfp_lock_acquire+0x8>)
 8009a96:	f000 b920 	b.w	8009cda <__retarget_lock_acquire_recursive>
 8009a9a:	bf00      	nop
 8009a9c:	20000b55 	.word	0x20000b55

08009aa0 <__sfp_lock_release>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	@ (8009aa8 <__sfp_lock_release+0x8>)
 8009aa2:	f000 b91b 	b.w	8009cdc <__retarget_lock_release_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	20000b55 	.word	0x20000b55

08009aac <__sinit>:
 8009aac:	b510      	push	{r4, lr}
 8009aae:	4604      	mov	r4, r0
 8009ab0:	f7ff fff0 	bl	8009a94 <__sfp_lock_acquire>
 8009ab4:	6a23      	ldr	r3, [r4, #32]
 8009ab6:	b11b      	cbz	r3, 8009ac0 <__sinit+0x14>
 8009ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abc:	f7ff bff0 	b.w	8009aa0 <__sfp_lock_release>
 8009ac0:	4b04      	ldr	r3, [pc, #16]	@ (8009ad4 <__sinit+0x28>)
 8009ac2:	6223      	str	r3, [r4, #32]
 8009ac4:	4b04      	ldr	r3, [pc, #16]	@ (8009ad8 <__sinit+0x2c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f5      	bne.n	8009ab8 <__sinit+0xc>
 8009acc:	f7ff ffc4 	bl	8009a58 <global_stdio_init.part.0>
 8009ad0:	e7f2      	b.n	8009ab8 <__sinit+0xc>
 8009ad2:	bf00      	nop
 8009ad4:	08009a19 	.word	0x08009a19
 8009ad8:	20000b4c 	.word	0x20000b4c

08009adc <_fwalk_sglue>:
 8009adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	4688      	mov	r8, r1
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aec:	f1b9 0901 	subs.w	r9, r9, #1
 8009af0:	d505      	bpl.n	8009afe <_fwalk_sglue+0x22>
 8009af2:	6824      	ldr	r4, [r4, #0]
 8009af4:	2c00      	cmp	r4, #0
 8009af6:	d1f7      	bne.n	8009ae8 <_fwalk_sglue+0xc>
 8009af8:	4630      	mov	r0, r6
 8009afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afe:	89ab      	ldrh	r3, [r5, #12]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d907      	bls.n	8009b14 <_fwalk_sglue+0x38>
 8009b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	d003      	beq.n	8009b14 <_fwalk_sglue+0x38>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4638      	mov	r0, r7
 8009b10:	47c0      	blx	r8
 8009b12:	4306      	orrs	r6, r0
 8009b14:	3568      	adds	r5, #104	@ 0x68
 8009b16:	e7e9      	b.n	8009aec <_fwalk_sglue+0x10>

08009b18 <siprintf>:
 8009b18:	b40e      	push	{r1, r2, r3}
 8009b1a:	b500      	push	{lr}
 8009b1c:	b09c      	sub	sp, #112	@ 0x70
 8009b1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b20:	9002      	str	r0, [sp, #8]
 8009b22:	9006      	str	r0, [sp, #24]
 8009b24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b28:	4809      	ldr	r0, [pc, #36]	@ (8009b50 <siprintf+0x38>)
 8009b2a:	9107      	str	r1, [sp, #28]
 8009b2c:	9104      	str	r1, [sp, #16]
 8009b2e:	4909      	ldr	r1, [pc, #36]	@ (8009b54 <siprintf+0x3c>)
 8009b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b34:	9105      	str	r1, [sp, #20]
 8009b36:	6800      	ldr	r0, [r0, #0]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	a902      	add	r1, sp, #8
 8009b3c:	f001 fbfa 	bl	800b334 <_svfiprintf_r>
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	b01c      	add	sp, #112	@ 0x70
 8009b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b4c:	b003      	add	sp, #12
 8009b4e:	4770      	bx	lr
 8009b50:	200000b8 	.word	0x200000b8
 8009b54:	ffff0208 	.word	0xffff0208

08009b58 <__sread>:
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	f000 f86c 	bl	8009c3c <_read_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	bfab      	itete	ge
 8009b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b6c:	181b      	addge	r3, r3, r0
 8009b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b72:	bfac      	ite	ge
 8009b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b76:	81a3      	strhlt	r3, [r4, #12]
 8009b78:	bd10      	pop	{r4, pc}

08009b7a <__swrite>:
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	461f      	mov	r7, r3
 8009b80:	898b      	ldrh	r3, [r1, #12]
 8009b82:	05db      	lsls	r3, r3, #23
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4616      	mov	r6, r2
 8009b8a:	d505      	bpl.n	8009b98 <__swrite+0x1e>
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	2302      	movs	r3, #2
 8009b92:	2200      	movs	r2, #0
 8009b94:	f000 f840 	bl	8009c18 <_lseek_r>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4628      	mov	r0, r5
 8009baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	f000 b857 	b.w	8009c60 <_write_r>

08009bb2 <__sseek>:
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bba:	f000 f82d 	bl	8009c18 <_lseek_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	bf15      	itete	ne
 8009bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bce:	81a3      	strheq	r3, [r4, #12]
 8009bd0:	bf18      	it	ne
 8009bd2:	81a3      	strhne	r3, [r4, #12]
 8009bd4:	bd10      	pop	{r4, pc}

08009bd6 <__sclose>:
 8009bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bda:	f000 b80d 	b.w	8009bf8 <_close_r>

08009bde <memset>:
 8009bde:	4402      	add	r2, r0
 8009be0:	4603      	mov	r3, r0
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d100      	bne.n	8009be8 <memset+0xa>
 8009be6:	4770      	bx	lr
 8009be8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bec:	e7f9      	b.n	8009be2 <memset+0x4>
	...

08009bf0 <_localeconv_r>:
 8009bf0:	4800      	ldr	r0, [pc, #0]	@ (8009bf4 <_localeconv_r+0x4>)
 8009bf2:	4770      	bx	lr
 8009bf4:	200001f8 	.word	0x200001f8

08009bf8 <_close_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	@ (8009c14 <_close_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f7fa f8b8 	bl	8003d78 <_close>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_close_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_close_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	20000b50 	.word	0x20000b50

08009c18 <_lseek_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4d07      	ldr	r5, [pc, #28]	@ (8009c38 <_lseek_r+0x20>)
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	4608      	mov	r0, r1
 8009c20:	4611      	mov	r1, r2
 8009c22:	2200      	movs	r2, #0
 8009c24:	602a      	str	r2, [r5, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	f7fa f8cd 	bl	8003dc6 <_lseek>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_lseek_r+0x1e>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_lseek_r+0x1e>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20000b50 	.word	0x20000b50

08009c3c <_read_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	@ (8009c5c <_read_r+0x20>)
 8009c40:	4604      	mov	r4, r0
 8009c42:	4608      	mov	r0, r1
 8009c44:	4611      	mov	r1, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	602a      	str	r2, [r5, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f7fa f85b 	bl	8003d06 <_read>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_read_r+0x1e>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_read_r+0x1e>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20000b50 	.word	0x20000b50

08009c60 <_write_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	@ (8009c80 <_write_r+0x20>)
 8009c64:	4604      	mov	r4, r0
 8009c66:	4608      	mov	r0, r1
 8009c68:	4611      	mov	r1, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f7fa f866 	bl	8003d40 <_write>
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d102      	bne.n	8009c7e <_write_r+0x1e>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	b103      	cbz	r3, 8009c7e <_write_r+0x1e>
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	20000b50 	.word	0x20000b50

08009c84 <__errno>:
 8009c84:	4b01      	ldr	r3, [pc, #4]	@ (8009c8c <__errno+0x8>)
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	200000b8 	.word	0x200000b8

08009c90 <__libc_init_array>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	4d0d      	ldr	r5, [pc, #52]	@ (8009cc8 <__libc_init_array+0x38>)
 8009c94:	4c0d      	ldr	r4, [pc, #52]	@ (8009ccc <__libc_init_array+0x3c>)
 8009c96:	1b64      	subs	r4, r4, r5
 8009c98:	10a4      	asrs	r4, r4, #2
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	42a6      	cmp	r6, r4
 8009c9e:	d109      	bne.n	8009cb4 <__libc_init_array+0x24>
 8009ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8009cd0 <__libc_init_array+0x40>)
 8009ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8009cd4 <__libc_init_array+0x44>)
 8009ca4:	f003 fa54 	bl	800d150 <_init>
 8009ca8:	1b64      	subs	r4, r4, r5
 8009caa:	10a4      	asrs	r4, r4, #2
 8009cac:	2600      	movs	r6, #0
 8009cae:	42a6      	cmp	r6, r4
 8009cb0:	d105      	bne.n	8009cbe <__libc_init_array+0x2e>
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb8:	4798      	blx	r3
 8009cba:	3601      	adds	r6, #1
 8009cbc:	e7ee      	b.n	8009c9c <__libc_init_array+0xc>
 8009cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc2:	4798      	blx	r3
 8009cc4:	3601      	adds	r6, #1
 8009cc6:	e7f2      	b.n	8009cae <__libc_init_array+0x1e>
 8009cc8:	0800e190 	.word	0x0800e190
 8009ccc:	0800e190 	.word	0x0800e190
 8009cd0:	0800e190 	.word	0x0800e190
 8009cd4:	0800e194 	.word	0x0800e194

08009cd8 <__retarget_lock_init_recursive>:
 8009cd8:	4770      	bx	lr

08009cda <__retarget_lock_acquire_recursive>:
 8009cda:	4770      	bx	lr

08009cdc <__retarget_lock_release_recursive>:
 8009cdc:	4770      	bx	lr

08009cde <quorem>:
 8009cde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce2:	6903      	ldr	r3, [r0, #16]
 8009ce4:	690c      	ldr	r4, [r1, #16]
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	4607      	mov	r7, r0
 8009cea:	db7e      	blt.n	8009dea <quorem+0x10c>
 8009cec:	3c01      	subs	r4, #1
 8009cee:	f101 0814 	add.w	r8, r1, #20
 8009cf2:	00a3      	lsls	r3, r4, #2
 8009cf4:	f100 0514 	add.w	r5, r0, #20
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d14:	d32e      	bcc.n	8009d74 <quorem+0x96>
 8009d16:	f04f 0a00 	mov.w	sl, #0
 8009d1a:	46c4      	mov	ip, r8
 8009d1c:	46ae      	mov	lr, r5
 8009d1e:	46d3      	mov	fp, sl
 8009d20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d24:	b298      	uxth	r0, r3
 8009d26:	fb06 a000 	mla	r0, r6, r0, sl
 8009d2a:	0c02      	lsrs	r2, r0, #16
 8009d2c:	0c1b      	lsrs	r3, r3, #16
 8009d2e:	fb06 2303 	mla	r3, r6, r3, r2
 8009d32:	f8de 2000 	ldr.w	r2, [lr]
 8009d36:	b280      	uxth	r0, r0
 8009d38:	b292      	uxth	r2, r2
 8009d3a:	1a12      	subs	r2, r2, r0
 8009d3c:	445a      	add	r2, fp
 8009d3e:	f8de 0000 	ldr.w	r0, [lr]
 8009d42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d50:	b292      	uxth	r2, r2
 8009d52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d56:	45e1      	cmp	r9, ip
 8009d58:	f84e 2b04 	str.w	r2, [lr], #4
 8009d5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d60:	d2de      	bcs.n	8009d20 <quorem+0x42>
 8009d62:	9b00      	ldr	r3, [sp, #0]
 8009d64:	58eb      	ldr	r3, [r5, r3]
 8009d66:	b92b      	cbnz	r3, 8009d74 <quorem+0x96>
 8009d68:	9b01      	ldr	r3, [sp, #4]
 8009d6a:	3b04      	subs	r3, #4
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	461a      	mov	r2, r3
 8009d70:	d32f      	bcc.n	8009dd2 <quorem+0xf4>
 8009d72:	613c      	str	r4, [r7, #16]
 8009d74:	4638      	mov	r0, r7
 8009d76:	f001 f979 	bl	800b06c <__mcmp>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	db25      	blt.n	8009dca <quorem+0xec>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	2000      	movs	r0, #0
 8009d82:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d86:	f8d1 c000 	ldr.w	ip, [r1]
 8009d8a:	fa1f fe82 	uxth.w	lr, r2
 8009d8e:	fa1f f38c 	uxth.w	r3, ip
 8009d92:	eba3 030e 	sub.w	r3, r3, lr
 8009d96:	4403      	add	r3, r0
 8009d98:	0c12      	lsrs	r2, r2, #16
 8009d9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009da8:	45c1      	cmp	r9, r8
 8009daa:	f841 3b04 	str.w	r3, [r1], #4
 8009dae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009db2:	d2e6      	bcs.n	8009d82 <quorem+0xa4>
 8009db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009db8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dbc:	b922      	cbnz	r2, 8009dc8 <quorem+0xea>
 8009dbe:	3b04      	subs	r3, #4
 8009dc0:	429d      	cmp	r5, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	d30b      	bcc.n	8009dde <quorem+0x100>
 8009dc6:	613c      	str	r4, [r7, #16]
 8009dc8:	3601      	adds	r6, #1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	b003      	add	sp, #12
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	3b04      	subs	r3, #4
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	d1cb      	bne.n	8009d72 <quorem+0x94>
 8009dda:	3c01      	subs	r4, #1
 8009ddc:	e7c6      	b.n	8009d6c <quorem+0x8e>
 8009dde:	6812      	ldr	r2, [r2, #0]
 8009de0:	3b04      	subs	r3, #4
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d1ef      	bne.n	8009dc6 <quorem+0xe8>
 8009de6:	3c01      	subs	r4, #1
 8009de8:	e7ea      	b.n	8009dc0 <quorem+0xe2>
 8009dea:	2000      	movs	r0, #0
 8009dec:	e7ee      	b.n	8009dcc <quorem+0xee>
	...

08009df0 <_dtoa_r>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	69c7      	ldr	r7, [r0, #28]
 8009df6:	b099      	sub	sp, #100	@ 0x64
 8009df8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009dfc:	ec55 4b10 	vmov	r4, r5, d0
 8009e00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e02:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e04:	4683      	mov	fp, r0
 8009e06:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e0a:	b97f      	cbnz	r7, 8009e2c <_dtoa_r+0x3c>
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	f000 fdfd 	bl	800aa0c <malloc>
 8009e12:	4602      	mov	r2, r0
 8009e14:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e18:	b920      	cbnz	r0, 8009e24 <_dtoa_r+0x34>
 8009e1a:	4ba7      	ldr	r3, [pc, #668]	@ (800a0b8 <_dtoa_r+0x2c8>)
 8009e1c:	21ef      	movs	r1, #239	@ 0xef
 8009e1e:	48a7      	ldr	r0, [pc, #668]	@ (800a0bc <_dtoa_r+0x2cc>)
 8009e20:	f001 fc68 	bl	800b6f4 <__assert_func>
 8009e24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e28:	6007      	str	r7, [r0, #0]
 8009e2a:	60c7      	str	r7, [r0, #12]
 8009e2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	b159      	cbz	r1, 8009e4c <_dtoa_r+0x5c>
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	604a      	str	r2, [r1, #4]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4093      	lsls	r3, r2
 8009e3c:	608b      	str	r3, [r1, #8]
 8009e3e:	4658      	mov	r0, fp
 8009e40:	f000 feda 	bl	800abf8 <_Bfree>
 8009e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	1e2b      	subs	r3, r5, #0
 8009e4e:	bfb9      	ittee	lt
 8009e50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e54:	9303      	strlt	r3, [sp, #12]
 8009e56:	2300      	movge	r3, #0
 8009e58:	6033      	strge	r3, [r6, #0]
 8009e5a:	9f03      	ldr	r7, [sp, #12]
 8009e5c:	4b98      	ldr	r3, [pc, #608]	@ (800a0c0 <_dtoa_r+0x2d0>)
 8009e5e:	bfbc      	itt	lt
 8009e60:	2201      	movlt	r2, #1
 8009e62:	6032      	strlt	r2, [r6, #0]
 8009e64:	43bb      	bics	r3, r7
 8009e66:	d112      	bne.n	8009e8e <_dtoa_r+0x9e>
 8009e68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e74:	4323      	orrs	r3, r4
 8009e76:	f000 854d 	beq.w	800a914 <_dtoa_r+0xb24>
 8009e7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a0d4 <_dtoa_r+0x2e4>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 854f 	beq.w	800a924 <_dtoa_r+0xb34>
 8009e86:	f10a 0303 	add.w	r3, sl, #3
 8009e8a:	f000 bd49 	b.w	800a920 <_dtoa_r+0xb30>
 8009e8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	ec51 0b17 	vmov	r0, r1, d7
 8009e98:	2300      	movs	r3, #0
 8009e9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009e9e:	f7f6 fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	b158      	cbz	r0, 8009ebe <_dtoa_r+0xce>
 8009ea6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eae:	b113      	cbz	r3, 8009eb6 <_dtoa_r+0xc6>
 8009eb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009eb2:	4b84      	ldr	r3, [pc, #528]	@ (800a0c4 <_dtoa_r+0x2d4>)
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a0d8 <_dtoa_r+0x2e8>
 8009eba:	f000 bd33 	b.w	800a924 <_dtoa_r+0xb34>
 8009ebe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ec2:	aa16      	add	r2, sp, #88	@ 0x58
 8009ec4:	a917      	add	r1, sp, #92	@ 0x5c
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f001 f980 	bl	800b1cc <__d2b>
 8009ecc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ed0:	4681      	mov	r9, r0
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d077      	beq.n	8009fc6 <_dtoa_r+0x1d6>
 8009ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ed8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ee4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ee8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009eec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4b74      	ldr	r3, [pc, #464]	@ (800a0c8 <_dtoa_r+0x2d8>)
 8009ef6:	f7f6 f9e7 	bl	80002c8 <__aeabi_dsub>
 8009efa:	a369      	add	r3, pc, #420	@ (adr r3, 800a0a0 <_dtoa_r+0x2b0>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 fb9a 	bl	8000638 <__aeabi_dmul>
 8009f04:	a368      	add	r3, pc, #416	@ (adr r3, 800a0a8 <_dtoa_r+0x2b8>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f9df 	bl	80002cc <__adddf3>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	4630      	mov	r0, r6
 8009f12:	460d      	mov	r5, r1
 8009f14:	f7f6 fb26 	bl	8000564 <__aeabi_i2d>
 8009f18:	a365      	add	r3, pc, #404	@ (adr r3, 800a0b0 <_dtoa_r+0x2c0>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 fb8b 	bl	8000638 <__aeabi_dmul>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 f9cf 	bl	80002cc <__adddf3>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	460d      	mov	r5, r1
 8009f32:	f7f6 fe31 	bl	8000b98 <__aeabi_d2iz>
 8009f36:	2200      	movs	r2, #0
 8009f38:	4607      	mov	r7, r0
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 fdec 	bl	8000b1c <__aeabi_dcmplt>
 8009f44:	b140      	cbz	r0, 8009f58 <_dtoa_r+0x168>
 8009f46:	4638      	mov	r0, r7
 8009f48:	f7f6 fb0c 	bl	8000564 <__aeabi_i2d>
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	462b      	mov	r3, r5
 8009f50:	f7f6 fdda 	bl	8000b08 <__aeabi_dcmpeq>
 8009f54:	b900      	cbnz	r0, 8009f58 <_dtoa_r+0x168>
 8009f56:	3f01      	subs	r7, #1
 8009f58:	2f16      	cmp	r7, #22
 8009f5a:	d851      	bhi.n	800a000 <_dtoa_r+0x210>
 8009f5c:	4b5b      	ldr	r3, [pc, #364]	@ (800a0cc <_dtoa_r+0x2dc>)
 8009f5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f6a:	f7f6 fdd7 	bl	8000b1c <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d048      	beq.n	800a004 <_dtoa_r+0x214>
 8009f72:	3f01      	subs	r7, #1
 8009f74:	2300      	movs	r3, #0
 8009f76:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f7a:	1b9b      	subs	r3, r3, r6
 8009f7c:	1e5a      	subs	r2, r3, #1
 8009f7e:	bf44      	itt	mi
 8009f80:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f84:	2300      	movmi	r3, #0
 8009f86:	9208      	str	r2, [sp, #32]
 8009f88:	bf54      	ite	pl
 8009f8a:	f04f 0800 	movpl.w	r8, #0
 8009f8e:	9308      	strmi	r3, [sp, #32]
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	db39      	blt.n	800a008 <_dtoa_r+0x218>
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009f98:	443b      	add	r3, r7
 8009f9a:	9308      	str	r3, [sp, #32]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa2:	2b09      	cmp	r3, #9
 8009fa4:	d864      	bhi.n	800a070 <_dtoa_r+0x280>
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	bfc4      	itt	gt
 8009faa:	3b04      	subgt	r3, #4
 8009fac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	f1a3 0302 	sub.w	r3, r3, #2
 8009fb4:	bfcc      	ite	gt
 8009fb6:	2400      	movgt	r4, #0
 8009fb8:	2401      	movle	r4, #1
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d863      	bhi.n	800a086 <_dtoa_r+0x296>
 8009fbe:	e8df f003 	tbb	[pc, r3]
 8009fc2:	372a      	.short	0x372a
 8009fc4:	5535      	.short	0x5535
 8009fc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009fca:	441e      	add	r6, r3
 8009fcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	bfc1      	itttt	gt
 8009fd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009fd8:	409f      	lslgt	r7, r3
 8009fda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009fde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009fe2:	bfd6      	itet	le
 8009fe4:	f1c3 0320 	rsble	r3, r3, #32
 8009fe8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009fec:	fa04 f003 	lslle.w	r0, r4, r3
 8009ff0:	f7f6 faa8 	bl	8000544 <__aeabi_ui2d>
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ffa:	3e01      	subs	r6, #1
 8009ffc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ffe:	e777      	b.n	8009ef0 <_dtoa_r+0x100>
 800a000:	2301      	movs	r3, #1
 800a002:	e7b8      	b.n	8009f76 <_dtoa_r+0x186>
 800a004:	9012      	str	r0, [sp, #72]	@ 0x48
 800a006:	e7b7      	b.n	8009f78 <_dtoa_r+0x188>
 800a008:	427b      	negs	r3, r7
 800a00a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00c:	2300      	movs	r3, #0
 800a00e:	eba8 0807 	sub.w	r8, r8, r7
 800a012:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a014:	e7c4      	b.n	8009fa0 <_dtoa_r+0x1b0>
 800a016:	2300      	movs	r3, #0
 800a018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a01a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dc35      	bgt.n	800a08c <_dtoa_r+0x29c>
 800a020:	2301      	movs	r3, #1
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	461a      	mov	r2, r3
 800a028:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02a:	e00b      	b.n	800a044 <_dtoa_r+0x254>
 800a02c:	2301      	movs	r3, #1
 800a02e:	e7f3      	b.n	800a018 <_dtoa_r+0x228>
 800a030:	2300      	movs	r3, #0
 800a032:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	9307      	str	r3, [sp, #28]
 800a040:	bfb8      	it	lt
 800a042:	2301      	movlt	r3, #1
 800a044:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a048:	2100      	movs	r1, #0
 800a04a:	2204      	movs	r2, #4
 800a04c:	f102 0514 	add.w	r5, r2, #20
 800a050:	429d      	cmp	r5, r3
 800a052:	d91f      	bls.n	800a094 <_dtoa_r+0x2a4>
 800a054:	6041      	str	r1, [r0, #4]
 800a056:	4658      	mov	r0, fp
 800a058:	f000 fd8e 	bl	800ab78 <_Balloc>
 800a05c:	4682      	mov	sl, r0
 800a05e:	2800      	cmp	r0, #0
 800a060:	d13c      	bne.n	800a0dc <_dtoa_r+0x2ec>
 800a062:	4b1b      	ldr	r3, [pc, #108]	@ (800a0d0 <_dtoa_r+0x2e0>)
 800a064:	4602      	mov	r2, r0
 800a066:	f240 11af 	movw	r1, #431	@ 0x1af
 800a06a:	e6d8      	b.n	8009e1e <_dtoa_r+0x2e>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e7e0      	b.n	800a032 <_dtoa_r+0x242>
 800a070:	2401      	movs	r4, #1
 800a072:	2300      	movs	r3, #0
 800a074:	9309      	str	r3, [sp, #36]	@ 0x24
 800a076:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a078:	f04f 33ff 	mov.w	r3, #4294967295
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	2200      	movs	r2, #0
 800a082:	2312      	movs	r3, #18
 800a084:	e7d0      	b.n	800a028 <_dtoa_r+0x238>
 800a086:	2301      	movs	r3, #1
 800a088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a08a:	e7f5      	b.n	800a078 <_dtoa_r+0x288>
 800a08c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	e7d7      	b.n	800a044 <_dtoa_r+0x254>
 800a094:	3101      	adds	r1, #1
 800a096:	0052      	lsls	r2, r2, #1
 800a098:	e7d8      	b.n	800a04c <_dtoa_r+0x25c>
 800a09a:	bf00      	nop
 800a09c:	f3af 8000 	nop.w
 800a0a0:	636f4361 	.word	0x636f4361
 800a0a4:	3fd287a7 	.word	0x3fd287a7
 800a0a8:	8b60c8b3 	.word	0x8b60c8b3
 800a0ac:	3fc68a28 	.word	0x3fc68a28
 800a0b0:	509f79fb 	.word	0x509f79fb
 800a0b4:	3fd34413 	.word	0x3fd34413
 800a0b8:	0800ddb9 	.word	0x0800ddb9
 800a0bc:	0800ddd0 	.word	0x0800ddd0
 800a0c0:	7ff00000 	.word	0x7ff00000
 800a0c4:	0800dd89 	.word	0x0800dd89
 800a0c8:	3ff80000 	.word	0x3ff80000
 800a0cc:	0800dec8 	.word	0x0800dec8
 800a0d0:	0800de28 	.word	0x0800de28
 800a0d4:	0800ddb5 	.word	0x0800ddb5
 800a0d8:	0800dd88 	.word	0x0800dd88
 800a0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0e0:	6018      	str	r0, [r3, #0]
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	2b0e      	cmp	r3, #14
 800a0e6:	f200 80a4 	bhi.w	800a232 <_dtoa_r+0x442>
 800a0ea:	2c00      	cmp	r4, #0
 800a0ec:	f000 80a1 	beq.w	800a232 <_dtoa_r+0x442>
 800a0f0:	2f00      	cmp	r7, #0
 800a0f2:	dd33      	ble.n	800a15c <_dtoa_r+0x36c>
 800a0f4:	4bad      	ldr	r3, [pc, #692]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a0f6:	f007 020f 	and.w	r2, r7, #15
 800a0fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0fe:	ed93 7b00 	vldr	d7, [r3]
 800a102:	05f8      	lsls	r0, r7, #23
 800a104:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a108:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a10c:	d516      	bpl.n	800a13c <_dtoa_r+0x34c>
 800a10e:	4ba8      	ldr	r3, [pc, #672]	@ (800a3b0 <_dtoa_r+0x5c0>)
 800a110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a118:	f7f6 fbb8 	bl	800088c <__aeabi_ddiv>
 800a11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a120:	f004 040f 	and.w	r4, r4, #15
 800a124:	2603      	movs	r6, #3
 800a126:	4da2      	ldr	r5, [pc, #648]	@ (800a3b0 <_dtoa_r+0x5c0>)
 800a128:	b954      	cbnz	r4, 800a140 <_dtoa_r+0x350>
 800a12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a132:	f7f6 fbab 	bl	800088c <__aeabi_ddiv>
 800a136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a13a:	e028      	b.n	800a18e <_dtoa_r+0x39e>
 800a13c:	2602      	movs	r6, #2
 800a13e:	e7f2      	b.n	800a126 <_dtoa_r+0x336>
 800a140:	07e1      	lsls	r1, r4, #31
 800a142:	d508      	bpl.n	800a156 <_dtoa_r+0x366>
 800a144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a14c:	f7f6 fa74 	bl	8000638 <__aeabi_dmul>
 800a150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a154:	3601      	adds	r6, #1
 800a156:	1064      	asrs	r4, r4, #1
 800a158:	3508      	adds	r5, #8
 800a15a:	e7e5      	b.n	800a128 <_dtoa_r+0x338>
 800a15c:	f000 80d2 	beq.w	800a304 <_dtoa_r+0x514>
 800a160:	427c      	negs	r4, r7
 800a162:	4b92      	ldr	r3, [pc, #584]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a164:	4d92      	ldr	r5, [pc, #584]	@ (800a3b0 <_dtoa_r+0x5c0>)
 800a166:	f004 020f 	and.w	r2, r4, #15
 800a16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a176:	f7f6 fa5f 	bl	8000638 <__aeabi_dmul>
 800a17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a17e:	1124      	asrs	r4, r4, #4
 800a180:	2300      	movs	r3, #0
 800a182:	2602      	movs	r6, #2
 800a184:	2c00      	cmp	r4, #0
 800a186:	f040 80b2 	bne.w	800a2ee <_dtoa_r+0x4fe>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1d3      	bne.n	800a136 <_dtoa_r+0x346>
 800a18e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a190:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 80b7 	beq.w	800a308 <_dtoa_r+0x518>
 800a19a:	4b86      	ldr	r3, [pc, #536]	@ (800a3b4 <_dtoa_r+0x5c4>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f6 fcbb 	bl	8000b1c <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f000 80ae 	beq.w	800a308 <_dtoa_r+0x518>
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80aa 	beq.w	800a308 <_dtoa_r+0x518>
 800a1b4:	9b00      	ldr	r3, [sp, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	dd37      	ble.n	800a22a <_dtoa_r+0x43a>
 800a1ba:	1e7b      	subs	r3, r7, #1
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4b7d      	ldr	r3, [pc, #500]	@ (800a3b8 <_dtoa_r+0x5c8>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7f6 fa37 	bl	8000638 <__aeabi_dmul>
 800a1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ce:	9c00      	ldr	r4, [sp, #0]
 800a1d0:	3601      	adds	r6, #1
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7f6 f9c6 	bl	8000564 <__aeabi_i2d>
 800a1d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1dc:	f7f6 fa2c 	bl	8000638 <__aeabi_dmul>
 800a1e0:	4b76      	ldr	r3, [pc, #472]	@ (800a3bc <_dtoa_r+0x5cc>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f7f6 f872 	bl	80002cc <__adddf3>
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	f040 808d 	bne.w	800a30e <_dtoa_r+0x51e>
 800a1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f8:	4b71      	ldr	r3, [pc, #452]	@ (800a3c0 <_dtoa_r+0x5d0>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f7f6 f864 	bl	80002c8 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a208:	462a      	mov	r2, r5
 800a20a:	4633      	mov	r3, r6
 800a20c:	f7f6 fca4 	bl	8000b58 <__aeabi_dcmpgt>
 800a210:	2800      	cmp	r0, #0
 800a212:	f040 828b 	bne.w	800a72c <_dtoa_r+0x93c>
 800a216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a21a:	462a      	mov	r2, r5
 800a21c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a220:	f7f6 fc7c 	bl	8000b1c <__aeabi_dcmplt>
 800a224:	2800      	cmp	r0, #0
 800a226:	f040 8128 	bne.w	800a47a <_dtoa_r+0x68a>
 800a22a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a22e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a234:	2b00      	cmp	r3, #0
 800a236:	f2c0 815a 	blt.w	800a4ee <_dtoa_r+0x6fe>
 800a23a:	2f0e      	cmp	r7, #14
 800a23c:	f300 8157 	bgt.w	800a4ee <_dtoa_r+0x6fe>
 800a240:	4b5a      	ldr	r3, [pc, #360]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a242:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a246:	ed93 7b00 	vldr	d7, [r3]
 800a24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	ed8d 7b00 	vstr	d7, [sp]
 800a252:	da03      	bge.n	800a25c <_dtoa_r+0x46c>
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f340 8101 	ble.w	800a45e <_dtoa_r+0x66e>
 800a25c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a260:	4656      	mov	r6, sl
 800a262:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 fb0f 	bl	800088c <__aeabi_ddiv>
 800a26e:	f7f6 fc93 	bl	8000b98 <__aeabi_d2iz>
 800a272:	4680      	mov	r8, r0
 800a274:	f7f6 f976 	bl	8000564 <__aeabi_i2d>
 800a278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a27c:	f7f6 f9dc 	bl	8000638 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a28c:	f7f6 f81c 	bl	80002c8 <__aeabi_dsub>
 800a290:	f806 4b01 	strb.w	r4, [r6], #1
 800a294:	9d07      	ldr	r5, [sp, #28]
 800a296:	eba6 040a 	sub.w	r4, r6, sl
 800a29a:	42a5      	cmp	r5, r4
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	f040 8117 	bne.w	800a4d2 <_dtoa_r+0x6e2>
 800a2a4:	f7f6 f812 	bl	80002cc <__adddf3>
 800a2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	f7f6 fc52 	bl	8000b58 <__aeabi_dcmpgt>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f040 80f9 	bne.w	800a4ac <_dtoa_r+0x6bc>
 800a2ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 fc21 	bl	8000b08 <__aeabi_dcmpeq>
 800a2c6:	b118      	cbz	r0, 800a2d0 <_dtoa_r+0x4e0>
 800a2c8:	f018 0f01 	tst.w	r8, #1
 800a2cc:	f040 80ee 	bne.w	800a4ac <_dtoa_r+0x6bc>
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4658      	mov	r0, fp
 800a2d4:	f000 fc90 	bl	800abf8 <_Bfree>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	7033      	strb	r3, [r6, #0]
 800a2dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2de:	3701      	adds	r7, #1
 800a2e0:	601f      	str	r7, [r3, #0]
 800a2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 831d 	beq.w	800a924 <_dtoa_r+0xb34>
 800a2ea:	601e      	str	r6, [r3, #0]
 800a2ec:	e31a      	b.n	800a924 <_dtoa_r+0xb34>
 800a2ee:	07e2      	lsls	r2, r4, #31
 800a2f0:	d505      	bpl.n	800a2fe <_dtoa_r+0x50e>
 800a2f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2f6:	f7f6 f99f 	bl	8000638 <__aeabi_dmul>
 800a2fa:	3601      	adds	r6, #1
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	1064      	asrs	r4, r4, #1
 800a300:	3508      	adds	r5, #8
 800a302:	e73f      	b.n	800a184 <_dtoa_r+0x394>
 800a304:	2602      	movs	r6, #2
 800a306:	e742      	b.n	800a18e <_dtoa_r+0x39e>
 800a308:	9c07      	ldr	r4, [sp, #28]
 800a30a:	9704      	str	r7, [sp, #16]
 800a30c:	e761      	b.n	800a1d2 <_dtoa_r+0x3e2>
 800a30e:	4b27      	ldr	r3, [pc, #156]	@ (800a3ac <_dtoa_r+0x5bc>)
 800a310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a316:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a31a:	4454      	add	r4, sl
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d053      	beq.n	800a3c8 <_dtoa_r+0x5d8>
 800a320:	4928      	ldr	r1, [pc, #160]	@ (800a3c4 <_dtoa_r+0x5d4>)
 800a322:	2000      	movs	r0, #0
 800a324:	f7f6 fab2 	bl	800088c <__aeabi_ddiv>
 800a328:	4633      	mov	r3, r6
 800a32a:	462a      	mov	r2, r5
 800a32c:	f7f5 ffcc 	bl	80002c8 <__aeabi_dsub>
 800a330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a334:	4656      	mov	r6, sl
 800a336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a33a:	f7f6 fc2d 	bl	8000b98 <__aeabi_d2iz>
 800a33e:	4605      	mov	r5, r0
 800a340:	f7f6 f910 	bl	8000564 <__aeabi_i2d>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a34c:	f7f5 ffbc 	bl	80002c8 <__aeabi_dsub>
 800a350:	3530      	adds	r5, #48	@ 0x30
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a35a:	f806 5b01 	strb.w	r5, [r6], #1
 800a35e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a362:	f7f6 fbdb 	bl	8000b1c <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	d171      	bne.n	800a44e <_dtoa_r+0x65e>
 800a36a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a36e:	4911      	ldr	r1, [pc, #68]	@ (800a3b4 <_dtoa_r+0x5c4>)
 800a370:	2000      	movs	r0, #0
 800a372:	f7f5 ffa9 	bl	80002c8 <__aeabi_dsub>
 800a376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a37a:	f7f6 fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800a37e:	2800      	cmp	r0, #0
 800a380:	f040 8095 	bne.w	800a4ae <_dtoa_r+0x6be>
 800a384:	42a6      	cmp	r6, r4
 800a386:	f43f af50 	beq.w	800a22a <_dtoa_r+0x43a>
 800a38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a38e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b8 <_dtoa_r+0x5c8>)
 800a390:	2200      	movs	r2, #0
 800a392:	f7f6 f951 	bl	8000638 <__aeabi_dmul>
 800a396:	4b08      	ldr	r3, [pc, #32]	@ (800a3b8 <_dtoa_r+0x5c8>)
 800a398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a39c:	2200      	movs	r2, #0
 800a39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a2:	f7f6 f949 	bl	8000638 <__aeabi_dmul>
 800a3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3aa:	e7c4      	b.n	800a336 <_dtoa_r+0x546>
 800a3ac:	0800dec8 	.word	0x0800dec8
 800a3b0:	0800dea0 	.word	0x0800dea0
 800a3b4:	3ff00000 	.word	0x3ff00000
 800a3b8:	40240000 	.word	0x40240000
 800a3bc:	401c0000 	.word	0x401c0000
 800a3c0:	40140000 	.word	0x40140000
 800a3c4:	3fe00000 	.word	0x3fe00000
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f7f6 f934 	bl	8000638 <__aeabi_dmul>
 800a3d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a3d6:	4656      	mov	r6, sl
 800a3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3dc:	f7f6 fbdc 	bl	8000b98 <__aeabi_d2iz>
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	f7f6 f8bf 	bl	8000564 <__aeabi_i2d>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ee:	f7f5 ff6b 	bl	80002c8 <__aeabi_dsub>
 800a3f2:	3530      	adds	r5, #48	@ 0x30
 800a3f4:	f806 5b01 	strb.w	r5, [r6], #1
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	42a6      	cmp	r6, r4
 800a3fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	d124      	bne.n	800a452 <_dtoa_r+0x662>
 800a408:	4bac      	ldr	r3, [pc, #688]	@ (800a6bc <_dtoa_r+0x8cc>)
 800a40a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a40e:	f7f5 ff5d 	bl	80002cc <__adddf3>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a41a:	f7f6 fb9d 	bl	8000b58 <__aeabi_dcmpgt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d145      	bne.n	800a4ae <_dtoa_r+0x6be>
 800a422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a426:	49a5      	ldr	r1, [pc, #660]	@ (800a6bc <_dtoa_r+0x8cc>)
 800a428:	2000      	movs	r0, #0
 800a42a:	f7f5 ff4d 	bl	80002c8 <__aeabi_dsub>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a436:	f7f6 fb71 	bl	8000b1c <__aeabi_dcmplt>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f43f aef5 	beq.w	800a22a <_dtoa_r+0x43a>
 800a440:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a442:	1e73      	subs	r3, r6, #1
 800a444:	9315      	str	r3, [sp, #84]	@ 0x54
 800a446:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a44a:	2b30      	cmp	r3, #48	@ 0x30
 800a44c:	d0f8      	beq.n	800a440 <_dtoa_r+0x650>
 800a44e:	9f04      	ldr	r7, [sp, #16]
 800a450:	e73e      	b.n	800a2d0 <_dtoa_r+0x4e0>
 800a452:	4b9b      	ldr	r3, [pc, #620]	@ (800a6c0 <_dtoa_r+0x8d0>)
 800a454:	f7f6 f8f0 	bl	8000638 <__aeabi_dmul>
 800a458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a45c:	e7bc      	b.n	800a3d8 <_dtoa_r+0x5e8>
 800a45e:	d10c      	bne.n	800a47a <_dtoa_r+0x68a>
 800a460:	4b98      	ldr	r3, [pc, #608]	@ (800a6c4 <_dtoa_r+0x8d4>)
 800a462:	2200      	movs	r2, #0
 800a464:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a468:	f7f6 f8e6 	bl	8000638 <__aeabi_dmul>
 800a46c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a470:	f7f6 fb68 	bl	8000b44 <__aeabi_dcmpge>
 800a474:	2800      	cmp	r0, #0
 800a476:	f000 8157 	beq.w	800a728 <_dtoa_r+0x938>
 800a47a:	2400      	movs	r4, #0
 800a47c:	4625      	mov	r5, r4
 800a47e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a480:	43db      	mvns	r3, r3
 800a482:	9304      	str	r3, [sp, #16]
 800a484:	4656      	mov	r6, sl
 800a486:	2700      	movs	r7, #0
 800a488:	4621      	mov	r1, r4
 800a48a:	4658      	mov	r0, fp
 800a48c:	f000 fbb4 	bl	800abf8 <_Bfree>
 800a490:	2d00      	cmp	r5, #0
 800a492:	d0dc      	beq.n	800a44e <_dtoa_r+0x65e>
 800a494:	b12f      	cbz	r7, 800a4a2 <_dtoa_r+0x6b2>
 800a496:	42af      	cmp	r7, r5
 800a498:	d003      	beq.n	800a4a2 <_dtoa_r+0x6b2>
 800a49a:	4639      	mov	r1, r7
 800a49c:	4658      	mov	r0, fp
 800a49e:	f000 fbab 	bl	800abf8 <_Bfree>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4658      	mov	r0, fp
 800a4a6:	f000 fba7 	bl	800abf8 <_Bfree>
 800a4aa:	e7d0      	b.n	800a44e <_dtoa_r+0x65e>
 800a4ac:	9704      	str	r7, [sp, #16]
 800a4ae:	4633      	mov	r3, r6
 800a4b0:	461e      	mov	r6, r3
 800a4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4b6:	2a39      	cmp	r2, #57	@ 0x39
 800a4b8:	d107      	bne.n	800a4ca <_dtoa_r+0x6da>
 800a4ba:	459a      	cmp	sl, r3
 800a4bc:	d1f8      	bne.n	800a4b0 <_dtoa_r+0x6c0>
 800a4be:	9a04      	ldr	r2, [sp, #16]
 800a4c0:	3201      	adds	r2, #1
 800a4c2:	9204      	str	r2, [sp, #16]
 800a4c4:	2230      	movs	r2, #48	@ 0x30
 800a4c6:	f88a 2000 	strb.w	r2, [sl]
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	3201      	adds	r2, #1
 800a4ce:	701a      	strb	r2, [r3, #0]
 800a4d0:	e7bd      	b.n	800a44e <_dtoa_r+0x65e>
 800a4d2:	4b7b      	ldr	r3, [pc, #492]	@ (800a6c0 <_dtoa_r+0x8d0>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f7f6 f8af 	bl	8000638 <__aeabi_dmul>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	f7f6 fb11 	bl	8000b08 <__aeabi_dcmpeq>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f43f aebb 	beq.w	800a262 <_dtoa_r+0x472>
 800a4ec:	e6f0      	b.n	800a2d0 <_dtoa_r+0x4e0>
 800a4ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	f000 80db 	beq.w	800a6ac <_dtoa_r+0x8bc>
 800a4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4f8:	2a01      	cmp	r2, #1
 800a4fa:	f300 80bf 	bgt.w	800a67c <_dtoa_r+0x88c>
 800a4fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a500:	2a00      	cmp	r2, #0
 800a502:	f000 80b7 	beq.w	800a674 <_dtoa_r+0x884>
 800a506:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a50a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a50c:	4646      	mov	r6, r8
 800a50e:	9a08      	ldr	r2, [sp, #32]
 800a510:	2101      	movs	r1, #1
 800a512:	441a      	add	r2, r3
 800a514:	4658      	mov	r0, fp
 800a516:	4498      	add	r8, r3
 800a518:	9208      	str	r2, [sp, #32]
 800a51a:	f000 fc21 	bl	800ad60 <__i2b>
 800a51e:	4605      	mov	r5, r0
 800a520:	b15e      	cbz	r6, 800a53a <_dtoa_r+0x74a>
 800a522:	9b08      	ldr	r3, [sp, #32]
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd08      	ble.n	800a53a <_dtoa_r+0x74a>
 800a528:	42b3      	cmp	r3, r6
 800a52a:	9a08      	ldr	r2, [sp, #32]
 800a52c:	bfa8      	it	ge
 800a52e:	4633      	movge	r3, r6
 800a530:	eba8 0803 	sub.w	r8, r8, r3
 800a534:	1af6      	subs	r6, r6, r3
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	9308      	str	r3, [sp, #32]
 800a53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a53c:	b1f3      	cbz	r3, 800a57c <_dtoa_r+0x78c>
 800a53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 80b7 	beq.w	800a6b4 <_dtoa_r+0x8c4>
 800a546:	b18c      	cbz	r4, 800a56c <_dtoa_r+0x77c>
 800a548:	4629      	mov	r1, r5
 800a54a:	4622      	mov	r2, r4
 800a54c:	4658      	mov	r0, fp
 800a54e:	f000 fcc7 	bl	800aee0 <__pow5mult>
 800a552:	464a      	mov	r2, r9
 800a554:	4601      	mov	r1, r0
 800a556:	4605      	mov	r5, r0
 800a558:	4658      	mov	r0, fp
 800a55a:	f000 fc17 	bl	800ad8c <__multiply>
 800a55e:	4649      	mov	r1, r9
 800a560:	9004      	str	r0, [sp, #16]
 800a562:	4658      	mov	r0, fp
 800a564:	f000 fb48 	bl	800abf8 <_Bfree>
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	4699      	mov	r9, r3
 800a56c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56e:	1b1a      	subs	r2, r3, r4
 800a570:	d004      	beq.n	800a57c <_dtoa_r+0x78c>
 800a572:	4649      	mov	r1, r9
 800a574:	4658      	mov	r0, fp
 800a576:	f000 fcb3 	bl	800aee0 <__pow5mult>
 800a57a:	4681      	mov	r9, r0
 800a57c:	2101      	movs	r1, #1
 800a57e:	4658      	mov	r0, fp
 800a580:	f000 fbee 	bl	800ad60 <__i2b>
 800a584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a586:	4604      	mov	r4, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 81cf 	beq.w	800a92c <_dtoa_r+0xb3c>
 800a58e:	461a      	mov	r2, r3
 800a590:	4601      	mov	r1, r0
 800a592:	4658      	mov	r0, fp
 800a594:	f000 fca4 	bl	800aee0 <__pow5mult>
 800a598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	4604      	mov	r4, r0
 800a59e:	f300 8095 	bgt.w	800a6cc <_dtoa_r+0x8dc>
 800a5a2:	9b02      	ldr	r3, [sp, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 8087 	bne.w	800a6b8 <_dtoa_r+0x8c8>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 8089 	bne.w	800a6c8 <_dtoa_r+0x8d8>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5bc:	0d1b      	lsrs	r3, r3, #20
 800a5be:	051b      	lsls	r3, r3, #20
 800a5c0:	b12b      	cbz	r3, 800a5ce <_dtoa_r+0x7de>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	9308      	str	r3, [sp, #32]
 800a5c8:	f108 0801 	add.w	r8, r8, #1
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 81b0 	beq.w	800a938 <_dtoa_r+0xb48>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5de:	6918      	ldr	r0, [r3, #16]
 800a5e0:	f000 fb72 	bl	800acc8 <__hi0bits>
 800a5e4:	f1c0 0020 	rsb	r0, r0, #32
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	4418      	add	r0, r3
 800a5ec:	f010 001f 	ands.w	r0, r0, #31
 800a5f0:	d077      	beq.n	800a6e2 <_dtoa_r+0x8f2>
 800a5f2:	f1c0 0320 	rsb	r3, r0, #32
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	dd6b      	ble.n	800a6d2 <_dtoa_r+0x8e2>
 800a5fa:	9b08      	ldr	r3, [sp, #32]
 800a5fc:	f1c0 001c 	rsb	r0, r0, #28
 800a600:	4403      	add	r3, r0
 800a602:	4480      	add	r8, r0
 800a604:	4406      	add	r6, r0
 800a606:	9308      	str	r3, [sp, #32]
 800a608:	f1b8 0f00 	cmp.w	r8, #0
 800a60c:	dd05      	ble.n	800a61a <_dtoa_r+0x82a>
 800a60e:	4649      	mov	r1, r9
 800a610:	4642      	mov	r2, r8
 800a612:	4658      	mov	r0, fp
 800a614:	f000 fcbe 	bl	800af94 <__lshift>
 800a618:	4681      	mov	r9, r0
 800a61a:	9b08      	ldr	r3, [sp, #32]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dd05      	ble.n	800a62c <_dtoa_r+0x83c>
 800a620:	4621      	mov	r1, r4
 800a622:	461a      	mov	r2, r3
 800a624:	4658      	mov	r0, fp
 800a626:	f000 fcb5 	bl	800af94 <__lshift>
 800a62a:	4604      	mov	r4, r0
 800a62c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d059      	beq.n	800a6e6 <_dtoa_r+0x8f6>
 800a632:	4621      	mov	r1, r4
 800a634:	4648      	mov	r0, r9
 800a636:	f000 fd19 	bl	800b06c <__mcmp>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	da53      	bge.n	800a6e6 <_dtoa_r+0x8f6>
 800a63e:	1e7b      	subs	r3, r7, #1
 800a640:	9304      	str	r3, [sp, #16]
 800a642:	4649      	mov	r1, r9
 800a644:	2300      	movs	r3, #0
 800a646:	220a      	movs	r2, #10
 800a648:	4658      	mov	r0, fp
 800a64a:	f000 faf7 	bl	800ac3c <__multadd>
 800a64e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a650:	4681      	mov	r9, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8172 	beq.w	800a93c <_dtoa_r+0xb4c>
 800a658:	2300      	movs	r3, #0
 800a65a:	4629      	mov	r1, r5
 800a65c:	220a      	movs	r2, #10
 800a65e:	4658      	mov	r0, fp
 800a660:	f000 faec 	bl	800ac3c <__multadd>
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	4605      	mov	r5, r0
 800a66a:	dc67      	bgt.n	800a73c <_dtoa_r+0x94c>
 800a66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66e:	2b02      	cmp	r3, #2
 800a670:	dc41      	bgt.n	800a6f6 <_dtoa_r+0x906>
 800a672:	e063      	b.n	800a73c <_dtoa_r+0x94c>
 800a674:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a676:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a67a:	e746      	b.n	800a50a <_dtoa_r+0x71a>
 800a67c:	9b07      	ldr	r3, [sp, #28]
 800a67e:	1e5c      	subs	r4, r3, #1
 800a680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a682:	42a3      	cmp	r3, r4
 800a684:	bfbf      	itttt	lt
 800a686:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a688:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a68a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a68c:	1ae3      	sublt	r3, r4, r3
 800a68e:	bfb4      	ite	lt
 800a690:	18d2      	addlt	r2, r2, r3
 800a692:	1b1c      	subge	r4, r3, r4
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	bfbc      	itt	lt
 800a698:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a69a:	2400      	movlt	r4, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bfb5      	itete	lt
 800a6a0:	eba8 0603 	sublt.w	r6, r8, r3
 800a6a4:	9b07      	ldrge	r3, [sp, #28]
 800a6a6:	2300      	movlt	r3, #0
 800a6a8:	4646      	movge	r6, r8
 800a6aa:	e730      	b.n	800a50e <_dtoa_r+0x71e>
 800a6ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6b0:	4646      	mov	r6, r8
 800a6b2:	e735      	b.n	800a520 <_dtoa_r+0x730>
 800a6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6b6:	e75c      	b.n	800a572 <_dtoa_r+0x782>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e788      	b.n	800a5ce <_dtoa_r+0x7de>
 800a6bc:	3fe00000 	.word	0x3fe00000
 800a6c0:	40240000 	.word	0x40240000
 800a6c4:	40140000 	.word	0x40140000
 800a6c8:	9b02      	ldr	r3, [sp, #8]
 800a6ca:	e780      	b.n	800a5ce <_dtoa_r+0x7de>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6d0:	e782      	b.n	800a5d8 <_dtoa_r+0x7e8>
 800a6d2:	d099      	beq.n	800a608 <_dtoa_r+0x818>
 800a6d4:	9a08      	ldr	r2, [sp, #32]
 800a6d6:	331c      	adds	r3, #28
 800a6d8:	441a      	add	r2, r3
 800a6da:	4498      	add	r8, r3
 800a6dc:	441e      	add	r6, r3
 800a6de:	9208      	str	r2, [sp, #32]
 800a6e0:	e792      	b.n	800a608 <_dtoa_r+0x818>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	e7f6      	b.n	800a6d4 <_dtoa_r+0x8e4>
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	9704      	str	r7, [sp, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dc20      	bgt.n	800a730 <_dtoa_r+0x940>
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	dd1e      	ble.n	800a734 <_dtoa_r+0x944>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f47f aec0 	bne.w	800a47e <_dtoa_r+0x68e>
 800a6fe:	4621      	mov	r1, r4
 800a700:	2205      	movs	r2, #5
 800a702:	4658      	mov	r0, fp
 800a704:	f000 fa9a 	bl	800ac3c <__multadd>
 800a708:	4601      	mov	r1, r0
 800a70a:	4604      	mov	r4, r0
 800a70c:	4648      	mov	r0, r9
 800a70e:	f000 fcad 	bl	800b06c <__mcmp>
 800a712:	2800      	cmp	r0, #0
 800a714:	f77f aeb3 	ble.w	800a47e <_dtoa_r+0x68e>
 800a718:	4656      	mov	r6, sl
 800a71a:	2331      	movs	r3, #49	@ 0x31
 800a71c:	f806 3b01 	strb.w	r3, [r6], #1
 800a720:	9b04      	ldr	r3, [sp, #16]
 800a722:	3301      	adds	r3, #1
 800a724:	9304      	str	r3, [sp, #16]
 800a726:	e6ae      	b.n	800a486 <_dtoa_r+0x696>
 800a728:	9c07      	ldr	r4, [sp, #28]
 800a72a:	9704      	str	r7, [sp, #16]
 800a72c:	4625      	mov	r5, r4
 800a72e:	e7f3      	b.n	800a718 <_dtoa_r+0x928>
 800a730:	9b07      	ldr	r3, [sp, #28]
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 8104 	beq.w	800a944 <_dtoa_r+0xb54>
 800a73c:	2e00      	cmp	r6, #0
 800a73e:	dd05      	ble.n	800a74c <_dtoa_r+0x95c>
 800a740:	4629      	mov	r1, r5
 800a742:	4632      	mov	r2, r6
 800a744:	4658      	mov	r0, fp
 800a746:	f000 fc25 	bl	800af94 <__lshift>
 800a74a:	4605      	mov	r5, r0
 800a74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d05a      	beq.n	800a808 <_dtoa_r+0xa18>
 800a752:	6869      	ldr	r1, [r5, #4]
 800a754:	4658      	mov	r0, fp
 800a756:	f000 fa0f 	bl	800ab78 <_Balloc>
 800a75a:	4606      	mov	r6, r0
 800a75c:	b928      	cbnz	r0, 800a76a <_dtoa_r+0x97a>
 800a75e:	4b84      	ldr	r3, [pc, #528]	@ (800a970 <_dtoa_r+0xb80>)
 800a760:	4602      	mov	r2, r0
 800a762:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a766:	f7ff bb5a 	b.w	8009e1e <_dtoa_r+0x2e>
 800a76a:	692a      	ldr	r2, [r5, #16]
 800a76c:	3202      	adds	r2, #2
 800a76e:	0092      	lsls	r2, r2, #2
 800a770:	f105 010c 	add.w	r1, r5, #12
 800a774:	300c      	adds	r0, #12
 800a776:	f000 ffaf 	bl	800b6d8 <memcpy>
 800a77a:	2201      	movs	r2, #1
 800a77c:	4631      	mov	r1, r6
 800a77e:	4658      	mov	r0, fp
 800a780:	f000 fc08 	bl	800af94 <__lshift>
 800a784:	f10a 0301 	add.w	r3, sl, #1
 800a788:	9307      	str	r3, [sp, #28]
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	4453      	add	r3, sl
 800a78e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	462f      	mov	r7, r5
 800a798:	930a      	str	r3, [sp, #40]	@ 0x28
 800a79a:	4605      	mov	r5, r0
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	4621      	mov	r1, r4
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	4648      	mov	r0, r9
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	f7ff fa9a 	bl	8009cde <quorem>
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	9002      	str	r0, [sp, #8]
 800a7ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7b2:	4648      	mov	r0, r9
 800a7b4:	f000 fc5a 	bl	800b06c <__mcmp>
 800a7b8:	462a      	mov	r2, r5
 800a7ba:	9008      	str	r0, [sp, #32]
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4658      	mov	r0, fp
 800a7c0:	f000 fc70 	bl	800b0a4 <__mdiff>
 800a7c4:	68c2      	ldr	r2, [r0, #12]
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	bb02      	cbnz	r2, 800a80c <_dtoa_r+0xa1c>
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	4648      	mov	r0, r9
 800a7ce:	f000 fc4d 	bl	800b06c <__mcmp>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4658      	mov	r0, fp
 800a7d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7da:	f000 fa0d 	bl	800abf8 <_Bfree>
 800a7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7e2:	9e07      	ldr	r6, [sp, #28]
 800a7e4:	ea43 0102 	orr.w	r1, r3, r2
 800a7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ea:	4319      	orrs	r1, r3
 800a7ec:	d110      	bne.n	800a810 <_dtoa_r+0xa20>
 800a7ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7f2:	d029      	beq.n	800a848 <_dtoa_r+0xa58>
 800a7f4:	9b08      	ldr	r3, [sp, #32]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dd02      	ble.n	800a800 <_dtoa_r+0xa10>
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a800:	9b00      	ldr	r3, [sp, #0]
 800a802:	f883 8000 	strb.w	r8, [r3]
 800a806:	e63f      	b.n	800a488 <_dtoa_r+0x698>
 800a808:	4628      	mov	r0, r5
 800a80a:	e7bb      	b.n	800a784 <_dtoa_r+0x994>
 800a80c:	2201      	movs	r2, #1
 800a80e:	e7e1      	b.n	800a7d4 <_dtoa_r+0x9e4>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	db04      	blt.n	800a820 <_dtoa_r+0xa30>
 800a816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a818:	430b      	orrs	r3, r1
 800a81a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a81c:	430b      	orrs	r3, r1
 800a81e:	d120      	bne.n	800a862 <_dtoa_r+0xa72>
 800a820:	2a00      	cmp	r2, #0
 800a822:	dded      	ble.n	800a800 <_dtoa_r+0xa10>
 800a824:	4649      	mov	r1, r9
 800a826:	2201      	movs	r2, #1
 800a828:	4658      	mov	r0, fp
 800a82a:	f000 fbb3 	bl	800af94 <__lshift>
 800a82e:	4621      	mov	r1, r4
 800a830:	4681      	mov	r9, r0
 800a832:	f000 fc1b 	bl	800b06c <__mcmp>
 800a836:	2800      	cmp	r0, #0
 800a838:	dc03      	bgt.n	800a842 <_dtoa_r+0xa52>
 800a83a:	d1e1      	bne.n	800a800 <_dtoa_r+0xa10>
 800a83c:	f018 0f01 	tst.w	r8, #1
 800a840:	d0de      	beq.n	800a800 <_dtoa_r+0xa10>
 800a842:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a846:	d1d8      	bne.n	800a7fa <_dtoa_r+0xa0a>
 800a848:	9a00      	ldr	r2, [sp, #0]
 800a84a:	2339      	movs	r3, #57	@ 0x39
 800a84c:	7013      	strb	r3, [r2, #0]
 800a84e:	4633      	mov	r3, r6
 800a850:	461e      	mov	r6, r3
 800a852:	3b01      	subs	r3, #1
 800a854:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a858:	2a39      	cmp	r2, #57	@ 0x39
 800a85a:	d052      	beq.n	800a902 <_dtoa_r+0xb12>
 800a85c:	3201      	adds	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	e612      	b.n	800a488 <_dtoa_r+0x698>
 800a862:	2a00      	cmp	r2, #0
 800a864:	dd07      	ble.n	800a876 <_dtoa_r+0xa86>
 800a866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a86a:	d0ed      	beq.n	800a848 <_dtoa_r+0xa58>
 800a86c:	9a00      	ldr	r2, [sp, #0]
 800a86e:	f108 0301 	add.w	r3, r8, #1
 800a872:	7013      	strb	r3, [r2, #0]
 800a874:	e608      	b.n	800a488 <_dtoa_r+0x698>
 800a876:	9b07      	ldr	r3, [sp, #28]
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a880:	4293      	cmp	r3, r2
 800a882:	d028      	beq.n	800a8d6 <_dtoa_r+0xae6>
 800a884:	4649      	mov	r1, r9
 800a886:	2300      	movs	r3, #0
 800a888:	220a      	movs	r2, #10
 800a88a:	4658      	mov	r0, fp
 800a88c:	f000 f9d6 	bl	800ac3c <__multadd>
 800a890:	42af      	cmp	r7, r5
 800a892:	4681      	mov	r9, r0
 800a894:	f04f 0300 	mov.w	r3, #0
 800a898:	f04f 020a 	mov.w	r2, #10
 800a89c:	4639      	mov	r1, r7
 800a89e:	4658      	mov	r0, fp
 800a8a0:	d107      	bne.n	800a8b2 <_dtoa_r+0xac2>
 800a8a2:	f000 f9cb 	bl	800ac3c <__multadd>
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	9b07      	ldr	r3, [sp, #28]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	9307      	str	r3, [sp, #28]
 800a8b0:	e774      	b.n	800a79c <_dtoa_r+0x9ac>
 800a8b2:	f000 f9c3 	bl	800ac3c <__multadd>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	220a      	movs	r2, #10
 800a8be:	4658      	mov	r0, fp
 800a8c0:	f000 f9bc 	bl	800ac3c <__multadd>
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	e7f0      	b.n	800a8aa <_dtoa_r+0xaba>
 800a8c8:	9b00      	ldr	r3, [sp, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bfcc      	ite	gt
 800a8ce:	461e      	movgt	r6, r3
 800a8d0:	2601      	movle	r6, #1
 800a8d2:	4456      	add	r6, sl
 800a8d4:	2700      	movs	r7, #0
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	2201      	movs	r2, #1
 800a8da:	4658      	mov	r0, fp
 800a8dc:	f000 fb5a 	bl	800af94 <__lshift>
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4681      	mov	r9, r0
 800a8e4:	f000 fbc2 	bl	800b06c <__mcmp>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	dcb0      	bgt.n	800a84e <_dtoa_r+0xa5e>
 800a8ec:	d102      	bne.n	800a8f4 <_dtoa_r+0xb04>
 800a8ee:	f018 0f01 	tst.w	r8, #1
 800a8f2:	d1ac      	bne.n	800a84e <_dtoa_r+0xa5e>
 800a8f4:	4633      	mov	r3, r6
 800a8f6:	461e      	mov	r6, r3
 800a8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8fc:	2a30      	cmp	r2, #48	@ 0x30
 800a8fe:	d0fa      	beq.n	800a8f6 <_dtoa_r+0xb06>
 800a900:	e5c2      	b.n	800a488 <_dtoa_r+0x698>
 800a902:	459a      	cmp	sl, r3
 800a904:	d1a4      	bne.n	800a850 <_dtoa_r+0xa60>
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	3301      	adds	r3, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	2331      	movs	r3, #49	@ 0x31
 800a90e:	f88a 3000 	strb.w	r3, [sl]
 800a912:	e5b9      	b.n	800a488 <_dtoa_r+0x698>
 800a914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a916:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a974 <_dtoa_r+0xb84>
 800a91a:	b11b      	cbz	r3, 800a924 <_dtoa_r+0xb34>
 800a91c:	f10a 0308 	add.w	r3, sl, #8
 800a920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	4650      	mov	r0, sl
 800a926:	b019      	add	sp, #100	@ 0x64
 800a928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a92e:	2b01      	cmp	r3, #1
 800a930:	f77f ae37 	ble.w	800a5a2 <_dtoa_r+0x7b2>
 800a934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a936:	930a      	str	r3, [sp, #40]	@ 0x28
 800a938:	2001      	movs	r0, #1
 800a93a:	e655      	b.n	800a5e8 <_dtoa_r+0x7f8>
 800a93c:	9b00      	ldr	r3, [sp, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f77f aed6 	ble.w	800a6f0 <_dtoa_r+0x900>
 800a944:	4656      	mov	r6, sl
 800a946:	4621      	mov	r1, r4
 800a948:	4648      	mov	r0, r9
 800a94a:	f7ff f9c8 	bl	8009cde <quorem>
 800a94e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a952:	f806 8b01 	strb.w	r8, [r6], #1
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	eba6 020a 	sub.w	r2, r6, sl
 800a95c:	4293      	cmp	r3, r2
 800a95e:	ddb3      	ble.n	800a8c8 <_dtoa_r+0xad8>
 800a960:	4649      	mov	r1, r9
 800a962:	2300      	movs	r3, #0
 800a964:	220a      	movs	r2, #10
 800a966:	4658      	mov	r0, fp
 800a968:	f000 f968 	bl	800ac3c <__multadd>
 800a96c:	4681      	mov	r9, r0
 800a96e:	e7ea      	b.n	800a946 <_dtoa_r+0xb56>
 800a970:	0800de28 	.word	0x0800de28
 800a974:	0800ddac 	.word	0x0800ddac

0800a978 <_free_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4605      	mov	r5, r0
 800a97c:	2900      	cmp	r1, #0
 800a97e:	d041      	beq.n	800aa04 <_free_r+0x8c>
 800a980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a984:	1f0c      	subs	r4, r1, #4
 800a986:	2b00      	cmp	r3, #0
 800a988:	bfb8      	it	lt
 800a98a:	18e4      	addlt	r4, r4, r3
 800a98c:	f000 f8e8 	bl	800ab60 <__malloc_lock>
 800a990:	4a1d      	ldr	r2, [pc, #116]	@ (800aa08 <_free_r+0x90>)
 800a992:	6813      	ldr	r3, [r2, #0]
 800a994:	b933      	cbnz	r3, 800a9a4 <_free_r+0x2c>
 800a996:	6063      	str	r3, [r4, #4]
 800a998:	6014      	str	r4, [r2, #0]
 800a99a:	4628      	mov	r0, r5
 800a99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9a0:	f000 b8e4 	b.w	800ab6c <__malloc_unlock>
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d908      	bls.n	800a9ba <_free_r+0x42>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	1821      	adds	r1, r4, r0
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	bf01      	itttt	eq
 800a9b0:	6819      	ldreq	r1, [r3, #0]
 800a9b2:	685b      	ldreq	r3, [r3, #4]
 800a9b4:	1809      	addeq	r1, r1, r0
 800a9b6:	6021      	streq	r1, [r4, #0]
 800a9b8:	e7ed      	b.n	800a996 <_free_r+0x1e>
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	b10b      	cbz	r3, 800a9c4 <_free_r+0x4c>
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	d9fa      	bls.n	800a9ba <_free_r+0x42>
 800a9c4:	6811      	ldr	r1, [r2, #0]
 800a9c6:	1850      	adds	r0, r2, r1
 800a9c8:	42a0      	cmp	r0, r4
 800a9ca:	d10b      	bne.n	800a9e4 <_free_r+0x6c>
 800a9cc:	6820      	ldr	r0, [r4, #0]
 800a9ce:	4401      	add	r1, r0
 800a9d0:	1850      	adds	r0, r2, r1
 800a9d2:	4283      	cmp	r3, r0
 800a9d4:	6011      	str	r1, [r2, #0]
 800a9d6:	d1e0      	bne.n	800a99a <_free_r+0x22>
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	6053      	str	r3, [r2, #4]
 800a9de:	4408      	add	r0, r1
 800a9e0:	6010      	str	r0, [r2, #0]
 800a9e2:	e7da      	b.n	800a99a <_free_r+0x22>
 800a9e4:	d902      	bls.n	800a9ec <_free_r+0x74>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	602b      	str	r3, [r5, #0]
 800a9ea:	e7d6      	b.n	800a99a <_free_r+0x22>
 800a9ec:	6820      	ldr	r0, [r4, #0]
 800a9ee:	1821      	adds	r1, r4, r0
 800a9f0:	428b      	cmp	r3, r1
 800a9f2:	bf04      	itt	eq
 800a9f4:	6819      	ldreq	r1, [r3, #0]
 800a9f6:	685b      	ldreq	r3, [r3, #4]
 800a9f8:	6063      	str	r3, [r4, #4]
 800a9fa:	bf04      	itt	eq
 800a9fc:	1809      	addeq	r1, r1, r0
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	6054      	str	r4, [r2, #4]
 800aa02:	e7ca      	b.n	800a99a <_free_r+0x22>
 800aa04:	bd38      	pop	{r3, r4, r5, pc}
 800aa06:	bf00      	nop
 800aa08:	20000b5c 	.word	0x20000b5c

0800aa0c <malloc>:
 800aa0c:	4b02      	ldr	r3, [pc, #8]	@ (800aa18 <malloc+0xc>)
 800aa0e:	4601      	mov	r1, r0
 800aa10:	6818      	ldr	r0, [r3, #0]
 800aa12:	f000 b825 	b.w	800aa60 <_malloc_r>
 800aa16:	bf00      	nop
 800aa18:	200000b8 	.word	0x200000b8

0800aa1c <sbrk_aligned>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	4e0f      	ldr	r6, [pc, #60]	@ (800aa5c <sbrk_aligned+0x40>)
 800aa20:	460c      	mov	r4, r1
 800aa22:	6831      	ldr	r1, [r6, #0]
 800aa24:	4605      	mov	r5, r0
 800aa26:	b911      	cbnz	r1, 800aa2e <sbrk_aligned+0x12>
 800aa28:	f000 fe46 	bl	800b6b8 <_sbrk_r>
 800aa2c:	6030      	str	r0, [r6, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 fe41 	bl	800b6b8 <_sbrk_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d103      	bne.n	800aa42 <sbrk_aligned+0x26>
 800aa3a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa3e:	4620      	mov	r0, r4
 800aa40:	bd70      	pop	{r4, r5, r6, pc}
 800aa42:	1cc4      	adds	r4, r0, #3
 800aa44:	f024 0403 	bic.w	r4, r4, #3
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d0f8      	beq.n	800aa3e <sbrk_aligned+0x22>
 800aa4c:	1a21      	subs	r1, r4, r0
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 fe32 	bl	800b6b8 <_sbrk_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d1f2      	bne.n	800aa3e <sbrk_aligned+0x22>
 800aa58:	e7ef      	b.n	800aa3a <sbrk_aligned+0x1e>
 800aa5a:	bf00      	nop
 800aa5c:	20000b58 	.word	0x20000b58

0800aa60 <_malloc_r>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	1ccd      	adds	r5, r1, #3
 800aa66:	f025 0503 	bic.w	r5, r5, #3
 800aa6a:	3508      	adds	r5, #8
 800aa6c:	2d0c      	cmp	r5, #12
 800aa6e:	bf38      	it	cc
 800aa70:	250c      	movcc	r5, #12
 800aa72:	2d00      	cmp	r5, #0
 800aa74:	4606      	mov	r6, r0
 800aa76:	db01      	blt.n	800aa7c <_malloc_r+0x1c>
 800aa78:	42a9      	cmp	r1, r5
 800aa7a:	d904      	bls.n	800aa86 <_malloc_r+0x26>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	6033      	str	r3, [r6, #0]
 800aa80:	2000      	movs	r0, #0
 800aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab5c <_malloc_r+0xfc>
 800aa8a:	f000 f869 	bl	800ab60 <__malloc_lock>
 800aa8e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa92:	461c      	mov	r4, r3
 800aa94:	bb44      	cbnz	r4, 800aae8 <_malloc_r+0x88>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff ffbf 	bl	800aa1c <sbrk_aligned>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	d158      	bne.n	800ab56 <_malloc_r+0xf6>
 800aaa4:	f8d8 4000 	ldr.w	r4, [r8]
 800aaa8:	4627      	mov	r7, r4
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	d143      	bne.n	800ab36 <_malloc_r+0xd6>
 800aaae:	2c00      	cmp	r4, #0
 800aab0:	d04b      	beq.n	800ab4a <_malloc_r+0xea>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	4639      	mov	r1, r7
 800aab6:	4630      	mov	r0, r6
 800aab8:	eb04 0903 	add.w	r9, r4, r3
 800aabc:	f000 fdfc 	bl	800b6b8 <_sbrk_r>
 800aac0:	4581      	cmp	r9, r0
 800aac2:	d142      	bne.n	800ab4a <_malloc_r+0xea>
 800aac4:	6821      	ldr	r1, [r4, #0]
 800aac6:	1a6d      	subs	r5, r5, r1
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ffa6 	bl	800aa1c <sbrk_aligned>
 800aad0:	3001      	adds	r0, #1
 800aad2:	d03a      	beq.n	800ab4a <_malloc_r+0xea>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	442b      	add	r3, r5
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	f8d8 3000 	ldr.w	r3, [r8]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	bb62      	cbnz	r2, 800ab3c <_malloc_r+0xdc>
 800aae2:	f8c8 7000 	str.w	r7, [r8]
 800aae6:	e00f      	b.n	800ab08 <_malloc_r+0xa8>
 800aae8:	6822      	ldr	r2, [r4, #0]
 800aaea:	1b52      	subs	r2, r2, r5
 800aaec:	d420      	bmi.n	800ab30 <_malloc_r+0xd0>
 800aaee:	2a0b      	cmp	r2, #11
 800aaf0:	d917      	bls.n	800ab22 <_malloc_r+0xc2>
 800aaf2:	1961      	adds	r1, r4, r5
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	6025      	str	r5, [r4, #0]
 800aaf8:	bf18      	it	ne
 800aafa:	6059      	strne	r1, [r3, #4]
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	bf08      	it	eq
 800ab00:	f8c8 1000 	streq.w	r1, [r8]
 800ab04:	5162      	str	r2, [r4, r5]
 800ab06:	604b      	str	r3, [r1, #4]
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f000 f82f 	bl	800ab6c <__malloc_unlock>
 800ab0e:	f104 000b 	add.w	r0, r4, #11
 800ab12:	1d23      	adds	r3, r4, #4
 800ab14:	f020 0007 	bic.w	r0, r0, #7
 800ab18:	1ac2      	subs	r2, r0, r3
 800ab1a:	bf1c      	itt	ne
 800ab1c:	1a1b      	subne	r3, r3, r0
 800ab1e:	50a3      	strne	r3, [r4, r2]
 800ab20:	e7af      	b.n	800aa82 <_malloc_r+0x22>
 800ab22:	6862      	ldr	r2, [r4, #4]
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	bf0c      	ite	eq
 800ab28:	f8c8 2000 	streq.w	r2, [r8]
 800ab2c:	605a      	strne	r2, [r3, #4]
 800ab2e:	e7eb      	b.n	800ab08 <_malloc_r+0xa8>
 800ab30:	4623      	mov	r3, r4
 800ab32:	6864      	ldr	r4, [r4, #4]
 800ab34:	e7ae      	b.n	800aa94 <_malloc_r+0x34>
 800ab36:	463c      	mov	r4, r7
 800ab38:	687f      	ldr	r7, [r7, #4]
 800ab3a:	e7b6      	b.n	800aaaa <_malloc_r+0x4a>
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d1fb      	bne.n	800ab3c <_malloc_r+0xdc>
 800ab44:	2300      	movs	r3, #0
 800ab46:	6053      	str	r3, [r2, #4]
 800ab48:	e7de      	b.n	800ab08 <_malloc_r+0xa8>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	6033      	str	r3, [r6, #0]
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f000 f80c 	bl	800ab6c <__malloc_unlock>
 800ab54:	e794      	b.n	800aa80 <_malloc_r+0x20>
 800ab56:	6005      	str	r5, [r0, #0]
 800ab58:	e7d6      	b.n	800ab08 <_malloc_r+0xa8>
 800ab5a:	bf00      	nop
 800ab5c:	20000b5c 	.word	0x20000b5c

0800ab60 <__malloc_lock>:
 800ab60:	4801      	ldr	r0, [pc, #4]	@ (800ab68 <__malloc_lock+0x8>)
 800ab62:	f7ff b8ba 	b.w	8009cda <__retarget_lock_acquire_recursive>
 800ab66:	bf00      	nop
 800ab68:	20000b54 	.word	0x20000b54

0800ab6c <__malloc_unlock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	@ (800ab74 <__malloc_unlock+0x8>)
 800ab6e:	f7ff b8b5 	b.w	8009cdc <__retarget_lock_release_recursive>
 800ab72:	bf00      	nop
 800ab74:	20000b54 	.word	0x20000b54

0800ab78 <_Balloc>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	69c6      	ldr	r6, [r0, #28]
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	460d      	mov	r5, r1
 800ab80:	b976      	cbnz	r6, 800aba0 <_Balloc+0x28>
 800ab82:	2010      	movs	r0, #16
 800ab84:	f7ff ff42 	bl	800aa0c <malloc>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	61e0      	str	r0, [r4, #28]
 800ab8c:	b920      	cbnz	r0, 800ab98 <_Balloc+0x20>
 800ab8e:	4b18      	ldr	r3, [pc, #96]	@ (800abf0 <_Balloc+0x78>)
 800ab90:	4818      	ldr	r0, [pc, #96]	@ (800abf4 <_Balloc+0x7c>)
 800ab92:	216b      	movs	r1, #107	@ 0x6b
 800ab94:	f000 fdae 	bl	800b6f4 <__assert_func>
 800ab98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab9c:	6006      	str	r6, [r0, #0]
 800ab9e:	60c6      	str	r6, [r0, #12]
 800aba0:	69e6      	ldr	r6, [r4, #28]
 800aba2:	68f3      	ldr	r3, [r6, #12]
 800aba4:	b183      	cbz	r3, 800abc8 <_Balloc+0x50>
 800aba6:	69e3      	ldr	r3, [r4, #28]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abae:	b9b8      	cbnz	r0, 800abe0 <_Balloc+0x68>
 800abb0:	2101      	movs	r1, #1
 800abb2:	fa01 f605 	lsl.w	r6, r1, r5
 800abb6:	1d72      	adds	r2, r6, #5
 800abb8:	0092      	lsls	r2, r2, #2
 800abba:	4620      	mov	r0, r4
 800abbc:	f000 fdb8 	bl	800b730 <_calloc_r>
 800abc0:	b160      	cbz	r0, 800abdc <_Balloc+0x64>
 800abc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abc6:	e00e      	b.n	800abe6 <_Balloc+0x6e>
 800abc8:	2221      	movs	r2, #33	@ 0x21
 800abca:	2104      	movs	r1, #4
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fdaf 	bl	800b730 <_calloc_r>
 800abd2:	69e3      	ldr	r3, [r4, #28]
 800abd4:	60f0      	str	r0, [r6, #12]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e4      	bne.n	800aba6 <_Balloc+0x2e>
 800abdc:	2000      	movs	r0, #0
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	6802      	ldr	r2, [r0, #0]
 800abe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abe6:	2300      	movs	r3, #0
 800abe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abec:	e7f7      	b.n	800abde <_Balloc+0x66>
 800abee:	bf00      	nop
 800abf0:	0800ddb9 	.word	0x0800ddb9
 800abf4:	0800de39 	.word	0x0800de39

0800abf8 <_Bfree>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	69c6      	ldr	r6, [r0, #28]
 800abfc:	4605      	mov	r5, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	b976      	cbnz	r6, 800ac20 <_Bfree+0x28>
 800ac02:	2010      	movs	r0, #16
 800ac04:	f7ff ff02 	bl	800aa0c <malloc>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	61e8      	str	r0, [r5, #28]
 800ac0c:	b920      	cbnz	r0, 800ac18 <_Bfree+0x20>
 800ac0e:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <_Bfree+0x3c>)
 800ac10:	4809      	ldr	r0, [pc, #36]	@ (800ac38 <_Bfree+0x40>)
 800ac12:	218f      	movs	r1, #143	@ 0x8f
 800ac14:	f000 fd6e 	bl	800b6f4 <__assert_func>
 800ac18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac1c:	6006      	str	r6, [r0, #0]
 800ac1e:	60c6      	str	r6, [r0, #12]
 800ac20:	b13c      	cbz	r4, 800ac32 <_Bfree+0x3a>
 800ac22:	69eb      	ldr	r3, [r5, #28]
 800ac24:	6862      	ldr	r2, [r4, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac2c:	6021      	str	r1, [r4, #0]
 800ac2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac32:	bd70      	pop	{r4, r5, r6, pc}
 800ac34:	0800ddb9 	.word	0x0800ddb9
 800ac38:	0800de39 	.word	0x0800de39

0800ac3c <__multadd>:
 800ac3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac40:	690d      	ldr	r5, [r1, #16]
 800ac42:	4607      	mov	r7, r0
 800ac44:	460c      	mov	r4, r1
 800ac46:	461e      	mov	r6, r3
 800ac48:	f101 0c14 	add.w	ip, r1, #20
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac52:	b299      	uxth	r1, r3
 800ac54:	fb02 6101 	mla	r1, r2, r1, r6
 800ac58:	0c1e      	lsrs	r6, r3, #16
 800ac5a:	0c0b      	lsrs	r3, r1, #16
 800ac5c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac60:	b289      	uxth	r1, r1
 800ac62:	3001      	adds	r0, #1
 800ac64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac68:	4285      	cmp	r5, r0
 800ac6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac72:	dcec      	bgt.n	800ac4e <__multadd+0x12>
 800ac74:	b30e      	cbz	r6, 800acba <__multadd+0x7e>
 800ac76:	68a3      	ldr	r3, [r4, #8]
 800ac78:	42ab      	cmp	r3, r5
 800ac7a:	dc19      	bgt.n	800acb0 <__multadd+0x74>
 800ac7c:	6861      	ldr	r1, [r4, #4]
 800ac7e:	4638      	mov	r0, r7
 800ac80:	3101      	adds	r1, #1
 800ac82:	f7ff ff79 	bl	800ab78 <_Balloc>
 800ac86:	4680      	mov	r8, r0
 800ac88:	b928      	cbnz	r0, 800ac96 <__multadd+0x5a>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	@ (800acc0 <__multadd+0x84>)
 800ac8e:	480d      	ldr	r0, [pc, #52]	@ (800acc4 <__multadd+0x88>)
 800ac90:	21ba      	movs	r1, #186	@ 0xba
 800ac92:	f000 fd2f 	bl	800b6f4 <__assert_func>
 800ac96:	6922      	ldr	r2, [r4, #16]
 800ac98:	3202      	adds	r2, #2
 800ac9a:	f104 010c 	add.w	r1, r4, #12
 800ac9e:	0092      	lsls	r2, r2, #2
 800aca0:	300c      	adds	r0, #12
 800aca2:	f000 fd19 	bl	800b6d8 <memcpy>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff ffa5 	bl	800abf8 <_Bfree>
 800acae:	4644      	mov	r4, r8
 800acb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acb4:	3501      	adds	r5, #1
 800acb6:	615e      	str	r6, [r3, #20]
 800acb8:	6125      	str	r5, [r4, #16]
 800acba:	4620      	mov	r0, r4
 800acbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc0:	0800de28 	.word	0x0800de28
 800acc4:	0800de39 	.word	0x0800de39

0800acc8 <__hi0bits>:
 800acc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800accc:	4603      	mov	r3, r0
 800acce:	bf36      	itet	cc
 800acd0:	0403      	lslcc	r3, r0, #16
 800acd2:	2000      	movcs	r0, #0
 800acd4:	2010      	movcc	r0, #16
 800acd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acda:	bf3c      	itt	cc
 800acdc:	021b      	lslcc	r3, r3, #8
 800acde:	3008      	addcc	r0, #8
 800ace0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ace4:	bf3c      	itt	cc
 800ace6:	011b      	lslcc	r3, r3, #4
 800ace8:	3004      	addcc	r0, #4
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acee:	bf3c      	itt	cc
 800acf0:	009b      	lslcc	r3, r3, #2
 800acf2:	3002      	addcc	r0, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	db05      	blt.n	800ad04 <__hi0bits+0x3c>
 800acf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acfc:	f100 0001 	add.w	r0, r0, #1
 800ad00:	bf08      	it	eq
 800ad02:	2020      	moveq	r0, #32
 800ad04:	4770      	bx	lr

0800ad06 <__lo0bits>:
 800ad06:	6803      	ldr	r3, [r0, #0]
 800ad08:	4602      	mov	r2, r0
 800ad0a:	f013 0007 	ands.w	r0, r3, #7
 800ad0e:	d00b      	beq.n	800ad28 <__lo0bits+0x22>
 800ad10:	07d9      	lsls	r1, r3, #31
 800ad12:	d421      	bmi.n	800ad58 <__lo0bits+0x52>
 800ad14:	0798      	lsls	r0, r3, #30
 800ad16:	bf49      	itett	mi
 800ad18:	085b      	lsrmi	r3, r3, #1
 800ad1a:	089b      	lsrpl	r3, r3, #2
 800ad1c:	2001      	movmi	r0, #1
 800ad1e:	6013      	strmi	r3, [r2, #0]
 800ad20:	bf5c      	itt	pl
 800ad22:	6013      	strpl	r3, [r2, #0]
 800ad24:	2002      	movpl	r0, #2
 800ad26:	4770      	bx	lr
 800ad28:	b299      	uxth	r1, r3
 800ad2a:	b909      	cbnz	r1, 800ad30 <__lo0bits+0x2a>
 800ad2c:	0c1b      	lsrs	r3, r3, #16
 800ad2e:	2010      	movs	r0, #16
 800ad30:	b2d9      	uxtb	r1, r3
 800ad32:	b909      	cbnz	r1, 800ad38 <__lo0bits+0x32>
 800ad34:	3008      	adds	r0, #8
 800ad36:	0a1b      	lsrs	r3, r3, #8
 800ad38:	0719      	lsls	r1, r3, #28
 800ad3a:	bf04      	itt	eq
 800ad3c:	091b      	lsreq	r3, r3, #4
 800ad3e:	3004      	addeq	r0, #4
 800ad40:	0799      	lsls	r1, r3, #30
 800ad42:	bf04      	itt	eq
 800ad44:	089b      	lsreq	r3, r3, #2
 800ad46:	3002      	addeq	r0, #2
 800ad48:	07d9      	lsls	r1, r3, #31
 800ad4a:	d403      	bmi.n	800ad54 <__lo0bits+0x4e>
 800ad4c:	085b      	lsrs	r3, r3, #1
 800ad4e:	f100 0001 	add.w	r0, r0, #1
 800ad52:	d003      	beq.n	800ad5c <__lo0bits+0x56>
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	4770      	bx	lr
 800ad58:	2000      	movs	r0, #0
 800ad5a:	4770      	bx	lr
 800ad5c:	2020      	movs	r0, #32
 800ad5e:	4770      	bx	lr

0800ad60 <__i2b>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	460c      	mov	r4, r1
 800ad64:	2101      	movs	r1, #1
 800ad66:	f7ff ff07 	bl	800ab78 <_Balloc>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	b928      	cbnz	r0, 800ad7a <__i2b+0x1a>
 800ad6e:	4b05      	ldr	r3, [pc, #20]	@ (800ad84 <__i2b+0x24>)
 800ad70:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <__i2b+0x28>)
 800ad72:	f240 1145 	movw	r1, #325	@ 0x145
 800ad76:	f000 fcbd 	bl	800b6f4 <__assert_func>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	6144      	str	r4, [r0, #20]
 800ad7e:	6103      	str	r3, [r0, #16]
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	bf00      	nop
 800ad84:	0800de28 	.word	0x0800de28
 800ad88:	0800de39 	.word	0x0800de39

0800ad8c <__multiply>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4614      	mov	r4, r2
 800ad92:	690a      	ldr	r2, [r1, #16]
 800ad94:	6923      	ldr	r3, [r4, #16]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	bfa8      	it	ge
 800ad9a:	4623      	movge	r3, r4
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	bfa4      	itt	ge
 800ada0:	460c      	movge	r4, r1
 800ada2:	461f      	movge	r7, r3
 800ada4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ada8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800adac:	68a3      	ldr	r3, [r4, #8]
 800adae:	6861      	ldr	r1, [r4, #4]
 800adb0:	eb0a 0609 	add.w	r6, sl, r9
 800adb4:	42b3      	cmp	r3, r6
 800adb6:	b085      	sub	sp, #20
 800adb8:	bfb8      	it	lt
 800adba:	3101      	addlt	r1, #1
 800adbc:	f7ff fedc 	bl	800ab78 <_Balloc>
 800adc0:	b930      	cbnz	r0, 800add0 <__multiply+0x44>
 800adc2:	4602      	mov	r2, r0
 800adc4:	4b44      	ldr	r3, [pc, #272]	@ (800aed8 <__multiply+0x14c>)
 800adc6:	4845      	ldr	r0, [pc, #276]	@ (800aedc <__multiply+0x150>)
 800adc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800adcc:	f000 fc92 	bl	800b6f4 <__assert_func>
 800add0:	f100 0514 	add.w	r5, r0, #20
 800add4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800add8:	462b      	mov	r3, r5
 800adda:	2200      	movs	r2, #0
 800addc:	4543      	cmp	r3, r8
 800adde:	d321      	bcc.n	800ae24 <__multiply+0x98>
 800ade0:	f107 0114 	add.w	r1, r7, #20
 800ade4:	f104 0214 	add.w	r2, r4, #20
 800ade8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800adec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	1b13      	subs	r3, r2, r4
 800adf4:	3b15      	subs	r3, #21
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	3304      	adds	r3, #4
 800adfc:	f104 0715 	add.w	r7, r4, #21
 800ae00:	42ba      	cmp	r2, r7
 800ae02:	bf38      	it	cc
 800ae04:	2304      	movcc	r3, #4
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	9103      	str	r1, [sp, #12]
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	d80c      	bhi.n	800ae2a <__multiply+0x9e>
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	dd03      	ble.n	800ae1c <__multiply+0x90>
 800ae14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d05b      	beq.n	800aed4 <__multiply+0x148>
 800ae1c:	6106      	str	r6, [r0, #16]
 800ae1e:	b005      	add	sp, #20
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	f843 2b04 	str.w	r2, [r3], #4
 800ae28:	e7d8      	b.n	800addc <__multiply+0x50>
 800ae2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae2e:	f1ba 0f00 	cmp.w	sl, #0
 800ae32:	d024      	beq.n	800ae7e <__multiply+0xf2>
 800ae34:	f104 0e14 	add.w	lr, r4, #20
 800ae38:	46a9      	mov	r9, r5
 800ae3a:	f04f 0c00 	mov.w	ip, #0
 800ae3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae42:	f8d9 3000 	ldr.w	r3, [r9]
 800ae46:	fa1f fb87 	uxth.w	fp, r7
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae54:	f8d9 7000 	ldr.w	r7, [r9]
 800ae58:	4463      	add	r3, ip
 800ae5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae6c:	4572      	cmp	r2, lr
 800ae6e:	f849 3b04 	str.w	r3, [r9], #4
 800ae72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae76:	d8e2      	bhi.n	800ae3e <__multiply+0xb2>
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	f845 c003 	str.w	ip, [r5, r3]
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae84:	3104      	adds	r1, #4
 800ae86:	f1b9 0f00 	cmp.w	r9, #0
 800ae8a:	d021      	beq.n	800aed0 <__multiply+0x144>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	f104 0c14 	add.w	ip, r4, #20
 800ae92:	46ae      	mov	lr, r5
 800ae94:	f04f 0a00 	mov.w	sl, #0
 800ae98:	f8bc b000 	ldrh.w	fp, [ip]
 800ae9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aea0:	fb09 770b 	mla	r7, r9, fp, r7
 800aea4:	4457      	add	r7, sl
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aeac:	f84e 3b04 	str.w	r3, [lr], #4
 800aeb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aeb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeb8:	f8be 3000 	ldrh.w	r3, [lr]
 800aebc:	fb09 330a 	mla	r3, r9, sl, r3
 800aec0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aec4:	4562      	cmp	r2, ip
 800aec6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeca:	d8e5      	bhi.n	800ae98 <__multiply+0x10c>
 800aecc:	9f01      	ldr	r7, [sp, #4]
 800aece:	51eb      	str	r3, [r5, r7]
 800aed0:	3504      	adds	r5, #4
 800aed2:	e799      	b.n	800ae08 <__multiply+0x7c>
 800aed4:	3e01      	subs	r6, #1
 800aed6:	e79b      	b.n	800ae10 <__multiply+0x84>
 800aed8:	0800de28 	.word	0x0800de28
 800aedc:	0800de39 	.word	0x0800de39

0800aee0 <__pow5mult>:
 800aee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee4:	4615      	mov	r5, r2
 800aee6:	f012 0203 	ands.w	r2, r2, #3
 800aeea:	4607      	mov	r7, r0
 800aeec:	460e      	mov	r6, r1
 800aeee:	d007      	beq.n	800af00 <__pow5mult+0x20>
 800aef0:	4c25      	ldr	r4, [pc, #148]	@ (800af88 <__pow5mult+0xa8>)
 800aef2:	3a01      	subs	r2, #1
 800aef4:	2300      	movs	r3, #0
 800aef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aefa:	f7ff fe9f 	bl	800ac3c <__multadd>
 800aefe:	4606      	mov	r6, r0
 800af00:	10ad      	asrs	r5, r5, #2
 800af02:	d03d      	beq.n	800af80 <__pow5mult+0xa0>
 800af04:	69fc      	ldr	r4, [r7, #28]
 800af06:	b97c      	cbnz	r4, 800af28 <__pow5mult+0x48>
 800af08:	2010      	movs	r0, #16
 800af0a:	f7ff fd7f 	bl	800aa0c <malloc>
 800af0e:	4602      	mov	r2, r0
 800af10:	61f8      	str	r0, [r7, #28]
 800af12:	b928      	cbnz	r0, 800af20 <__pow5mult+0x40>
 800af14:	4b1d      	ldr	r3, [pc, #116]	@ (800af8c <__pow5mult+0xac>)
 800af16:	481e      	ldr	r0, [pc, #120]	@ (800af90 <__pow5mult+0xb0>)
 800af18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af1c:	f000 fbea 	bl	800b6f4 <__assert_func>
 800af20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af24:	6004      	str	r4, [r0, #0]
 800af26:	60c4      	str	r4, [r0, #12]
 800af28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af30:	b94c      	cbnz	r4, 800af46 <__pow5mult+0x66>
 800af32:	f240 2171 	movw	r1, #625	@ 0x271
 800af36:	4638      	mov	r0, r7
 800af38:	f7ff ff12 	bl	800ad60 <__i2b>
 800af3c:	2300      	movs	r3, #0
 800af3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af42:	4604      	mov	r4, r0
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	f04f 0900 	mov.w	r9, #0
 800af4a:	07eb      	lsls	r3, r5, #31
 800af4c:	d50a      	bpl.n	800af64 <__pow5mult+0x84>
 800af4e:	4631      	mov	r1, r6
 800af50:	4622      	mov	r2, r4
 800af52:	4638      	mov	r0, r7
 800af54:	f7ff ff1a 	bl	800ad8c <__multiply>
 800af58:	4631      	mov	r1, r6
 800af5a:	4680      	mov	r8, r0
 800af5c:	4638      	mov	r0, r7
 800af5e:	f7ff fe4b 	bl	800abf8 <_Bfree>
 800af62:	4646      	mov	r6, r8
 800af64:	106d      	asrs	r5, r5, #1
 800af66:	d00b      	beq.n	800af80 <__pow5mult+0xa0>
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	b938      	cbnz	r0, 800af7c <__pow5mult+0x9c>
 800af6c:	4622      	mov	r2, r4
 800af6e:	4621      	mov	r1, r4
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff ff0b 	bl	800ad8c <__multiply>
 800af76:	6020      	str	r0, [r4, #0]
 800af78:	f8c0 9000 	str.w	r9, [r0]
 800af7c:	4604      	mov	r4, r0
 800af7e:	e7e4      	b.n	800af4a <__pow5mult+0x6a>
 800af80:	4630      	mov	r0, r6
 800af82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af86:	bf00      	nop
 800af88:	0800de94 	.word	0x0800de94
 800af8c:	0800ddb9 	.word	0x0800ddb9
 800af90:	0800de39 	.word	0x0800de39

0800af94 <__lshift>:
 800af94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af98:	460c      	mov	r4, r1
 800af9a:	6849      	ldr	r1, [r1, #4]
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afa2:	68a3      	ldr	r3, [r4, #8]
 800afa4:	4607      	mov	r7, r0
 800afa6:	4691      	mov	r9, r2
 800afa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afac:	f108 0601 	add.w	r6, r8, #1
 800afb0:	42b3      	cmp	r3, r6
 800afb2:	db0b      	blt.n	800afcc <__lshift+0x38>
 800afb4:	4638      	mov	r0, r7
 800afb6:	f7ff fddf 	bl	800ab78 <_Balloc>
 800afba:	4605      	mov	r5, r0
 800afbc:	b948      	cbnz	r0, 800afd2 <__lshift+0x3e>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b28      	ldr	r3, [pc, #160]	@ (800b064 <__lshift+0xd0>)
 800afc2:	4829      	ldr	r0, [pc, #164]	@ (800b068 <__lshift+0xd4>)
 800afc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800afc8:	f000 fb94 	bl	800b6f4 <__assert_func>
 800afcc:	3101      	adds	r1, #1
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	e7ee      	b.n	800afb0 <__lshift+0x1c>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f100 0114 	add.w	r1, r0, #20
 800afd8:	f100 0210 	add.w	r2, r0, #16
 800afdc:	4618      	mov	r0, r3
 800afde:	4553      	cmp	r3, sl
 800afe0:	db33      	blt.n	800b04a <__lshift+0xb6>
 800afe2:	6920      	ldr	r0, [r4, #16]
 800afe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afe8:	f104 0314 	add.w	r3, r4, #20
 800afec:	f019 091f 	ands.w	r9, r9, #31
 800aff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aff8:	d02b      	beq.n	800b052 <__lshift+0xbe>
 800affa:	f1c9 0e20 	rsb	lr, r9, #32
 800affe:	468a      	mov	sl, r1
 800b000:	2200      	movs	r2, #0
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	fa00 f009 	lsl.w	r0, r0, r9
 800b008:	4310      	orrs	r0, r2
 800b00a:	f84a 0b04 	str.w	r0, [sl], #4
 800b00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b012:	459c      	cmp	ip, r3
 800b014:	fa22 f20e 	lsr.w	r2, r2, lr
 800b018:	d8f3      	bhi.n	800b002 <__lshift+0x6e>
 800b01a:	ebac 0304 	sub.w	r3, ip, r4
 800b01e:	3b15      	subs	r3, #21
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	3304      	adds	r3, #4
 800b026:	f104 0015 	add.w	r0, r4, #21
 800b02a:	4584      	cmp	ip, r0
 800b02c:	bf38      	it	cc
 800b02e:	2304      	movcc	r3, #4
 800b030:	50ca      	str	r2, [r1, r3]
 800b032:	b10a      	cbz	r2, 800b038 <__lshift+0xa4>
 800b034:	f108 0602 	add.w	r6, r8, #2
 800b038:	3e01      	subs	r6, #1
 800b03a:	4638      	mov	r0, r7
 800b03c:	612e      	str	r6, [r5, #16]
 800b03e:	4621      	mov	r1, r4
 800b040:	f7ff fdda 	bl	800abf8 <_Bfree>
 800b044:	4628      	mov	r0, r5
 800b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b04e:	3301      	adds	r3, #1
 800b050:	e7c5      	b.n	800afde <__lshift+0x4a>
 800b052:	3904      	subs	r1, #4
 800b054:	f853 2b04 	ldr.w	r2, [r3], #4
 800b058:	f841 2f04 	str.w	r2, [r1, #4]!
 800b05c:	459c      	cmp	ip, r3
 800b05e:	d8f9      	bhi.n	800b054 <__lshift+0xc0>
 800b060:	e7ea      	b.n	800b038 <__lshift+0xa4>
 800b062:	bf00      	nop
 800b064:	0800de28 	.word	0x0800de28
 800b068:	0800de39 	.word	0x0800de39

0800b06c <__mcmp>:
 800b06c:	690a      	ldr	r2, [r1, #16]
 800b06e:	4603      	mov	r3, r0
 800b070:	6900      	ldr	r0, [r0, #16]
 800b072:	1a80      	subs	r0, r0, r2
 800b074:	b530      	push	{r4, r5, lr}
 800b076:	d10e      	bne.n	800b096 <__mcmp+0x2a>
 800b078:	3314      	adds	r3, #20
 800b07a:	3114      	adds	r1, #20
 800b07c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b08c:	4295      	cmp	r5, r2
 800b08e:	d003      	beq.n	800b098 <__mcmp+0x2c>
 800b090:	d205      	bcs.n	800b09e <__mcmp+0x32>
 800b092:	f04f 30ff 	mov.w	r0, #4294967295
 800b096:	bd30      	pop	{r4, r5, pc}
 800b098:	42a3      	cmp	r3, r4
 800b09a:	d3f3      	bcc.n	800b084 <__mcmp+0x18>
 800b09c:	e7fb      	b.n	800b096 <__mcmp+0x2a>
 800b09e:	2001      	movs	r0, #1
 800b0a0:	e7f9      	b.n	800b096 <__mcmp+0x2a>
	...

0800b0a4 <__mdiff>:
 800b0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4689      	mov	r9, r1
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4648      	mov	r0, r9
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	f7ff ffdb 	bl	800b06c <__mcmp>
 800b0b6:	1e05      	subs	r5, r0, #0
 800b0b8:	d112      	bne.n	800b0e0 <__mdiff+0x3c>
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff fd5b 	bl	800ab78 <_Balloc>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	b928      	cbnz	r0, 800b0d2 <__mdiff+0x2e>
 800b0c6:	4b3f      	ldr	r3, [pc, #252]	@ (800b1c4 <__mdiff+0x120>)
 800b0c8:	f240 2137 	movw	r1, #567	@ 0x237
 800b0cc:	483e      	ldr	r0, [pc, #248]	@ (800b1c8 <__mdiff+0x124>)
 800b0ce:	f000 fb11 	bl	800b6f4 <__assert_func>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0d8:	4610      	mov	r0, r2
 800b0da:	b003      	add	sp, #12
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e0:	bfbc      	itt	lt
 800b0e2:	464b      	movlt	r3, r9
 800b0e4:	46a1      	movlt	r9, r4
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0ec:	bfba      	itte	lt
 800b0ee:	461c      	movlt	r4, r3
 800b0f0:	2501      	movlt	r5, #1
 800b0f2:	2500      	movge	r5, #0
 800b0f4:	f7ff fd40 	bl	800ab78 <_Balloc>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	b918      	cbnz	r0, 800b104 <__mdiff+0x60>
 800b0fc:	4b31      	ldr	r3, [pc, #196]	@ (800b1c4 <__mdiff+0x120>)
 800b0fe:	f240 2145 	movw	r1, #581	@ 0x245
 800b102:	e7e3      	b.n	800b0cc <__mdiff+0x28>
 800b104:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b108:	6926      	ldr	r6, [r4, #16]
 800b10a:	60c5      	str	r5, [r0, #12]
 800b10c:	f109 0310 	add.w	r3, r9, #16
 800b110:	f109 0514 	add.w	r5, r9, #20
 800b114:	f104 0e14 	add.w	lr, r4, #20
 800b118:	f100 0b14 	add.w	fp, r0, #20
 800b11c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b120:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	46d9      	mov	r9, fp
 800b128:	f04f 0c00 	mov.w	ip, #0
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b132:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b136:	9301      	str	r3, [sp, #4]
 800b138:	fa1f f38a 	uxth.w	r3, sl
 800b13c:	4619      	mov	r1, r3
 800b13e:	b283      	uxth	r3, r0
 800b140:	1acb      	subs	r3, r1, r3
 800b142:	0c00      	lsrs	r0, r0, #16
 800b144:	4463      	add	r3, ip
 800b146:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b14a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b154:	4576      	cmp	r6, lr
 800b156:	f849 3b04 	str.w	r3, [r9], #4
 800b15a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b15e:	d8e5      	bhi.n	800b12c <__mdiff+0x88>
 800b160:	1b33      	subs	r3, r6, r4
 800b162:	3b15      	subs	r3, #21
 800b164:	f023 0303 	bic.w	r3, r3, #3
 800b168:	3415      	adds	r4, #21
 800b16a:	3304      	adds	r3, #4
 800b16c:	42a6      	cmp	r6, r4
 800b16e:	bf38      	it	cc
 800b170:	2304      	movcc	r3, #4
 800b172:	441d      	add	r5, r3
 800b174:	445b      	add	r3, fp
 800b176:	461e      	mov	r6, r3
 800b178:	462c      	mov	r4, r5
 800b17a:	4544      	cmp	r4, r8
 800b17c:	d30e      	bcc.n	800b19c <__mdiff+0xf8>
 800b17e:	f108 0103 	add.w	r1, r8, #3
 800b182:	1b49      	subs	r1, r1, r5
 800b184:	f021 0103 	bic.w	r1, r1, #3
 800b188:	3d03      	subs	r5, #3
 800b18a:	45a8      	cmp	r8, r5
 800b18c:	bf38      	it	cc
 800b18e:	2100      	movcc	r1, #0
 800b190:	440b      	add	r3, r1
 800b192:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b196:	b191      	cbz	r1, 800b1be <__mdiff+0x11a>
 800b198:	6117      	str	r7, [r2, #16]
 800b19a:	e79d      	b.n	800b0d8 <__mdiff+0x34>
 800b19c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b1a0:	46e6      	mov	lr, ip
 800b1a2:	0c08      	lsrs	r0, r1, #16
 800b1a4:	fa1c fc81 	uxtah	ip, ip, r1
 800b1a8:	4471      	add	r1, lr
 800b1aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b1ae:	b289      	uxth	r1, r1
 800b1b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1b4:	f846 1b04 	str.w	r1, [r6], #4
 800b1b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1bc:	e7dd      	b.n	800b17a <__mdiff+0xd6>
 800b1be:	3f01      	subs	r7, #1
 800b1c0:	e7e7      	b.n	800b192 <__mdiff+0xee>
 800b1c2:	bf00      	nop
 800b1c4:	0800de28 	.word	0x0800de28
 800b1c8:	0800de39 	.word	0x0800de39

0800b1cc <__d2b>:
 800b1cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	ec59 8b10 	vmov	r8, r9, d0
 800b1d8:	4616      	mov	r6, r2
 800b1da:	f7ff fccd 	bl	800ab78 <_Balloc>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	b930      	cbnz	r0, 800b1f0 <__d2b+0x24>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	4b23      	ldr	r3, [pc, #140]	@ (800b274 <__d2b+0xa8>)
 800b1e6:	4824      	ldr	r0, [pc, #144]	@ (800b278 <__d2b+0xac>)
 800b1e8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1ec:	f000 fa82 	bl	800b6f4 <__assert_func>
 800b1f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1f8:	b10d      	cbz	r5, 800b1fe <__d2b+0x32>
 800b1fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	f1b8 0300 	subs.w	r3, r8, #0
 800b204:	d023      	beq.n	800b24e <__d2b+0x82>
 800b206:	4668      	mov	r0, sp
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	f7ff fd7c 	bl	800ad06 <__lo0bits>
 800b20e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b212:	b1d0      	cbz	r0, 800b24a <__d2b+0x7e>
 800b214:	f1c0 0320 	rsb	r3, r0, #32
 800b218:	fa02 f303 	lsl.w	r3, r2, r3
 800b21c:	430b      	orrs	r3, r1
 800b21e:	40c2      	lsrs	r2, r0
 800b220:	6163      	str	r3, [r4, #20]
 800b222:	9201      	str	r2, [sp, #4]
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	61a3      	str	r3, [r4, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bf0c      	ite	eq
 800b22c:	2201      	moveq	r2, #1
 800b22e:	2202      	movne	r2, #2
 800b230:	6122      	str	r2, [r4, #16]
 800b232:	b1a5      	cbz	r5, 800b25e <__d2b+0x92>
 800b234:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b238:	4405      	add	r5, r0
 800b23a:	603d      	str	r5, [r7, #0]
 800b23c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b240:	6030      	str	r0, [r6, #0]
 800b242:	4620      	mov	r0, r4
 800b244:	b003      	add	sp, #12
 800b246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b24a:	6161      	str	r1, [r4, #20]
 800b24c:	e7ea      	b.n	800b224 <__d2b+0x58>
 800b24e:	a801      	add	r0, sp, #4
 800b250:	f7ff fd59 	bl	800ad06 <__lo0bits>
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	6163      	str	r3, [r4, #20]
 800b258:	3020      	adds	r0, #32
 800b25a:	2201      	movs	r2, #1
 800b25c:	e7e8      	b.n	800b230 <__d2b+0x64>
 800b25e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b262:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b266:	6038      	str	r0, [r7, #0]
 800b268:	6918      	ldr	r0, [r3, #16]
 800b26a:	f7ff fd2d 	bl	800acc8 <__hi0bits>
 800b26e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b272:	e7e5      	b.n	800b240 <__d2b+0x74>
 800b274:	0800de28 	.word	0x0800de28
 800b278:	0800de39 	.word	0x0800de39

0800b27c <__ssputs_r>:
 800b27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b280:	688e      	ldr	r6, [r1, #8]
 800b282:	461f      	mov	r7, r3
 800b284:	42be      	cmp	r6, r7
 800b286:	680b      	ldr	r3, [r1, #0]
 800b288:	4682      	mov	sl, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	4690      	mov	r8, r2
 800b28e:	d82d      	bhi.n	800b2ec <__ssputs_r+0x70>
 800b290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b298:	d026      	beq.n	800b2e8 <__ssputs_r+0x6c>
 800b29a:	6965      	ldr	r5, [r4, #20]
 800b29c:	6909      	ldr	r1, [r1, #16]
 800b29e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2a2:	eba3 0901 	sub.w	r9, r3, r1
 800b2a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2aa:	1c7b      	adds	r3, r7, #1
 800b2ac:	444b      	add	r3, r9
 800b2ae:	106d      	asrs	r5, r5, #1
 800b2b0:	429d      	cmp	r5, r3
 800b2b2:	bf38      	it	cc
 800b2b4:	461d      	movcc	r5, r3
 800b2b6:	0553      	lsls	r3, r2, #21
 800b2b8:	d527      	bpl.n	800b30a <__ssputs_r+0x8e>
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f7ff fbd0 	bl	800aa60 <_malloc_r>
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	b360      	cbz	r0, 800b31e <__ssputs_r+0xa2>
 800b2c4:	6921      	ldr	r1, [r4, #16]
 800b2c6:	464a      	mov	r2, r9
 800b2c8:	f000 fa06 	bl	800b6d8 <memcpy>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2d6:	81a3      	strh	r3, [r4, #12]
 800b2d8:	6126      	str	r6, [r4, #16]
 800b2da:	6165      	str	r5, [r4, #20]
 800b2dc:	444e      	add	r6, r9
 800b2de:	eba5 0509 	sub.w	r5, r5, r9
 800b2e2:	6026      	str	r6, [r4, #0]
 800b2e4:	60a5      	str	r5, [r4, #8]
 800b2e6:	463e      	mov	r6, r7
 800b2e8:	42be      	cmp	r6, r7
 800b2ea:	d900      	bls.n	800b2ee <__ssputs_r+0x72>
 800b2ec:	463e      	mov	r6, r7
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	4632      	mov	r2, r6
 800b2f2:	4641      	mov	r1, r8
 800b2f4:	f000 f9c6 	bl	800b684 <memmove>
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	1b9b      	subs	r3, r3, r6
 800b2fc:	60a3      	str	r3, [r4, #8]
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	4433      	add	r3, r6
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	2000      	movs	r0, #0
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	462a      	mov	r2, r5
 800b30c:	f000 fa36 	bl	800b77c <_realloc_r>
 800b310:	4606      	mov	r6, r0
 800b312:	2800      	cmp	r0, #0
 800b314:	d1e0      	bne.n	800b2d8 <__ssputs_r+0x5c>
 800b316:	6921      	ldr	r1, [r4, #16]
 800b318:	4650      	mov	r0, sl
 800b31a:	f7ff fb2d 	bl	800a978 <_free_r>
 800b31e:	230c      	movs	r3, #12
 800b320:	f8ca 3000 	str.w	r3, [sl]
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b32a:	81a3      	strh	r3, [r4, #12]
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	e7e9      	b.n	800b306 <__ssputs_r+0x8a>
	...

0800b334 <_svfiprintf_r>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4698      	mov	r8, r3
 800b33a:	898b      	ldrh	r3, [r1, #12]
 800b33c:	061b      	lsls	r3, r3, #24
 800b33e:	b09d      	sub	sp, #116	@ 0x74
 800b340:	4607      	mov	r7, r0
 800b342:	460d      	mov	r5, r1
 800b344:	4614      	mov	r4, r2
 800b346:	d510      	bpl.n	800b36a <_svfiprintf_r+0x36>
 800b348:	690b      	ldr	r3, [r1, #16]
 800b34a:	b973      	cbnz	r3, 800b36a <_svfiprintf_r+0x36>
 800b34c:	2140      	movs	r1, #64	@ 0x40
 800b34e:	f7ff fb87 	bl	800aa60 <_malloc_r>
 800b352:	6028      	str	r0, [r5, #0]
 800b354:	6128      	str	r0, [r5, #16]
 800b356:	b930      	cbnz	r0, 800b366 <_svfiprintf_r+0x32>
 800b358:	230c      	movs	r3, #12
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295
 800b360:	b01d      	add	sp, #116	@ 0x74
 800b362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b366:	2340      	movs	r3, #64	@ 0x40
 800b368:	616b      	str	r3, [r5, #20]
 800b36a:	2300      	movs	r3, #0
 800b36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b36e:	2320      	movs	r3, #32
 800b370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b374:	f8cd 800c 	str.w	r8, [sp, #12]
 800b378:	2330      	movs	r3, #48	@ 0x30
 800b37a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b518 <_svfiprintf_r+0x1e4>
 800b37e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b382:	f04f 0901 	mov.w	r9, #1
 800b386:	4623      	mov	r3, r4
 800b388:	469a      	mov	sl, r3
 800b38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b38e:	b10a      	cbz	r2, 800b394 <_svfiprintf_r+0x60>
 800b390:	2a25      	cmp	r2, #37	@ 0x25
 800b392:	d1f9      	bne.n	800b388 <_svfiprintf_r+0x54>
 800b394:	ebba 0b04 	subs.w	fp, sl, r4
 800b398:	d00b      	beq.n	800b3b2 <_svfiprintf_r+0x7e>
 800b39a:	465b      	mov	r3, fp
 800b39c:	4622      	mov	r2, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	f7ff ff6b 	bl	800b27c <__ssputs_r>
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f000 80a7 	beq.w	800b4fa <_svfiprintf_r+0x1c6>
 800b3ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3ae:	445a      	add	r2, fp
 800b3b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 809f 	beq.w	800b4fa <_svfiprintf_r+0x1c6>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3c6:	f10a 0a01 	add.w	sl, sl, #1
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	9307      	str	r3, [sp, #28]
 800b3ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3d4:	4654      	mov	r4, sl
 800b3d6:	2205      	movs	r2, #5
 800b3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3dc:	484e      	ldr	r0, [pc, #312]	@ (800b518 <_svfiprintf_r+0x1e4>)
 800b3de:	f7f4 ff17 	bl	8000210 <memchr>
 800b3e2:	9a04      	ldr	r2, [sp, #16]
 800b3e4:	b9d8      	cbnz	r0, 800b41e <_svfiprintf_r+0xea>
 800b3e6:	06d0      	lsls	r0, r2, #27
 800b3e8:	bf44      	itt	mi
 800b3ea:	2320      	movmi	r3, #32
 800b3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3f0:	0711      	lsls	r1, r2, #28
 800b3f2:	bf44      	itt	mi
 800b3f4:	232b      	movmi	r3, #43	@ 0x2b
 800b3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b3fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b400:	d015      	beq.n	800b42e <_svfiprintf_r+0xfa>
 800b402:	9a07      	ldr	r2, [sp, #28]
 800b404:	4654      	mov	r4, sl
 800b406:	2000      	movs	r0, #0
 800b408:	f04f 0c0a 	mov.w	ip, #10
 800b40c:	4621      	mov	r1, r4
 800b40e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b412:	3b30      	subs	r3, #48	@ 0x30
 800b414:	2b09      	cmp	r3, #9
 800b416:	d94b      	bls.n	800b4b0 <_svfiprintf_r+0x17c>
 800b418:	b1b0      	cbz	r0, 800b448 <_svfiprintf_r+0x114>
 800b41a:	9207      	str	r2, [sp, #28]
 800b41c:	e014      	b.n	800b448 <_svfiprintf_r+0x114>
 800b41e:	eba0 0308 	sub.w	r3, r0, r8
 800b422:	fa09 f303 	lsl.w	r3, r9, r3
 800b426:	4313      	orrs	r3, r2
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	46a2      	mov	sl, r4
 800b42c:	e7d2      	b.n	800b3d4 <_svfiprintf_r+0xa0>
 800b42e:	9b03      	ldr	r3, [sp, #12]
 800b430:	1d19      	adds	r1, r3, #4
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	9103      	str	r1, [sp, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	bfbb      	ittet	lt
 800b43a:	425b      	neglt	r3, r3
 800b43c:	f042 0202 	orrlt.w	r2, r2, #2
 800b440:	9307      	strge	r3, [sp, #28]
 800b442:	9307      	strlt	r3, [sp, #28]
 800b444:	bfb8      	it	lt
 800b446:	9204      	strlt	r2, [sp, #16]
 800b448:	7823      	ldrb	r3, [r4, #0]
 800b44a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b44c:	d10a      	bne.n	800b464 <_svfiprintf_r+0x130>
 800b44e:	7863      	ldrb	r3, [r4, #1]
 800b450:	2b2a      	cmp	r3, #42	@ 0x2a
 800b452:	d132      	bne.n	800b4ba <_svfiprintf_r+0x186>
 800b454:	9b03      	ldr	r3, [sp, #12]
 800b456:	1d1a      	adds	r2, r3, #4
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	9203      	str	r2, [sp, #12]
 800b45c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b460:	3402      	adds	r4, #2
 800b462:	9305      	str	r3, [sp, #20]
 800b464:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b528 <_svfiprintf_r+0x1f4>
 800b468:	7821      	ldrb	r1, [r4, #0]
 800b46a:	2203      	movs	r2, #3
 800b46c:	4650      	mov	r0, sl
 800b46e:	f7f4 fecf 	bl	8000210 <memchr>
 800b472:	b138      	cbz	r0, 800b484 <_svfiprintf_r+0x150>
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	eba0 000a 	sub.w	r0, r0, sl
 800b47a:	2240      	movs	r2, #64	@ 0x40
 800b47c:	4082      	lsls	r2, r0
 800b47e:	4313      	orrs	r3, r2
 800b480:	3401      	adds	r4, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b488:	4824      	ldr	r0, [pc, #144]	@ (800b51c <_svfiprintf_r+0x1e8>)
 800b48a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b48e:	2206      	movs	r2, #6
 800b490:	f7f4 febe 	bl	8000210 <memchr>
 800b494:	2800      	cmp	r0, #0
 800b496:	d036      	beq.n	800b506 <_svfiprintf_r+0x1d2>
 800b498:	4b21      	ldr	r3, [pc, #132]	@ (800b520 <_svfiprintf_r+0x1ec>)
 800b49a:	bb1b      	cbnz	r3, 800b4e4 <_svfiprintf_r+0x1b0>
 800b49c:	9b03      	ldr	r3, [sp, #12]
 800b49e:	3307      	adds	r3, #7
 800b4a0:	f023 0307 	bic.w	r3, r3, #7
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	9303      	str	r3, [sp, #12]
 800b4a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4aa:	4433      	add	r3, r6
 800b4ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ae:	e76a      	b.n	800b386 <_svfiprintf_r+0x52>
 800b4b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	2001      	movs	r0, #1
 800b4b8:	e7a8      	b.n	800b40c <_svfiprintf_r+0xd8>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	3401      	adds	r4, #1
 800b4be:	9305      	str	r3, [sp, #20]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	f04f 0c0a 	mov.w	ip, #10
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4cc:	3a30      	subs	r2, #48	@ 0x30
 800b4ce:	2a09      	cmp	r2, #9
 800b4d0:	d903      	bls.n	800b4da <_svfiprintf_r+0x1a6>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0c6      	beq.n	800b464 <_svfiprintf_r+0x130>
 800b4d6:	9105      	str	r1, [sp, #20]
 800b4d8:	e7c4      	b.n	800b464 <_svfiprintf_r+0x130>
 800b4da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4de:	4604      	mov	r4, r0
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e7f0      	b.n	800b4c6 <_svfiprintf_r+0x192>
 800b4e4:	ab03      	add	r3, sp, #12
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b524 <_svfiprintf_r+0x1f0>)
 800b4ec:	a904      	add	r1, sp, #16
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f7fd fe98 	bl	8009224 <_printf_float>
 800b4f4:	1c42      	adds	r2, r0, #1
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	d1d6      	bne.n	800b4a8 <_svfiprintf_r+0x174>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	065b      	lsls	r3, r3, #25
 800b4fe:	f53f af2d 	bmi.w	800b35c <_svfiprintf_r+0x28>
 800b502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b504:	e72c      	b.n	800b360 <_svfiprintf_r+0x2c>
 800b506:	ab03      	add	r3, sp, #12
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	462a      	mov	r2, r5
 800b50c:	4b05      	ldr	r3, [pc, #20]	@ (800b524 <_svfiprintf_r+0x1f0>)
 800b50e:	a904      	add	r1, sp, #16
 800b510:	4638      	mov	r0, r7
 800b512:	f7fe f91f 	bl	8009754 <_printf_i>
 800b516:	e7ed      	b.n	800b4f4 <_svfiprintf_r+0x1c0>
 800b518:	0800df90 	.word	0x0800df90
 800b51c:	0800df9a 	.word	0x0800df9a
 800b520:	08009225 	.word	0x08009225
 800b524:	0800b27d 	.word	0x0800b27d
 800b528:	0800df96 	.word	0x0800df96

0800b52c <__sflush_r>:
 800b52c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	0716      	lsls	r6, r2, #28
 800b536:	4605      	mov	r5, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d454      	bmi.n	800b5e6 <__sflush_r+0xba>
 800b53c:	684b      	ldr	r3, [r1, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dc02      	bgt.n	800b548 <__sflush_r+0x1c>
 800b542:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	dd48      	ble.n	800b5da <__sflush_r+0xae>
 800b548:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b54a:	2e00      	cmp	r6, #0
 800b54c:	d045      	beq.n	800b5da <__sflush_r+0xae>
 800b54e:	2300      	movs	r3, #0
 800b550:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b554:	682f      	ldr	r7, [r5, #0]
 800b556:	6a21      	ldr	r1, [r4, #32]
 800b558:	602b      	str	r3, [r5, #0]
 800b55a:	d030      	beq.n	800b5be <__sflush_r+0x92>
 800b55c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	0759      	lsls	r1, r3, #29
 800b562:	d505      	bpl.n	800b570 <__sflush_r+0x44>
 800b564:	6863      	ldr	r3, [r4, #4]
 800b566:	1ad2      	subs	r2, r2, r3
 800b568:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b56a:	b10b      	cbz	r3, 800b570 <__sflush_r+0x44>
 800b56c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b56e:	1ad2      	subs	r2, r2, r3
 800b570:	2300      	movs	r3, #0
 800b572:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b574:	6a21      	ldr	r1, [r4, #32]
 800b576:	4628      	mov	r0, r5
 800b578:	47b0      	blx	r6
 800b57a:	1c43      	adds	r3, r0, #1
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	d106      	bne.n	800b58e <__sflush_r+0x62>
 800b580:	6829      	ldr	r1, [r5, #0]
 800b582:	291d      	cmp	r1, #29
 800b584:	d82b      	bhi.n	800b5de <__sflush_r+0xb2>
 800b586:	4a2a      	ldr	r2, [pc, #168]	@ (800b630 <__sflush_r+0x104>)
 800b588:	410a      	asrs	r2, r1
 800b58a:	07d6      	lsls	r6, r2, #31
 800b58c:	d427      	bmi.n	800b5de <__sflush_r+0xb2>
 800b58e:	2200      	movs	r2, #0
 800b590:	6062      	str	r2, [r4, #4]
 800b592:	04d9      	lsls	r1, r3, #19
 800b594:	6922      	ldr	r2, [r4, #16]
 800b596:	6022      	str	r2, [r4, #0]
 800b598:	d504      	bpl.n	800b5a4 <__sflush_r+0x78>
 800b59a:	1c42      	adds	r2, r0, #1
 800b59c:	d101      	bne.n	800b5a2 <__sflush_r+0x76>
 800b59e:	682b      	ldr	r3, [r5, #0]
 800b5a0:	b903      	cbnz	r3, 800b5a4 <__sflush_r+0x78>
 800b5a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5a6:	602f      	str	r7, [r5, #0]
 800b5a8:	b1b9      	cbz	r1, 800b5da <__sflush_r+0xae>
 800b5aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d002      	beq.n	800b5b8 <__sflush_r+0x8c>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7ff f9e0 	bl	800a978 <_free_r>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5bc:	e00d      	b.n	800b5da <__sflush_r+0xae>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	47b0      	blx	r6
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	1c50      	adds	r0, r2, #1
 800b5c8:	d1c9      	bne.n	800b55e <__sflush_r+0x32>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0c6      	beq.n	800b55e <__sflush_r+0x32>
 800b5d0:	2b1d      	cmp	r3, #29
 800b5d2:	d001      	beq.n	800b5d8 <__sflush_r+0xac>
 800b5d4:	2b16      	cmp	r3, #22
 800b5d6:	d11e      	bne.n	800b616 <__sflush_r+0xea>
 800b5d8:	602f      	str	r7, [r5, #0]
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e022      	b.n	800b624 <__sflush_r+0xf8>
 800b5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5e2:	b21b      	sxth	r3, r3
 800b5e4:	e01b      	b.n	800b61e <__sflush_r+0xf2>
 800b5e6:	690f      	ldr	r7, [r1, #16]
 800b5e8:	2f00      	cmp	r7, #0
 800b5ea:	d0f6      	beq.n	800b5da <__sflush_r+0xae>
 800b5ec:	0793      	lsls	r3, r2, #30
 800b5ee:	680e      	ldr	r6, [r1, #0]
 800b5f0:	bf08      	it	eq
 800b5f2:	694b      	ldreq	r3, [r1, #20]
 800b5f4:	600f      	str	r7, [r1, #0]
 800b5f6:	bf18      	it	ne
 800b5f8:	2300      	movne	r3, #0
 800b5fa:	eba6 0807 	sub.w	r8, r6, r7
 800b5fe:	608b      	str	r3, [r1, #8]
 800b600:	f1b8 0f00 	cmp.w	r8, #0
 800b604:	dde9      	ble.n	800b5da <__sflush_r+0xae>
 800b606:	6a21      	ldr	r1, [r4, #32]
 800b608:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b60a:	4643      	mov	r3, r8
 800b60c:	463a      	mov	r2, r7
 800b60e:	4628      	mov	r0, r5
 800b610:	47b0      	blx	r6
 800b612:	2800      	cmp	r0, #0
 800b614:	dc08      	bgt.n	800b628 <__sflush_r+0xfc>
 800b616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	4407      	add	r7, r0
 800b62a:	eba8 0800 	sub.w	r8, r8, r0
 800b62e:	e7e7      	b.n	800b600 <__sflush_r+0xd4>
 800b630:	dfbffffe 	.word	0xdfbffffe

0800b634 <_fflush_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	690b      	ldr	r3, [r1, #16]
 800b638:	4605      	mov	r5, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	b913      	cbnz	r3, 800b644 <_fflush_r+0x10>
 800b63e:	2500      	movs	r5, #0
 800b640:	4628      	mov	r0, r5
 800b642:	bd38      	pop	{r3, r4, r5, pc}
 800b644:	b118      	cbz	r0, 800b64e <_fflush_r+0x1a>
 800b646:	6a03      	ldr	r3, [r0, #32]
 800b648:	b90b      	cbnz	r3, 800b64e <_fflush_r+0x1a>
 800b64a:	f7fe fa2f 	bl	8009aac <__sinit>
 800b64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0f3      	beq.n	800b63e <_fflush_r+0xa>
 800b656:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b658:	07d0      	lsls	r0, r2, #31
 800b65a:	d404      	bmi.n	800b666 <_fflush_r+0x32>
 800b65c:	0599      	lsls	r1, r3, #22
 800b65e:	d402      	bmi.n	800b666 <_fflush_r+0x32>
 800b660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b662:	f7fe fb3a 	bl	8009cda <__retarget_lock_acquire_recursive>
 800b666:	4628      	mov	r0, r5
 800b668:	4621      	mov	r1, r4
 800b66a:	f7ff ff5f 	bl	800b52c <__sflush_r>
 800b66e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b670:	07da      	lsls	r2, r3, #31
 800b672:	4605      	mov	r5, r0
 800b674:	d4e4      	bmi.n	800b640 <_fflush_r+0xc>
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	059b      	lsls	r3, r3, #22
 800b67a:	d4e1      	bmi.n	800b640 <_fflush_r+0xc>
 800b67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b67e:	f7fe fb2d 	bl	8009cdc <__retarget_lock_release_recursive>
 800b682:	e7dd      	b.n	800b640 <_fflush_r+0xc>

0800b684 <memmove>:
 800b684:	4288      	cmp	r0, r1
 800b686:	b510      	push	{r4, lr}
 800b688:	eb01 0402 	add.w	r4, r1, r2
 800b68c:	d902      	bls.n	800b694 <memmove+0x10>
 800b68e:	4284      	cmp	r4, r0
 800b690:	4623      	mov	r3, r4
 800b692:	d807      	bhi.n	800b6a4 <memmove+0x20>
 800b694:	1e43      	subs	r3, r0, #1
 800b696:	42a1      	cmp	r1, r4
 800b698:	d008      	beq.n	800b6ac <memmove+0x28>
 800b69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6a2:	e7f8      	b.n	800b696 <memmove+0x12>
 800b6a4:	4402      	add	r2, r0
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	428a      	cmp	r2, r1
 800b6aa:	d100      	bne.n	800b6ae <memmove+0x2a>
 800b6ac:	bd10      	pop	{r4, pc}
 800b6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6b6:	e7f7      	b.n	800b6a8 <memmove+0x24>

0800b6b8 <_sbrk_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d06      	ldr	r5, [pc, #24]	@ (800b6d4 <_sbrk_r+0x1c>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	f7f8 fb8c 	bl	8003de0 <_sbrk>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_sbrk_r+0x1a>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_sbrk_r+0x1a>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	20000b50 	.word	0x20000b50

0800b6d8 <memcpy>:
 800b6d8:	440a      	add	r2, r1
 800b6da:	4291      	cmp	r1, r2
 800b6dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6e0:	d100      	bne.n	800b6e4 <memcpy+0xc>
 800b6e2:	4770      	bx	lr
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ee:	4291      	cmp	r1, r2
 800b6f0:	d1f9      	bne.n	800b6e6 <memcpy+0xe>
 800b6f2:	bd10      	pop	{r4, pc}

0800b6f4 <__assert_func>:
 800b6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6f6:	4614      	mov	r4, r2
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b09      	ldr	r3, [pc, #36]	@ (800b720 <__assert_func+0x2c>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4605      	mov	r5, r0
 800b700:	68d8      	ldr	r0, [r3, #12]
 800b702:	b954      	cbnz	r4, 800b71a <__assert_func+0x26>
 800b704:	4b07      	ldr	r3, [pc, #28]	@ (800b724 <__assert_func+0x30>)
 800b706:	461c      	mov	r4, r3
 800b708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b70c:	9100      	str	r1, [sp, #0]
 800b70e:	462b      	mov	r3, r5
 800b710:	4905      	ldr	r1, [pc, #20]	@ (800b728 <__assert_func+0x34>)
 800b712:	f000 f86f 	bl	800b7f4 <fiprintf>
 800b716:	f000 f87f 	bl	800b818 <abort>
 800b71a:	4b04      	ldr	r3, [pc, #16]	@ (800b72c <__assert_func+0x38>)
 800b71c:	e7f4      	b.n	800b708 <__assert_func+0x14>
 800b71e:	bf00      	nop
 800b720:	200000b8 	.word	0x200000b8
 800b724:	0800dfe6 	.word	0x0800dfe6
 800b728:	0800dfb8 	.word	0x0800dfb8
 800b72c:	0800dfab 	.word	0x0800dfab

0800b730 <_calloc_r>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	fba1 5402 	umull	r5, r4, r1, r2
 800b736:	b93c      	cbnz	r4, 800b748 <_calloc_r+0x18>
 800b738:	4629      	mov	r1, r5
 800b73a:	f7ff f991 	bl	800aa60 <_malloc_r>
 800b73e:	4606      	mov	r6, r0
 800b740:	b928      	cbnz	r0, 800b74e <_calloc_r+0x1e>
 800b742:	2600      	movs	r6, #0
 800b744:	4630      	mov	r0, r6
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	220c      	movs	r2, #12
 800b74a:	6002      	str	r2, [r0, #0]
 800b74c:	e7f9      	b.n	800b742 <_calloc_r+0x12>
 800b74e:	462a      	mov	r2, r5
 800b750:	4621      	mov	r1, r4
 800b752:	f7fe fa44 	bl	8009bde <memset>
 800b756:	e7f5      	b.n	800b744 <_calloc_r+0x14>

0800b758 <__ascii_mbtowc>:
 800b758:	b082      	sub	sp, #8
 800b75a:	b901      	cbnz	r1, 800b75e <__ascii_mbtowc+0x6>
 800b75c:	a901      	add	r1, sp, #4
 800b75e:	b142      	cbz	r2, 800b772 <__ascii_mbtowc+0x1a>
 800b760:	b14b      	cbz	r3, 800b776 <__ascii_mbtowc+0x1e>
 800b762:	7813      	ldrb	r3, [r2, #0]
 800b764:	600b      	str	r3, [r1, #0]
 800b766:	7812      	ldrb	r2, [r2, #0]
 800b768:	1e10      	subs	r0, r2, #0
 800b76a:	bf18      	it	ne
 800b76c:	2001      	movne	r0, #1
 800b76e:	b002      	add	sp, #8
 800b770:	4770      	bx	lr
 800b772:	4610      	mov	r0, r2
 800b774:	e7fb      	b.n	800b76e <__ascii_mbtowc+0x16>
 800b776:	f06f 0001 	mvn.w	r0, #1
 800b77a:	e7f8      	b.n	800b76e <__ascii_mbtowc+0x16>

0800b77c <_realloc_r>:
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	4680      	mov	r8, r0
 800b782:	4615      	mov	r5, r2
 800b784:	460c      	mov	r4, r1
 800b786:	b921      	cbnz	r1, 800b792 <_realloc_r+0x16>
 800b788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	4611      	mov	r1, r2
 800b78e:	f7ff b967 	b.w	800aa60 <_malloc_r>
 800b792:	b92a      	cbnz	r2, 800b7a0 <_realloc_r+0x24>
 800b794:	f7ff f8f0 	bl	800a978 <_free_r>
 800b798:	2400      	movs	r4, #0
 800b79a:	4620      	mov	r0, r4
 800b79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a0:	f000 f841 	bl	800b826 <_malloc_usable_size_r>
 800b7a4:	4285      	cmp	r5, r0
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	d802      	bhi.n	800b7b0 <_realloc_r+0x34>
 800b7aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7ae:	d8f4      	bhi.n	800b79a <_realloc_r+0x1e>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	f7ff f954 	bl	800aa60 <_malloc_r>
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d0ec      	beq.n	800b798 <_realloc_r+0x1c>
 800b7be:	42b5      	cmp	r5, r6
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	bf28      	it	cs
 800b7c6:	4632      	movcs	r2, r6
 800b7c8:	f7ff ff86 	bl	800b6d8 <memcpy>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	f7ff f8d2 	bl	800a978 <_free_r>
 800b7d4:	463c      	mov	r4, r7
 800b7d6:	e7e0      	b.n	800b79a <_realloc_r+0x1e>

0800b7d8 <__ascii_wctomb>:
 800b7d8:	4603      	mov	r3, r0
 800b7da:	4608      	mov	r0, r1
 800b7dc:	b141      	cbz	r1, 800b7f0 <__ascii_wctomb+0x18>
 800b7de:	2aff      	cmp	r2, #255	@ 0xff
 800b7e0:	d904      	bls.n	800b7ec <__ascii_wctomb+0x14>
 800b7e2:	228a      	movs	r2, #138	@ 0x8a
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	4770      	bx	lr
 800b7ec:	700a      	strb	r2, [r1, #0]
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <fiprintf>:
 800b7f4:	b40e      	push	{r1, r2, r3}
 800b7f6:	b503      	push	{r0, r1, lr}
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	ab03      	add	r3, sp, #12
 800b7fc:	4805      	ldr	r0, [pc, #20]	@ (800b814 <fiprintf+0x20>)
 800b7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	f000 f83f 	bl	800b888 <_vfiprintf_r>
 800b80a:	b002      	add	sp, #8
 800b80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b810:	b003      	add	sp, #12
 800b812:	4770      	bx	lr
 800b814:	200000b8 	.word	0x200000b8

0800b818 <abort>:
 800b818:	b508      	push	{r3, lr}
 800b81a:	2006      	movs	r0, #6
 800b81c:	f000 fa08 	bl	800bc30 <raise>
 800b820:	2001      	movs	r0, #1
 800b822:	f7f8 fa65 	bl	8003cf0 <_exit>

0800b826 <_malloc_usable_size_r>:
 800b826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b82a:	1f18      	subs	r0, r3, #4
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bfbc      	itt	lt
 800b830:	580b      	ldrlt	r3, [r1, r0]
 800b832:	18c0      	addlt	r0, r0, r3
 800b834:	4770      	bx	lr

0800b836 <__sfputc_r>:
 800b836:	6893      	ldr	r3, [r2, #8]
 800b838:	3b01      	subs	r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	b410      	push	{r4}
 800b83e:	6093      	str	r3, [r2, #8]
 800b840:	da08      	bge.n	800b854 <__sfputc_r+0x1e>
 800b842:	6994      	ldr	r4, [r2, #24]
 800b844:	42a3      	cmp	r3, r4
 800b846:	db01      	blt.n	800b84c <__sfputc_r+0x16>
 800b848:	290a      	cmp	r1, #10
 800b84a:	d103      	bne.n	800b854 <__sfputc_r+0x1e>
 800b84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b850:	f000 b932 	b.w	800bab8 <__swbuf_r>
 800b854:	6813      	ldr	r3, [r2, #0]
 800b856:	1c58      	adds	r0, r3, #1
 800b858:	6010      	str	r0, [r2, #0]
 800b85a:	7019      	strb	r1, [r3, #0]
 800b85c:	4608      	mov	r0, r1
 800b85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <__sfputs_r>:
 800b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	4614      	mov	r4, r2
 800b86c:	18d5      	adds	r5, r2, r3
 800b86e:	42ac      	cmp	r4, r5
 800b870:	d101      	bne.n	800b876 <__sfputs_r+0x12>
 800b872:	2000      	movs	r0, #0
 800b874:	e007      	b.n	800b886 <__sfputs_r+0x22>
 800b876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87a:	463a      	mov	r2, r7
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff ffda 	bl	800b836 <__sfputc_r>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d1f3      	bne.n	800b86e <__sfputs_r+0xa>
 800b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b888 <_vfiprintf_r>:
 800b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88c:	460d      	mov	r5, r1
 800b88e:	b09d      	sub	sp, #116	@ 0x74
 800b890:	4614      	mov	r4, r2
 800b892:	4698      	mov	r8, r3
 800b894:	4606      	mov	r6, r0
 800b896:	b118      	cbz	r0, 800b8a0 <_vfiprintf_r+0x18>
 800b898:	6a03      	ldr	r3, [r0, #32]
 800b89a:	b90b      	cbnz	r3, 800b8a0 <_vfiprintf_r+0x18>
 800b89c:	f7fe f906 	bl	8009aac <__sinit>
 800b8a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8a2:	07d9      	lsls	r1, r3, #31
 800b8a4:	d405      	bmi.n	800b8b2 <_vfiprintf_r+0x2a>
 800b8a6:	89ab      	ldrh	r3, [r5, #12]
 800b8a8:	059a      	lsls	r2, r3, #22
 800b8aa:	d402      	bmi.n	800b8b2 <_vfiprintf_r+0x2a>
 800b8ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8ae:	f7fe fa14 	bl	8009cda <__retarget_lock_acquire_recursive>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	071b      	lsls	r3, r3, #28
 800b8b6:	d501      	bpl.n	800b8bc <_vfiprintf_r+0x34>
 800b8b8:	692b      	ldr	r3, [r5, #16]
 800b8ba:	b99b      	cbnz	r3, 800b8e4 <_vfiprintf_r+0x5c>
 800b8bc:	4629      	mov	r1, r5
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f000 f938 	bl	800bb34 <__swsetup_r>
 800b8c4:	b170      	cbz	r0, 800b8e4 <_vfiprintf_r+0x5c>
 800b8c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8c8:	07dc      	lsls	r4, r3, #31
 800b8ca:	d504      	bpl.n	800b8d6 <_vfiprintf_r+0x4e>
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d0:	b01d      	add	sp, #116	@ 0x74
 800b8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	0598      	lsls	r0, r3, #22
 800b8da:	d4f7      	bmi.n	800b8cc <_vfiprintf_r+0x44>
 800b8dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8de:	f7fe f9fd 	bl	8009cdc <__retarget_lock_release_recursive>
 800b8e2:	e7f3      	b.n	800b8cc <_vfiprintf_r+0x44>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8e8:	2320      	movs	r3, #32
 800b8ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f2:	2330      	movs	r3, #48	@ 0x30
 800b8f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800baa4 <_vfiprintf_r+0x21c>
 800b8f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8fc:	f04f 0901 	mov.w	r9, #1
 800b900:	4623      	mov	r3, r4
 800b902:	469a      	mov	sl, r3
 800b904:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b908:	b10a      	cbz	r2, 800b90e <_vfiprintf_r+0x86>
 800b90a:	2a25      	cmp	r2, #37	@ 0x25
 800b90c:	d1f9      	bne.n	800b902 <_vfiprintf_r+0x7a>
 800b90e:	ebba 0b04 	subs.w	fp, sl, r4
 800b912:	d00b      	beq.n	800b92c <_vfiprintf_r+0xa4>
 800b914:	465b      	mov	r3, fp
 800b916:	4622      	mov	r2, r4
 800b918:	4629      	mov	r1, r5
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7ff ffa2 	bl	800b864 <__sfputs_r>
 800b920:	3001      	adds	r0, #1
 800b922:	f000 80a7 	beq.w	800ba74 <_vfiprintf_r+0x1ec>
 800b926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b928:	445a      	add	r2, fp
 800b92a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b92c:	f89a 3000 	ldrb.w	r3, [sl]
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 809f 	beq.w	800ba74 <_vfiprintf_r+0x1ec>
 800b936:	2300      	movs	r3, #0
 800b938:	f04f 32ff 	mov.w	r2, #4294967295
 800b93c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b940:	f10a 0a01 	add.w	sl, sl, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	9307      	str	r3, [sp, #28]
 800b948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b94c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b94e:	4654      	mov	r4, sl
 800b950:	2205      	movs	r2, #5
 800b952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b956:	4853      	ldr	r0, [pc, #332]	@ (800baa4 <_vfiprintf_r+0x21c>)
 800b958:	f7f4 fc5a 	bl	8000210 <memchr>
 800b95c:	9a04      	ldr	r2, [sp, #16]
 800b95e:	b9d8      	cbnz	r0, 800b998 <_vfiprintf_r+0x110>
 800b960:	06d1      	lsls	r1, r2, #27
 800b962:	bf44      	itt	mi
 800b964:	2320      	movmi	r3, #32
 800b966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b96a:	0713      	lsls	r3, r2, #28
 800b96c:	bf44      	itt	mi
 800b96e:	232b      	movmi	r3, #43	@ 0x2b
 800b970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b974:	f89a 3000 	ldrb.w	r3, [sl]
 800b978:	2b2a      	cmp	r3, #42	@ 0x2a
 800b97a:	d015      	beq.n	800b9a8 <_vfiprintf_r+0x120>
 800b97c:	9a07      	ldr	r2, [sp, #28]
 800b97e:	4654      	mov	r4, sl
 800b980:	2000      	movs	r0, #0
 800b982:	f04f 0c0a 	mov.w	ip, #10
 800b986:	4621      	mov	r1, r4
 800b988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b98c:	3b30      	subs	r3, #48	@ 0x30
 800b98e:	2b09      	cmp	r3, #9
 800b990:	d94b      	bls.n	800ba2a <_vfiprintf_r+0x1a2>
 800b992:	b1b0      	cbz	r0, 800b9c2 <_vfiprintf_r+0x13a>
 800b994:	9207      	str	r2, [sp, #28]
 800b996:	e014      	b.n	800b9c2 <_vfiprintf_r+0x13a>
 800b998:	eba0 0308 	sub.w	r3, r0, r8
 800b99c:	fa09 f303 	lsl.w	r3, r9, r3
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	46a2      	mov	sl, r4
 800b9a6:	e7d2      	b.n	800b94e <_vfiprintf_r+0xc6>
 800b9a8:	9b03      	ldr	r3, [sp, #12]
 800b9aa:	1d19      	adds	r1, r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	9103      	str	r1, [sp, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	bfbb      	ittet	lt
 800b9b4:	425b      	neglt	r3, r3
 800b9b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ba:	9307      	strge	r3, [sp, #28]
 800b9bc:	9307      	strlt	r3, [sp, #28]
 800b9be:	bfb8      	it	lt
 800b9c0:	9204      	strlt	r2, [sp, #16]
 800b9c2:	7823      	ldrb	r3, [r4, #0]
 800b9c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9c6:	d10a      	bne.n	800b9de <_vfiprintf_r+0x156>
 800b9c8:	7863      	ldrb	r3, [r4, #1]
 800b9ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9cc:	d132      	bne.n	800ba34 <_vfiprintf_r+0x1ac>
 800b9ce:	9b03      	ldr	r3, [sp, #12]
 800b9d0:	1d1a      	adds	r2, r3, #4
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	9203      	str	r2, [sp, #12]
 800b9d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9da:	3402      	adds	r4, #2
 800b9dc:	9305      	str	r3, [sp, #20]
 800b9de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bab4 <_vfiprintf_r+0x22c>
 800b9e2:	7821      	ldrb	r1, [r4, #0]
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	4650      	mov	r0, sl
 800b9e8:	f7f4 fc12 	bl	8000210 <memchr>
 800b9ec:	b138      	cbz	r0, 800b9fe <_vfiprintf_r+0x176>
 800b9ee:	9b04      	ldr	r3, [sp, #16]
 800b9f0:	eba0 000a 	sub.w	r0, r0, sl
 800b9f4:	2240      	movs	r2, #64	@ 0x40
 800b9f6:	4082      	lsls	r2, r0
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	3401      	adds	r4, #1
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba02:	4829      	ldr	r0, [pc, #164]	@ (800baa8 <_vfiprintf_r+0x220>)
 800ba04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba08:	2206      	movs	r2, #6
 800ba0a:	f7f4 fc01 	bl	8000210 <memchr>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d03f      	beq.n	800ba92 <_vfiprintf_r+0x20a>
 800ba12:	4b26      	ldr	r3, [pc, #152]	@ (800baac <_vfiprintf_r+0x224>)
 800ba14:	bb1b      	cbnz	r3, 800ba5e <_vfiprintf_r+0x1d6>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	3307      	adds	r3, #7
 800ba1a:	f023 0307 	bic.w	r3, r3, #7
 800ba1e:	3308      	adds	r3, #8
 800ba20:	9303      	str	r3, [sp, #12]
 800ba22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba24:	443b      	add	r3, r7
 800ba26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba28:	e76a      	b.n	800b900 <_vfiprintf_r+0x78>
 800ba2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba2e:	460c      	mov	r4, r1
 800ba30:	2001      	movs	r0, #1
 800ba32:	e7a8      	b.n	800b986 <_vfiprintf_r+0xfe>
 800ba34:	2300      	movs	r3, #0
 800ba36:	3401      	adds	r4, #1
 800ba38:	9305      	str	r3, [sp, #20]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	f04f 0c0a 	mov.w	ip, #10
 800ba40:	4620      	mov	r0, r4
 800ba42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba46:	3a30      	subs	r2, #48	@ 0x30
 800ba48:	2a09      	cmp	r2, #9
 800ba4a:	d903      	bls.n	800ba54 <_vfiprintf_r+0x1cc>
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d0c6      	beq.n	800b9de <_vfiprintf_r+0x156>
 800ba50:	9105      	str	r1, [sp, #20]
 800ba52:	e7c4      	b.n	800b9de <_vfiprintf_r+0x156>
 800ba54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba58:	4604      	mov	r4, r0
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e7f0      	b.n	800ba40 <_vfiprintf_r+0x1b8>
 800ba5e:	ab03      	add	r3, sp, #12
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	462a      	mov	r2, r5
 800ba64:	4b12      	ldr	r3, [pc, #72]	@ (800bab0 <_vfiprintf_r+0x228>)
 800ba66:	a904      	add	r1, sp, #16
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f7fd fbdb 	bl	8009224 <_printf_float>
 800ba6e:	4607      	mov	r7, r0
 800ba70:	1c78      	adds	r0, r7, #1
 800ba72:	d1d6      	bne.n	800ba22 <_vfiprintf_r+0x19a>
 800ba74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba76:	07d9      	lsls	r1, r3, #31
 800ba78:	d405      	bmi.n	800ba86 <_vfiprintf_r+0x1fe>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	059a      	lsls	r2, r3, #22
 800ba7e:	d402      	bmi.n	800ba86 <_vfiprintf_r+0x1fe>
 800ba80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba82:	f7fe f92b 	bl	8009cdc <__retarget_lock_release_recursive>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	065b      	lsls	r3, r3, #25
 800ba8a:	f53f af1f 	bmi.w	800b8cc <_vfiprintf_r+0x44>
 800ba8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba90:	e71e      	b.n	800b8d0 <_vfiprintf_r+0x48>
 800ba92:	ab03      	add	r3, sp, #12
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	462a      	mov	r2, r5
 800ba98:	4b05      	ldr	r3, [pc, #20]	@ (800bab0 <_vfiprintf_r+0x228>)
 800ba9a:	a904      	add	r1, sp, #16
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7fd fe59 	bl	8009754 <_printf_i>
 800baa2:	e7e4      	b.n	800ba6e <_vfiprintf_r+0x1e6>
 800baa4:	0800df90 	.word	0x0800df90
 800baa8:	0800df9a 	.word	0x0800df9a
 800baac:	08009225 	.word	0x08009225
 800bab0:	0800b865 	.word	0x0800b865
 800bab4:	0800df96 	.word	0x0800df96

0800bab8 <__swbuf_r>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	460e      	mov	r6, r1
 800babc:	4614      	mov	r4, r2
 800babe:	4605      	mov	r5, r0
 800bac0:	b118      	cbz	r0, 800baca <__swbuf_r+0x12>
 800bac2:	6a03      	ldr	r3, [r0, #32]
 800bac4:	b90b      	cbnz	r3, 800baca <__swbuf_r+0x12>
 800bac6:	f7fd fff1 	bl	8009aac <__sinit>
 800baca:	69a3      	ldr	r3, [r4, #24]
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	071a      	lsls	r2, r3, #28
 800bad2:	d501      	bpl.n	800bad8 <__swbuf_r+0x20>
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	b943      	cbnz	r3, 800baea <__swbuf_r+0x32>
 800bad8:	4621      	mov	r1, r4
 800bada:	4628      	mov	r0, r5
 800badc:	f000 f82a 	bl	800bb34 <__swsetup_r>
 800bae0:	b118      	cbz	r0, 800baea <__swbuf_r+0x32>
 800bae2:	f04f 37ff 	mov.w	r7, #4294967295
 800bae6:	4638      	mov	r0, r7
 800bae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	6922      	ldr	r2, [r4, #16]
 800baee:	1a98      	subs	r0, r3, r2
 800baf0:	6963      	ldr	r3, [r4, #20]
 800baf2:	b2f6      	uxtb	r6, r6
 800baf4:	4283      	cmp	r3, r0
 800baf6:	4637      	mov	r7, r6
 800baf8:	dc05      	bgt.n	800bb06 <__swbuf_r+0x4e>
 800bafa:	4621      	mov	r1, r4
 800bafc:	4628      	mov	r0, r5
 800bafe:	f7ff fd99 	bl	800b634 <_fflush_r>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d1ed      	bne.n	800bae2 <__swbuf_r+0x2a>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	60a3      	str	r3, [r4, #8]
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	6022      	str	r2, [r4, #0]
 800bb12:	701e      	strb	r6, [r3, #0]
 800bb14:	6962      	ldr	r2, [r4, #20]
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d004      	beq.n	800bb26 <__swbuf_r+0x6e>
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	07db      	lsls	r3, r3, #31
 800bb20:	d5e1      	bpl.n	800bae6 <__swbuf_r+0x2e>
 800bb22:	2e0a      	cmp	r6, #10
 800bb24:	d1df      	bne.n	800bae6 <__swbuf_r+0x2e>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f7ff fd83 	bl	800b634 <_fflush_r>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d0d9      	beq.n	800bae6 <__swbuf_r+0x2e>
 800bb32:	e7d6      	b.n	800bae2 <__swbuf_r+0x2a>

0800bb34 <__swsetup_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4b29      	ldr	r3, [pc, #164]	@ (800bbdc <__swsetup_r+0xa8>)
 800bb38:	4605      	mov	r5, r0
 800bb3a:	6818      	ldr	r0, [r3, #0]
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	b118      	cbz	r0, 800bb48 <__swsetup_r+0x14>
 800bb40:	6a03      	ldr	r3, [r0, #32]
 800bb42:	b90b      	cbnz	r3, 800bb48 <__swsetup_r+0x14>
 800bb44:	f7fd ffb2 	bl	8009aac <__sinit>
 800bb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb4c:	0719      	lsls	r1, r3, #28
 800bb4e:	d422      	bmi.n	800bb96 <__swsetup_r+0x62>
 800bb50:	06da      	lsls	r2, r3, #27
 800bb52:	d407      	bmi.n	800bb64 <__swsetup_r+0x30>
 800bb54:	2209      	movs	r2, #9
 800bb56:	602a      	str	r2, [r5, #0]
 800bb58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb5c:	81a3      	strh	r3, [r4, #12]
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb62:	e033      	b.n	800bbcc <__swsetup_r+0x98>
 800bb64:	0758      	lsls	r0, r3, #29
 800bb66:	d512      	bpl.n	800bb8e <__swsetup_r+0x5a>
 800bb68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb6a:	b141      	cbz	r1, 800bb7e <__swsetup_r+0x4a>
 800bb6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb70:	4299      	cmp	r1, r3
 800bb72:	d002      	beq.n	800bb7a <__swsetup_r+0x46>
 800bb74:	4628      	mov	r0, r5
 800bb76:	f7fe feff 	bl	800a978 <_free_r>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	2300      	movs	r3, #0
 800bb88:	6063      	str	r3, [r4, #4]
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f043 0308 	orr.w	r3, r3, #8
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	6923      	ldr	r3, [r4, #16]
 800bb98:	b94b      	cbnz	r3, 800bbae <__swsetup_r+0x7a>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba4:	d003      	beq.n	800bbae <__swsetup_r+0x7a>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f000 f883 	bl	800bcb4 <__smakebuf_r>
 800bbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb2:	f013 0201 	ands.w	r2, r3, #1
 800bbb6:	d00a      	beq.n	800bbce <__swsetup_r+0x9a>
 800bbb8:	2200      	movs	r2, #0
 800bbba:	60a2      	str	r2, [r4, #8]
 800bbbc:	6962      	ldr	r2, [r4, #20]
 800bbbe:	4252      	negs	r2, r2
 800bbc0:	61a2      	str	r2, [r4, #24]
 800bbc2:	6922      	ldr	r2, [r4, #16]
 800bbc4:	b942      	cbnz	r2, 800bbd8 <__swsetup_r+0xa4>
 800bbc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bbca:	d1c5      	bne.n	800bb58 <__swsetup_r+0x24>
 800bbcc:	bd38      	pop	{r3, r4, r5, pc}
 800bbce:	0799      	lsls	r1, r3, #30
 800bbd0:	bf58      	it	pl
 800bbd2:	6962      	ldrpl	r2, [r4, #20]
 800bbd4:	60a2      	str	r2, [r4, #8]
 800bbd6:	e7f4      	b.n	800bbc2 <__swsetup_r+0x8e>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	e7f7      	b.n	800bbcc <__swsetup_r+0x98>
 800bbdc:	200000b8 	.word	0x200000b8

0800bbe0 <_raise_r>:
 800bbe0:	291f      	cmp	r1, #31
 800bbe2:	b538      	push	{r3, r4, r5, lr}
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	460c      	mov	r4, r1
 800bbe8:	d904      	bls.n	800bbf4 <_raise_r+0x14>
 800bbea:	2316      	movs	r3, #22
 800bbec:	6003      	str	r3, [r0, #0]
 800bbee:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbf6:	b112      	cbz	r2, 800bbfe <_raise_r+0x1e>
 800bbf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbfc:	b94b      	cbnz	r3, 800bc12 <_raise_r+0x32>
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f000 f830 	bl	800bc64 <_getpid_r>
 800bc04:	4622      	mov	r2, r4
 800bc06:	4601      	mov	r1, r0
 800bc08:	4628      	mov	r0, r5
 800bc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc0e:	f000 b817 	b.w	800bc40 <_kill_r>
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d00a      	beq.n	800bc2c <_raise_r+0x4c>
 800bc16:	1c59      	adds	r1, r3, #1
 800bc18:	d103      	bne.n	800bc22 <_raise_r+0x42>
 800bc1a:	2316      	movs	r3, #22
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	2001      	movs	r0, #1
 800bc20:	e7e7      	b.n	800bbf2 <_raise_r+0x12>
 800bc22:	2100      	movs	r1, #0
 800bc24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc28:	4620      	mov	r0, r4
 800bc2a:	4798      	blx	r3
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e7e0      	b.n	800bbf2 <_raise_r+0x12>

0800bc30 <raise>:
 800bc30:	4b02      	ldr	r3, [pc, #8]	@ (800bc3c <raise+0xc>)
 800bc32:	4601      	mov	r1, r0
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	f7ff bfd3 	b.w	800bbe0 <_raise_r>
 800bc3a:	bf00      	nop
 800bc3c:	200000b8 	.word	0x200000b8

0800bc40 <_kill_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	@ (800bc60 <_kill_r+0x20>)
 800bc44:	2300      	movs	r3, #0
 800bc46:	4604      	mov	r4, r0
 800bc48:	4608      	mov	r0, r1
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	f7f8 f83f 	bl	8003cd0 <_kill>
 800bc52:	1c43      	adds	r3, r0, #1
 800bc54:	d102      	bne.n	800bc5c <_kill_r+0x1c>
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	b103      	cbz	r3, 800bc5c <_kill_r+0x1c>
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	bf00      	nop
 800bc60:	20000b50 	.word	0x20000b50

0800bc64 <_getpid_r>:
 800bc64:	f7f8 b82c 	b.w	8003cc0 <_getpid>

0800bc68 <__swhatbuf_r>:
 800bc68:	b570      	push	{r4, r5, r6, lr}
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc70:	2900      	cmp	r1, #0
 800bc72:	b096      	sub	sp, #88	@ 0x58
 800bc74:	4615      	mov	r5, r2
 800bc76:	461e      	mov	r6, r3
 800bc78:	da0d      	bge.n	800bc96 <__swhatbuf_r+0x2e>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc80:	f04f 0100 	mov.w	r1, #0
 800bc84:	bf14      	ite	ne
 800bc86:	2340      	movne	r3, #64	@ 0x40
 800bc88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	6031      	str	r1, [r6, #0]
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	b016      	add	sp, #88	@ 0x58
 800bc94:	bd70      	pop	{r4, r5, r6, pc}
 800bc96:	466a      	mov	r2, sp
 800bc98:	f000 f848 	bl	800bd2c <_fstat_r>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	dbec      	blt.n	800bc7a <__swhatbuf_r+0x12>
 800bca0:	9901      	ldr	r1, [sp, #4]
 800bca2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bca6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcaa:	4259      	negs	r1, r3
 800bcac:	4159      	adcs	r1, r3
 800bcae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcb2:	e7eb      	b.n	800bc8c <__swhatbuf_r+0x24>

0800bcb4 <__smakebuf_r>:
 800bcb4:	898b      	ldrh	r3, [r1, #12]
 800bcb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcb8:	079d      	lsls	r5, r3, #30
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	d507      	bpl.n	800bcd0 <__smakebuf_r+0x1c>
 800bcc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	2301      	movs	r3, #1
 800bcca:	6163      	str	r3, [r4, #20]
 800bccc:	b003      	add	sp, #12
 800bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd0:	ab01      	add	r3, sp, #4
 800bcd2:	466a      	mov	r2, sp
 800bcd4:	f7ff ffc8 	bl	800bc68 <__swhatbuf_r>
 800bcd8:	9f00      	ldr	r7, [sp, #0]
 800bcda:	4605      	mov	r5, r0
 800bcdc:	4639      	mov	r1, r7
 800bcde:	4630      	mov	r0, r6
 800bce0:	f7fe febe 	bl	800aa60 <_malloc_r>
 800bce4:	b948      	cbnz	r0, 800bcfa <__smakebuf_r+0x46>
 800bce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcea:	059a      	lsls	r2, r3, #22
 800bcec:	d4ee      	bmi.n	800bccc <__smakebuf_r+0x18>
 800bcee:	f023 0303 	bic.w	r3, r3, #3
 800bcf2:	f043 0302 	orr.w	r3, r3, #2
 800bcf6:	81a3      	strh	r3, [r4, #12]
 800bcf8:	e7e2      	b.n	800bcc0 <__smakebuf_r+0xc>
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	6020      	str	r0, [r4, #0]
 800bcfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd0a:	b15b      	cbz	r3, 800bd24 <__smakebuf_r+0x70>
 800bd0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd10:	4630      	mov	r0, r6
 800bd12:	f000 f81d 	bl	800bd50 <_isatty_r>
 800bd16:	b128      	cbz	r0, 800bd24 <__smakebuf_r+0x70>
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	f023 0303 	bic.w	r3, r3, #3
 800bd1e:	f043 0301 	orr.w	r3, r3, #1
 800bd22:	81a3      	strh	r3, [r4, #12]
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	431d      	orrs	r5, r3
 800bd28:	81a5      	strh	r5, [r4, #12]
 800bd2a:	e7cf      	b.n	800bccc <__smakebuf_r+0x18>

0800bd2c <_fstat_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	@ (800bd4c <_fstat_r+0x20>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	4611      	mov	r1, r2
 800bd38:	602b      	str	r3, [r5, #0]
 800bd3a:	f7f8 f829 	bl	8003d90 <_fstat>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d102      	bne.n	800bd48 <_fstat_r+0x1c>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	b103      	cbz	r3, 800bd48 <_fstat_r+0x1c>
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000b50 	.word	0x20000b50

0800bd50 <_isatty_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	@ (800bd6c <_isatty_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f8 f828 	bl	8003db0 <_isatty>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_isatty_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_isatty_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20000b50 	.word	0x20000b50

0800bd70 <atan2>:
 800bd70:	f000 bb26 	b.w	800c3c0 <__ieee754_atan2>

0800bd74 <pow>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	ed2d 8b02 	vpush	{d8}
 800bd7a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd7e:	eef0 8a60 	vmov.f32	s17, s1
 800bd82:	ec55 4b11 	vmov	r4, r5, d1
 800bd86:	f000 fbe3 	bl	800c550 <__ieee754_pow>
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	462b      	mov	r3, r5
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	ec57 6b10 	vmov	r6, r7, d0
 800bd96:	f7f4 fee9 	bl	8000b6c <__aeabi_dcmpun>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d13b      	bne.n	800be16 <pow+0xa2>
 800bd9e:	ec51 0b18 	vmov	r0, r1, d8
 800bda2:	2200      	movs	r2, #0
 800bda4:	2300      	movs	r3, #0
 800bda6:	f7f4 feaf 	bl	8000b08 <__aeabi_dcmpeq>
 800bdaa:	b1b8      	cbz	r0, 800bddc <pow+0x68>
 800bdac:	2200      	movs	r2, #0
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f7f4 fea8 	bl	8000b08 <__aeabi_dcmpeq>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d146      	bne.n	800be4a <pow+0xd6>
 800bdbc:	ec45 4b10 	vmov	d0, r4, r5
 800bdc0:	f000 fa16 	bl	800c1f0 <finite>
 800bdc4:	b338      	cbz	r0, 800be16 <pow+0xa2>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4620      	mov	r0, r4
 800bdcc:	4629      	mov	r1, r5
 800bdce:	f7f4 fea5 	bl	8000b1c <__aeabi_dcmplt>
 800bdd2:	b300      	cbz	r0, 800be16 <pow+0xa2>
 800bdd4:	f7fd ff56 	bl	8009c84 <__errno>
 800bdd8:	2322      	movs	r3, #34	@ 0x22
 800bdda:	e01b      	b.n	800be14 <pow+0xa0>
 800bddc:	ec47 6b10 	vmov	d0, r6, r7
 800bde0:	f000 fa06 	bl	800c1f0 <finite>
 800bde4:	b9e0      	cbnz	r0, 800be20 <pow+0xac>
 800bde6:	eeb0 0a48 	vmov.f32	s0, s16
 800bdea:	eef0 0a68 	vmov.f32	s1, s17
 800bdee:	f000 f9ff 	bl	800c1f0 <finite>
 800bdf2:	b1a8      	cbz	r0, 800be20 <pow+0xac>
 800bdf4:	ec45 4b10 	vmov	d0, r4, r5
 800bdf8:	f000 f9fa 	bl	800c1f0 <finite>
 800bdfc:	b180      	cbz	r0, 800be20 <pow+0xac>
 800bdfe:	4632      	mov	r2, r6
 800be00:	463b      	mov	r3, r7
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7f4 feb1 	bl	8000b6c <__aeabi_dcmpun>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d0e2      	beq.n	800bdd4 <pow+0x60>
 800be0e:	f7fd ff39 	bl	8009c84 <__errno>
 800be12:	2321      	movs	r3, #33	@ 0x21
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	ecbd 8b02 	vpop	{d8}
 800be1a:	ec47 6b10 	vmov	d0, r6, r7
 800be1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be20:	2200      	movs	r2, #0
 800be22:	2300      	movs	r3, #0
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fe6e 	bl	8000b08 <__aeabi_dcmpeq>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d0f2      	beq.n	800be16 <pow+0xa2>
 800be30:	eeb0 0a48 	vmov.f32	s0, s16
 800be34:	eef0 0a68 	vmov.f32	s1, s17
 800be38:	f000 f9da 	bl	800c1f0 <finite>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d0ea      	beq.n	800be16 <pow+0xa2>
 800be40:	ec45 4b10 	vmov	d0, r4, r5
 800be44:	f000 f9d4 	bl	800c1f0 <finite>
 800be48:	e7c3      	b.n	800bdd2 <pow+0x5e>
 800be4a:	4f01      	ldr	r7, [pc, #4]	@ (800be50 <pow+0xdc>)
 800be4c:	2600      	movs	r6, #0
 800be4e:	e7e2      	b.n	800be16 <pow+0xa2>
 800be50:	3ff00000 	.word	0x3ff00000

0800be54 <sqrt>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	ed2d 8b02 	vpush	{d8}
 800be5a:	ec55 4b10 	vmov	r4, r5, d0
 800be5e:	f000 f9d3 	bl	800c208 <__ieee754_sqrt>
 800be62:	4622      	mov	r2, r4
 800be64:	462b      	mov	r3, r5
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	eeb0 8a40 	vmov.f32	s16, s0
 800be6e:	eef0 8a60 	vmov.f32	s17, s1
 800be72:	f7f4 fe7b 	bl	8000b6c <__aeabi_dcmpun>
 800be76:	b990      	cbnz	r0, 800be9e <sqrt+0x4a>
 800be78:	2200      	movs	r2, #0
 800be7a:	2300      	movs	r3, #0
 800be7c:	4620      	mov	r0, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	f7f4 fe4c 	bl	8000b1c <__aeabi_dcmplt>
 800be84:	b158      	cbz	r0, 800be9e <sqrt+0x4a>
 800be86:	f7fd fefd 	bl	8009c84 <__errno>
 800be8a:	2321      	movs	r3, #33	@ 0x21
 800be8c:	6003      	str	r3, [r0, #0]
 800be8e:	2200      	movs	r2, #0
 800be90:	2300      	movs	r3, #0
 800be92:	4610      	mov	r0, r2
 800be94:	4619      	mov	r1, r3
 800be96:	f7f4 fcf9 	bl	800088c <__aeabi_ddiv>
 800be9a:	ec41 0b18 	vmov	d8, r0, r1
 800be9e:	eeb0 0a48 	vmov.f32	s0, s16
 800bea2:	eef0 0a68 	vmov.f32	s1, s17
 800bea6:	ecbd 8b02 	vpop	{d8}
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	0000      	movs	r0, r0
	...

0800beb0 <atan>:
 800beb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	ec55 4b10 	vmov	r4, r5, d0
 800beb8:	4bbf      	ldr	r3, [pc, #764]	@ (800c1b8 <atan+0x308>)
 800beba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bebe:	429e      	cmp	r6, r3
 800bec0:	46ab      	mov	fp, r5
 800bec2:	d918      	bls.n	800bef6 <atan+0x46>
 800bec4:	4bbd      	ldr	r3, [pc, #756]	@ (800c1bc <atan+0x30c>)
 800bec6:	429e      	cmp	r6, r3
 800bec8:	d801      	bhi.n	800bece <atan+0x1e>
 800beca:	d109      	bne.n	800bee0 <atan+0x30>
 800becc:	b144      	cbz	r4, 800bee0 <atan+0x30>
 800bece:	4622      	mov	r2, r4
 800bed0:	462b      	mov	r3, r5
 800bed2:	4620      	mov	r0, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 f9f9 	bl	80002cc <__adddf3>
 800beda:	4604      	mov	r4, r0
 800bedc:	460d      	mov	r5, r1
 800bede:	e006      	b.n	800beee <atan+0x3e>
 800bee0:	f1bb 0f00 	cmp.w	fp, #0
 800bee4:	f340 812b 	ble.w	800c13e <atan+0x28e>
 800bee8:	a597      	add	r5, pc, #604	@ (adr r5, 800c148 <atan+0x298>)
 800beea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800beee:	ec45 4b10 	vmov	d0, r4, r5
 800bef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef6:	4bb2      	ldr	r3, [pc, #712]	@ (800c1c0 <atan+0x310>)
 800bef8:	429e      	cmp	r6, r3
 800befa:	d813      	bhi.n	800bf24 <atan+0x74>
 800befc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bf00:	429e      	cmp	r6, r3
 800bf02:	d80c      	bhi.n	800bf1e <atan+0x6e>
 800bf04:	a392      	add	r3, pc, #584	@ (adr r3, 800c150 <atan+0x2a0>)
 800bf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	f7f4 f9dd 	bl	80002cc <__adddf3>
 800bf12:	4bac      	ldr	r3, [pc, #688]	@ (800c1c4 <atan+0x314>)
 800bf14:	2200      	movs	r2, #0
 800bf16:	f7f4 fe1f 	bl	8000b58 <__aeabi_dcmpgt>
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d1e7      	bne.n	800beee <atan+0x3e>
 800bf1e:	f04f 3aff 	mov.w	sl, #4294967295
 800bf22:	e029      	b.n	800bf78 <atan+0xc8>
 800bf24:	f000 f95c 	bl	800c1e0 <fabs>
 800bf28:	4ba7      	ldr	r3, [pc, #668]	@ (800c1c8 <atan+0x318>)
 800bf2a:	429e      	cmp	r6, r3
 800bf2c:	ec55 4b10 	vmov	r4, r5, d0
 800bf30:	f200 80bc 	bhi.w	800c0ac <atan+0x1fc>
 800bf34:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bf38:	429e      	cmp	r6, r3
 800bf3a:	f200 809e 	bhi.w	800c07a <atan+0x1ca>
 800bf3e:	4622      	mov	r2, r4
 800bf40:	462b      	mov	r3, r5
 800bf42:	4620      	mov	r0, r4
 800bf44:	4629      	mov	r1, r5
 800bf46:	f7f4 f9c1 	bl	80002cc <__adddf3>
 800bf4a:	4b9e      	ldr	r3, [pc, #632]	@ (800c1c4 <atan+0x314>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f7f4 f9bb 	bl	80002c8 <__aeabi_dsub>
 800bf52:	2200      	movs	r2, #0
 800bf54:	4606      	mov	r6, r0
 800bf56:	460f      	mov	r7, r1
 800bf58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 f9b4 	bl	80002cc <__adddf3>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 fc8e 	bl	800088c <__aeabi_ddiv>
 800bf70:	f04f 0a00 	mov.w	sl, #0
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	4622      	mov	r2, r4
 800bf7a:	462b      	mov	r3, r5
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f7f4 fb5a 	bl	8000638 <__aeabi_dmul>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4680      	mov	r8, r0
 800bf8a:	4689      	mov	r9, r1
 800bf8c:	f7f4 fb54 	bl	8000638 <__aeabi_dmul>
 800bf90:	a371      	add	r3, pc, #452	@ (adr r3, 800c158 <atan+0x2a8>)
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	f7f4 fb4d 	bl	8000638 <__aeabi_dmul>
 800bf9e:	a370      	add	r3, pc, #448	@ (adr r3, 800c160 <atan+0x2b0>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 f992 	bl	80002cc <__adddf3>
 800bfa8:	4632      	mov	r2, r6
 800bfaa:	463b      	mov	r3, r7
 800bfac:	f7f4 fb44 	bl	8000638 <__aeabi_dmul>
 800bfb0:	a36d      	add	r3, pc, #436	@ (adr r3, 800c168 <atan+0x2b8>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 f989 	bl	80002cc <__adddf3>
 800bfba:	4632      	mov	r2, r6
 800bfbc:	463b      	mov	r3, r7
 800bfbe:	f7f4 fb3b 	bl	8000638 <__aeabi_dmul>
 800bfc2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c170 <atan+0x2c0>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 f980 	bl	80002cc <__adddf3>
 800bfcc:	4632      	mov	r2, r6
 800bfce:	463b      	mov	r3, r7
 800bfd0:	f7f4 fb32 	bl	8000638 <__aeabi_dmul>
 800bfd4:	a368      	add	r3, pc, #416	@ (adr r3, 800c178 <atan+0x2c8>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	f7f4 f977 	bl	80002cc <__adddf3>
 800bfde:	4632      	mov	r2, r6
 800bfe0:	463b      	mov	r3, r7
 800bfe2:	f7f4 fb29 	bl	8000638 <__aeabi_dmul>
 800bfe6:	a366      	add	r3, pc, #408	@ (adr r3, 800c180 <atan+0x2d0>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f7f4 f96e 	bl	80002cc <__adddf3>
 800bff0:	4642      	mov	r2, r8
 800bff2:	464b      	mov	r3, r9
 800bff4:	f7f4 fb20 	bl	8000638 <__aeabi_dmul>
 800bff8:	a363      	add	r3, pc, #396	@ (adr r3, 800c188 <atan+0x2d8>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	4680      	mov	r8, r0
 800c000:	4689      	mov	r9, r1
 800c002:	4630      	mov	r0, r6
 800c004:	4639      	mov	r1, r7
 800c006:	f7f4 fb17 	bl	8000638 <__aeabi_dmul>
 800c00a:	a361      	add	r3, pc, #388	@ (adr r3, 800c190 <atan+0x2e0>)
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	f7f4 f95a 	bl	80002c8 <__aeabi_dsub>
 800c014:	4632      	mov	r2, r6
 800c016:	463b      	mov	r3, r7
 800c018:	f7f4 fb0e 	bl	8000638 <__aeabi_dmul>
 800c01c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c198 <atan+0x2e8>)
 800c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c022:	f7f4 f951 	bl	80002c8 <__aeabi_dsub>
 800c026:	4632      	mov	r2, r6
 800c028:	463b      	mov	r3, r7
 800c02a:	f7f4 fb05 	bl	8000638 <__aeabi_dmul>
 800c02e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c1a0 <atan+0x2f0>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	f7f4 f948 	bl	80002c8 <__aeabi_dsub>
 800c038:	4632      	mov	r2, r6
 800c03a:	463b      	mov	r3, r7
 800c03c:	f7f4 fafc 	bl	8000638 <__aeabi_dmul>
 800c040:	a359      	add	r3, pc, #356	@ (adr r3, 800c1a8 <atan+0x2f8>)
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	f7f4 f93f 	bl	80002c8 <__aeabi_dsub>
 800c04a:	4632      	mov	r2, r6
 800c04c:	463b      	mov	r3, r7
 800c04e:	f7f4 faf3 	bl	8000638 <__aeabi_dmul>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4640      	mov	r0, r8
 800c058:	4649      	mov	r1, r9
 800c05a:	f7f4 f937 	bl	80002cc <__adddf3>
 800c05e:	4622      	mov	r2, r4
 800c060:	462b      	mov	r3, r5
 800c062:	f7f4 fae9 	bl	8000638 <__aeabi_dmul>
 800c066:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	d148      	bne.n	800c102 <atan+0x252>
 800c070:	4620      	mov	r0, r4
 800c072:	4629      	mov	r1, r5
 800c074:	f7f4 f928 	bl	80002c8 <__aeabi_dsub>
 800c078:	e72f      	b.n	800beda <atan+0x2a>
 800c07a:	4b52      	ldr	r3, [pc, #328]	@ (800c1c4 <atan+0x314>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 f921 	bl	80002c8 <__aeabi_dsub>
 800c086:	4b4f      	ldr	r3, [pc, #316]	@ (800c1c4 <atan+0x314>)
 800c088:	4606      	mov	r6, r0
 800c08a:	460f      	mov	r7, r1
 800c08c:	2200      	movs	r2, #0
 800c08e:	4620      	mov	r0, r4
 800c090:	4629      	mov	r1, r5
 800c092:	f7f4 f91b 	bl	80002cc <__adddf3>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 fbf5 	bl	800088c <__aeabi_ddiv>
 800c0a2:	f04f 0a01 	mov.w	sl, #1
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	e765      	b.n	800bf78 <atan+0xc8>
 800c0ac:	4b47      	ldr	r3, [pc, #284]	@ (800c1cc <atan+0x31c>)
 800c0ae:	429e      	cmp	r6, r3
 800c0b0:	d21c      	bcs.n	800c0ec <atan+0x23c>
 800c0b2:	4b47      	ldr	r3, [pc, #284]	@ (800c1d0 <atan+0x320>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 f905 	bl	80002c8 <__aeabi_dsub>
 800c0be:	4b44      	ldr	r3, [pc, #272]	@ (800c1d0 <atan+0x320>)
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 fab5 	bl	8000638 <__aeabi_dmul>
 800c0ce:	4b3d      	ldr	r3, [pc, #244]	@ (800c1c4 <atan+0x314>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f7f4 f8fb 	bl	80002cc <__adddf3>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 fbd5 	bl	800088c <__aeabi_ddiv>
 800c0e2:	f04f 0a02 	mov.w	sl, #2
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	e745      	b.n	800bf78 <atan+0xc8>
 800c0ec:	4622      	mov	r2, r4
 800c0ee:	462b      	mov	r3, r5
 800c0f0:	4938      	ldr	r1, [pc, #224]	@ (800c1d4 <atan+0x324>)
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	f7f4 fbca 	bl	800088c <__aeabi_ddiv>
 800c0f8:	f04f 0a03 	mov.w	sl, #3
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	460d      	mov	r5, r1
 800c100:	e73a      	b.n	800bf78 <atan+0xc8>
 800c102:	4b35      	ldr	r3, [pc, #212]	@ (800c1d8 <atan+0x328>)
 800c104:	4e35      	ldr	r6, [pc, #212]	@ (800c1dc <atan+0x32c>)
 800c106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	f7f4 f8db 	bl	80002c8 <__aeabi_dsub>
 800c112:	4622      	mov	r2, r4
 800c114:	462b      	mov	r3, r5
 800c116:	f7f4 f8d7 	bl	80002c8 <__aeabi_dsub>
 800c11a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c126:	f7f4 f8cf 	bl	80002c8 <__aeabi_dsub>
 800c12a:	f1bb 0f00 	cmp.w	fp, #0
 800c12e:	4604      	mov	r4, r0
 800c130:	460d      	mov	r5, r1
 800c132:	f6bf aedc 	bge.w	800beee <atan+0x3e>
 800c136:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c13a:	461d      	mov	r5, r3
 800c13c:	e6d7      	b.n	800beee <atan+0x3e>
 800c13e:	a51c      	add	r5, pc, #112	@ (adr r5, 800c1b0 <atan+0x300>)
 800c140:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c144:	e6d3      	b.n	800beee <atan+0x3e>
 800c146:	bf00      	nop
 800c148:	54442d18 	.word	0x54442d18
 800c14c:	3ff921fb 	.word	0x3ff921fb
 800c150:	8800759c 	.word	0x8800759c
 800c154:	7e37e43c 	.word	0x7e37e43c
 800c158:	e322da11 	.word	0xe322da11
 800c15c:	3f90ad3a 	.word	0x3f90ad3a
 800c160:	24760deb 	.word	0x24760deb
 800c164:	3fa97b4b 	.word	0x3fa97b4b
 800c168:	a0d03d51 	.word	0xa0d03d51
 800c16c:	3fb10d66 	.word	0x3fb10d66
 800c170:	c54c206e 	.word	0xc54c206e
 800c174:	3fb745cd 	.word	0x3fb745cd
 800c178:	920083ff 	.word	0x920083ff
 800c17c:	3fc24924 	.word	0x3fc24924
 800c180:	5555550d 	.word	0x5555550d
 800c184:	3fd55555 	.word	0x3fd55555
 800c188:	2c6a6c2f 	.word	0x2c6a6c2f
 800c18c:	bfa2b444 	.word	0xbfa2b444
 800c190:	52defd9a 	.word	0x52defd9a
 800c194:	3fadde2d 	.word	0x3fadde2d
 800c198:	af749a6d 	.word	0xaf749a6d
 800c19c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c1a0:	fe231671 	.word	0xfe231671
 800c1a4:	3fbc71c6 	.word	0x3fbc71c6
 800c1a8:	9998ebc4 	.word	0x9998ebc4
 800c1ac:	3fc99999 	.word	0x3fc99999
 800c1b0:	54442d18 	.word	0x54442d18
 800c1b4:	bff921fb 	.word	0xbff921fb
 800c1b8:	440fffff 	.word	0x440fffff
 800c1bc:	7ff00000 	.word	0x7ff00000
 800c1c0:	3fdbffff 	.word	0x3fdbffff
 800c1c4:	3ff00000 	.word	0x3ff00000
 800c1c8:	3ff2ffff 	.word	0x3ff2ffff
 800c1cc:	40038000 	.word	0x40038000
 800c1d0:	3ff80000 	.word	0x3ff80000
 800c1d4:	bff00000 	.word	0xbff00000
 800c1d8:	0800e0e8 	.word	0x0800e0e8
 800c1dc:	0800e108 	.word	0x0800e108

0800c1e0 <fabs>:
 800c1e0:	ec51 0b10 	vmov	r0, r1, d0
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1ea:	ec43 2b10 	vmov	d0, r2, r3
 800c1ee:	4770      	bx	lr

0800c1f0 <finite>:
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	ed8d 0b00 	vstr	d0, [sp]
 800c1f6:	9801      	ldr	r0, [sp, #4]
 800c1f8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c1fc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c200:	0fc0      	lsrs	r0, r0, #31
 800c202:	b002      	add	sp, #8
 800c204:	4770      	bx	lr
	...

0800c208 <__ieee754_sqrt>:
 800c208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	4a68      	ldr	r2, [pc, #416]	@ (800c3b0 <__ieee754_sqrt+0x1a8>)
 800c20e:	ec55 4b10 	vmov	r4, r5, d0
 800c212:	43aa      	bics	r2, r5
 800c214:	462b      	mov	r3, r5
 800c216:	4621      	mov	r1, r4
 800c218:	d110      	bne.n	800c23c <__ieee754_sqrt+0x34>
 800c21a:	4622      	mov	r2, r4
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 fa0a 	bl	8000638 <__aeabi_dmul>
 800c224:	4602      	mov	r2, r0
 800c226:	460b      	mov	r3, r1
 800c228:	4620      	mov	r0, r4
 800c22a:	4629      	mov	r1, r5
 800c22c:	f7f4 f84e 	bl	80002cc <__adddf3>
 800c230:	4604      	mov	r4, r0
 800c232:	460d      	mov	r5, r1
 800c234:	ec45 4b10 	vmov	d0, r4, r5
 800c238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	dc0e      	bgt.n	800c25e <__ieee754_sqrt+0x56>
 800c240:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c244:	4322      	orrs	r2, r4
 800c246:	d0f5      	beq.n	800c234 <__ieee754_sqrt+0x2c>
 800c248:	b19d      	cbz	r5, 800c272 <__ieee754_sqrt+0x6a>
 800c24a:	4622      	mov	r2, r4
 800c24c:	4620      	mov	r0, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 f83a 	bl	80002c8 <__aeabi_dsub>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	f7f4 fb18 	bl	800088c <__aeabi_ddiv>
 800c25c:	e7e8      	b.n	800c230 <__ieee754_sqrt+0x28>
 800c25e:	152a      	asrs	r2, r5, #20
 800c260:	d115      	bne.n	800c28e <__ieee754_sqrt+0x86>
 800c262:	2000      	movs	r0, #0
 800c264:	e009      	b.n	800c27a <__ieee754_sqrt+0x72>
 800c266:	0acb      	lsrs	r3, r1, #11
 800c268:	3a15      	subs	r2, #21
 800c26a:	0549      	lsls	r1, r1, #21
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d0fa      	beq.n	800c266 <__ieee754_sqrt+0x5e>
 800c270:	e7f7      	b.n	800c262 <__ieee754_sqrt+0x5a>
 800c272:	462a      	mov	r2, r5
 800c274:	e7fa      	b.n	800c26c <__ieee754_sqrt+0x64>
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	3001      	adds	r0, #1
 800c27a:	02dc      	lsls	r4, r3, #11
 800c27c:	d5fb      	bpl.n	800c276 <__ieee754_sqrt+0x6e>
 800c27e:	1e44      	subs	r4, r0, #1
 800c280:	1b12      	subs	r2, r2, r4
 800c282:	f1c0 0420 	rsb	r4, r0, #32
 800c286:	fa21 f404 	lsr.w	r4, r1, r4
 800c28a:	4323      	orrs	r3, r4
 800c28c:	4081      	lsls	r1, r0
 800c28e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c292:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c29a:	07d2      	lsls	r2, r2, #31
 800c29c:	bf5c      	itt	pl
 800c29e:	005b      	lslpl	r3, r3, #1
 800c2a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c2a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2a8:	bf58      	it	pl
 800c2aa:	0049      	lslpl	r1, r1, #1
 800c2ac:	2600      	movs	r6, #0
 800c2ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c2b2:	106d      	asrs	r5, r5, #1
 800c2b4:	0049      	lsls	r1, r1, #1
 800c2b6:	2016      	movs	r0, #22
 800c2b8:	4632      	mov	r2, r6
 800c2ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c2be:	1917      	adds	r7, r2, r4
 800c2c0:	429f      	cmp	r7, r3
 800c2c2:	bfde      	ittt	le
 800c2c4:	193a      	addle	r2, r7, r4
 800c2c6:	1bdb      	suble	r3, r3, r7
 800c2c8:	1936      	addle	r6, r6, r4
 800c2ca:	0fcf      	lsrs	r7, r1, #31
 800c2cc:	3801      	subs	r0, #1
 800c2ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c2d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c2d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c2da:	d1f0      	bne.n	800c2be <__ieee754_sqrt+0xb6>
 800c2dc:	4604      	mov	r4, r0
 800c2de:	2720      	movs	r7, #32
 800c2e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	eb00 0e0c 	add.w	lr, r0, ip
 800c2ea:	db02      	blt.n	800c2f2 <__ieee754_sqrt+0xea>
 800c2ec:	d113      	bne.n	800c316 <__ieee754_sqrt+0x10e>
 800c2ee:	458e      	cmp	lr, r1
 800c2f0:	d811      	bhi.n	800c316 <__ieee754_sqrt+0x10e>
 800c2f2:	f1be 0f00 	cmp.w	lr, #0
 800c2f6:	eb0e 000c 	add.w	r0, lr, ip
 800c2fa:	da42      	bge.n	800c382 <__ieee754_sqrt+0x17a>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	db40      	blt.n	800c382 <__ieee754_sqrt+0x17a>
 800c300:	f102 0801 	add.w	r8, r2, #1
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	458e      	cmp	lr, r1
 800c308:	bf88      	it	hi
 800c30a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c30e:	eba1 010e 	sub.w	r1, r1, lr
 800c312:	4464      	add	r4, ip
 800c314:	4642      	mov	r2, r8
 800c316:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c31a:	3f01      	subs	r7, #1
 800c31c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c320:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c324:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c328:	d1dc      	bne.n	800c2e4 <__ieee754_sqrt+0xdc>
 800c32a:	4319      	orrs	r1, r3
 800c32c:	d01b      	beq.n	800c366 <__ieee754_sqrt+0x15e>
 800c32e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c3b4 <__ieee754_sqrt+0x1ac>
 800c332:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c3b8 <__ieee754_sqrt+0x1b0>
 800c336:	e9da 0100 	ldrd	r0, r1, [sl]
 800c33a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c33e:	f7f3 ffc3 	bl	80002c8 <__aeabi_dsub>
 800c342:	e9da 8900 	ldrd	r8, r9, [sl]
 800c346:	4602      	mov	r2, r0
 800c348:	460b      	mov	r3, r1
 800c34a:	4640      	mov	r0, r8
 800c34c:	4649      	mov	r1, r9
 800c34e:	f7f4 fbef 	bl	8000b30 <__aeabi_dcmple>
 800c352:	b140      	cbz	r0, 800c366 <__ieee754_sqrt+0x15e>
 800c354:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c358:	e9da 0100 	ldrd	r0, r1, [sl]
 800c35c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c360:	d111      	bne.n	800c386 <__ieee754_sqrt+0x17e>
 800c362:	3601      	adds	r6, #1
 800c364:	463c      	mov	r4, r7
 800c366:	1072      	asrs	r2, r6, #1
 800c368:	0863      	lsrs	r3, r4, #1
 800c36a:	07f1      	lsls	r1, r6, #31
 800c36c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c370:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c374:	bf48      	it	mi
 800c376:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c37a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c37e:	4618      	mov	r0, r3
 800c380:	e756      	b.n	800c230 <__ieee754_sqrt+0x28>
 800c382:	4690      	mov	r8, r2
 800c384:	e7be      	b.n	800c304 <__ieee754_sqrt+0xfc>
 800c386:	f7f3 ffa1 	bl	80002cc <__adddf3>
 800c38a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	4640      	mov	r0, r8
 800c394:	4649      	mov	r1, r9
 800c396:	f7f4 fbc1 	bl	8000b1c <__aeabi_dcmplt>
 800c39a:	b120      	cbz	r0, 800c3a6 <__ieee754_sqrt+0x19e>
 800c39c:	1ca0      	adds	r0, r4, #2
 800c39e:	bf08      	it	eq
 800c3a0:	3601      	addeq	r6, #1
 800c3a2:	3402      	adds	r4, #2
 800c3a4:	e7df      	b.n	800c366 <__ieee754_sqrt+0x15e>
 800c3a6:	1c63      	adds	r3, r4, #1
 800c3a8:	f023 0401 	bic.w	r4, r3, #1
 800c3ac:	e7db      	b.n	800c366 <__ieee754_sqrt+0x15e>
 800c3ae:	bf00      	nop
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	20000280 	.word	0x20000280
 800c3b8:	20000278 	.word	0x20000278
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <__ieee754_atan2>:
 800c3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c4:	ec57 6b11 	vmov	r6, r7, d1
 800c3c8:	4273      	negs	r3, r6
 800c3ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c548 <__ieee754_atan2+0x188>
 800c3ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c3d2:	4333      	orrs	r3, r6
 800c3d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c3d8:	4543      	cmp	r3, r8
 800c3da:	ec51 0b10 	vmov	r0, r1, d0
 800c3de:	4635      	mov	r5, r6
 800c3e0:	d809      	bhi.n	800c3f6 <__ieee754_atan2+0x36>
 800c3e2:	4244      	negs	r4, r0
 800c3e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3e8:	4304      	orrs	r4, r0
 800c3ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c3ee:	4544      	cmp	r4, r8
 800c3f0:	468e      	mov	lr, r1
 800c3f2:	4681      	mov	r9, r0
 800c3f4:	d907      	bls.n	800c406 <__ieee754_atan2+0x46>
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	463b      	mov	r3, r7
 800c3fa:	f7f3 ff67 	bl	80002cc <__adddf3>
 800c3fe:	ec41 0b10 	vmov	d0, r0, r1
 800c402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c406:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c40a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c40e:	4334      	orrs	r4, r6
 800c410:	d103      	bne.n	800c41a <__ieee754_atan2+0x5a>
 800c412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c416:	f7ff bd4b 	b.w	800beb0 <atan>
 800c41a:	17bc      	asrs	r4, r7, #30
 800c41c:	f004 0402 	and.w	r4, r4, #2
 800c420:	ea53 0909 	orrs.w	r9, r3, r9
 800c424:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c428:	d107      	bne.n	800c43a <__ieee754_atan2+0x7a>
 800c42a:	2c02      	cmp	r4, #2
 800c42c:	d05f      	beq.n	800c4ee <__ieee754_atan2+0x12e>
 800c42e:	2c03      	cmp	r4, #3
 800c430:	d1e5      	bne.n	800c3fe <__ieee754_atan2+0x3e>
 800c432:	a141      	add	r1, pc, #260	@ (adr r1, 800c538 <__ieee754_atan2+0x178>)
 800c434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c438:	e7e1      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c43a:	4315      	orrs	r5, r2
 800c43c:	d106      	bne.n	800c44c <__ieee754_atan2+0x8c>
 800c43e:	f1be 0f00 	cmp.w	lr, #0
 800c442:	da5f      	bge.n	800c504 <__ieee754_atan2+0x144>
 800c444:	a13e      	add	r1, pc, #248	@ (adr r1, 800c540 <__ieee754_atan2+0x180>)
 800c446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c44a:	e7d8      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c44c:	4542      	cmp	r2, r8
 800c44e:	d10f      	bne.n	800c470 <__ieee754_atan2+0xb0>
 800c450:	4293      	cmp	r3, r2
 800c452:	f104 34ff 	add.w	r4, r4, #4294967295
 800c456:	d107      	bne.n	800c468 <__ieee754_atan2+0xa8>
 800c458:	2c02      	cmp	r4, #2
 800c45a:	d84c      	bhi.n	800c4f6 <__ieee754_atan2+0x136>
 800c45c:	4b34      	ldr	r3, [pc, #208]	@ (800c530 <__ieee754_atan2+0x170>)
 800c45e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c462:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c466:	e7ca      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c468:	2c02      	cmp	r4, #2
 800c46a:	d848      	bhi.n	800c4fe <__ieee754_atan2+0x13e>
 800c46c:	4b31      	ldr	r3, [pc, #196]	@ (800c534 <__ieee754_atan2+0x174>)
 800c46e:	e7f6      	b.n	800c45e <__ieee754_atan2+0x9e>
 800c470:	4543      	cmp	r3, r8
 800c472:	d0e4      	beq.n	800c43e <__ieee754_atan2+0x7e>
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c47a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c47e:	da1e      	bge.n	800c4be <__ieee754_atan2+0xfe>
 800c480:	2f00      	cmp	r7, #0
 800c482:	da01      	bge.n	800c488 <__ieee754_atan2+0xc8>
 800c484:	323c      	adds	r2, #60	@ 0x3c
 800c486:	db1e      	blt.n	800c4c6 <__ieee754_atan2+0x106>
 800c488:	4632      	mov	r2, r6
 800c48a:	463b      	mov	r3, r7
 800c48c:	f7f4 f9fe 	bl	800088c <__aeabi_ddiv>
 800c490:	ec41 0b10 	vmov	d0, r0, r1
 800c494:	f7ff fea4 	bl	800c1e0 <fabs>
 800c498:	f7ff fd0a 	bl	800beb0 <atan>
 800c49c:	ec51 0b10 	vmov	r0, r1, d0
 800c4a0:	2c01      	cmp	r4, #1
 800c4a2:	d013      	beq.n	800c4cc <__ieee754_atan2+0x10c>
 800c4a4:	2c02      	cmp	r4, #2
 800c4a6:	d015      	beq.n	800c4d4 <__ieee754_atan2+0x114>
 800c4a8:	2c00      	cmp	r4, #0
 800c4aa:	d0a8      	beq.n	800c3fe <__ieee754_atan2+0x3e>
 800c4ac:	a318      	add	r3, pc, #96	@ (adr r3, 800c510 <__ieee754_atan2+0x150>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 ff09 	bl	80002c8 <__aeabi_dsub>
 800c4b6:	a318      	add	r3, pc, #96	@ (adr r3, 800c518 <__ieee754_atan2+0x158>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	e014      	b.n	800c4e8 <__ieee754_atan2+0x128>
 800c4be:	a118      	add	r1, pc, #96	@ (adr r1, 800c520 <__ieee754_atan2+0x160>)
 800c4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c4:	e7ec      	b.n	800c4a0 <__ieee754_atan2+0xe0>
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	e7e9      	b.n	800c4a0 <__ieee754_atan2+0xe0>
 800c4cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	e794      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c4d4:	a30e      	add	r3, pc, #56	@ (adr r3, 800c510 <__ieee754_atan2+0x150>)
 800c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4da:	f7f3 fef5 	bl	80002c8 <__aeabi_dsub>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	a10d      	add	r1, pc, #52	@ (adr r1, 800c518 <__ieee754_atan2+0x158>)
 800c4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4e8:	f7f3 feee 	bl	80002c8 <__aeabi_dsub>
 800c4ec:	e787      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c4ee:	a10a      	add	r1, pc, #40	@ (adr r1, 800c518 <__ieee754_atan2+0x158>)
 800c4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f4:	e783      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c4f6:	a10c      	add	r1, pc, #48	@ (adr r1, 800c528 <__ieee754_atan2+0x168>)
 800c4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4fc:	e77f      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c4fe:	2000      	movs	r0, #0
 800c500:	2100      	movs	r1, #0
 800c502:	e77c      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c504:	a106      	add	r1, pc, #24	@ (adr r1, 800c520 <__ieee754_atan2+0x160>)
 800c506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c50a:	e778      	b.n	800c3fe <__ieee754_atan2+0x3e>
 800c50c:	f3af 8000 	nop.w
 800c510:	33145c07 	.word	0x33145c07
 800c514:	3ca1a626 	.word	0x3ca1a626
 800c518:	54442d18 	.word	0x54442d18
 800c51c:	400921fb 	.word	0x400921fb
 800c520:	54442d18 	.word	0x54442d18
 800c524:	3ff921fb 	.word	0x3ff921fb
 800c528:	54442d18 	.word	0x54442d18
 800c52c:	3fe921fb 	.word	0x3fe921fb
 800c530:	0800e140 	.word	0x0800e140
 800c534:	0800e128 	.word	0x0800e128
 800c538:	54442d18 	.word	0x54442d18
 800c53c:	c00921fb 	.word	0xc00921fb
 800c540:	54442d18 	.word	0x54442d18
 800c544:	bff921fb 	.word	0xbff921fb
 800c548:	7ff00000 	.word	0x7ff00000
 800c54c:	00000000 	.word	0x00000000

0800c550 <__ieee754_pow>:
 800c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	b091      	sub	sp, #68	@ 0x44
 800c556:	ed8d 1b00 	vstr	d1, [sp]
 800c55a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c55e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c562:	ea5a 0001 	orrs.w	r0, sl, r1
 800c566:	ec57 6b10 	vmov	r6, r7, d0
 800c56a:	d113      	bne.n	800c594 <__ieee754_pow+0x44>
 800c56c:	19b3      	adds	r3, r6, r6
 800c56e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c572:	4152      	adcs	r2, r2
 800c574:	4298      	cmp	r0, r3
 800c576:	4b98      	ldr	r3, [pc, #608]	@ (800c7d8 <__ieee754_pow+0x288>)
 800c578:	4193      	sbcs	r3, r2
 800c57a:	f080 84ea 	bcs.w	800cf52 <__ieee754_pow+0xa02>
 800c57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c582:	4630      	mov	r0, r6
 800c584:	4639      	mov	r1, r7
 800c586:	f7f3 fea1 	bl	80002cc <__adddf3>
 800c58a:	ec41 0b10 	vmov	d0, r0, r1
 800c58e:	b011      	add	sp, #68	@ 0x44
 800c590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	4a91      	ldr	r2, [pc, #580]	@ (800c7dc <__ieee754_pow+0x28c>)
 800c596:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c59a:	4590      	cmp	r8, r2
 800c59c:	463d      	mov	r5, r7
 800c59e:	4633      	mov	r3, r6
 800c5a0:	d806      	bhi.n	800c5b0 <__ieee754_pow+0x60>
 800c5a2:	d101      	bne.n	800c5a8 <__ieee754_pow+0x58>
 800c5a4:	2e00      	cmp	r6, #0
 800c5a6:	d1ea      	bne.n	800c57e <__ieee754_pow+0x2e>
 800c5a8:	4592      	cmp	sl, r2
 800c5aa:	d801      	bhi.n	800c5b0 <__ieee754_pow+0x60>
 800c5ac:	d10e      	bne.n	800c5cc <__ieee754_pow+0x7c>
 800c5ae:	b169      	cbz	r1, 800c5cc <__ieee754_pow+0x7c>
 800c5b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c5b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c5b8:	431d      	orrs	r5, r3
 800c5ba:	d1e0      	bne.n	800c57e <__ieee754_pow+0x2e>
 800c5bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5c0:	18db      	adds	r3, r3, r3
 800c5c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c5c6:	4152      	adcs	r2, r2
 800c5c8:	429d      	cmp	r5, r3
 800c5ca:	e7d4      	b.n	800c576 <__ieee754_pow+0x26>
 800c5cc:	2d00      	cmp	r5, #0
 800c5ce:	46c3      	mov	fp, r8
 800c5d0:	da3a      	bge.n	800c648 <__ieee754_pow+0xf8>
 800c5d2:	4a83      	ldr	r2, [pc, #524]	@ (800c7e0 <__ieee754_pow+0x290>)
 800c5d4:	4592      	cmp	sl, r2
 800c5d6:	d84d      	bhi.n	800c674 <__ieee754_pow+0x124>
 800c5d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c5dc:	4592      	cmp	sl, r2
 800c5de:	f240 84c7 	bls.w	800cf70 <__ieee754_pow+0xa20>
 800c5e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c5e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c5ea:	2a14      	cmp	r2, #20
 800c5ec:	dd0f      	ble.n	800c60e <__ieee754_pow+0xbe>
 800c5ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c5f2:	fa21 f402 	lsr.w	r4, r1, r2
 800c5f6:	fa04 f202 	lsl.w	r2, r4, r2
 800c5fa:	428a      	cmp	r2, r1
 800c5fc:	f040 84b8 	bne.w	800cf70 <__ieee754_pow+0xa20>
 800c600:	f004 0401 	and.w	r4, r4, #1
 800c604:	f1c4 0402 	rsb	r4, r4, #2
 800c608:	2900      	cmp	r1, #0
 800c60a:	d158      	bne.n	800c6be <__ieee754_pow+0x16e>
 800c60c:	e00e      	b.n	800c62c <__ieee754_pow+0xdc>
 800c60e:	2900      	cmp	r1, #0
 800c610:	d154      	bne.n	800c6bc <__ieee754_pow+0x16c>
 800c612:	f1c2 0214 	rsb	r2, r2, #20
 800c616:	fa4a f402 	asr.w	r4, sl, r2
 800c61a:	fa04 f202 	lsl.w	r2, r4, r2
 800c61e:	4552      	cmp	r2, sl
 800c620:	f040 84a3 	bne.w	800cf6a <__ieee754_pow+0xa1a>
 800c624:	f004 0401 	and.w	r4, r4, #1
 800c628:	f1c4 0402 	rsb	r4, r4, #2
 800c62c:	4a6d      	ldr	r2, [pc, #436]	@ (800c7e4 <__ieee754_pow+0x294>)
 800c62e:	4592      	cmp	sl, r2
 800c630:	d12e      	bne.n	800c690 <__ieee754_pow+0x140>
 800c632:	f1b9 0f00 	cmp.w	r9, #0
 800c636:	f280 8494 	bge.w	800cf62 <__ieee754_pow+0xa12>
 800c63a:	496a      	ldr	r1, [pc, #424]	@ (800c7e4 <__ieee754_pow+0x294>)
 800c63c:	4632      	mov	r2, r6
 800c63e:	463b      	mov	r3, r7
 800c640:	2000      	movs	r0, #0
 800c642:	f7f4 f923 	bl	800088c <__aeabi_ddiv>
 800c646:	e7a0      	b.n	800c58a <__ieee754_pow+0x3a>
 800c648:	2400      	movs	r4, #0
 800c64a:	bbc1      	cbnz	r1, 800c6be <__ieee754_pow+0x16e>
 800c64c:	4a63      	ldr	r2, [pc, #396]	@ (800c7dc <__ieee754_pow+0x28c>)
 800c64e:	4592      	cmp	sl, r2
 800c650:	d1ec      	bne.n	800c62c <__ieee754_pow+0xdc>
 800c652:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c656:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c65a:	431a      	orrs	r2, r3
 800c65c:	f000 8479 	beq.w	800cf52 <__ieee754_pow+0xa02>
 800c660:	4b61      	ldr	r3, [pc, #388]	@ (800c7e8 <__ieee754_pow+0x298>)
 800c662:	4598      	cmp	r8, r3
 800c664:	d908      	bls.n	800c678 <__ieee754_pow+0x128>
 800c666:	f1b9 0f00 	cmp.w	r9, #0
 800c66a:	f2c0 8476 	blt.w	800cf5a <__ieee754_pow+0xa0a>
 800c66e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c672:	e78a      	b.n	800c58a <__ieee754_pow+0x3a>
 800c674:	2402      	movs	r4, #2
 800c676:	e7e8      	b.n	800c64a <__ieee754_pow+0xfa>
 800c678:	f1b9 0f00 	cmp.w	r9, #0
 800c67c:	f04f 0000 	mov.w	r0, #0
 800c680:	f04f 0100 	mov.w	r1, #0
 800c684:	da81      	bge.n	800c58a <__ieee754_pow+0x3a>
 800c686:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c68a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c68e:	e77c      	b.n	800c58a <__ieee754_pow+0x3a>
 800c690:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c694:	d106      	bne.n	800c6a4 <__ieee754_pow+0x154>
 800c696:	4632      	mov	r2, r6
 800c698:	463b      	mov	r3, r7
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f3 ffcb 	bl	8000638 <__aeabi_dmul>
 800c6a2:	e772      	b.n	800c58a <__ieee754_pow+0x3a>
 800c6a4:	4a51      	ldr	r2, [pc, #324]	@ (800c7ec <__ieee754_pow+0x29c>)
 800c6a6:	4591      	cmp	r9, r2
 800c6a8:	d109      	bne.n	800c6be <__ieee754_pow+0x16e>
 800c6aa:	2d00      	cmp	r5, #0
 800c6ac:	db07      	blt.n	800c6be <__ieee754_pow+0x16e>
 800c6ae:	ec47 6b10 	vmov	d0, r6, r7
 800c6b2:	b011      	add	sp, #68	@ 0x44
 800c6b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	f7ff bda6 	b.w	800c208 <__ieee754_sqrt>
 800c6bc:	2400      	movs	r4, #0
 800c6be:	ec47 6b10 	vmov	d0, r6, r7
 800c6c2:	9302      	str	r3, [sp, #8]
 800c6c4:	f7ff fd8c 	bl	800c1e0 <fabs>
 800c6c8:	9b02      	ldr	r3, [sp, #8]
 800c6ca:	ec51 0b10 	vmov	r0, r1, d0
 800c6ce:	bb53      	cbnz	r3, 800c726 <__ieee754_pow+0x1d6>
 800c6d0:	4b44      	ldr	r3, [pc, #272]	@ (800c7e4 <__ieee754_pow+0x294>)
 800c6d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d002      	beq.n	800c6e0 <__ieee754_pow+0x190>
 800c6da:	f1b8 0f00 	cmp.w	r8, #0
 800c6de:	d122      	bne.n	800c726 <__ieee754_pow+0x1d6>
 800c6e0:	f1b9 0f00 	cmp.w	r9, #0
 800c6e4:	da05      	bge.n	800c6f2 <__ieee754_pow+0x1a2>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	493d      	ldr	r1, [pc, #244]	@ (800c7e4 <__ieee754_pow+0x294>)
 800c6ee:	f7f4 f8cd 	bl	800088c <__aeabi_ddiv>
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	f6bf af49 	bge.w	800c58a <__ieee754_pow+0x3a>
 800c6f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c6fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c700:	ea58 0804 	orrs.w	r8, r8, r4
 800c704:	d108      	bne.n	800c718 <__ieee754_pow+0x1c8>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4610      	mov	r0, r2
 800c70c:	4619      	mov	r1, r3
 800c70e:	f7f3 fddb 	bl	80002c8 <__aeabi_dsub>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	e794      	b.n	800c642 <__ieee754_pow+0xf2>
 800c718:	2c01      	cmp	r4, #1
 800c71a:	f47f af36 	bne.w	800c58a <__ieee754_pow+0x3a>
 800c71e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c722:	4619      	mov	r1, r3
 800c724:	e731      	b.n	800c58a <__ieee754_pow+0x3a>
 800c726:	0feb      	lsrs	r3, r5, #31
 800c728:	3b01      	subs	r3, #1
 800c72a:	ea53 0204 	orrs.w	r2, r3, r4
 800c72e:	d102      	bne.n	800c736 <__ieee754_pow+0x1e6>
 800c730:	4632      	mov	r2, r6
 800c732:	463b      	mov	r3, r7
 800c734:	e7e9      	b.n	800c70a <__ieee754_pow+0x1ba>
 800c736:	3c01      	subs	r4, #1
 800c738:	431c      	orrs	r4, r3
 800c73a:	d016      	beq.n	800c76a <__ieee754_pow+0x21a>
 800c73c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c7c8 <__ieee754_pow+0x278>
 800c740:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c744:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c748:	f240 8112 	bls.w	800c970 <__ieee754_pow+0x420>
 800c74c:	4b28      	ldr	r3, [pc, #160]	@ (800c7f0 <__ieee754_pow+0x2a0>)
 800c74e:	459a      	cmp	sl, r3
 800c750:	4b25      	ldr	r3, [pc, #148]	@ (800c7e8 <__ieee754_pow+0x298>)
 800c752:	d916      	bls.n	800c782 <__ieee754_pow+0x232>
 800c754:	4598      	cmp	r8, r3
 800c756:	d80b      	bhi.n	800c770 <__ieee754_pow+0x220>
 800c758:	f1b9 0f00 	cmp.w	r9, #0
 800c75c:	da0b      	bge.n	800c776 <__ieee754_pow+0x226>
 800c75e:	2000      	movs	r0, #0
 800c760:	b011      	add	sp, #68	@ 0x44
 800c762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c766:	f000 bceb 	b.w	800d140 <__math_oflow>
 800c76a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c7d0 <__ieee754_pow+0x280>
 800c76e:	e7e7      	b.n	800c740 <__ieee754_pow+0x1f0>
 800c770:	f1b9 0f00 	cmp.w	r9, #0
 800c774:	dcf3      	bgt.n	800c75e <__ieee754_pow+0x20e>
 800c776:	2000      	movs	r0, #0
 800c778:	b011      	add	sp, #68	@ 0x44
 800c77a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77e:	f000 bcd7 	b.w	800d130 <__math_uflow>
 800c782:	4598      	cmp	r8, r3
 800c784:	d20c      	bcs.n	800c7a0 <__ieee754_pow+0x250>
 800c786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c78a:	2200      	movs	r2, #0
 800c78c:	2300      	movs	r3, #0
 800c78e:	f7f4 f9c5 	bl	8000b1c <__aeabi_dcmplt>
 800c792:	3800      	subs	r0, #0
 800c794:	bf18      	it	ne
 800c796:	2001      	movne	r0, #1
 800c798:	f1b9 0f00 	cmp.w	r9, #0
 800c79c:	daec      	bge.n	800c778 <__ieee754_pow+0x228>
 800c79e:	e7df      	b.n	800c760 <__ieee754_pow+0x210>
 800c7a0:	4b10      	ldr	r3, [pc, #64]	@ (800c7e4 <__ieee754_pow+0x294>)
 800c7a2:	4598      	cmp	r8, r3
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	d924      	bls.n	800c7f4 <__ieee754_pow+0x2a4>
 800c7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f7f4 f9b4 	bl	8000b1c <__aeabi_dcmplt>
 800c7b4:	3800      	subs	r0, #0
 800c7b6:	bf18      	it	ne
 800c7b8:	2001      	movne	r0, #1
 800c7ba:	f1b9 0f00 	cmp.w	r9, #0
 800c7be:	dccf      	bgt.n	800c760 <__ieee754_pow+0x210>
 800c7c0:	e7da      	b.n	800c778 <__ieee754_pow+0x228>
 800c7c2:	bf00      	nop
 800c7c4:	f3af 8000 	nop.w
 800c7c8:	00000000 	.word	0x00000000
 800c7cc:	3ff00000 	.word	0x3ff00000
 800c7d0:	00000000 	.word	0x00000000
 800c7d4:	bff00000 	.word	0xbff00000
 800c7d8:	fff00000 	.word	0xfff00000
 800c7dc:	7ff00000 	.word	0x7ff00000
 800c7e0:	433fffff 	.word	0x433fffff
 800c7e4:	3ff00000 	.word	0x3ff00000
 800c7e8:	3fefffff 	.word	0x3fefffff
 800c7ec:	3fe00000 	.word	0x3fe00000
 800c7f0:	43f00000 	.word	0x43f00000
 800c7f4:	4b5a      	ldr	r3, [pc, #360]	@ (800c960 <__ieee754_pow+0x410>)
 800c7f6:	f7f3 fd67 	bl	80002c8 <__aeabi_dsub>
 800c7fa:	a351      	add	r3, pc, #324	@ (adr r3, 800c940 <__ieee754_pow+0x3f0>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	4604      	mov	r4, r0
 800c802:	460d      	mov	r5, r1
 800c804:	f7f3 ff18 	bl	8000638 <__aeabi_dmul>
 800c808:	a34f      	add	r3, pc, #316	@ (adr r3, 800c948 <__ieee754_pow+0x3f8>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	4606      	mov	r6, r0
 800c810:	460f      	mov	r7, r1
 800c812:	4620      	mov	r0, r4
 800c814:	4629      	mov	r1, r5
 800c816:	f7f3 ff0f 	bl	8000638 <__aeabi_dmul>
 800c81a:	4b52      	ldr	r3, [pc, #328]	@ (800c964 <__ieee754_pow+0x414>)
 800c81c:	4682      	mov	sl, r0
 800c81e:	468b      	mov	fp, r1
 800c820:	2200      	movs	r2, #0
 800c822:	4620      	mov	r0, r4
 800c824:	4629      	mov	r1, r5
 800c826:	f7f3 ff07 	bl	8000638 <__aeabi_dmul>
 800c82a:	4602      	mov	r2, r0
 800c82c:	460b      	mov	r3, r1
 800c82e:	a148      	add	r1, pc, #288	@ (adr r1, 800c950 <__ieee754_pow+0x400>)
 800c830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c834:	f7f3 fd48 	bl	80002c8 <__aeabi_dsub>
 800c838:	4622      	mov	r2, r4
 800c83a:	462b      	mov	r3, r5
 800c83c:	f7f3 fefc 	bl	8000638 <__aeabi_dmul>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	2000      	movs	r0, #0
 800c846:	4948      	ldr	r1, [pc, #288]	@ (800c968 <__ieee754_pow+0x418>)
 800c848:	f7f3 fd3e 	bl	80002c8 <__aeabi_dsub>
 800c84c:	4622      	mov	r2, r4
 800c84e:	4680      	mov	r8, r0
 800c850:	4689      	mov	r9, r1
 800c852:	462b      	mov	r3, r5
 800c854:	4620      	mov	r0, r4
 800c856:	4629      	mov	r1, r5
 800c858:	f7f3 feee 	bl	8000638 <__aeabi_dmul>
 800c85c:	4602      	mov	r2, r0
 800c85e:	460b      	mov	r3, r1
 800c860:	4640      	mov	r0, r8
 800c862:	4649      	mov	r1, r9
 800c864:	f7f3 fee8 	bl	8000638 <__aeabi_dmul>
 800c868:	a33b      	add	r3, pc, #236	@ (adr r3, 800c958 <__ieee754_pow+0x408>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7f3 fee3 	bl	8000638 <__aeabi_dmul>
 800c872:	4602      	mov	r2, r0
 800c874:	460b      	mov	r3, r1
 800c876:	4650      	mov	r0, sl
 800c878:	4659      	mov	r1, fp
 800c87a:	f7f3 fd25 	bl	80002c8 <__aeabi_dsub>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4680      	mov	r8, r0
 800c884:	4689      	mov	r9, r1
 800c886:	4630      	mov	r0, r6
 800c888:	4639      	mov	r1, r7
 800c88a:	f7f3 fd1f 	bl	80002cc <__adddf3>
 800c88e:	2400      	movs	r4, #0
 800c890:	4632      	mov	r2, r6
 800c892:	463b      	mov	r3, r7
 800c894:	4620      	mov	r0, r4
 800c896:	460d      	mov	r5, r1
 800c898:	f7f3 fd16 	bl	80002c8 <__aeabi_dsub>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f3 fd10 	bl	80002c8 <__aeabi_dsub>
 800c8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9304      	str	r3, [sp, #16]
 800c8b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	460f      	mov	r7, r1
 800c8bc:	4652      	mov	r2, sl
 800c8be:	465b      	mov	r3, fp
 800c8c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8c4:	f7f3 fd00 	bl	80002c8 <__aeabi_dsub>
 800c8c8:	4622      	mov	r2, r4
 800c8ca:	462b      	mov	r3, r5
 800c8cc:	f7f3 feb4 	bl	8000638 <__aeabi_dmul>
 800c8d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	4689      	mov	r9, r1
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 feac 	bl	8000638 <__aeabi_dmul>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	4649      	mov	r1, r9
 800c8e8:	f7f3 fcf0 	bl	80002cc <__adddf3>
 800c8ec:	4652      	mov	r2, sl
 800c8ee:	465b      	mov	r3, fp
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	460f      	mov	r7, r1
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	f7f3 fe9e 	bl	8000638 <__aeabi_dmul>
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4602      	mov	r2, r0
 800c900:	4680      	mov	r8, r0
 800c902:	4689      	mov	r9, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fce0 	bl	80002cc <__adddf3>
 800c90c:	4b17      	ldr	r3, [pc, #92]	@ (800c96c <__ieee754_pow+0x41c>)
 800c90e:	4299      	cmp	r1, r3
 800c910:	4604      	mov	r4, r0
 800c912:	460d      	mov	r5, r1
 800c914:	468a      	mov	sl, r1
 800c916:	468b      	mov	fp, r1
 800c918:	f340 82ef 	ble.w	800cefa <__ieee754_pow+0x9aa>
 800c91c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c920:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c924:	4303      	orrs	r3, r0
 800c926:	f000 81e8 	beq.w	800ccfa <__ieee754_pow+0x7aa>
 800c92a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c92e:	2200      	movs	r2, #0
 800c930:	2300      	movs	r3, #0
 800c932:	f7f4 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 800c936:	3800      	subs	r0, #0
 800c938:	bf18      	it	ne
 800c93a:	2001      	movne	r0, #1
 800c93c:	e710      	b.n	800c760 <__ieee754_pow+0x210>
 800c93e:	bf00      	nop
 800c940:	60000000 	.word	0x60000000
 800c944:	3ff71547 	.word	0x3ff71547
 800c948:	f85ddf44 	.word	0xf85ddf44
 800c94c:	3e54ae0b 	.word	0x3e54ae0b
 800c950:	55555555 	.word	0x55555555
 800c954:	3fd55555 	.word	0x3fd55555
 800c958:	652b82fe 	.word	0x652b82fe
 800c95c:	3ff71547 	.word	0x3ff71547
 800c960:	3ff00000 	.word	0x3ff00000
 800c964:	3fd00000 	.word	0x3fd00000
 800c968:	3fe00000 	.word	0x3fe00000
 800c96c:	408fffff 	.word	0x408fffff
 800c970:	4bd5      	ldr	r3, [pc, #852]	@ (800ccc8 <__ieee754_pow+0x778>)
 800c972:	402b      	ands	r3, r5
 800c974:	2200      	movs	r2, #0
 800c976:	b92b      	cbnz	r3, 800c984 <__ieee754_pow+0x434>
 800c978:	4bd4      	ldr	r3, [pc, #848]	@ (800cccc <__ieee754_pow+0x77c>)
 800c97a:	f7f3 fe5d 	bl	8000638 <__aeabi_dmul>
 800c97e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c982:	468b      	mov	fp, r1
 800c984:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c988:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c98c:	4413      	add	r3, r2
 800c98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c990:	4bcf      	ldr	r3, [pc, #828]	@ (800ccd0 <__ieee754_pow+0x780>)
 800c992:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c996:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c99a:	459b      	cmp	fp, r3
 800c99c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c9a0:	dd08      	ble.n	800c9b4 <__ieee754_pow+0x464>
 800c9a2:	4bcc      	ldr	r3, [pc, #816]	@ (800ccd4 <__ieee754_pow+0x784>)
 800c9a4:	459b      	cmp	fp, r3
 800c9a6:	f340 81a5 	ble.w	800ccf4 <__ieee754_pow+0x7a4>
 800c9aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c9b4:	f04f 0a00 	mov.w	sl, #0
 800c9b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c9bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9be:	4bc6      	ldr	r3, [pc, #792]	@ (800ccd8 <__ieee754_pow+0x788>)
 800c9c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9c4:	ed93 7b00 	vldr	d7, [r3]
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	ec53 2b17 	vmov	r2, r3, d7
 800c9ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c9d6:	f7f3 fc77 	bl	80002c8 <__aeabi_dsub>
 800c9da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c9de:	4606      	mov	r6, r0
 800c9e0:	460f      	mov	r7, r1
 800c9e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9e6:	f7f3 fc71 	bl	80002cc <__adddf3>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	49ba      	ldr	r1, [pc, #744]	@ (800ccdc <__ieee754_pow+0x78c>)
 800c9f2:	f7f3 ff4b 	bl	800088c <__aeabi_ddiv>
 800c9f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4630      	mov	r0, r6
 800ca00:	4639      	mov	r1, r7
 800ca02:	f7f3 fe19 	bl	8000638 <__aeabi_dmul>
 800ca06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca0a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ca0e:	106d      	asrs	r5, r5, #1
 800ca10:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ca14:	f04f 0b00 	mov.w	fp, #0
 800ca18:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ca1c:	4661      	mov	r1, ip
 800ca1e:	2200      	movs	r2, #0
 800ca20:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ca24:	4658      	mov	r0, fp
 800ca26:	46e1      	mov	r9, ip
 800ca28:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800ca2c:	4614      	mov	r4, r2
 800ca2e:	461d      	mov	r5, r3
 800ca30:	f7f3 fe02 	bl	8000638 <__aeabi_dmul>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4639      	mov	r1, r7
 800ca3c:	f7f3 fc44 	bl	80002c8 <__aeabi_dsub>
 800ca40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca44:	4606      	mov	r6, r0
 800ca46:	460f      	mov	r7, r1
 800ca48:	4620      	mov	r0, r4
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	f7f3 fc3c 	bl	80002c8 <__aeabi_dsub>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca58:	f7f3 fc36 	bl	80002c8 <__aeabi_dsub>
 800ca5c:	465a      	mov	r2, fp
 800ca5e:	464b      	mov	r3, r9
 800ca60:	f7f3 fdea 	bl	8000638 <__aeabi_dmul>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4630      	mov	r0, r6
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	f7f3 fc2c 	bl	80002c8 <__aeabi_dsub>
 800ca70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ca74:	f7f3 fde0 	bl	8000638 <__aeabi_dmul>
 800ca78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca80:	4610      	mov	r0, r2
 800ca82:	4619      	mov	r1, r3
 800ca84:	f7f3 fdd8 	bl	8000638 <__aeabi_dmul>
 800ca88:	a37d      	add	r3, pc, #500	@ (adr r3, 800cc80 <__ieee754_pow+0x730>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	4604      	mov	r4, r0
 800ca90:	460d      	mov	r5, r1
 800ca92:	f7f3 fdd1 	bl	8000638 <__aeabi_dmul>
 800ca96:	a37c      	add	r3, pc, #496	@ (adr r3, 800cc88 <__ieee754_pow+0x738>)
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	f7f3 fc16 	bl	80002cc <__adddf3>
 800caa0:	4622      	mov	r2, r4
 800caa2:	462b      	mov	r3, r5
 800caa4:	f7f3 fdc8 	bl	8000638 <__aeabi_dmul>
 800caa8:	a379      	add	r3, pc, #484	@ (adr r3, 800cc90 <__ieee754_pow+0x740>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	f7f3 fc0d 	bl	80002cc <__adddf3>
 800cab2:	4622      	mov	r2, r4
 800cab4:	462b      	mov	r3, r5
 800cab6:	f7f3 fdbf 	bl	8000638 <__aeabi_dmul>
 800caba:	a377      	add	r3, pc, #476	@ (adr r3, 800cc98 <__ieee754_pow+0x748>)
 800cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac0:	f7f3 fc04 	bl	80002cc <__adddf3>
 800cac4:	4622      	mov	r2, r4
 800cac6:	462b      	mov	r3, r5
 800cac8:	f7f3 fdb6 	bl	8000638 <__aeabi_dmul>
 800cacc:	a374      	add	r3, pc, #464	@ (adr r3, 800cca0 <__ieee754_pow+0x750>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f3 fbfb 	bl	80002cc <__adddf3>
 800cad6:	4622      	mov	r2, r4
 800cad8:	462b      	mov	r3, r5
 800cada:	f7f3 fdad 	bl	8000638 <__aeabi_dmul>
 800cade:	a372      	add	r3, pc, #456	@ (adr r3, 800cca8 <__ieee754_pow+0x758>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fbf2 	bl	80002cc <__adddf3>
 800cae8:	4622      	mov	r2, r4
 800caea:	4606      	mov	r6, r0
 800caec:	460f      	mov	r7, r1
 800caee:	462b      	mov	r3, r5
 800caf0:	4620      	mov	r0, r4
 800caf2:	4629      	mov	r1, r5
 800caf4:	f7f3 fda0 	bl	8000638 <__aeabi_dmul>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4630      	mov	r0, r6
 800cafe:	4639      	mov	r1, r7
 800cb00:	f7f3 fd9a 	bl	8000638 <__aeabi_dmul>
 800cb04:	465a      	mov	r2, fp
 800cb06:	4604      	mov	r4, r0
 800cb08:	460d      	mov	r5, r1
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb10:	f7f3 fbdc 	bl	80002cc <__adddf3>
 800cb14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cb18:	f7f3 fd8e 	bl	8000638 <__aeabi_dmul>
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	462b      	mov	r3, r5
 800cb20:	f7f3 fbd4 	bl	80002cc <__adddf3>
 800cb24:	465a      	mov	r2, fp
 800cb26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb2a:	464b      	mov	r3, r9
 800cb2c:	4658      	mov	r0, fp
 800cb2e:	4649      	mov	r1, r9
 800cb30:	f7f3 fd82 	bl	8000638 <__aeabi_dmul>
 800cb34:	4b6a      	ldr	r3, [pc, #424]	@ (800cce0 <__ieee754_pow+0x790>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	4606      	mov	r6, r0
 800cb3a:	460f      	mov	r7, r1
 800cb3c:	f7f3 fbc6 	bl	80002cc <__adddf3>
 800cb40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb44:	f7f3 fbc2 	bl	80002cc <__adddf3>
 800cb48:	46d8      	mov	r8, fp
 800cb4a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800cb4e:	460d      	mov	r5, r1
 800cb50:	465a      	mov	r2, fp
 800cb52:	460b      	mov	r3, r1
 800cb54:	4640      	mov	r0, r8
 800cb56:	4649      	mov	r1, r9
 800cb58:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cb5c:	f7f3 fd6c 	bl	8000638 <__aeabi_dmul>
 800cb60:	465c      	mov	r4, fp
 800cb62:	4680      	mov	r8, r0
 800cb64:	4689      	mov	r9, r1
 800cb66:	4b5e      	ldr	r3, [pc, #376]	@ (800cce0 <__ieee754_pow+0x790>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f7f3 fbab 	bl	80002c8 <__aeabi_dsub>
 800cb72:	4632      	mov	r2, r6
 800cb74:	463b      	mov	r3, r7
 800cb76:	f7f3 fba7 	bl	80002c8 <__aeabi_dsub>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb82:	f7f3 fba1 	bl	80002c8 <__aeabi_dsub>
 800cb86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb8a:	f7f3 fd55 	bl	8000638 <__aeabi_dmul>
 800cb8e:	4622      	mov	r2, r4
 800cb90:	4606      	mov	r6, r0
 800cb92:	460f      	mov	r7, r1
 800cb94:	462b      	mov	r3, r5
 800cb96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb9a:	f7f3 fd4d 	bl	8000638 <__aeabi_dmul>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	4630      	mov	r0, r6
 800cba4:	4639      	mov	r1, r7
 800cba6:	f7f3 fb91 	bl	80002cc <__adddf3>
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7f3 fb89 	bl	80002cc <__adddf3>
 800cbba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cbbe:	a33c      	add	r3, pc, #240	@ (adr r3, 800ccb0 <__ieee754_pow+0x760>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	4658      	mov	r0, fp
 800cbc6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cbca:	460d      	mov	r5, r1
 800cbcc:	f7f3 fd34 	bl	8000638 <__aeabi_dmul>
 800cbd0:	465c      	mov	r4, fp
 800cbd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbd6:	4642      	mov	r2, r8
 800cbd8:	464b      	mov	r3, r9
 800cbda:	4620      	mov	r0, r4
 800cbdc:	4629      	mov	r1, r5
 800cbde:	f7f3 fb73 	bl	80002c8 <__aeabi_dsub>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	4639      	mov	r1, r7
 800cbea:	f7f3 fb6d 	bl	80002c8 <__aeabi_dsub>
 800cbee:	a332      	add	r3, pc, #200	@ (adr r3, 800ccb8 <__ieee754_pow+0x768>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	f7f3 fd20 	bl	8000638 <__aeabi_dmul>
 800cbf8:	a331      	add	r3, pc, #196	@ (adr r3, 800ccc0 <__ieee754_pow+0x770>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	4606      	mov	r6, r0
 800cc00:	460f      	mov	r7, r1
 800cc02:	4620      	mov	r0, r4
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f3 fd17 	bl	8000638 <__aeabi_dmul>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4630      	mov	r0, r6
 800cc10:	4639      	mov	r1, r7
 800cc12:	f7f3 fb5b 	bl	80002cc <__adddf3>
 800cc16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc18:	4b32      	ldr	r3, [pc, #200]	@ (800cce4 <__ieee754_pow+0x794>)
 800cc1a:	4413      	add	r3, r2
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	f7f3 fb54 	bl	80002cc <__adddf3>
 800cc24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cc28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc2a:	f7f3 fc9b 	bl	8000564 <__aeabi_i2d>
 800cc2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc30:	4b2d      	ldr	r3, [pc, #180]	@ (800cce8 <__ieee754_pow+0x798>)
 800cc32:	4413      	add	r3, r2
 800cc34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc38:	4606      	mov	r6, r0
 800cc3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc3e:	460f      	mov	r7, r1
 800cc40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc44:	f7f3 fb42 	bl	80002cc <__adddf3>
 800cc48:	4642      	mov	r2, r8
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	f7f3 fb3e 	bl	80002cc <__adddf3>
 800cc50:	4632      	mov	r2, r6
 800cc52:	463b      	mov	r3, r7
 800cc54:	f7f3 fb3a 	bl	80002cc <__adddf3>
 800cc58:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800cc5c:	4632      	mov	r2, r6
 800cc5e:	463b      	mov	r3, r7
 800cc60:	4658      	mov	r0, fp
 800cc62:	460d      	mov	r5, r1
 800cc64:	f7f3 fb30 	bl	80002c8 <__aeabi_dsub>
 800cc68:	4642      	mov	r2, r8
 800cc6a:	464b      	mov	r3, r9
 800cc6c:	f7f3 fb2c 	bl	80002c8 <__aeabi_dsub>
 800cc70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc74:	f7f3 fb28 	bl	80002c8 <__aeabi_dsub>
 800cc78:	465c      	mov	r4, fp
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	e036      	b.n	800ccec <__ieee754_pow+0x79c>
 800cc7e:	bf00      	nop
 800cc80:	4a454eef 	.word	0x4a454eef
 800cc84:	3fca7e28 	.word	0x3fca7e28
 800cc88:	93c9db65 	.word	0x93c9db65
 800cc8c:	3fcd864a 	.word	0x3fcd864a
 800cc90:	a91d4101 	.word	0xa91d4101
 800cc94:	3fd17460 	.word	0x3fd17460
 800cc98:	518f264d 	.word	0x518f264d
 800cc9c:	3fd55555 	.word	0x3fd55555
 800cca0:	db6fabff 	.word	0xdb6fabff
 800cca4:	3fdb6db6 	.word	0x3fdb6db6
 800cca8:	33333303 	.word	0x33333303
 800ccac:	3fe33333 	.word	0x3fe33333
 800ccb0:	e0000000 	.word	0xe0000000
 800ccb4:	3feec709 	.word	0x3feec709
 800ccb8:	dc3a03fd 	.word	0xdc3a03fd
 800ccbc:	3feec709 	.word	0x3feec709
 800ccc0:	145b01f5 	.word	0x145b01f5
 800ccc4:	be3e2fe0 	.word	0xbe3e2fe0
 800ccc8:	7ff00000 	.word	0x7ff00000
 800cccc:	43400000 	.word	0x43400000
 800ccd0:	0003988e 	.word	0x0003988e
 800ccd4:	000bb679 	.word	0x000bb679
 800ccd8:	0800e178 	.word	0x0800e178
 800ccdc:	3ff00000 	.word	0x3ff00000
 800cce0:	40080000 	.word	0x40080000
 800cce4:	0800e158 	.word	0x0800e158
 800cce8:	0800e168 	.word	0x0800e168
 800ccec:	460b      	mov	r3, r1
 800ccee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccf2:	e5d7      	b.n	800c8a4 <__ieee754_pow+0x354>
 800ccf4:	f04f 0a01 	mov.w	sl, #1
 800ccf8:	e65e      	b.n	800c9b8 <__ieee754_pow+0x468>
 800ccfa:	a3b4      	add	r3, pc, #720	@ (adr r3, 800cfcc <__ieee754_pow+0xa7c>)
 800ccfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd00:	4630      	mov	r0, r6
 800cd02:	4639      	mov	r1, r7
 800cd04:	f7f3 fae2 	bl	80002cc <__adddf3>
 800cd08:	4642      	mov	r2, r8
 800cd0a:	e9cd 0100 	strd	r0, r1, [sp]
 800cd0e:	464b      	mov	r3, r9
 800cd10:	4620      	mov	r0, r4
 800cd12:	4629      	mov	r1, r5
 800cd14:	f7f3 fad8 	bl	80002c8 <__aeabi_dsub>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd20:	f7f3 ff1a 	bl	8000b58 <__aeabi_dcmpgt>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	f47f ae00 	bne.w	800c92a <__ieee754_pow+0x3da>
 800cd2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800cd2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cd32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800cd36:	fa43 fa0a 	asr.w	sl, r3, sl
 800cd3a:	44da      	add	sl, fp
 800cd3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cd40:	489d      	ldr	r0, [pc, #628]	@ (800cfb8 <__ieee754_pow+0xa68>)
 800cd42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cd46:	4108      	asrs	r0, r1
 800cd48:	ea00 030a 	and.w	r3, r0, sl
 800cd4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cd50:	f1c1 0114 	rsb	r1, r1, #20
 800cd54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cd58:	fa4a fa01 	asr.w	sl, sl, r1
 800cd5c:	f1bb 0f00 	cmp.w	fp, #0
 800cd60:	4640      	mov	r0, r8
 800cd62:	4649      	mov	r1, r9
 800cd64:	f04f 0200 	mov.w	r2, #0
 800cd68:	bfb8      	it	lt
 800cd6a:	f1ca 0a00 	rsblt	sl, sl, #0
 800cd6e:	f7f3 faab 	bl	80002c8 <__aeabi_dsub>
 800cd72:	4680      	mov	r8, r0
 800cd74:	4689      	mov	r9, r1
 800cd76:	4632      	mov	r2, r6
 800cd78:	463b      	mov	r3, r7
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f7f3 faa5 	bl	80002cc <__adddf3>
 800cd82:	2400      	movs	r4, #0
 800cd84:	a37c      	add	r3, pc, #496	@ (adr r3, 800cf78 <__ieee754_pow+0xa28>)
 800cd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	460d      	mov	r5, r1
 800cd8e:	f7f3 fc53 	bl	8000638 <__aeabi_dmul>
 800cd92:	4642      	mov	r2, r8
 800cd94:	e9cd 0100 	strd	r0, r1, [sp]
 800cd98:	464b      	mov	r3, r9
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	f7f3 fa93 	bl	80002c8 <__aeabi_dsub>
 800cda2:	4602      	mov	r2, r0
 800cda4:	460b      	mov	r3, r1
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fa8d 	bl	80002c8 <__aeabi_dsub>
 800cdae:	a374      	add	r3, pc, #464	@ (adr r3, 800cf80 <__ieee754_pow+0xa30>)
 800cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb4:	f7f3 fc40 	bl	8000638 <__aeabi_dmul>
 800cdb8:	a373      	add	r3, pc, #460	@ (adr r3, 800cf88 <__ieee754_pow+0xa38>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	4689      	mov	r9, r1
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	f7f3 fc37 	bl	8000638 <__aeabi_dmul>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4640      	mov	r0, r8
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	f7f3 fa7b 	bl	80002cc <__adddf3>
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	460d      	mov	r5, r1
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cde2:	f7f3 fa73 	bl	80002cc <__adddf3>
 800cde6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdea:	4680      	mov	r8, r0
 800cdec:	4689      	mov	r9, r1
 800cdee:	f7f3 fa6b 	bl	80002c8 <__aeabi_dsub>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f7f3 fa65 	bl	80002c8 <__aeabi_dsub>
 800cdfe:	4642      	mov	r2, r8
 800ce00:	4606      	mov	r6, r0
 800ce02:	460f      	mov	r7, r1
 800ce04:	464b      	mov	r3, r9
 800ce06:	4640      	mov	r0, r8
 800ce08:	4649      	mov	r1, r9
 800ce0a:	f7f3 fc15 	bl	8000638 <__aeabi_dmul>
 800ce0e:	a360      	add	r3, pc, #384	@ (adr r3, 800cf90 <__ieee754_pow+0xa40>)
 800ce10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce14:	4604      	mov	r4, r0
 800ce16:	460d      	mov	r5, r1
 800ce18:	f7f3 fc0e 	bl	8000638 <__aeabi_dmul>
 800ce1c:	a35e      	add	r3, pc, #376	@ (adr r3, 800cf98 <__ieee754_pow+0xa48>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	f7f3 fa51 	bl	80002c8 <__aeabi_dsub>
 800ce26:	4622      	mov	r2, r4
 800ce28:	462b      	mov	r3, r5
 800ce2a:	f7f3 fc05 	bl	8000638 <__aeabi_dmul>
 800ce2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800cfa0 <__ieee754_pow+0xa50>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	f7f3 fa4a 	bl	80002cc <__adddf3>
 800ce38:	4622      	mov	r2, r4
 800ce3a:	462b      	mov	r3, r5
 800ce3c:	f7f3 fbfc 	bl	8000638 <__aeabi_dmul>
 800ce40:	a359      	add	r3, pc, #356	@ (adr r3, 800cfa8 <__ieee754_pow+0xa58>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	f7f3 fa3f 	bl	80002c8 <__aeabi_dsub>
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	f7f3 fbf3 	bl	8000638 <__aeabi_dmul>
 800ce52:	a357      	add	r3, pc, #348	@ (adr r3, 800cfb0 <__ieee754_pow+0xa60>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f7f3 fa38 	bl	80002cc <__adddf3>
 800ce5c:	4622      	mov	r2, r4
 800ce5e:	462b      	mov	r3, r5
 800ce60:	f7f3 fbea 	bl	8000638 <__aeabi_dmul>
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	4640      	mov	r0, r8
 800ce6a:	4649      	mov	r1, r9
 800ce6c:	f7f3 fa2c 	bl	80002c8 <__aeabi_dsub>
 800ce70:	4604      	mov	r4, r0
 800ce72:	460d      	mov	r5, r1
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	f7f3 fbdc 	bl	8000638 <__aeabi_dmul>
 800ce80:	2200      	movs	r2, #0
 800ce82:	e9cd 0100 	strd	r0, r1, [sp]
 800ce86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	f7f3 fa1b 	bl	80002c8 <__aeabi_dsub>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce9a:	f7f3 fcf7 	bl	800088c <__aeabi_ddiv>
 800ce9e:	4632      	mov	r2, r6
 800cea0:	4604      	mov	r4, r0
 800cea2:	460d      	mov	r5, r1
 800cea4:	463b      	mov	r3, r7
 800cea6:	4640      	mov	r0, r8
 800cea8:	4649      	mov	r1, r9
 800ceaa:	f7f3 fbc5 	bl	8000638 <__aeabi_dmul>
 800ceae:	4632      	mov	r2, r6
 800ceb0:	463b      	mov	r3, r7
 800ceb2:	f7f3 fa0b 	bl	80002cc <__adddf3>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	f7f3 fa03 	bl	80002c8 <__aeabi_dsub>
 800cec2:	4642      	mov	r2, r8
 800cec4:	464b      	mov	r3, r9
 800cec6:	f7f3 f9ff 	bl	80002c8 <__aeabi_dsub>
 800ceca:	460b      	mov	r3, r1
 800cecc:	4602      	mov	r2, r0
 800cece:	493b      	ldr	r1, [pc, #236]	@ (800cfbc <__ieee754_pow+0xa6c>)
 800ced0:	2000      	movs	r0, #0
 800ced2:	f7f3 f9f9 	bl	80002c8 <__aeabi_dsub>
 800ced6:	ec41 0b10 	vmov	d0, r0, r1
 800ceda:	ee10 3a90 	vmov	r3, s1
 800cede:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cee6:	da30      	bge.n	800cf4a <__ieee754_pow+0x9fa>
 800cee8:	4650      	mov	r0, sl
 800ceea:	f000 f875 	bl	800cfd8 <scalbn>
 800ceee:	ec51 0b10 	vmov	r0, r1, d0
 800cef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef6:	f7ff bbd2 	b.w	800c69e <__ieee754_pow+0x14e>
 800cefa:	4c31      	ldr	r4, [pc, #196]	@ (800cfc0 <__ieee754_pow+0xa70>)
 800cefc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	d91a      	bls.n	800cf3a <__ieee754_pow+0x9ea>
 800cf04:	4b2f      	ldr	r3, [pc, #188]	@ (800cfc4 <__ieee754_pow+0xa74>)
 800cf06:	440b      	add	r3, r1
 800cf08:	4303      	orrs	r3, r0
 800cf0a:	d009      	beq.n	800cf20 <__ieee754_pow+0x9d0>
 800cf0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf10:	2200      	movs	r2, #0
 800cf12:	2300      	movs	r3, #0
 800cf14:	f7f3 fe02 	bl	8000b1c <__aeabi_dcmplt>
 800cf18:	3800      	subs	r0, #0
 800cf1a:	bf18      	it	ne
 800cf1c:	2001      	movne	r0, #1
 800cf1e:	e42b      	b.n	800c778 <__ieee754_pow+0x228>
 800cf20:	4642      	mov	r2, r8
 800cf22:	464b      	mov	r3, r9
 800cf24:	f7f3 f9d0 	bl	80002c8 <__aeabi_dsub>
 800cf28:	4632      	mov	r2, r6
 800cf2a:	463b      	mov	r3, r7
 800cf2c:	f7f3 fe0a 	bl	8000b44 <__aeabi_dcmpge>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d1eb      	bne.n	800cf0c <__ieee754_pow+0x9bc>
 800cf34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800cfd4 <__ieee754_pow+0xa84>
 800cf38:	e6f7      	b.n	800cd2a <__ieee754_pow+0x7da>
 800cf3a:	469a      	mov	sl, r3
 800cf3c:	4b22      	ldr	r3, [pc, #136]	@ (800cfc8 <__ieee754_pow+0xa78>)
 800cf3e:	459a      	cmp	sl, r3
 800cf40:	f63f aef3 	bhi.w	800cd2a <__ieee754_pow+0x7da>
 800cf44:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cf48:	e715      	b.n	800cd76 <__ieee754_pow+0x826>
 800cf4a:	ec51 0b10 	vmov	r0, r1, d0
 800cf4e:	4619      	mov	r1, r3
 800cf50:	e7cf      	b.n	800cef2 <__ieee754_pow+0x9a2>
 800cf52:	491a      	ldr	r1, [pc, #104]	@ (800cfbc <__ieee754_pow+0xa6c>)
 800cf54:	2000      	movs	r0, #0
 800cf56:	f7ff bb18 	b.w	800c58a <__ieee754_pow+0x3a>
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	f7ff bb14 	b.w	800c58a <__ieee754_pow+0x3a>
 800cf62:	4630      	mov	r0, r6
 800cf64:	4639      	mov	r1, r7
 800cf66:	f7ff bb10 	b.w	800c58a <__ieee754_pow+0x3a>
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	f7ff bb5e 	b.w	800c62c <__ieee754_pow+0xdc>
 800cf70:	2400      	movs	r4, #0
 800cf72:	f7ff bb49 	b.w	800c608 <__ieee754_pow+0xb8>
 800cf76:	bf00      	nop
 800cf78:	00000000 	.word	0x00000000
 800cf7c:	3fe62e43 	.word	0x3fe62e43
 800cf80:	fefa39ef 	.word	0xfefa39ef
 800cf84:	3fe62e42 	.word	0x3fe62e42
 800cf88:	0ca86c39 	.word	0x0ca86c39
 800cf8c:	be205c61 	.word	0xbe205c61
 800cf90:	72bea4d0 	.word	0x72bea4d0
 800cf94:	3e663769 	.word	0x3e663769
 800cf98:	c5d26bf1 	.word	0xc5d26bf1
 800cf9c:	3ebbbd41 	.word	0x3ebbbd41
 800cfa0:	af25de2c 	.word	0xaf25de2c
 800cfa4:	3f11566a 	.word	0x3f11566a
 800cfa8:	16bebd93 	.word	0x16bebd93
 800cfac:	3f66c16c 	.word	0x3f66c16c
 800cfb0:	5555553e 	.word	0x5555553e
 800cfb4:	3fc55555 	.word	0x3fc55555
 800cfb8:	fff00000 	.word	0xfff00000
 800cfbc:	3ff00000 	.word	0x3ff00000
 800cfc0:	4090cbff 	.word	0x4090cbff
 800cfc4:	3f6f3400 	.word	0x3f6f3400
 800cfc8:	3fe00000 	.word	0x3fe00000
 800cfcc:	652b82fe 	.word	0x652b82fe
 800cfd0:	3c971547 	.word	0x3c971547
 800cfd4:	4090cc00 	.word	0x4090cc00

0800cfd8 <scalbn>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	ec55 4b10 	vmov	r4, r5, d0
 800cfde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	462b      	mov	r3, r5
 800cfe6:	b991      	cbnz	r1, 800d00e <scalbn+0x36>
 800cfe8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cfec:	4323      	orrs	r3, r4
 800cfee:	d03d      	beq.n	800d06c <scalbn+0x94>
 800cff0:	4b35      	ldr	r3, [pc, #212]	@ (800d0c8 <scalbn+0xf0>)
 800cff2:	4620      	mov	r0, r4
 800cff4:	4629      	mov	r1, r5
 800cff6:	2200      	movs	r2, #0
 800cff8:	f7f3 fb1e 	bl	8000638 <__aeabi_dmul>
 800cffc:	4b33      	ldr	r3, [pc, #204]	@ (800d0cc <scalbn+0xf4>)
 800cffe:	429e      	cmp	r6, r3
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	da0f      	bge.n	800d026 <scalbn+0x4e>
 800d006:	a328      	add	r3, pc, #160	@ (adr r3, 800d0a8 <scalbn+0xd0>)
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	e01e      	b.n	800d04c <scalbn+0x74>
 800d00e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d012:	4291      	cmp	r1, r2
 800d014:	d10b      	bne.n	800d02e <scalbn+0x56>
 800d016:	4622      	mov	r2, r4
 800d018:	4620      	mov	r0, r4
 800d01a:	4629      	mov	r1, r5
 800d01c:	f7f3 f956 	bl	80002cc <__adddf3>
 800d020:	4604      	mov	r4, r0
 800d022:	460d      	mov	r5, r1
 800d024:	e022      	b.n	800d06c <scalbn+0x94>
 800d026:	460b      	mov	r3, r1
 800d028:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d02c:	3936      	subs	r1, #54	@ 0x36
 800d02e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d032:	4296      	cmp	r6, r2
 800d034:	dd0d      	ble.n	800d052 <scalbn+0x7a>
 800d036:	2d00      	cmp	r5, #0
 800d038:	a11d      	add	r1, pc, #116	@ (adr r1, 800d0b0 <scalbn+0xd8>)
 800d03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d03e:	da02      	bge.n	800d046 <scalbn+0x6e>
 800d040:	a11d      	add	r1, pc, #116	@ (adr r1, 800d0b8 <scalbn+0xe0>)
 800d042:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d046:	a31a      	add	r3, pc, #104	@ (adr r3, 800d0b0 <scalbn+0xd8>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 faf4 	bl	8000638 <__aeabi_dmul>
 800d050:	e7e6      	b.n	800d020 <scalbn+0x48>
 800d052:	1872      	adds	r2, r6, r1
 800d054:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d058:	428a      	cmp	r2, r1
 800d05a:	dcec      	bgt.n	800d036 <scalbn+0x5e>
 800d05c:	2a00      	cmp	r2, #0
 800d05e:	dd08      	ble.n	800d072 <scalbn+0x9a>
 800d060:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d064:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d068:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d06c:	ec45 4b10 	vmov	d0, r4, r5
 800d070:	bd70      	pop	{r4, r5, r6, pc}
 800d072:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d076:	da08      	bge.n	800d08a <scalbn+0xb2>
 800d078:	2d00      	cmp	r5, #0
 800d07a:	a10b      	add	r1, pc, #44	@ (adr r1, 800d0a8 <scalbn+0xd0>)
 800d07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d080:	dac1      	bge.n	800d006 <scalbn+0x2e>
 800d082:	a10f      	add	r1, pc, #60	@ (adr r1, 800d0c0 <scalbn+0xe8>)
 800d084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d088:	e7bd      	b.n	800d006 <scalbn+0x2e>
 800d08a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d08e:	3236      	adds	r2, #54	@ 0x36
 800d090:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d094:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d098:	4620      	mov	r0, r4
 800d09a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d0 <scalbn+0xf8>)
 800d09c:	4629      	mov	r1, r5
 800d09e:	2200      	movs	r2, #0
 800d0a0:	e7d4      	b.n	800d04c <scalbn+0x74>
 800d0a2:	bf00      	nop
 800d0a4:	f3af 8000 	nop.w
 800d0a8:	c2f8f359 	.word	0xc2f8f359
 800d0ac:	01a56e1f 	.word	0x01a56e1f
 800d0b0:	8800759c 	.word	0x8800759c
 800d0b4:	7e37e43c 	.word	0x7e37e43c
 800d0b8:	8800759c 	.word	0x8800759c
 800d0bc:	fe37e43c 	.word	0xfe37e43c
 800d0c0:	c2f8f359 	.word	0xc2f8f359
 800d0c4:	81a56e1f 	.word	0x81a56e1f
 800d0c8:	43500000 	.word	0x43500000
 800d0cc:	ffff3cb0 	.word	0xffff3cb0
 800d0d0:	3c900000 	.word	0x3c900000

0800d0d4 <with_errno>:
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	ed2d 8b02 	vpush	{d8}
 800d0da:	eeb0 8a40 	vmov.f32	s16, s0
 800d0de:	eef0 8a60 	vmov.f32	s17, s1
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	f7fc fdce 	bl	8009c84 <__errno>
 800d0e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d0ec:	eef0 0a68 	vmov.f32	s1, s17
 800d0f0:	ecbd 8b02 	vpop	{d8}
 800d0f4:	6004      	str	r4, [r0, #0]
 800d0f6:	bd10      	pop	{r4, pc}

0800d0f8 <xflow>:
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	b507      	push	{r0, r1, r2, lr}
 800d0fc:	ec51 0b10 	vmov	r0, r1, d0
 800d100:	b183      	cbz	r3, 800d124 <xflow+0x2c>
 800d102:	4602      	mov	r2, r0
 800d104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d108:	e9cd 2300 	strd	r2, r3, [sp]
 800d10c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d110:	f7f3 fa92 	bl	8000638 <__aeabi_dmul>
 800d114:	ec41 0b10 	vmov	d0, r0, r1
 800d118:	2022      	movs	r0, #34	@ 0x22
 800d11a:	b003      	add	sp, #12
 800d11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d120:	f7ff bfd8 	b.w	800d0d4 <with_errno>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	e7ee      	b.n	800d108 <xflow+0x10>
 800d12a:	0000      	movs	r0, r0
 800d12c:	0000      	movs	r0, r0
	...

0800d130 <__math_uflow>:
 800d130:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d138 <__math_uflow+0x8>
 800d134:	f7ff bfe0 	b.w	800d0f8 <xflow>
 800d138:	00000000 	.word	0x00000000
 800d13c:	10000000 	.word	0x10000000

0800d140 <__math_oflow>:
 800d140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d148 <__math_oflow+0x8>
 800d144:	f7ff bfd8 	b.w	800d0f8 <xflow>
 800d148:	00000000 	.word	0x00000000
 800d14c:	70000000 	.word	0x70000000

0800d150 <_init>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	bf00      	nop
 800d154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d156:	bc08      	pop	{r3}
 800d158:	469e      	mov	lr, r3
 800d15a:	4770      	bx	lr

0800d15c <_fini>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	bf00      	nop
 800d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d162:	bc08      	pop	{r3}
 800d164:	469e      	mov	lr, r3
 800d166:	4770      	bx	lr
