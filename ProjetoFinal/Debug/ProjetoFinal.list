
ProjetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d620  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  0800d7f0  0800d7f0  0000e7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e810  0800e810  00010288  2**0
                  CONTENTS
  4 .ARM          00000008  0800e810  0800e810  0000f810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e818  0800e818  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e818  0800e818  0000f818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e81c  0800e81c  0000f81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  0800e820  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  20000288  0800eaa8  00010288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800eaa8  00010bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001708f  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f1  00000000  00000000  00027347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0002ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fba  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d4  00000000  00000000  0002d02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0cf  00000000  00000000  000533fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e386b  00000000  00000000  0006f4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006978  00000000  00000000  00152d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001596f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d7d8 	.word	0x0800d7d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	0800d7d8 	.word	0x0800d7d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC1_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <MX_ADC1_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_ADC1_Init+0x98>)
 80010de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_ADC1_Init+0x98>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_ADC1_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <MX_ADC1_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_ADC1_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_ADC1_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_ADC1_Init+0x98>)
 8001126:	f003 f9e9 	bl	80044fc <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001130:	f001 fd86 	bl	8002c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_ADC1_Init+0x98>)
 8001146:	f003 fafd 	bl	8004744 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001150:	f001 fd76 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200002a4 	.word	0x200002a4
 8001160:	40012000 	.word	0x40012000
 8001164:	0f000001 	.word	0x0f000001

08001168 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_ADC_MspInit+0x7c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d127      	bne.n	80011da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <HAL_ADC_MspInit+0x84>)
 80011d6:	f004 f993 	bl	8005500 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012000 	.word	0x40012000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000

080011f0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2203      	movs	r2, #3
 8001214:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2203      	movs	r2, #3
 800121a:	715a      	strb	r2, [r3, #5]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af04      	add	r7, sp, #16
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	460b      	mov	r3, r1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	b29a      	uxth	r2, r3
 8001246:	8af9      	ldrh	r1, [r7, #22]
 8001248:	f241 3388 	movw	r3, #5000	@ 0x1388
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2302      	movs	r3, #2
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	f004 fe85 	bl	8005f68 <HAL_I2C_Mem_Read>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10b      	bne.n	800127c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001264:	7d7b      	ldrb	r3, [r7, #21]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	7d3b      	ldrb	r3, [r7, #20]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	801a      	strh	r2, [r3, #0]
		return true;
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <read_register16+0x56>
	} else
		return false;
 800127c:	2300      	movs	r3, #0

}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001286:	b590      	push	{r4, r7, lr}
 8001288:	b08b      	sub	sp, #44	@ 0x2c
 800128a:	af04      	add	r7, sp, #16
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	461a      	mov	r2, r3
 8001292:	460b      	mov	r3, r1
 8001294:	72fb      	strb	r3, [r7, #11]
 8001296:	4613      	mov	r3, r2
 8001298:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	8af9      	ldrh	r1, [r7, #22]
 80012b0:	f241 3488 	movw	r4, #5000	@ 0x1388
 80012b4:	9402      	str	r4, [sp, #8]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	f004 fe53 	bl	8005f68 <HAL_I2C_Mem_Read>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <read_data+0x46>
		return 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e000      	b.n	80012ce <read_data+0x48>
	else
		return 1;
 80012cc:	2301      	movs	r3, #1

}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}

080012d6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2188      	movs	r1, #136	@ 0x88
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff9f 	bl	8001228 <read_register16>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d06f      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3302      	adds	r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	218a      	movs	r1, #138	@ 0x8a
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff95 	bl	8001228 <read_register16>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d065      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	461a      	mov	r2, r3
 800130a:	218c      	movs	r1, #140	@ 0x8c
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff8b 	bl	8001228 <read_register16>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d05b      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3306      	adds	r3, #6
 800131c:	461a      	mov	r2, r3
 800131e:	218e      	movs	r1, #142	@ 0x8e
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff81 	bl	8001228 <read_register16>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d051      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3308      	adds	r3, #8
 8001330:	461a      	mov	r2, r3
 8001332:	2190      	movs	r1, #144	@ 0x90
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff77 	bl	8001228 <read_register16>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d047      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	330a      	adds	r3, #10
 8001344:	461a      	mov	r2, r3
 8001346:	2192      	movs	r1, #146	@ 0x92
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff6d 	bl	8001228 <read_register16>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d03d      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
 8001358:	461a      	mov	r2, r3
 800135a:	2194      	movs	r1, #148	@ 0x94
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff63 	bl	8001228 <read_register16>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d033      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	330e      	adds	r3, #14
 800136c:	461a      	mov	r2, r3
 800136e:	2196      	movs	r1, #150	@ 0x96
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff59 	bl	8001228 <read_register16>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d029      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3310      	adds	r3, #16
 8001380:	461a      	mov	r2, r3
 8001382:	2198      	movs	r1, #152	@ 0x98
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff4f 	bl	8001228 <read_register16>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01f      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3312      	adds	r3, #18
 8001394:	461a      	mov	r2, r3
 8001396:	219a      	movs	r1, #154	@ 0x9a
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff45 	bl	8001228 <read_register16>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d015      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3314      	adds	r3, #20
 80013a8:	461a      	mov	r2, r3
 80013aa:	219c      	movs	r1, #156	@ 0x9c
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff3b 	bl	8001228 <read_register16>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00b      	beq.n	80013d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013bc:	461a      	mov	r2, r3
 80013be:	219e      	movs	r1, #158	@ 0x9e
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ff31 	bl	8001228 <read_register16>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <read_calibration_data+0xfa>

		return true;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <read_calibration_data+0xfc>
	}

	return false;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f103 0218 	add.w	r2, r3, #24
 80013e8:	2301      	movs	r3, #1
 80013ea:	21a1      	movs	r1, #161	@ 0xa1
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff4a 	bl	8001286 <read_data>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d14b      	bne.n	8001490 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	331a      	adds	r3, #26
 80013fc:	461a      	mov	r2, r3
 80013fe:	21e1      	movs	r1, #225	@ 0xe1
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff11 	bl	8001228 <read_register16>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d041      	beq.n	8001490 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f103 021c 	add.w	r2, r3, #28
 8001412:	2301      	movs	r3, #1
 8001414:	21e3      	movs	r1, #227	@ 0xe3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff35 	bl	8001286 <read_data>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d136      	bne.n	8001490 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001422:	f107 030e 	add.w	r3, r7, #14
 8001426:	461a      	mov	r2, r3
 8001428:	21e4      	movs	r1, #228	@ 0xe4
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fefc 	bl	8001228 <read_register16>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d02c      	beq.n	8001490 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	461a      	mov	r2, r3
 800143c:	21e5      	movs	r1, #229	@ 0xe5
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fef2 	bl	8001228 <read_register16>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d022      	beq.n	8001490 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001450:	2301      	movs	r3, #1
 8001452:	21e7      	movs	r1, #231	@ 0xe7
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff16 	bl	8001286 <read_data>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d117      	bne.n	8001490 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b21b      	sxth	r3, r3
 8001466:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800146a:	b21a      	sxth	r2, r3
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	121b      	asrs	r3, r3, #8
 8001470:	b21b      	sxth	r3, r3
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21a      	sxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001480:	89bb      	ldrh	r3, [r7, #12]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	b29b      	uxth	r3, r3
 8001486:	b21a      	sxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	841a      	strh	r2, [r3, #32]

		return true;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800149a:	b580      	push	{r7, lr}
 800149c:	b088      	sub	sp, #32
 800149e:	af04      	add	r7, sp, #16
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	70fb      	strb	r3, [r7, #3]
 80014a6:	4613      	mov	r3, r2
 80014a8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	89f9      	ldrh	r1, [r7, #14]
 80014bc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2301      	movs	r3, #1
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	1cbb      	adds	r3, r7, #2
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2301      	movs	r3, #1
 80014cc:	f004 fc52 	bl	8005d74 <HAL_I2C_Mem_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <write_register8+0x40>
		return false;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <write_register8+0x42>
	else
		return true;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014f2:	2b76      	cmp	r3, #118	@ 0x76
 80014f4:	d005      	beq.n	8001502 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014fa:	2b77      	cmp	r3, #119	@ 0x77
 80014fc:	d001      	beq.n	8001502 <bmp280_init+0x1e>

		return false;
 80014fe:	2300      	movs	r3, #0
 8001500:	e099      	b.n	8001636 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001508:	2301      	movs	r3, #1
 800150a:	21d0      	movs	r1, #208	@ 0xd0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff feba 	bl	8001286 <read_data>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <bmp280_init+0x38>
		return false;
 8001518:	2300      	movs	r3, #0
 800151a:	e08c      	b.n	8001636 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001522:	2b58      	cmp	r3, #88	@ 0x58
 8001524:	d006      	beq.n	8001534 <bmp280_init+0x50>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800152c:	2b60      	cmp	r3, #96	@ 0x60
 800152e:	d001      	beq.n	8001534 <bmp280_init+0x50>

		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e080      	b.n	8001636 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001534:	22b6      	movs	r2, #182	@ 0xb6
 8001536:	21e0      	movs	r1, #224	@ 0xe0
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ffae 	bl	800149a <write_register8>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <bmp280_init+0x64>
		return false;
 8001544:	2300      	movs	r3, #0
 8001546:	e076      	b.n	8001636 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001548:	f107 020c 	add.w	r2, r7, #12
 800154c:	2301      	movs	r3, #1
 800154e:	21f3      	movs	r1, #243	@ 0xf3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fe98 	bl	8001286 <read_data>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f5      	bne.n	8001548 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800155c:	7b3b      	ldrb	r3, [r7, #12]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff feb5 	bl	80012d6 <read_calibration_data>
 800156c:	4603      	mov	r3, r0
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d100      	bne.n	800157a <bmp280_init+0x96>
 8001578:	e001      	b.n	800157e <bmp280_init+0x9a>
		return false;
 800157a:	2300      	movs	r3, #0
 800157c:	e05b      	b.n	8001636 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001584:	2b60      	cmp	r3, #96	@ 0x60
 8001586:	d10a      	bne.n	800159e <bmp280_init+0xba>
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff26 	bl	80013da <read_hum_calibration_data>
 800158e:	4603      	mov	r3, r0
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <bmp280_init+0xba>
		return false;
 800159a:	2300      	movs	r3, #0
 800159c:	e04b      	b.n	8001636 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	795b      	ldrb	r3, [r3, #5]
 80015a2:	015b      	lsls	r3, r3, #5
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	461a      	mov	r2, r3
 80015b8:	21f5      	movs	r1, #245	@ 0xf5
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff6d 	bl	800149a <write_register8>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <bmp280_init+0xe6>
		return false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e035      	b.n	8001636 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	78db      	ldrb	r3, [r3, #3]
 80015dc:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	789b      	ldrb	r3, [r3, #2]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015f6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80015fe:	2b60      	cmp	r3, #96	@ 0x60
 8001600:	d10d      	bne.n	800161e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	461a      	mov	r2, r3
 800160c:	21f2      	movs	r1, #242	@ 0xf2
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff43 	bl	800149a <write_register8>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <bmp280_init+0x13a>
			return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e00b      	b.n	8001636 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	461a      	mov	r2, r3
 8001622:	21f4      	movs	r1, #244	@ 0xf4
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff38 	bl	800149a <write_register8>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <bmp280_init+0x150>
		return false;
 8001630:	2300      	movs	r3, #0
 8001632:	e000      	b.n	8001636 <bmp280_init+0x152>
	}

	return true;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800163e:	b480      	push	{r7}
 8001640:	b087      	sub	sp, #28
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	10da      	asrs	r2, r3, #3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800165c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001660:	12db      	asrs	r3, r3, #11
 8001662:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	111b      	asrs	r3, r3, #4
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	1112      	asrs	r2, r2, #4
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	8809      	ldrh	r1, [r1, #0]
 8001676:	1a52      	subs	r2, r2, r1
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001684:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001688:	139b      	asrs	r3, r3, #14
 800168a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	441a      	add	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3380      	adds	r3, #128	@ 0x80
 80016a2:	121b      	asrs	r3, r3, #8
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <compensate_pressure>:
	return p;
}
*/

static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp){
 80016b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b4:	b09b      	sub	sp, #108	@ 0x6c
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80016ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80016bc:	647a      	str	r2, [r7, #68]	@ 0x44
	int64_t var1, var2, p;

	var1 = ((int64_t) fine_temp/2) - 64000;
 80016be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80016c0:	0fd3      	lsrs	r3, r2, #31
 80016c2:	4413      	add	r3, r2
 80016c4:	105b      	asrs	r3, r3, #1
 80016c6:	17da      	asrs	r2, r3, #31
 80016c8:	461c      	mov	r4, r3
 80016ca:	4615      	mov	r5, r2
 80016cc:	f5b4 4a7a 	subs.w	sl, r4, #64000	@ 0xfa00
 80016d0:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016d4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
	var2 = var1*var1*((double)dev->dig_P6)/32768;
 80016d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016dc:	fb03 f102 	mul.w	r1, r3, r2
 80016e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80016e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	18ca      	adds	r2, r1, r3
 80016ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016ec:	fba3 8903 	umull	r8, r9, r3, r3
 80016f0:	eb02 0309 	add.w	r3, r2, r9
 80016f4:	4699      	mov	r9, r3
 80016f6:	4640      	mov	r0, r8
 80016f8:	4649      	mov	r1, r9
 80016fa:	f7fe ff6f 	bl	80005dc <__aeabi_l2d>
 80016fe:	4604      	mov	r4, r0
 8001700:	460d      	mov	r5, r1
 8001702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001704:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff2b 	bl	8000564 <__aeabi_i2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7fe ff8f 	bl	8000638 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b86      	ldr	r3, [pc, #536]	@ (8001940 <compensate_pressure+0x290>)
 8001728:	f7ff f8b0 	bl	800088c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fb30 	bl	8000d98 <__aeabi_d2lz>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var2 = var2+var1*((double)dev->dig_P5)*2;
 8001740:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001744:	f7fe ff4a 	bl	80005dc <__aeabi_l2d>
 8001748:	4680      	mov	r8, r0
 800174a:	4689      	mov	r9, r1
 800174c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001750:	f7fe ff44 	bl	80005dc <__aeabi_l2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800175a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff00 	bl	8000564 <__aeabi_i2d>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe ff64 	bl	8000638 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	f7fe fda6 	bl	80002cc <__adddf3>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4640      	mov	r0, r8
 8001786:	4649      	mov	r1, r9
 8001788:	f7fe fda0 	bl	80002cc <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fb00 	bl	8000d98 <__aeabi_d2lz>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var2 = (var2/4)+((double)dev->dig_P4)*65536;
 80017a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da06      	bge.n	80017b6 <compensate_pressure+0x106>
 80017a8:	1cd1      	adds	r1, r2, #3
 80017aa:	61b9      	str	r1, [r7, #24]
 80017ac:	f143 0300 	adc.w	r3, r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0890      	lsrs	r0, r2, #2
 80017c0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80017c4:	1099      	asrs	r1, r3, #2
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7fe ff05 	bl	80005dc <__aeabi_l2d>
 80017d2:	4604      	mov	r4, r0
 80017d4:	460d      	mov	r5, r1
 80017d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fec1 	bl	8000564 <__aeabi_i2d>
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <compensate_pressure+0x294>)
 80017e8:	f7fe ff26 	bl	8000638 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4620      	mov	r0, r4
 80017f2:	4629      	mov	r1, r5
 80017f4:	f7fe fd6a 	bl	80002cc <__adddf3>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff faca 	bl	8000d98 <__aeabi_d2lz>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var1 = (((double)dev->dig_P3)*var1*var1/524288+((double)dev->dig_P2)*var1)/5242888;
 800180c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea6 	bl	8000564 <__aeabi_i2d>
 8001818:	4604      	mov	r4, r0
 800181a:	460d      	mov	r5, r1
 800181c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001820:	f7fe fedc 	bl	80005dc <__aeabi_l2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe ff04 	bl	8000638 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	461d      	mov	r5, r3
 8001838:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800183c:	f7fe fece 	bl	80005dc <__aeabi_l2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7fe fef6 	bl	8000638 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <compensate_pressure+0x298>)
 800185a:	f7ff f817 	bl	800088c <__aeabi_ddiv>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4690      	mov	r8, r2
 8001864:	4699      	mov	r9, r3
 8001866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001868:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe79 	bl	8000564 <__aeabi_i2d>
 8001872:	4604      	mov	r4, r0
 8001874:	460d      	mov	r5, r1
 8001876:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800187a:	f7fe feaf 	bl	80005dc <__aeabi_l2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fed7 	bl	8000638 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4640      	mov	r0, r8
 8001890:	4649      	mov	r1, r9
 8001892:	f7fe fd1b 	bl	80002cc <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	a326      	add	r3, pc, #152	@ (adr r3, 8001938 <compensate_pressure+0x288>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fff2 	bl	800088c <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff fa72 	bl	8000d98 <__aeabi_d2lz>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	var1 = (1 + var1/32768)*((double)dev->dig_P1);
 80018bc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da08      	bge.n	80018d6 <compensate_pressure+0x226>
 80018c4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018c8:	1851      	adds	r1, r2, r1
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	f143 0300 	adc.w	r3, r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0bd0      	lsrs	r0, r2, #15
 80018e0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80018e4:	13d9      	asrs	r1, r3, #15
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	1c51      	adds	r1, r2, #1
 80018ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80018ee:	f143 0300 	adc.w	r3, r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80018f8:	f7fe fe70 	bl	80005dc <__aeabi_l2d>
 80018fc:	4604      	mov	r4, r0
 80018fe:	460d      	mov	r5, r1
 8001900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001902:	88db      	ldrh	r3, [r3, #6]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe1d 	bl	8000544 <__aeabi_ui2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fe91 	bl	8000638 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff fa3b 	bl	8000d98 <__aeabi_d2lz>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (var1 == 0){
 800192a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800192e:	4313      	orrs	r3, r2
 8001930:	d10c      	bne.n	800194c <compensate_pressure+0x29c>
		return 0;
 8001932:	2300      	movs	r3, #0
 8001934:	e0f9      	b.n	8001b2a <compensate_pressure+0x47a>
 8001936:	bf00      	nop
 8001938:	00000000 	.word	0x00000000
 800193c:	41540002 	.word	0x41540002
 8001940:	40e00000 	.word	0x40e00000
 8001944:	40f00000 	.word	0x40f00000
 8001948:	41200000 	.word	0x41200000
	}

	p = 1048576 - (double)adc_press;
 800194c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800194e:	f7fe fe09 	bl	8000564 <__aeabi_i2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	4976      	ldr	r1, [pc, #472]	@ (8001b34 <compensate_pressure+0x484>)
 800195c:	f7fe fcb4 	bl	80002c8 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff fa16 	bl	8000d98 <__aeabi_d2lz>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	p = (p-(var2/4096))*6250/var1;
 8001974:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	2900      	cmp	r1, #0
 800197e:	da08      	bge.n	8001992 <compensate_pressure+0x2e2>
 8001980:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001984:	18c3      	adds	r3, r0, r3
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	f141 0300 	adc.w	r3, r1, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	0b02      	lsrs	r2, r0, #12
 800199c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80019a0:	130b      	asrs	r3, r1, #12
 80019a2:	2100      	movs	r1, #0
 80019a4:	4250      	negs	r0, r2
 80019a6:	6038      	str	r0, [r7, #0]
 80019a8:	eb61 0303 	sbc.w	r3, r1, r3
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019b6:	1884      	adds	r4, r0, r2
 80019b8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80019ba:	eb41 0303 	adc.w	r3, r1, r3
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c0:	f641 036a 	movw	r3, #6250	@ 0x186a
 80019c4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80019c8:	462a      	mov	r2, r5
 80019ca:	fb03 f202 	mul.w	r2, r3, r2
 80019ce:	2300      	movs	r3, #0
 80019d0:	4621      	mov	r1, r4
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	f641 026a 	movw	r2, #6250	@ 0x186a
 80019dc:	4621      	mov	r1, r4
 80019de:	fba1 1202 	umull	r1, r2, r1, r2
 80019e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019e4:	460a      	mov	r2, r1
 80019e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80019e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019ea:	4413      	add	r3, r2
 80019ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80019f6:	f7ff f967 	bl	8000cc8 <__aeabi_ldivmod>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	var1 = ((double)dev->dig_P9)*p*p/2147483648;
 8001a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a04:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdab 	bl	8000564 <__aeabi_i2d>
 8001a0e:	4604      	mov	r4, r0
 8001a10:	460d      	mov	r5, r1
 8001a12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a16:	f7fe fde1 	bl	80005dc <__aeabi_l2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fe09 	bl	8000638 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a32:	f7fe fdd3 	bl	80005dc <__aeabi_l2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7fe fdfb 	bl	8000638 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b38 <compensate_pressure+0x488>)
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f99c 	bl	8000d98 <__aeabi_d2lz>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	var2 = p*((double)dev->dig_P8)/32768;
 8001a68:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001a6c:	f7fe fdb6 	bl	80005dc <__aeabi_l2d>
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a76:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd72 	bl	8000564 <__aeabi_i2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fdd6 	bl	8000638 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <compensate_pressure+0x48c>)
 8001a9a:	f7fe fef7 	bl	800088c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f977 	bl	8000d98 <__aeabi_d2lz>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	p = p + (var1 + var2 + ((double)dev->dig_P7))/16;
 8001ab2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001ab6:	f7fe fd91 	bl	80005dc <__aeabi_l2d>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ac6:	1886      	adds	r6, r0, r2
 8001ac8:	623e      	str	r6, [r7, #32]
 8001aca:	eb41 0303 	adc.w	r3, r1, r3
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ad4:	f7fe fd82 	bl	80005dc <__aeabi_l2d>
 8001ad8:	4680      	mov	r8, r0
 8001ada:	4689      	mov	r9, r1
 8001adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ade:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd3e 	bl	8000564 <__aeabi_i2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4640      	mov	r0, r8
 8001aee:	4649      	mov	r1, r9
 8001af0:	f7fe fbec 	bl	80002cc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <compensate_pressure+0x490>)
 8001b02:	f7fe fec3 	bl	800088c <__aeabi_ddiv>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbdd 	bl	80002cc <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f93d 	bl	8000d98 <__aeabi_d2lz>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	return p*256;
 8001b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b28:	021b      	lsls	r3, r3, #8
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	376c      	adds	r7, #108	@ 0x6c
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b34:	41300000 	.word	0x41300000
 8001b38:	41e00000 	.word	0x41e00000
 8001b3c:	40e00000 	.word	0x40e00000
 8001b40:	40300000 	.word	0x40300000

08001b44 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001b56:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	039a      	lsls	r2, r3, #14
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b62:	051b      	lsls	r3, r3, #20
 8001b64:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001b7a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001b82:	4611      	mov	r1, r2
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	fb01 f202 	mul.w	r2, r1, r2
 8001b8a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	7f09      	ldrb	r1, [r1, #28]
 8001b90:	4608      	mov	r0, r1
 8001b92:	6979      	ldr	r1, [r7, #20]
 8001b94:	fb00 f101 	mul.w	r1, r0, r1
 8001b98:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b9a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b9e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ba2:	1292      	asrs	r2, r2, #10
 8001ba4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001bae:	fb01 f202 	mul.w	r2, r1, r2
 8001bb2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001bb6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	13db      	asrs	r3, r3, #15
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	13d2      	asrs	r2, r2, #15
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	7e12      	ldrb	r2, [r2, #24]
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001be2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001bea:	bfa8      	it	ge
 8001bec:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001bf0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	131b      	asrs	r3, r3, #12
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b08c      	sub	sp, #48	@ 0x30
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c16:	2b60      	cmp	r3, #96	@ 0x60
 8001c18:	d007      	beq.n	8001c2a <bmp280_read_fixed+0x28>
		if (humidity)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <bmp280_read_fixed+0x32>
 8001c30:	2308      	movs	r3, #8
 8001c32:	e000      	b.n	8001c36 <bmp280_read_fixed+0x34>
 8001c34:	2306      	movs	r3, #6
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f107 0218 	add.w	r2, r7, #24
 8001c40:	21f7      	movs	r1, #247	@ 0xf7
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fb1f 	bl	8001286 <read_data>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <bmp280_read_fixed+0x50>
		return false;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e038      	b.n	8001cc4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001c52:	7e3b      	ldrb	r3, [r7, #24]
 8001c54:	031a      	lsls	r2, r3, #12
 8001c56:	7e7b      	ldrb	r3, [r7, #25]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	7eba      	ldrb	r2, [r7, #26]
 8001c5e:	0912      	lsrs	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	4313      	orrs	r3, r2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001c66:	7efb      	ldrb	r3, [r7, #27]
 8001c68:	031a      	lsls	r2, r3, #12
 8001c6a:	7f3b      	ldrb	r3, [r7, #28]
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	7f7a      	ldrb	r2, [r7, #29]
 8001c72:	0912      	lsrs	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	4313      	orrs	r3, r2
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fcdb 	bl	800163e <compensate_temperature>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	461a      	mov	r2, r3
 8001c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7ff fd0b 	bl	80016b0 <compensate_pressure>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00d      	beq.n	8001cc2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001ca6:	7fbb      	ldrb	r3, [r7, #30]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	7ffa      	ldrb	r2, [r7, #31]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff ff44 	bl	8001b44 <compensate_humidity>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3730      	adds	r7, #48	@ 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <bmp280_read_float+0x1a>
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	e000      	b.n	8001ce8 <bmp280_read_float+0x1c>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f107 0218 	add.w	r2, r7, #24
 8001cec:	f107 011c 	add.w	r1, r7, #28
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff ff86 	bl	8001c02 <bmp280_read_fixed>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d028      	beq.n	8001d4e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001d58 <bmp280_read_float+0x8c>
 8001d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d1e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001d5c <bmp280_read_float+0x90>
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d3c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001d60 <bmp280_read_float+0x94>
 8001d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <bmp280_read_float+0x84>
	}

	return false;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	42c80000 	.word	0x42c80000
 8001d5c:	43800000 	.word	0x43800000
 8001d60:	44800000 	.word	0x44800000

08001d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	200b      	movs	r0, #11
 8001d8c:	f002 ffe3 	bl	8004d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d90:	200b      	movs	r0, #11
 8001d92:	f002 fffc 	bl	8004d8e <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a40      	ldr	r2, [pc, #256]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a39      	ldr	r2, [pc, #228]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b37      	ldr	r3, [pc, #220]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b33      	ldr	r3, [pc, #204]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a32      	ldr	r2, [pc, #200]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIGGER_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2160      	movs	r1, #96	@ 0x60
 8001e2e:	4826      	ldr	r0, [pc, #152]	@ (8001ec8 <MX_GPIO_Init+0x124>)
 8001e30:	f003 fd12 	bl	8005858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	4824      	ldr	r0, [pc, #144]	@ (8001ecc <MX_GPIO_Init+0x128>)
 8001e3a:	f003 fd0d 	bl	8005858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	481e      	ldr	r0, [pc, #120]	@ (8001ed0 <MX_GPIO_Init+0x12c>)
 8001e56:	f003 fb53 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIGGER_Pin;
 8001e5a:	2360      	movs	r3, #96	@ 0x60
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <MX_GPIO_Init+0x124>)
 8001e72:	f003 fb45 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	480f      	ldr	r0, [pc, #60]	@ (8001ec8 <MX_GPIO_Init+0x124>)
 8001e8a:	f003 fb39 	bl	8005500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <MX_GPIO_Init+0x128>)
 8001ea6:	f003 fb2b 	bl	8005500 <HAL_GPIO_Init>



  /* USER CODE BEGIN MX_GPIO_Init_2 */
   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2028      	movs	r0, #40	@ 0x28
 8001eb0:	f002 ff51 	bl	8004d56 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eb4:	2028      	movs	r0, #40	@ 0x28
 8001eb6:	f002 ff6a 	bl	8004d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	@ 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800

08001ed4 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 2 */
void EXTI15_10_IRQHandler(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ed8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001edc:	f003 fcf0 	bl	80058c0 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f003 fce5 	bl	80058f0 <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f000 fe88 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200002ec 	.word	0x200002ec
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	00061a80 	.word	0x00061a80

08001f40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	@ 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a30      	ldr	r2, [pc, #192]	@ (8002020 <HAL_I2C_MspInit+0xe0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d15a      	bne.n	8002018 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b2c      	ldr	r3, [pc, #176]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f90:	2304      	movs	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4823      	ldr	r0, [pc, #140]	@ (8002028 <HAL_I2C_MspInit+0xe8>)
 8001f9c:	f003 fab0 	bl	8005500 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001faa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_I2C_MspInit+0xe4>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_I2C_MspInit+0xf0>)
 8001fc0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ffc:	480b      	ldr	r0, [pc, #44]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8001ffe:	f002 fee1 	bl	8004dc4 <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002008:	f000 fe1a 	bl	8002c40 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a07      	ldr	r2, [pc, #28]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8002010:	639a      	str	r2, [r3, #56]	@ 0x38
 8002012:	4a06      	ldr	r2, [pc, #24]	@ (800202c <HAL_I2C_MspInit+0xec>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40005400 	.word	0x40005400
 8002024:	40023800 	.word	0x40023800
 8002028:	40020400 	.word	0x40020400
 800202c:	20000340 	.word	0x20000340
 8002030:	40026010 	.word	0x40026010

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002038:	f002 f9ca 	bl	80043d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800203c:	f000 f870 	bl	8002120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002040:	f7ff feb0 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002044:	f7ff fe8e 	bl	8001d64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002048:	f001 fd24 	bl	8003a94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800204c:	f7ff ff4a 	bl	8001ee4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002050:	f001 fba4 	bl	800379c <MX_TIM2_Init>
  MX_ADC1_Init();
 8002054:	f7ff f836 	bl	80010c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002058:	f001 fb00 	bl	800365c <MX_TIM1_Init>
  MX_TIM6_Init();
 800205c:	f001 fc3a 	bl	80038d4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002060:	f001 fbea 	bl	8003838 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


 // INICIALIZAÇÕES
  //BMP
  bmp280_init_default_params(&bmp280.params);
 8002064:	4823      	ldr	r0, [pc, #140]	@ (80020f4 <main+0xc0>)
 8002066:	f7ff f8c3 	bl	80011f0 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800206a:	4b23      	ldr	r3, [pc, #140]	@ (80020f8 <main+0xc4>)
 800206c:	2276      	movs	r2, #118	@ 0x76
 800206e:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <main+0xc4>)
 8002072:	4a22      	ldr	r2, [pc, #136]	@ (80020fc <main+0xc8>)
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
  while(!bmp280_init(&bmp280, &bmp280.params))
 8002076:	e001      	b.n	800207c <main+0x48>


  SSD1306_Init ();
 8002078:	f001 fda8 	bl	8003bcc <SSD1306_Init>
  while(!bmp280_init(&bmp280, &bmp280.params))
 800207c:	491d      	ldr	r1, [pc, #116]	@ (80020f4 <main+0xc0>)
 800207e:	481e      	ldr	r0, [pc, #120]	@ (80020f8 <main+0xc4>)
 8002080:	f7ff fa30 	bl	80014e4 <bmp280_init>
 8002084:	4603      	mov	r3, r0
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f3      	bne.n	8002078 <main+0x44>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002090:	2100      	movs	r1, #0
 8002092:	481b      	ldr	r0, [pc, #108]	@ (8002100 <main+0xcc>)
 8002094:	f006 f93c 	bl	8008310 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8002098:	481a      	ldr	r0, [pc, #104]	@ (8002104 <main+0xd0>)
 800209a:	f002 fa73 	bl	8004584 <HAL_ADC_Start>
  while (MPU6050_Init(&hi2c1) == 1);
 800209e:	bf00      	nop
 80020a0:	4816      	ldr	r0, [pc, #88]	@ (80020fc <main+0xc8>)
 80020a2:	f000 fdd3 	bl	8002c4c <MPU6050_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d0f9      	beq.n	80020a0 <main+0x6c>
  System_Start();
 80020ac:	f000 fa1c 	bl	80024e8 <System_Start>

  HAL_TIM_Base_Start(&htim3);
 80020b0:	4815      	ldr	r0, [pc, #84]	@ (8002108 <main+0xd4>)
 80020b2:	f005 fffb 	bl	80080ac <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // TRIG com valor baixo
 80020b6:	2200      	movs	r2, #0
 80020b8:	2140      	movs	r1, #64	@ 0x40
 80020ba:	4814      	ldr	r0, [pc, #80]	@ (800210c <main+0xd8>)
 80020bc:	f003 fbcc 	bl	8005858 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 80020c0:	4813      	ldr	r0, [pc, #76]	@ (8002110 <main+0xdc>)
 80020c2:	f006 f85b 	bl	800817c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80020c6:	4813      	ldr	r0, [pc, #76]	@ (8002114 <main+0xe0>)
 80020c8:	f006 f858 	bl	800817c <HAL_TIM_Base_Start_IT>
  {




	  if(flagit==1){
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <main+0xe4>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <main+0xa6>
		  Update_Screen();
 80020d4:	f000 fb56 	bl	8002784 <Update_Screen>
 80020d8:	e005      	b.n	80020e6 <main+0xb2>
	  }
	  else if(flagBmp==1){
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <main+0xe8>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <main+0xb2>
		  Update_BMP();
 80020e2:	f000 fa7d 	bl	80025e0 <Update_BMP>

	  }
	  Pos_Servo();
 80020e6:	f000 fc23 	bl	8002930 <Pos_Servo>
	  HAL_Delay(10);
 80020ea:	200a      	movs	r0, #10
 80020ec:	f002 f9e2 	bl	80044b4 <HAL_Delay>
	  if(flagit==1){
 80020f0:	e7ec      	b.n	80020cc <main+0x98>
 80020f2:	bf00      	nop
 80020f4:	200004b8 	.word	0x200004b8
 80020f8:	2000048c 	.word	0x2000048c
 80020fc:	200002ec 	.word	0x200002ec
 8002100:	200004ec 	.word	0x200004ec
 8002104:	200002a4 	.word	0x200002a4
 8002108:	2000057c 	.word	0x2000057c
 800210c:	40020000 	.word	0x40020000
 8002110:	200005c4 	.word	0x200005c4
 8002114:	20000534 	.word	0x20000534
 8002118:	20000479 	.word	0x20000479
 800211c:	2000047a 	.word	0x2000047a

08002120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b094      	sub	sp, #80	@ 0x50
 8002124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	2234      	movs	r2, #52	@ 0x34
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f008 f897 	bl	800a262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	4b2a      	ldr	r3, [pc, #168]	@ (80021f4 <SystemClock_Config+0xd4>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <SystemClock_Config+0xd4>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002152:	6413      	str	r3, [r2, #64]	@ 0x40
 8002154:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <SystemClock_Config+0xd4>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4b24      	ldr	r3, [pc, #144]	@ (80021f8 <SystemClock_Config+0xd8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800216c:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <SystemClock_Config+0xd8>)
 800216e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <SystemClock_Config+0xd8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002180:	2302      	movs	r3, #2
 8002182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002184:	2301      	movs	r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002188:	2310      	movs	r3, #16
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218c:	2302      	movs	r3, #2
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002194:	2310      	movs	r3, #16
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002198:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800219c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800219e:	2304      	movs	r3, #4
 80021a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021a2:	2302      	movs	r3, #2
 80021a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021a6:	2302      	movs	r3, #2
 80021a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4618      	mov	r0, r3
 80021b0:	f005 fc8e 	bl	8007ad0 <HAL_RCC_OscConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80021ba:	f000 fd41 	bl	8002c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021be:	230f      	movs	r3, #15
 80021c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c2:	2302      	movs	r3, #2
 80021c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 f92e 	bl	800743c <HAL_RCC_ClockConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80021e6:	f000 fd2b 	bl	8002c40 <Error_Handler>
  }
}
 80021ea:	bf00      	nop
 80021ec:	3750      	adds	r7, #80	@ 0x50
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000

080021fc <Screens>:

/* USER CODE BEGIN 4 */


void Screens(){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0

	if(tela ==0){
 8002200:	4ba7      	ldr	r3, [pc, #668]	@ (80024a0 <Screens+0x2a4>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d17e      	bne.n	8002306 <Screens+0x10a>

		SSD1306_Clear();
 8002208:	f002 f83f 	bl	800428a <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 800220c:	2100      	movs	r1, #0
 800220e:	2000      	movs	r0, #0
 8002210:	f001 fe46 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Giroscopio:",&Font_7x10, 1);
 8002214:	2201      	movs	r2, #1
 8002216:	49a3      	ldr	r1, [pc, #652]	@ (80024a4 <Screens+0x2a8>)
 8002218:	48a3      	ldr	r0, [pc, #652]	@ (80024a8 <Screens+0x2ac>)
 800221a:	f001 fed5 	bl	8003fc8 <SSD1306_Puts>

		SSD1306_GotoXY (0,17);
 800221e:	2111      	movs	r1, #17
 8002220:	2000      	movs	r0, #0
 8002222:	f001 fe3d 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 8002226:	2201      	movs	r2, #1
 8002228:	499e      	ldr	r1, [pc, #632]	@ (80024a4 <Screens+0x2a8>)
 800222a:	48a0      	ldr	r0, [pc, #640]	@ (80024ac <Screens+0x2b0>)
 800222c:	f001 fecc 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 18, 2, SSD1306_COLOR_WHITE);
 8002230:	2301      	movs	r3, #1
 8002232:	2202      	movs	r2, #2
 8002234:	2112      	movs	r1, #18
 8002236:	204a      	movs	r0, #74	@ 0x4a
 8002238:	f001 feeb 	bl	8004012 <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,17);
 800223c:	2111      	movs	r1, #17
 800223e:	204d      	movs	r0, #77	@ 0x4d
 8002240:	f001 fe2e 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 8002244:	2201      	movs	r2, #1
 8002246:	4997      	ldr	r1, [pc, #604]	@ (80024a4 <Screens+0x2a8>)
 8002248:	4899      	ldr	r0, [pc, #612]	@ (80024b0 <Screens+0x2b4>)
 800224a:	f001 febd 	bl	8003fc8 <SSD1306_Puts>


		SSD1306_GotoXY (0,29);
 800224e:	211d      	movs	r1, #29
 8002250:	2000      	movs	r0, #0
 8002252:	f001 fe25 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 8002256:	2201      	movs	r2, #1
 8002258:	4992      	ldr	r1, [pc, #584]	@ (80024a4 <Screens+0x2a8>)
 800225a:	4896      	ldr	r0, [pc, #600]	@ (80024b4 <Screens+0x2b8>)
 800225c:	f001 feb4 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 30, 2, SSD1306_COLOR_WHITE);
 8002260:	2301      	movs	r3, #1
 8002262:	2202      	movs	r2, #2
 8002264:	211e      	movs	r1, #30
 8002266:	204a      	movs	r0, #74	@ 0x4a
 8002268:	f001 fed3 	bl	8004012 <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,29);
 800226c:	211d      	movs	r1, #29
 800226e:	204d      	movs	r0, #77	@ 0x4d
 8002270:	f001 fe16 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 8002274:	2201      	movs	r2, #1
 8002276:	498b      	ldr	r1, [pc, #556]	@ (80024a4 <Screens+0x2a8>)
 8002278:	488d      	ldr	r0, [pc, #564]	@ (80024b0 <Screens+0x2b4>)
 800227a:	f001 fea5 	bl	8003fc8 <SSD1306_Puts>

		SSD1306_GotoXY (0,41);
 800227e:	2129      	movs	r1, #41	@ 0x29
 8002280:	2000      	movs	r0, #0
 8002282:	f001 fe0d 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Z:",&Font_7x10, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	4986      	ldr	r1, [pc, #536]	@ (80024a4 <Screens+0x2a8>)
 800228a:	488b      	ldr	r0, [pc, #556]	@ (80024b8 <Screens+0x2bc>)
 800228c:	f001 fe9c 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 42, 2, SSD1306_COLOR_WHITE);
 8002290:	2301      	movs	r3, #1
 8002292:	2202      	movs	r2, #2
 8002294:	212a      	movs	r1, #42	@ 0x2a
 8002296:	204a      	movs	r0, #74	@ 0x4a
 8002298:	f001 febb 	bl	8004012 <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,41);
 800229c:	2129      	movs	r1, #41	@ 0x29
 800229e:	204d      	movs	r0, #77	@ 0x4d
 80022a0:	f001 fdfe 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 80022a4:	2201      	movs	r2, #1
 80022a6:	497f      	ldr	r1, [pc, #508]	@ (80024a4 <Screens+0x2a8>)
 80022a8:	4881      	ldr	r0, [pc, #516]	@ (80024b0 <Screens+0x2b4>)
 80022aa:	f001 fe8d 	bl	8003fc8 <SSD1306_Puts>

		SSD1306_GotoXY (0,53);
 80022ae:	2135      	movs	r1, #53	@ 0x35
 80022b0:	2000      	movs	r0, #0
 80022b2:	f001 fdf5 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Tmp:",&Font_7x10, 1);
 80022b6:	2201      	movs	r2, #1
 80022b8:	497a      	ldr	r1, [pc, #488]	@ (80024a4 <Screens+0x2a8>)
 80022ba:	4880      	ldr	r0, [pc, #512]	@ (80024bc <Screens+0x2c0>)
 80022bc:	f001 fe84 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_DrawCircle(46, 54, 2, SSD1306_COLOR_WHITE);
 80022c0:	2301      	movs	r3, #1
 80022c2:	2202      	movs	r2, #2
 80022c4:	2136      	movs	r1, #54	@ 0x36
 80022c6:	202e      	movs	r0, #46	@ 0x2e
 80022c8:	f001 fea3 	bl	8004012 <SSD1306_DrawCircle>
		SSD1306_GotoXY (49,53);
 80022cc:	2135      	movs	r1, #53	@ 0x35
 80022ce:	2031      	movs	r0, #49	@ 0x31
 80022d0:	f001 fde6 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("C",&Font_7x10, 1);
 80022d4:	2201      	movs	r2, #1
 80022d6:	4973      	ldr	r1, [pc, #460]	@ (80024a4 <Screens+0x2a8>)
 80022d8:	4879      	ldr	r0, [pc, #484]	@ (80024c0 <Screens+0x2c4>)
 80022da:	f001 fe75 	bl	8003fc8 <SSD1306_Puts>

		SSD1306_GotoXY (64,53);
 80022de:	2135      	movs	r1, #53	@ 0x35
 80022e0:	2040      	movs	r0, #64	@ 0x40
 80022e2:	f001 fddd 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("P:",&Font_7x10, 1);
 80022e6:	2201      	movs	r2, #1
 80022e8:	496e      	ldr	r1, [pc, #440]	@ (80024a4 <Screens+0x2a8>)
 80022ea:	4876      	ldr	r0, [pc, #472]	@ (80024c4 <Screens+0x2c8>)
 80022ec:	f001 fe6c 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (99,53);
 80022f0:	2135      	movs	r1, #53	@ 0x35
 80022f2:	2063      	movs	r0, #99	@ 0x63
 80022f4:	f001 fdd4 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("kPa",&Font_7x10, 1);
 80022f8:	2201      	movs	r2, #1
 80022fa:	496a      	ldr	r1, [pc, #424]	@ (80024a4 <Screens+0x2a8>)
 80022fc:	4872      	ldr	r0, [pc, #456]	@ (80024c8 <Screens+0x2cc>)
 80022fe:	f001 fe63 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002302:	f001 fd27 	bl	8003d54 <SSD1306_UpdateScreen>
	}

	if(tela ==1){
 8002306:	4b66      	ldr	r3, [pc, #408]	@ (80024a0 <Screens+0x2a4>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d16c      	bne.n	80023e8 <Screens+0x1ec>
			SSD1306_Clear();
 800230e:	f001 ffbc 	bl	800428a <SSD1306_Clear>
			SSD1306_GotoXY (0,0);
 8002312:	2100      	movs	r1, #0
 8002314:	2000      	movs	r0, #0
 8002316:	f001 fdc3 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("Acelerometro:",&Font_7x10, 1);
 800231a:	2201      	movs	r2, #1
 800231c:	4961      	ldr	r1, [pc, #388]	@ (80024a4 <Screens+0x2a8>)
 800231e:	486b      	ldr	r0, [pc, #428]	@ (80024cc <Screens+0x2d0>)
 8002320:	f001 fe52 	bl	8003fc8 <SSD1306_Puts>

			SSD1306_GotoXY (0,17);
 8002324:	2111      	movs	r1, #17
 8002326:	2000      	movs	r0, #0
 8002328:	f001 fdba 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("X:",&Font_7x10, 1);
 800232c:	2201      	movs	r2, #1
 800232e:	495d      	ldr	r1, [pc, #372]	@ (80024a4 <Screens+0x2a8>)
 8002330:	485e      	ldr	r0, [pc, #376]	@ (80024ac <Screens+0x2b0>)
 8002332:	f001 fe49 	bl	8003fc8 <SSD1306_Puts>
			SSD1306_GotoXY (65,17);
 8002336:	2111      	movs	r1, #17
 8002338:	2041      	movs	r0, #65	@ 0x41
 800233a:	f001 fdb1 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("g",&Font_7x10, 1);
 800233e:	2201      	movs	r2, #1
 8002340:	4958      	ldr	r1, [pc, #352]	@ (80024a4 <Screens+0x2a8>)
 8002342:	4863      	ldr	r0, [pc, #396]	@ (80024d0 <Screens+0x2d4>)
 8002344:	f001 fe40 	bl	8003fc8 <SSD1306_Puts>


			SSD1306_GotoXY (0,29);
 8002348:	211d      	movs	r1, #29
 800234a:	2000      	movs	r0, #0
 800234c:	f001 fda8 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("Y:",&Font_7x10, 1);
 8002350:	2201      	movs	r2, #1
 8002352:	4954      	ldr	r1, [pc, #336]	@ (80024a4 <Screens+0x2a8>)
 8002354:	4857      	ldr	r0, [pc, #348]	@ (80024b4 <Screens+0x2b8>)
 8002356:	f001 fe37 	bl	8003fc8 <SSD1306_Puts>
			SSD1306_GotoXY (65,29);
 800235a:	211d      	movs	r1, #29
 800235c:	2041      	movs	r0, #65	@ 0x41
 800235e:	f001 fd9f 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("g",&Font_7x10, 1);
 8002362:	2201      	movs	r2, #1
 8002364:	494f      	ldr	r1, [pc, #316]	@ (80024a4 <Screens+0x2a8>)
 8002366:	485a      	ldr	r0, [pc, #360]	@ (80024d0 <Screens+0x2d4>)
 8002368:	f001 fe2e 	bl	8003fc8 <SSD1306_Puts>

			SSD1306_GotoXY (0,41);
 800236c:	2129      	movs	r1, #41	@ 0x29
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fd96 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("Z:",&Font_7x10, 1);
 8002374:	2201      	movs	r2, #1
 8002376:	494b      	ldr	r1, [pc, #300]	@ (80024a4 <Screens+0x2a8>)
 8002378:	484f      	ldr	r0, [pc, #316]	@ (80024b8 <Screens+0x2bc>)
 800237a:	f001 fe25 	bl	8003fc8 <SSD1306_Puts>
			SSD1306_GotoXY (65,41);
 800237e:	2129      	movs	r1, #41	@ 0x29
 8002380:	2041      	movs	r0, #65	@ 0x41
 8002382:	f001 fd8d 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("g",&Font_7x10, 1);
 8002386:	2201      	movs	r2, #1
 8002388:	4946      	ldr	r1, [pc, #280]	@ (80024a4 <Screens+0x2a8>)
 800238a:	4851      	ldr	r0, [pc, #324]	@ (80024d0 <Screens+0x2d4>)
 800238c:	f001 fe1c 	bl	8003fc8 <SSD1306_Puts>

			SSD1306_GotoXY (0,53);
 8002390:	2135      	movs	r1, #53	@ 0x35
 8002392:	2000      	movs	r0, #0
 8002394:	f001 fd84 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("Tmp:",&Font_7x10, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	4942      	ldr	r1, [pc, #264]	@ (80024a4 <Screens+0x2a8>)
 800239c:	4847      	ldr	r0, [pc, #284]	@ (80024bc <Screens+0x2c0>)
 800239e:	f001 fe13 	bl	8003fc8 <SSD1306_Puts>
			SSD1306_DrawCircle(46, 54, 2, SSD1306_COLOR_WHITE);
 80023a2:	2301      	movs	r3, #1
 80023a4:	2202      	movs	r2, #2
 80023a6:	2136      	movs	r1, #54	@ 0x36
 80023a8:	202e      	movs	r0, #46	@ 0x2e
 80023aa:	f001 fe32 	bl	8004012 <SSD1306_DrawCircle>
			SSD1306_GotoXY (49,53);
 80023ae:	2135      	movs	r1, #53	@ 0x35
 80023b0:	2031      	movs	r0, #49	@ 0x31
 80023b2:	f001 fd75 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("C",&Font_7x10, 1);
 80023b6:	2201      	movs	r2, #1
 80023b8:	493a      	ldr	r1, [pc, #232]	@ (80024a4 <Screens+0x2a8>)
 80023ba:	4841      	ldr	r0, [pc, #260]	@ (80024c0 <Screens+0x2c4>)
 80023bc:	f001 fe04 	bl	8003fc8 <SSD1306_Puts>

			SSD1306_GotoXY (64,53);
 80023c0:	2135      	movs	r1, #53	@ 0x35
 80023c2:	2040      	movs	r0, #64	@ 0x40
 80023c4:	f001 fd6c 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("P:",&Font_7x10, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	4936      	ldr	r1, [pc, #216]	@ (80024a4 <Screens+0x2a8>)
 80023cc:	483d      	ldr	r0, [pc, #244]	@ (80024c4 <Screens+0x2c8>)
 80023ce:	f001 fdfb 	bl	8003fc8 <SSD1306_Puts>
			SSD1306_GotoXY (99,53);
 80023d2:	2135      	movs	r1, #53	@ 0x35
 80023d4:	2063      	movs	r0, #99	@ 0x63
 80023d6:	f001 fd63 	bl	8003ea0 <SSD1306_GotoXY>
			SSD1306_Puts ("kPa",&Font_7x10, 1);
 80023da:	2201      	movs	r2, #1
 80023dc:	4931      	ldr	r1, [pc, #196]	@ (80024a4 <Screens+0x2a8>)
 80023de:	483a      	ldr	r0, [pc, #232]	@ (80024c8 <Screens+0x2cc>)
 80023e0:	f001 fdf2 	bl	8003fc8 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80023e4:	f001 fcb6 	bl	8003d54 <SSD1306_UpdateScreen>
		}

	if(tela ==2){
 80023e8:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <Screens+0x2a4>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d154      	bne.n	800249a <Screens+0x29e>
		SSD1306_Clear();
 80023f0:	f001 ff4b 	bl	800428a <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	2000      	movs	r0, #0
 80023f8:	f001 fd52 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Angulo & Altitude:",&Font_7x10, 1);
 80023fc:	2201      	movs	r2, #1
 80023fe:	4929      	ldr	r1, [pc, #164]	@ (80024a4 <Screens+0x2a8>)
 8002400:	4834      	ldr	r0, [pc, #208]	@ (80024d4 <Screens+0x2d8>)
 8002402:	f001 fde1 	bl	8003fc8 <SSD1306_Puts>


		SSD1306_GotoXY (0,17);
 8002406:	2111      	movs	r1, #17
 8002408:	2000      	movs	r0, #0
 800240a:	f001 fd49 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 800240e:	2201      	movs	r2, #1
 8002410:	4924      	ldr	r1, [pc, #144]	@ (80024a4 <Screens+0x2a8>)
 8002412:	4826      	ldr	r0, [pc, #152]	@ (80024ac <Screens+0x2b0>)
 8002414:	f001 fdd8 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (65,17);
 8002418:	2111      	movs	r1, #17
 800241a:	2041      	movs	r0, #65	@ 0x41
 800241c:	f001 fd40 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_DrawCircle(74, 18, 2, SSD1306_COLOR_WHITE);
 8002420:	2301      	movs	r3, #1
 8002422:	2202      	movs	r2, #2
 8002424:	2112      	movs	r1, #18
 8002426:	204a      	movs	r0, #74	@ 0x4a
 8002428:	f001 fdf3 	bl	8004012 <SSD1306_DrawCircle>

		SSD1306_GotoXY (0,29);
 800242c:	211d      	movs	r1, #29
 800242e:	2000      	movs	r0, #0
 8002430:	f001 fd36 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 8002434:	2201      	movs	r2, #1
 8002436:	491b      	ldr	r1, [pc, #108]	@ (80024a4 <Screens+0x2a8>)
 8002438:	481e      	ldr	r0, [pc, #120]	@ (80024b4 <Screens+0x2b8>)
 800243a:	f001 fdc5 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 30, 2, SSD1306_COLOR_WHITE);
 800243e:	2301      	movs	r3, #1
 8002440:	2202      	movs	r2, #2
 8002442:	211e      	movs	r1, #30
 8002444:	204a      	movs	r0, #74	@ 0x4a
 8002446:	f001 fde4 	bl	8004012 <SSD1306_DrawCircle>
		SSD1306_UpdateScreen();
 800244a:	f001 fc83 	bl	8003d54 <SSD1306_UpdateScreen>

		SSD1306_GotoXY (0,41);
 800244e:	2129      	movs	r1, #41	@ 0x29
 8002450:	2000      	movs	r0, #0
 8002452:	f001 fd25 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("h:",&Font_7x10, 1);
 8002456:	2201      	movs	r2, #1
 8002458:	4912      	ldr	r1, [pc, #72]	@ (80024a4 <Screens+0x2a8>)
 800245a:	481f      	ldr	r0, [pc, #124]	@ (80024d8 <Screens+0x2dc>)
 800245c:	f001 fdb4 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (74,41);
 8002460:	2129      	movs	r1, #41	@ 0x29
 8002462:	204a      	movs	r0, #74	@ 0x4a
 8002464:	f001 fd1c 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("m",&Font_7x10, 1);
 8002468:	2201      	movs	r2, #1
 800246a:	490e      	ldr	r1, [pc, #56]	@ (80024a4 <Screens+0x2a8>)
 800246c:	481b      	ldr	r0, [pc, #108]	@ (80024dc <Screens+0x2e0>)
 800246e:	f001 fdab 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002472:	f001 fc6f 	bl	8003d54 <SSD1306_UpdateScreen>

		SSD1306_GotoXY (0,53);
 8002476:	2135      	movs	r1, #53	@ 0x35
 8002478:	2000      	movs	r0, #0
 800247a:	f001 fd11 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("Tanque:",&Font_7x10, 1);
 800247e:	2201      	movs	r2, #1
 8002480:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <Screens+0x2a8>)
 8002482:	4817      	ldr	r0, [pc, #92]	@ (80024e0 <Screens+0x2e4>)
 8002484:	f001 fda0 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (70,53);
 8002488:	2135      	movs	r1, #53	@ 0x35
 800248a:	2046      	movs	r0, #70	@ 0x46
 800248c:	f001 fd08 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts ("l",&Font_7x10, 1);
 8002490:	2201      	movs	r2, #1
 8002492:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <Screens+0x2a8>)
 8002494:	4813      	ldr	r0, [pc, #76]	@ (80024e4 <Screens+0x2e8>)
 8002496:	f001 fd97 	bl	8003fc8 <SSD1306_Puts>


	}


}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000478 	.word	0x20000478
 80024a4:	2000009c 	.word	0x2000009c
 80024a8:	0800d7f0 	.word	0x0800d7f0
 80024ac:	0800d7fc 	.word	0x0800d7fc
 80024b0:	0800d800 	.word	0x0800d800
 80024b4:	0800d804 	.word	0x0800d804
 80024b8:	0800d808 	.word	0x0800d808
 80024bc:	0800d80c 	.word	0x0800d80c
 80024c0:	0800d814 	.word	0x0800d814
 80024c4:	0800d818 	.word	0x0800d818
 80024c8:	0800d81c 	.word	0x0800d81c
 80024cc:	0800d820 	.word	0x0800d820
 80024d0:	0800d830 	.word	0x0800d830
 80024d4:	0800d834 	.word	0x0800d834
 80024d8:	0800d848 	.word	0x0800d848
 80024dc:	0800d84c 	.word	0x0800d84c
 80024e0:	0800d850 	.word	0x0800d850
 80024e4:	0800d858 	.word	0x0800d858

080024e8 <System_Start>:

void System_Start(void){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af02      	add	r7, sp, #8
	SSD1306_Init ();
 80024ee:	f001 fb6d 	bl	8003bcc <SSD1306_Init>
	SSD1306_Clear();
 80024f2:	f001 feca 	bl	800428a <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, aviao, 128, 64, SSD1306_COLOR_WHITE);
 80024f6:	2301      	movs	r3, #1
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	2340      	movs	r3, #64	@ 0x40
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <System_Start+0x40>)
 8002502:	2100      	movs	r1, #0
 8002504:	2000      	movs	r0, #0
 8002506:	f001 fe58 	bl	80041ba <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800250a:	f001 fc23 	bl	8003d54 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 800250e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002512:	f001 ffcf 	bl	80044b4 <HAL_Delay>
	tela=0;
 8002516:	4b05      	ldr	r3, [pc, #20]	@ (800252c <System_Start+0x44>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
	Screens();
 800251c:	f7ff fe6e 	bl	80021fc <Screens>

}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	0800d874 	.word	0x0800d874
 800252c:	20000478 	.word	0x20000478

08002530 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002540:	d112      	bne.n	8002568 <HAL_GPIO_EXTI_Callback+0x38>
		tela = (tela+1)%3;
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x40>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_GPIO_EXTI_Callback+0x44>)
 800254a:	fb83 3102 	smull	r3, r1, r3, r2
 800254e:	17d3      	asrs	r3, r2, #31
 8002550:	1ac9      	subs	r1, r1, r3
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	1ad1      	subs	r1, r2, r3
 800255a:	b2ca      	uxtb	r2, r1
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_GPIO_EXTI_Callback+0x40>)
 800255e:	701a      	strb	r2, [r3, #0]
		Screens();
 8002560:	f7ff fe4c 	bl	80021fc <Screens>
		Update_BMP();
 8002564:	f000 f83c 	bl	80025e0 <Update_BMP>
	}
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000478 	.word	0x20000478
 8002574:	55555556 	.word	0x55555556

08002578 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

	if (hi2c->Instance == I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_I2C_MemRxCpltCallback+0x20>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d102      	bne.n	8002590 <HAL_I2C_MemRxCpltCallback+0x18>
	    {

	        MPU6050_Process_Data(&MPU6050);
 800258a:	4804      	ldr	r0, [pc, #16]	@ (800259c <HAL_I2C_MemRxCpltCallback+0x24>)
 800258c:	f000 fbcc 	bl	8002d28 <MPU6050_Process_Data>
	    }
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40005400 	.word	0x40005400
 800259c:	200003a0 	.word	0x200003a0

080025a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2){
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b0:	d102      	bne.n	80025b8 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagit=1;
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
	}
	if (htim->Instance == TIM6){
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <HAL_TIM_PeriodElapsedCallback+0x28>
		flagBmp=1;
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
	}

}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	20000479 	.word	0x20000479
 80025d8:	40001000 	.word	0x40001000
 80025dc:	2000047a 	.word	0x2000047a

080025e0 <Update_BMP>:
//Atualiza o BMP e o nível do líquido
void Update_BMP(){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
	double volume= Ler_Nivel();
 80025e6:	f000 fa53 	bl	8002a90 <Ler_Nivel>
 80025ea:	ee10 3a10 	vmov	r3, s0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffca 	bl	8000588 <__aeabi_f2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	e9c7 2300 	strd	r2, r3, [r7]
	bmp280_read_float(&bmp280, &temperatura, &pressao, &humidade);
 80025fc:	4b50      	ldr	r3, [pc, #320]	@ (8002740 <Update_BMP+0x160>)
 80025fe:	4a51      	ldr	r2, [pc, #324]	@ (8002744 <Update_BMP+0x164>)
 8002600:	4951      	ldr	r1, [pc, #324]	@ (8002748 <Update_BMP+0x168>)
 8002602:	4852      	ldr	r0, [pc, #328]	@ (800274c <Update_BMP+0x16c>)
 8002604:	f7ff fb62 	bl	8001ccc <bmp280_read_float>
	altitude = 44330.0 * (1.0 - pow((pressao / (100*1013.25)), 0.1903));
 8002608:	4b4e      	ldr	r3, [pc, #312]	@ (8002744 <Update_BMP+0x164>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ffbb 	bl	8000588 <__aeabi_f2d>
 8002612:	a345      	add	r3, pc, #276	@ (adr r3, 8002728 <Update_BMP+0x148>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	f7fe f938 	bl	800088c <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	ec43 2b17 	vmov	d7, r2, r3
 8002624:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8002730 <Update_BMP+0x150>
 8002628:	eeb0 0a47 	vmov.f32	s0, s14
 800262c:	eef0 0a67 	vmov.f32	s1, s15
 8002630:	f009 fee4 	bl	800c3fc <pow>
 8002634:	ec53 2b10 	vmov	r2, r3, d0
 8002638:	f04f 0000 	mov.w	r0, #0
 800263c:	4944      	ldr	r1, [pc, #272]	@ (8002750 <Update_BMP+0x170>)
 800263e:	f7fd fe43 	bl	80002c8 <__aeabi_dsub>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	a33b      	add	r3, pc, #236	@ (adr r3, 8002738 <Update_BMP+0x158>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fff2 	bl	8000638 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fae4 	bl	8000c28 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	4a3c      	ldr	r2, [pc, #240]	@ (8002754 <Update_BMP+0x174>)
 8002664:	6013      	str	r3, [r2, #0]
	sprintf(Buffer1, "%.0f", temperatura);
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <Update_BMP+0x168>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff8c 	bl	8000588 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4938      	ldr	r1, [pc, #224]	@ (8002758 <Update_BMP+0x178>)
 8002676:	4839      	ldr	r0, [pc, #228]	@ (800275c <Update_BMP+0x17c>)
 8002678:	f007 fd90 	bl	800a19c <siprintf>
	sprintf(Buffer2, "%.0f", pressao/1000);
 800267c:	4b31      	ldr	r3, [pc, #196]	@ (8002744 <Update_BMP+0x164>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002760 <Update_BMP+0x180>
 8002686:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800268a:	ee16 0a90 	vmov	r0, s13
 800268e:	f7fd ff7b 	bl	8000588 <__aeabi_f2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4930      	ldr	r1, [pc, #192]	@ (8002758 <Update_BMP+0x178>)
 8002698:	4832      	ldr	r0, [pc, #200]	@ (8002764 <Update_BMP+0x184>)
 800269a:	f007 fd7f 	bl	800a19c <siprintf>
	sprintf(Buffer3, "%.1f", altitude);
 800269e:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <Update_BMP+0x174>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff70 	bl	8000588 <__aeabi_f2d>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	492e      	ldr	r1, [pc, #184]	@ (8002768 <Update_BMP+0x188>)
 80026ae:	482f      	ldr	r0, [pc, #188]	@ (800276c <Update_BMP+0x18c>)
 80026b0:	f007 fd74 	bl	800a19c <siprintf>
	sprintf(Buffer4, "%.2f", volume);
 80026b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b8:	492d      	ldr	r1, [pc, #180]	@ (8002770 <Update_BMP+0x190>)
 80026ba:	482e      	ldr	r0, [pc, #184]	@ (8002774 <Update_BMP+0x194>)
 80026bc:	f007 fd6e 	bl	800a19c <siprintf>




	//Atualiza a altitude e o nivel na tela 2
	if(tela==2){
 80026c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <Update_BMP+0x198>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d112      	bne.n	80026ee <Update_BMP+0x10e>
		SSD1306_GotoXY (21,41);
 80026c8:	2129      	movs	r1, #41	@ 0x29
 80026ca:	2015      	movs	r0, #21
 80026cc:	f001 fbe8 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 80026d0:	2201      	movs	r2, #1
 80026d2:	492a      	ldr	r1, [pc, #168]	@ (800277c <Update_BMP+0x19c>)
 80026d4:	4825      	ldr	r0, [pc, #148]	@ (800276c <Update_BMP+0x18c>)
 80026d6:	f001 fc77 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (49,53);
 80026da:	2135      	movs	r1, #53	@ 0x35
 80026dc:	2031      	movs	r0, #49	@ 0x31
 80026de:	f001 fbdf 	bl	8003ea0 <SSD1306_GotoXY>

		SSD1306_Puts (Buffer4,&Font_7x10, 1);
 80026e2:	2201      	movs	r2, #1
 80026e4:	4925      	ldr	r1, [pc, #148]	@ (800277c <Update_BMP+0x19c>)
 80026e6:	4823      	ldr	r0, [pc, #140]	@ (8002774 <Update_BMP+0x194>)
 80026e8:	f001 fc6e 	bl	8003fc8 <SSD1306_Puts>
 80026ec:	e011      	b.n	8002712 <Update_BMP+0x132>
	}
	else{
		//Atualiza temperatura e pressão em todas as telas
		SSD1306_GotoXY (28,53);
 80026ee:	2135      	movs	r1, #53	@ 0x35
 80026f0:	201c      	movs	r0, #28
 80026f2:	f001 fbd5 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 80026f6:	2201      	movs	r2, #1
 80026f8:	4920      	ldr	r1, [pc, #128]	@ (800277c <Update_BMP+0x19c>)
 80026fa:	4818      	ldr	r0, [pc, #96]	@ (800275c <Update_BMP+0x17c>)
 80026fc:	f001 fc64 	bl	8003fc8 <SSD1306_Puts>

		SSD1306_GotoXY (78,53);
 8002700:	2135      	movs	r1, #53	@ 0x35
 8002702:	204e      	movs	r0, #78	@ 0x4e
 8002704:	f001 fbcc 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 8002708:	2201      	movs	r2, #1
 800270a:	491c      	ldr	r1, [pc, #112]	@ (800277c <Update_BMP+0x19c>)
 800270c:	4815      	ldr	r0, [pc, #84]	@ (8002764 <Update_BMP+0x184>)
 800270e:	f001 fc5b 	bl	8003fc8 <SSD1306_Puts>
	}

	SSD1306_UpdateScreen();
 8002712:	f001 fb1f 	bl	8003d54 <SSD1306_UpdateScreen>
	flagBmp=0;
 8002716:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <Update_BMP+0x1a0>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	f3af 8000 	nop.w
 8002728:	00000000 	.word	0x00000000
 800272c:	40f8bcd0 	.word	0x40f8bcd0
 8002730:	1a36e2eb 	.word	0x1a36e2eb
 8002734:	3fc85bc0 	.word	0x3fc85bc0
 8002738:	00000000 	.word	0x00000000
 800273c:	40e5a540 	.word	0x40e5a540
 8002740:	200004c8 	.word	0x200004c8
 8002744:	200004c4 	.word	0x200004c4
 8002748:	200004c0 	.word	0x200004c0
 800274c:	2000048c 	.word	0x2000048c
 8002750:	3ff00000 	.word	0x3ff00000
 8002754:	200004cc 	.word	0x200004cc
 8002758:	0800d85c 	.word	0x0800d85c
 800275c:	200003f8 	.word	0x200003f8
 8002760:	447a0000 	.word	0x447a0000
 8002764:	20000418 	.word	0x20000418
 8002768:	0800d864 	.word	0x0800d864
 800276c:	20000438 	.word	0x20000438
 8002770:	0800d86c 	.word	0x0800d86c
 8002774:	20000458 	.word	0x20000458
 8002778:	20000478 	.word	0x20000478
 800277c:	2000009c 	.word	0x2000009c
 8002780:	2000047a 	.word	0x2000047a

08002784 <Update_Screen>:


void Update_Screen(){
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1);
 8002788:	485c      	ldr	r0, [pc, #368]	@ (80028fc <Update_Screen+0x178>)
 800278a:	f000 fab7 	bl	8002cfc <MPU6050_Read_All>

	if(temperatura > 27){
 800278e:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <Update_Screen+0x17c>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 8002798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	dd02      	ble.n	80027a8 <Update_Screen+0x24>
		alerta();
 80027a2:	f000 f94b 	bl	8002a3c <alerta>
 80027a6:	e009      	b.n	80027bc <Update_Screen+0x38>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2101      	movs	r1, #1
 80027ac:	4855      	ldr	r0, [pc, #340]	@ (8002904 <Update_Screen+0x180>)
 80027ae:	f003 f853 	bl	8005858 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2120      	movs	r1, #32
 80027b6:	4854      	ldr	r0, [pc, #336]	@ (8002908 <Update_Screen+0x184>)
 80027b8:	f003 f84e 	bl	8005858 <HAL_GPIO_WritePin>
	}
	if(tela ==0){
 80027bc:	4b53      	ldr	r3, [pc, #332]	@ (800290c <Update_Screen+0x188>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d135      	bne.n	8002830 <Update_Screen+0xac>
		flagit=0;
 80027c4:	4b52      	ldr	r3, [pc, #328]	@ (8002910 <Update_Screen+0x18c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.Gx);
 80027ca:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <Update_Screen+0x190>)
 80027cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80027d0:	4951      	ldr	r1, [pc, #324]	@ (8002918 <Update_Screen+0x194>)
 80027d2:	4852      	ldr	r0, [pc, #328]	@ (800291c <Update_Screen+0x198>)
 80027d4:	f007 fce2 	bl	800a19c <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.Gy);
 80027d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002914 <Update_Screen+0x190>)
 80027da:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80027de:	494e      	ldr	r1, [pc, #312]	@ (8002918 <Update_Screen+0x194>)
 80027e0:	484f      	ldr	r0, [pc, #316]	@ (8002920 <Update_Screen+0x19c>)
 80027e2:	f007 fcdb 	bl	800a19c <siprintf>
		sprintf(Buffer3, "%.2f", MPU6050.Gz);
 80027e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <Update_Screen+0x190>)
 80027e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80027ec:	494a      	ldr	r1, [pc, #296]	@ (8002918 <Update_Screen+0x194>)
 80027ee:	484d      	ldr	r0, [pc, #308]	@ (8002924 <Update_Screen+0x1a0>)
 80027f0:	f007 fcd4 	bl	800a19c <siprintf>
		SSD1306_GotoXY (21,17);
 80027f4:	2111      	movs	r1, #17
 80027f6:	2015      	movs	r0, #21
 80027f8:	f001 fb52 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 80027fc:	2201      	movs	r2, #1
 80027fe:	494a      	ldr	r1, [pc, #296]	@ (8002928 <Update_Screen+0x1a4>)
 8002800:	4846      	ldr	r0, [pc, #280]	@ (800291c <Update_Screen+0x198>)
 8002802:	f001 fbe1 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 8002806:	211d      	movs	r1, #29
 8002808:	2015      	movs	r0, #21
 800280a:	f001 fb49 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 800280e:	2201      	movs	r2, #1
 8002810:	4945      	ldr	r1, [pc, #276]	@ (8002928 <Update_Screen+0x1a4>)
 8002812:	4843      	ldr	r0, [pc, #268]	@ (8002920 <Update_Screen+0x19c>)
 8002814:	f001 fbd8 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (21,41);
 8002818:	2129      	movs	r1, #41	@ 0x29
 800281a:	2015      	movs	r0, #21
 800281c:	f001 fb40 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 8002820:	2201      	movs	r2, #1
 8002822:	4941      	ldr	r1, [pc, #260]	@ (8002928 <Update_Screen+0x1a4>)
 8002824:	483f      	ldr	r0, [pc, #252]	@ (8002924 <Update_Screen+0x1a0>)
 8002826:	f001 fbcf 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800282a:	f001 fa93 	bl	8003d54 <SSD1306_UpdateScreen>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
		SSD1306_GotoXY (21,29);
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
		SSD1306_UpdateScreen();
	}
}
 800282e:	e062      	b.n	80028f6 <Update_Screen+0x172>
	else if(tela ==1){
 8002830:	4b36      	ldr	r3, [pc, #216]	@ (800290c <Update_Screen+0x188>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d135      	bne.n	80028a4 <Update_Screen+0x120>
		flagit=0;
 8002838:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <Update_Screen+0x18c>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.Ax);
 800283e:	4b35      	ldr	r3, [pc, #212]	@ (8002914 <Update_Screen+0x190>)
 8002840:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002844:	4934      	ldr	r1, [pc, #208]	@ (8002918 <Update_Screen+0x194>)
 8002846:	4835      	ldr	r0, [pc, #212]	@ (800291c <Update_Screen+0x198>)
 8002848:	f007 fca8 	bl	800a19c <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.Ay);
 800284c:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <Update_Screen+0x190>)
 800284e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002852:	4931      	ldr	r1, [pc, #196]	@ (8002918 <Update_Screen+0x194>)
 8002854:	4832      	ldr	r0, [pc, #200]	@ (8002920 <Update_Screen+0x19c>)
 8002856:	f007 fca1 	bl	800a19c <siprintf>
		sprintf(Buffer3, "%.2f", MPU6050.Az);
 800285a:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <Update_Screen+0x190>)
 800285c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002860:	492d      	ldr	r1, [pc, #180]	@ (8002918 <Update_Screen+0x194>)
 8002862:	4830      	ldr	r0, [pc, #192]	@ (8002924 <Update_Screen+0x1a0>)
 8002864:	f007 fc9a 	bl	800a19c <siprintf>
		SSD1306_GotoXY (21,17);
 8002868:	2111      	movs	r1, #17
 800286a:	2015      	movs	r0, #21
 800286c:	f001 fb18 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 8002870:	2201      	movs	r2, #1
 8002872:	492d      	ldr	r1, [pc, #180]	@ (8002928 <Update_Screen+0x1a4>)
 8002874:	4829      	ldr	r0, [pc, #164]	@ (800291c <Update_Screen+0x198>)
 8002876:	f001 fba7 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 800287a:	211d      	movs	r1, #29
 800287c:	2015      	movs	r0, #21
 800287e:	f001 fb0f 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 8002882:	2201      	movs	r2, #1
 8002884:	4928      	ldr	r1, [pc, #160]	@ (8002928 <Update_Screen+0x1a4>)
 8002886:	4826      	ldr	r0, [pc, #152]	@ (8002920 <Update_Screen+0x19c>)
 8002888:	f001 fb9e 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (21,41);
 800288c:	2129      	movs	r1, #41	@ 0x29
 800288e:	2015      	movs	r0, #21
 8002890:	f001 fb06 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 8002894:	2201      	movs	r2, #1
 8002896:	4924      	ldr	r1, [pc, #144]	@ (8002928 <Update_Screen+0x1a4>)
 8002898:	4822      	ldr	r0, [pc, #136]	@ (8002924 <Update_Screen+0x1a0>)
 800289a:	f001 fb95 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800289e:	f001 fa59 	bl	8003d54 <SSD1306_UpdateScreen>
}
 80028a2:	e028      	b.n	80028f6 <Update_Screen+0x172>
	else if(tela ==2){
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <Update_Screen+0x188>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d124      	bne.n	80028f6 <Update_Screen+0x172>
		flagit=0;
 80028ac:	4b18      	ldr	r3, [pc, #96]	@ (8002910 <Update_Screen+0x18c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.KalmanAngleX);
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <Update_Screen+0x190>)
 80028b4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80028b8:	4917      	ldr	r1, [pc, #92]	@ (8002918 <Update_Screen+0x194>)
 80028ba:	4818      	ldr	r0, [pc, #96]	@ (800291c <Update_Screen+0x198>)
 80028bc:	f007 fc6e 	bl	800a19c <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.KalmanAngleY);
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <Update_Screen+0x190>)
 80028c2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80028c6:	4914      	ldr	r1, [pc, #80]	@ (8002918 <Update_Screen+0x194>)
 80028c8:	4815      	ldr	r0, [pc, #84]	@ (8002920 <Update_Screen+0x19c>)
 80028ca:	f007 fc67 	bl	800a19c <siprintf>
		SSD1306_GotoXY (21,17);
 80028ce:	2111      	movs	r1, #17
 80028d0:	2015      	movs	r0, #21
 80028d2:	f001 fae5 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 80028d6:	2201      	movs	r2, #1
 80028d8:	4913      	ldr	r1, [pc, #76]	@ (8002928 <Update_Screen+0x1a4>)
 80028da:	4810      	ldr	r0, [pc, #64]	@ (800291c <Update_Screen+0x198>)
 80028dc:	f001 fb74 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 80028e0:	211d      	movs	r1, #29
 80028e2:	2015      	movs	r0, #21
 80028e4:	f001 fadc 	bl	8003ea0 <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 80028e8:	2201      	movs	r2, #1
 80028ea:	490f      	ldr	r1, [pc, #60]	@ (8002928 <Update_Screen+0x1a4>)
 80028ec:	480c      	ldr	r0, [pc, #48]	@ (8002920 <Update_Screen+0x19c>)
 80028ee:	f001 fb6b 	bl	8003fc8 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80028f2:	f001 fa2f 	bl	8003d54 <SSD1306_UpdateScreen>
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200002ec 	.word	0x200002ec
 8002900:	200004c0 	.word	0x200004c0
 8002904:	40020400 	.word	0x40020400
 8002908:	40020000 	.word	0x40020000
 800290c:	20000478 	.word	0x20000478
 8002910:	20000479 	.word	0x20000479
 8002914:	200003a0 	.word	0x200003a0
 8002918:	0800d86c 	.word	0x0800d86c
 800291c:	200003f8 	.word	0x200003f8
 8002920:	20000418 	.word	0x20000418
 8002924:	20000438 	.word	0x20000438
 8002928:	2000009c 	.word	0x2000009c
 800292c:	00000000 	.word	0x00000000

08002930 <Pos_Servo>:

static void Pos_Servo(void){
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
    static float arr_suavizado =  460;  // Valor inicial

    uint32_t leitura = HAL_ADC_GetValue(&hadc1);
 8002936:	483e      	ldr	r0, [pc, #248]	@ (8002a30 <Pos_Servo+0x100>)
 8002938:	f001 fef6 	bl	8004728 <HAL_ADC_GetValue>
 800293c:	6078      	str	r0, [r7, #4]
    float arr;

    // Calcula o valor arr diretamente com base na leitura do ADC
    arr = (1900.0 / 3.3) * (leitura * 3.3 / 4095.0) + 460;
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd fe00 	bl	8000544 <__aeabi_ui2d>
 8002944:	a32e      	add	r3, pc, #184	@ (adr r3, 8002a00 <Pos_Servo+0xd0>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd fe75 	bl	8000638 <__aeabi_dmul>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	a32c      	add	r3, pc, #176	@ (adr r3, 8002a08 <Pos_Servo+0xd8>)
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f7fd ff96 	bl	800088c <__aeabi_ddiv>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	a329      	add	r3, pc, #164	@ (adr r3, 8002a10 <Pos_Servo+0xe0>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fd fe63 	bl	8000638 <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	a327      	add	r3, pc, #156	@ (adr r3, 8002a18 <Pos_Servo+0xe8>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fca4 	bl	80002cc <__adddf3>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f94c 	bl	8000c28 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	603b      	str	r3, [r7, #0]

    // Aplica suavização exponencial (filtro de baixa frequência)
    arr_suavizado = arr_suavizado * 0.85 + arr * 0.1;  // Fator de suavização (0.9 e 0.1)
 8002994:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <Pos_Servo+0x104>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fdf5 	bl	8000588 <__aeabi_f2d>
 800299e:	a320      	add	r3, pc, #128	@ (adr r3, 8002a20 <Pos_Servo+0xf0>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd fe48 	bl	8000638 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	6838      	ldr	r0, [r7, #0]
 80029b2:	f7fd fde9 	bl	8000588 <__aeabi_f2d>
 80029b6:	a31c      	add	r3, pc, #112	@ (adr r3, 8002a28 <Pos_Servo+0xf8>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fe3c 	bl	8000638 <__aeabi_dmul>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4620      	mov	r0, r4
 80029c6:	4629      	mov	r1, r5
 80029c8:	f7fd fc80 	bl	80002cc <__adddf3>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7fe f928 	bl	8000c28 <__aeabi_d2f>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a16      	ldr	r2, [pc, #88]	@ (8002a34 <Pos_Servo+0x104>)
 80029dc:	6013      	str	r3, [r2, #0]

    // Atualiza o PWM com o valor suavizado
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)arr_suavizado);
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <Pos_Servo+0x104>)
 80029e0:	edd3 7a00 	vldr	s15, [r3]
 80029e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e8:	ee17 3a90 	vmov	r3, s15
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <Pos_Servo+0x108>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}
 80029fc:	f3af 8000 	nop.w
 8002a00:	66666666 	.word	0x66666666
 8002a04:	400a6666 	.word	0x400a6666
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	40affe00 	.word	0x40affe00
 8002a10:	83e0f83e 	.word	0x83e0f83e
 8002a14:	4081fe0f 	.word	0x4081fe0f
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	407cc000 	.word	0x407cc000
 8002a20:	33333333 	.word	0x33333333
 8002a24:	3feb3333 	.word	0x3feb3333
 8002a28:	9999999a 	.word	0x9999999a
 8002a2c:	3fb99999 	.word	0x3fb99999
 8002a30:	200002a4 	.word	0x200002a4
 8002a34:	20000000 	.word	0x20000000
 8002a38:	200004ec 	.word	0x200004ec

08002a3c <alerta>:

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,arr);
	leitura_anterior = leitura;
}
*/
static void alerta(void){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0

	static uint8_t contador =0;
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002a40:	2120      	movs	r1, #32
 8002a42:	4810      	ldr	r0, [pc, #64]	@ (8002a84 <alerta+0x48>)
 8002a44:	f002 ff21 	bl	800588a <HAL_GPIO_TogglePin>
	if(contador ==7){
 8002a48:	4b0f      	ldr	r3, [pc, #60]	@ (8002a88 <alerta+0x4c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b07      	cmp	r3, #7
 8002a4e:	d105      	bne.n	8002a5c <alerta+0x20>
		HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 1);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2101      	movs	r1, #1
 8002a54:	480d      	ldr	r0, [pc, #52]	@ (8002a8c <alerta+0x50>)
 8002a56:	f002 feff 	bl	8005858 <HAL_GPIO_WritePin>
 8002a5a:	e00b      	b.n	8002a74 <alerta+0x38>
	}
	else if(contador ==15){
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <alerta+0x4c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0f      	cmp	r3, #15
 8002a62:	d107      	bne.n	8002a74 <alerta+0x38>
		HAL_GPIO_WritePin(GPIOB, BUZZER_Pin, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2101      	movs	r1, #1
 8002a68:	4808      	ldr	r0, [pc, #32]	@ (8002a8c <alerta+0x50>)
 8002a6a:	f002 fef5 	bl	8005858 <HAL_GPIO_WritePin>
		contador=0;
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <alerta+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
	}
	contador++;
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <alerta+0x4c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b02      	ldr	r3, [pc, #8]	@ (8002a88 <alerta+0x4c>)
 8002a7e:	701a      	strb	r2, [r3, #0]

}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40020000 	.word	0x40020000
 8002a88:	200004d0 	.word	0x200004d0
 8002a8c:	40020400 	.word	0x40020400

08002a90 <Ler_Nivel>:

static float Ler_Nivel(){
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08b      	sub	sp, #44	@ 0x2c
 8002a94:	af00      	add	r7, sp, #0

	const double capacidade = 28.4; // altura em cm
 8002a96:	a368      	add	r3, pc, #416	@ (adr r3, 8002c38 <Ler_Nivel+0x1a8>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	const double raio = 3.75; // diametro em cm
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c18 <Ler_Nivel+0x188>)
 8002aa6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double volume;
	double restante;
	const double PI = 3.141592;
 8002aaa:	a357      	add	r3, pc, #348	@ (adr r3, 8002c08 <Ler_Nivel+0x178>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);  // TRIG com valor alto para enviar o pulso sonoro
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2140      	movs	r1, #64	@ 0x40
 8002ab8:	4858      	ldr	r0, [pc, #352]	@ (8002c1c <Ler_Nivel+0x18c>)
 8002aba:	f002 fecd 	bl	8005858 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002abe:	4b58      	ldr	r3, [pc, #352]	@ (8002c20 <Ler_Nivel+0x190>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // espera de 10 milissegundos de acordo com o datasheet
 8002ac6:	bf00      	nop
 8002ac8:	4b55      	ldr	r3, [pc, #340]	@ (8002c20 <Ler_Nivel+0x190>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	d9fa      	bls.n	8002ac8 <Ler_Nivel+0x38>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);  // TRIG com valor baixo para parar de enviar o pulso sonoro
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2140      	movs	r1, #64	@ 0x40
 8002ad6:	4851      	ldr	r0, [pc, #324]	@ (8002c1c <Ler_Nivel+0x18c>)
 8002ad8:	f002 febe 	bl	8005858 <HAL_GPIO_WritePin>

	tmili = HAL_GetTick(); // evita loop infinito
 8002adc:	f001 fcde 	bl	800449c <HAL_GetTick>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a50      	ldr	r2, [pc, #320]	@ (8002c24 <Ler_Nivel+0x194>)
 8002ae4:	6013      	str	r3, [r2, #0]
	// espera até o ECHO tem valor alto
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && tmili + 10 >  HAL_GetTick());
 8002ae6:	bf00      	nop
 8002ae8:	2180      	movs	r1, #128	@ 0x80
 8002aea:	484c      	ldr	r0, [pc, #304]	@ (8002c1c <Ler_Nivel+0x18c>)
 8002aec:	f002 fe9c 	bl	8005828 <HAL_GPIO_ReadPin>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <Ler_Nivel+0x78>
 8002af6:	4b4b      	ldr	r3, [pc, #300]	@ (8002c24 <Ler_Nivel+0x194>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f103 040a 	add.w	r4, r3, #10
 8002afe:	f001 fccd 	bl	800449c <HAL_GetTick>
 8002b02:	4603      	mov	r3, r0
 8002b04:	429c      	cmp	r4, r3
 8002b06:	d8ef      	bhi.n	8002ae8 <Ler_Nivel+0x58>
	Valor1 = __HAL_TIM_GET_COUNTER (&htim3); // recebe o instante de tempo em que o ECHO recebe valor alto
 8002b08:	4b45      	ldr	r3, [pc, #276]	@ (8002c20 <Ler_Nivel+0x190>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	4a46      	ldr	r2, [pc, #280]	@ (8002c28 <Ler_Nivel+0x198>)
 8002b10:	6013      	str	r3, [r2, #0]

	tmili = HAL_GetTick(); // evita loop infinito
 8002b12:	f001 fcc3 	bl	800449c <HAL_GetTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a42      	ldr	r2, [pc, #264]	@ (8002c24 <Ler_Nivel+0x194>)
 8002b1a:	6013      	str	r3, [r2, #0]
	// espera até o ECHO ter valor baixo
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && tmili + 50 > HAL_GetTick());
 8002b1c:	bf00      	nop
 8002b1e:	2180      	movs	r1, #128	@ 0x80
 8002b20:	483e      	ldr	r0, [pc, #248]	@ (8002c1c <Ler_Nivel+0x18c>)
 8002b22:	f002 fe81 	bl	8005828 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <Ler_Nivel+0xae>
 8002b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c24 <Ler_Nivel+0x194>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8002b34:	f001 fcb2 	bl	800449c <HAL_GetTick>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	429c      	cmp	r4, r3
 8002b3c:	d8ef      	bhi.n	8002b1e <Ler_Nivel+0x8e>
	Valor2 = __HAL_TIM_GET_COUNTER (&htim3); // recebe o instante de tempo em que o ECHO recebeu valor baixo
 8002b3e:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <Ler_Nivel+0x190>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	4a39      	ldr	r2, [pc, #228]	@ (8002c2c <Ler_Nivel+0x19c>)
 8002b46:	6013      	str	r3, [r2, #0]

	Distancia = (Valor2-Valor1)* 0.0343/2; // cálculo da distância
 8002b48:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <Ler_Nivel+0x19c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <Ler_Nivel+0x198>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fcf6 	bl	8000544 <__aeabi_ui2d>
 8002b58:	a32d      	add	r3, pc, #180	@ (adr r3, 8002c10 <Ler_Nivel+0x180>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd fd6b 	bl	8000638 <__aeabi_dmul>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b72:	f7fd fe8b 	bl	800088c <__aeabi_ddiv>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f833 	bl	8000be8 <__aeabi_d2uiz>
 8002b82:	4603      	mov	r3, r0
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	4b2a      	ldr	r3, [pc, #168]	@ (8002c30 <Ler_Nivel+0x1a0>)
 8002b88:	801a      	strh	r2, [r3, #0]

	restante = capacidade - Distancia; // cálculo do nível de líquido restante
 8002b8a:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <Ler_Nivel+0x1a0>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fce8 	bl	8000564 <__aeabi_i2d>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b9c:	f7fd fb94 	bl	80002c8 <__aeabi_dsub>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	volume = PI * raio * raio * restante/1000; // cálculo do volume de líquido restante
 8002ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bb0:	f7fd fd42 	bl	8000638 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc0:	f7fd fd3a 	bl	8000638 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd0:	f7fd fd32 	bl	8000638 <__aeabi_dmul>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <Ler_Nivel+0x1a4>)
 8002be2:	f7fd fe53 	bl	800088c <__aeabi_ddiv>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	e9c7 2300 	strd	r2, r3, [r7]
	return(volume);
 8002bee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bf2:	f7fe f819 	bl	8000c28 <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	ee07 3a90 	vmov	s15, r3
}
 8002bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002c00:	372c      	adds	r7, #44	@ 0x2c
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	fc8b007a 	.word	0xfc8b007a
 8002c0c:	400921fa 	.word	0x400921fa
 8002c10:	04816f00 	.word	0x04816f00
 8002c14:	3fa18fc5 	.word	0x3fa18fc5
 8002c18:	400e0000 	.word	0x400e0000
 8002c1c:	40020000 	.word	0x40020000
 8002c20:	2000057c 	.word	0x2000057c
 8002c24:	2000047c 	.word	0x2000047c
 8002c28:	20000480 	.word	0x20000480
 8002c2c:	20000484 	.word	0x20000484
 8002c30:	20000488 	.word	0x20000488
 8002c34:	408f4000 	.word	0x408f4000
 8002c38:	66666666 	.word	0x66666666
 8002c3c:	403c6666 	.word	0x403c6666

08002c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c44:	b672      	cpsid	i
}
 8002c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <Error_Handler+0x8>

08002c4c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af04      	add	r7, sp, #16
 8002c52:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002c54:	2364      	movs	r3, #100	@ 0x64
 8002c56:	9302      	str	r3, [sp, #8]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	f107 030f 	add.w	r3, r7, #15
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2301      	movs	r3, #1
 8002c64:	2275      	movs	r2, #117	@ 0x75
 8002c66:	21d0      	movs	r1, #208	@ 0xd0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f003 f97d 	bl	8005f68 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b68      	cmp	r3, #104	@ 0x68
 8002c72:	d13d      	bne.n	8002cf0 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002c78:	2364      	movs	r3, #100	@ 0x64
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	f107 030e 	add.w	r3, r7, #14
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2301      	movs	r3, #1
 8002c88:	226b      	movs	r2, #107	@ 0x6b
 8002c8a:	21d0      	movs	r1, #208	@ 0xd0
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f003 f871 	bl	8005d74 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002c92:	2307      	movs	r3, #7
 8002c94:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002c96:	2364      	movs	r3, #100	@ 0x64
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f107 030e 	add.w	r3, r7, #14
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2219      	movs	r2, #25
 8002ca8:	21d0      	movs	r1, #208	@ 0xd0
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f003 f862 	bl	8005d74 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cb4:	2364      	movs	r3, #100	@ 0x64
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	2301      	movs	r3, #1
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	f107 030e 	add.w	r3, r7, #14
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	221c      	movs	r2, #28
 8002cc6:	21d0      	movs	r1, #208	@ 0xd0
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f003 f853 	bl	8005d74 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002cd2:	2364      	movs	r3, #100	@ 0x64
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	f107 030e 	add.w	r3, r7, #14
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	221b      	movs	r2, #27
 8002ce4:	21d0      	movs	r1, #208	@ 0xd0
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f003 f844 	bl	8005d74 <HAL_I2C_Mem_Write>
        return 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e000      	b.n	8002cf2 <MPU6050_Init+0xa6>
    }
    return 1;
 8002cf0:	2301      	movs	r3, #1
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]


    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14);
 8002d04:	230e      	movs	r3, #14
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <MPU6050_Read_All+0x24>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	223b      	movs	r2, #59	@ 0x3b
 8002d10:	21d0      	movs	r1, #208	@ 0xd0
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f003 fb5a 	bl	80063cc <HAL_I2C_Mem_Read_DMA>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200004d8 	.word	0x200004d8
 8002d24:	00000000 	.word	0x00000000

08002d28 <MPU6050_Process_Data>:

    //HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);

void MPU6050_Process_Data(MPU6050_t *DataStruct)  {
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b08c      	sub	sp, #48	@ 0x30
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]

    int16_t temp;
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002d32:	4b95      	ldr	r3, [pc, #596]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	b21a      	sxth	r2, r3
 8002d3a:	4b93      	ldr	r3, [pc, #588]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	b21b      	sxth	r3, r3
 8002d40:	4313      	orrs	r3, r2
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002d48:	4b8f      	ldr	r3, [pc, #572]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d4a:	789b      	ldrb	r3, [r3, #2]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	4b8d      	ldr	r3, [pc, #564]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d52:	78db      	ldrb	r3, [r3, #3]
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d60:	791b      	ldrb	r3, [r3, #4]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	b21a      	sxth	r2, r3
 8002d66:	4b88      	ldr	r3, [pc, #544]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d68:	795b      	ldrb	r3, [r3, #5]
 8002d6a:	b21b      	sxth	r3, r3
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002d74:	4b84      	ldr	r3, [pc, #528]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d76:	799b      	ldrb	r3, [r3, #6]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	4b82      	ldr	r3, [pc, #520]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d7e:	79db      	ldrb	r3, [r3, #7]
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	4313      	orrs	r3, r2
 8002d84:	84fb      	strh	r3, [r7, #38]	@ 0x26
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002d86:	4b80      	ldr	r3, [pc, #512]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d88:	7a1b      	ldrb	r3, [r3, #8]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d90:	7a5b      	ldrb	r3, [r3, #9]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b21a      	sxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002d9c:	4b7a      	ldr	r3, [pc, #488]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002d9e:	7a9b      	ldrb	r3, [r3, #10]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	4b78      	ldr	r3, [pc, #480]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002da6:	7adb      	ldrb	r3, [r3, #11]
 8002da8:	b21b      	sxth	r3, r3
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b21a      	sxth	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002db2:	4b75      	ldr	r3, [pc, #468]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002db4:	7b1b      	ldrb	r3, [r3, #12]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	b21a      	sxth	r2, r3
 8002dba:	4b73      	ldr	r3, [pc, #460]	@ (8002f88 <MPU6050_Process_Data+0x260>)
 8002dbc:	7b5b      	ldrb	r3, [r3, #13]
 8002dbe:	b21b      	sxth	r3, r3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbc8 	bl	8000564 <__aeabi_i2d>
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f8c <MPU6050_Process_Data+0x264>)
 8002dda:	f7fd fd57 	bl	800088c <__aeabi_ddiv>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fbb8 	bl	8000564 <__aeabi_i2d>
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	4b64      	ldr	r3, [pc, #400]	@ (8002f8c <MPU6050_Process_Data+0x264>)
 8002dfa:	f7fd fd47 	bl	800088c <__aeabi_ddiv>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fba8 	bl	8000564 <__aeabi_i2d>
 8002e14:	a356      	add	r3, pc, #344	@ (adr r3, 8002f70 <MPU6050_Process_Data+0x248>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fd37 	bl	800088c <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002e28:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e34:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8002f90 <MPU6050_Process_Data+0x268>
 8002e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e3c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002f94 <MPU6050_Process_Data+0x26c>
 8002e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb87 	bl	8000564 <__aeabi_i2d>
 8002e56:	a348      	add	r3, pc, #288	@ (adr r3, 8002f78 <MPU6050_Process_Data+0x250>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fd16 	bl	800088c <__aeabi_ddiv>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb77 	bl	8000564 <__aeabi_i2d>
 8002e76:	a340      	add	r3, pc, #256	@ (adr r3, 8002f78 <MPU6050_Process_Data+0x250>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fd06 	bl	800088c <__aeabi_ddiv>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fb67 	bl	8000564 <__aeabi_i2d>
 8002e96:	a338      	add	r3, pc, #224	@ (adr r3, 8002f78 <MPU6050_Process_Data+0x250>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd fcf6 	bl	800088c <__aeabi_ddiv>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002eaa:	f001 faf7 	bl	800449c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b39      	ldr	r3, [pc, #228]	@ (8002f98 <MPU6050_Process_Data+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb44 	bl	8000544 <__aeabi_ui2d>
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <MPU6050_Process_Data+0x274>)
 8002ec2:	f7fd fce3 	bl	800088c <__aeabi_ddiv>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 8002ece:	f001 fae5 	bl	800449c <HAL_GetTick>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a30      	ldr	r2, [pc, #192]	@ (8002f98 <MPU6050_Process_Data+0x270>)
 8002ed6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb30 	bl	8000564 <__aeabi_i2d>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	ec43 2b10 	vmov	d0, r2, r3
 8002f0c:	f009 fae6 	bl	800c4dc <sqrt>
 8002f10:	ed87 0b04 	vstr	d0, [r7, #16]
    if (roll_sqrt != 0.0)
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f20:	f7fd fdf2 	bl	8000b08 <__aeabi_dcmpeq>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d13a      	bne.n	8002fa0 <MPU6050_Process_Data+0x278>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fb17 	bl	8000564 <__aeabi_i2d>
 8002f36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f3a:	f7fd fca7 	bl	800088c <__aeabi_ddiv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	ec43 2b17 	vmov	d7, r2, r3
 8002f46:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4a:	eef0 0a67 	vmov.f32	s1, s15
 8002f4e:	f009 faf3 	bl	800c538 <atan>
 8002f52:	ec51 0b10 	vmov	r0, r1, d0
 8002f56:	a30a      	add	r3, pc, #40	@ (adr r3, 8002f80 <MPU6050_Process_Data+0x258>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fb6c 	bl	8000638 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002f68:	e020      	b.n	8002fac <MPU6050_Process_Data+0x284>
 8002f6a:	bf00      	nop
 8002f6c:	f3af 8000 	nop.w
 8002f70:	00000000 	.word	0x00000000
 8002f74:	40cc2900 	.word	0x40cc2900
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	40606000 	.word	0x40606000
 8002f80:	1a63c1f8 	.word	0x1a63c1f8
 8002f84:	404ca5dc 	.word	0x404ca5dc
 8002f88:	200004d8 	.word	0x200004d8
 8002f8c:	40d00000 	.word	0x40d00000
 8002f90:	43aa0000 	.word	0x43aa0000
 8002f94:	42121eb8 	.word	0x42121eb8
 8002f98:	200004d4 	.word	0x200004d4
 8002f9c:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fad5 	bl	8000564 <__aeabi_i2d>
 8002fba:	4682      	mov	sl, r0
 8002fbc:	468b      	mov	fp, r1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd facd 	bl	8000564 <__aeabi_i2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	ec43 2b11 	vmov	d1, r2, r3
 8002fd2:	ec4b ab10 	vmov	d0, sl, fp
 8002fd6:	f009 fa0f 	bl	800c3f8 <atan2>
 8002fda:	ec51 0b10 	vmov	r0, r1, d0
 8002fde:	a348      	add	r3, pc, #288	@ (adr r3, 8003100 <MPU6050_Process_Data+0x3d8>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fb28 	bl	8000638 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80030f0 <MPU6050_Process_Data+0x3c8>)
 8002ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ffa:	f7fd fd8f 	bl	8000b1c <__aeabi_dcmplt>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <MPU6050_Process_Data+0x2f2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <MPU6050_Process_Data+0x3cc>)
 8003010:	f7fd fda2 	bl	8000b58 <__aeabi_dcmpgt>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d114      	bne.n	8003044 <MPU6050_Process_Data+0x31c>
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	4b35      	ldr	r3, [pc, #212]	@ (80030f4 <MPU6050_Process_Data+0x3cc>)
 8003020:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003024:	f7fd fd98 	bl	8000b58 <__aeabi_dcmpgt>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d015      	beq.n	800305a <MPU6050_Process_Data+0x332>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <MPU6050_Process_Data+0x3c8>)
 800303a:	f7fd fd6f 	bl	8000b1c <__aeabi_dcmplt>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <MPU6050_Process_Data+0x332>
    {
        KalmanY.angle = pitch;
 8003044:	492c      	ldr	r1, [pc, #176]	@ (80030f8 <MPU6050_Process_Data+0x3d0>)
 8003046:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800304a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003054:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8003058:	e014      	b.n	8003084 <MPU6050_Process_Data+0x35c>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8003060:	ed97 2b06 	vldr	d2, [r7, #24]
 8003064:	eeb0 1a47 	vmov.f32	s2, s14
 8003068:	eef0 1a67 	vmov.f32	s3, s15
 800306c:	ed97 0b02 	vldr	d0, [r7, #8]
 8003070:	4821      	ldr	r0, [pc, #132]	@ (80030f8 <MPU6050_Process_Data+0x3d0>)
 8003072:	f000 f849 	bl	8003108 <Kalman_getAngle>
 8003076:	eeb0 7a40 	vmov.f32	s14, s0
 800307a:	eef0 7a60 	vmov.f32	s15, s1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800308a:	4690      	mov	r8, r2
 800308c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <MPU6050_Process_Data+0x3cc>)
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd fd5d 	bl	8000b58 <__aeabi_dcmpgt>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <MPU6050_Process_Data+0x38e>
        DataStruct->Gx = -DataStruct->Gx;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80030aa:	4614      	mov	r4, r2
 80030ac:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80030bc:	ed97 2b06 	vldr	d2, [r7, #24]
 80030c0:	eeb0 1a47 	vmov.f32	s2, s14
 80030c4:	eef0 1a67 	vmov.f32	s3, s15
 80030c8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80030cc:	480b      	ldr	r0, [pc, #44]	@ (80030fc <MPU6050_Process_Data+0x3d4>)
 80030ce:	f000 f81b 	bl	8003108 <Kalman_getAngle>
 80030d2:	eeb0 7a40 	vmov.f32	s14, s0
 80030d6:	eef0 7a60 	vmov.f32	s15, s1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 80030e0:	bf00      	nop
 80030e2:	3730      	adds	r7, #48	@ 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ea:	bf00      	nop
 80030ec:	f3af 8000 	nop.w
 80030f0:	c0568000 	.word	0xc0568000
 80030f4:	40568000 	.word	0x40568000
 80030f8:	20000050 	.word	0x20000050
 80030fc:	20000008 	.word	0x20000008
 8003100:	1a63c1f8 	.word	0x1a63c1f8
 8003104:	404ca5dc 	.word	0x404ca5dc

08003108 <Kalman_getAngle>:




double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b096      	sub	sp, #88	@ 0x58
 800310c:	af00      	add	r7, sp, #0
 800310e:	61f8      	str	r0, [r7, #28]
 8003110:	ed87 0b04 	vstr	d0, [r7, #16]
 8003114:	ed87 1b02 	vstr	d1, [r7, #8]
 8003118:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003126:	f7fd f8cf 	bl	80002c8 <__aeabi_dsub>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800313c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003140:	f7fd fa7a 	bl	8000638 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f8be 	bl	80002cc <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	69f9      	ldr	r1, [r7, #28]
 8003156:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800316a:	f7fd fa65 	bl	8000638 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800317c:	f7fd f8a4 	bl	80002c8 <__aeabi_dsub>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800318e:	f7fd f89b 	bl	80002c8 <__aeabi_dsub>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fd f894 	bl	80002cc <__adddf3>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031b0:	f7fd fa42 	bl	8000638 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4620      	mov	r0, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7fd f886 	bl	80002cc <__adddf3>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	69f9      	ldr	r1, [r7, #28]
 80031c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80031d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031da:	f7fd fa2d 	bl	8000638 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7fd f86f 	bl	80002c8 <__aeabi_dsub>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003204:	f7fd fa18 	bl	8000638 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fd f85a 	bl	80002c8 <__aeabi_dsub>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	69f9      	ldr	r1, [r7, #28]
 800321a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800322a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800322e:	f7fd fa03 	bl	8000638 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4620      	mov	r0, r4
 8003238:	4629      	mov	r1, r5
 800323a:	f7fd f847 	bl	80002cc <__adddf3>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	69f9      	ldr	r1, [r7, #28]
 8003244:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003254:	f7fd f83a 	bl	80002cc <__adddf3>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003266:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800326a:	f7fd fb0f 	bl	800088c <__aeabi_ddiv>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800327c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003280:	f7fd fb04 	bl	800088c <__aeabi_ddiv>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003296:	f7fd f817 	bl	80002c8 <__aeabi_dsub>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80032a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80032ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032b0:	f7fd f9c2 	bl	8000638 <__aeabi_dmul>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4620      	mov	r0, r4
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fd f806 	bl	80002cc <__adddf3>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	69f9      	ldr	r1, [r7, #28]
 80032c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80032d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032d8:	f7fd f9ae 	bl	8000638 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fc fff2 	bl	80002cc <__adddf3>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	69f9      	ldr	r1, [r7, #28]
 80032ee:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80032f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003302:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800330c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003314:	f7fd f990 	bl	8000638 <__aeabi_dmul>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4620      	mov	r0, r4
 800331e:	4629      	mov	r1, r5
 8003320:	f7fc ffd2 	bl	80002c8 <__aeabi_dsub>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	69f9      	ldr	r1, [r7, #28]
 800332a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003334:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800333c:	f7fd f97c 	bl	8000638 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4620      	mov	r0, r4
 8003346:	4629      	mov	r1, r5
 8003348:	f7fc ffbe 	bl	80002c8 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	69f9      	ldr	r1, [r7, #28]
 8003352:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800335c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003364:	f7fd f968 	bl	8000638 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fc ffaa 	bl	80002c8 <__aeabi_dsub>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	69f9      	ldr	r1, [r7, #28]
 800337a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003384:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003388:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800338c:	f7fd f954 	bl	8000638 <__aeabi_dmul>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4620      	mov	r0, r4
 8003396:	4629      	mov	r1, r5
 8003398:	f7fc ff96 	bl	80002c8 <__aeabi_dsub>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	69f9      	ldr	r1, [r7, #28]
 80033a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033ac:	ec43 2b17 	vmov	d7, r2, r3
};
 80033b0:	eeb0 0a47 	vmov.f32	s0, s14
 80033b4:	eef0 0a67 	vmov.f32	s1, s15
 80033b8:	3758      	adds	r7, #88	@ 0x58
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_MspInit+0x4c>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <HAL_MspInit+0x4c>)
 80033d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_MspInit+0x4c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <HAL_MspInit+0x4c>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <HAL_MspInit+0x4c>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_MspInit+0x4c>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033fe:	2007      	movs	r0, #7
 8003400:	f001 fc9e 	bl	8004d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800

08003410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <NMI_Handler+0x4>

08003418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <HardFault_Handler+0x4>

08003420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <MemManage_Handler+0x4>

08003428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <BusFault_Handler+0x4>

08003430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <UsageFault_Handler+0x4>

08003438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003466:	f001 f805 	bl	8004474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <DMA1_Stream0_IRQHandler+0x10>)
 8003476:	f001 fdcd 	bl	8005014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000340 	.word	0x20000340

08003484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <TIM2_IRQHandler+0x10>)
 800348a:	f005 f809 	bl	80084a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000534 	.word	0x20000534

08003498 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800349c:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <TIM6_DAC_IRQHandler+0x10>)
 800349e:	f004 ffff 	bl	80084a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200005c4 	.word	0x200005c4

080034ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return 1;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_kill>:

int _kill(int pid, int sig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034c6:	f006 ff1f 	bl	800a308 <__errno>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2216      	movs	r2, #22
 80034ce:	601a      	str	r2, [r3, #0]
  return -1;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_exit>:

void _exit (int status)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ffe7 	bl	80034bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <_exit+0x12>

080034f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e00a      	b.n	800351a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003504:	f3af 8000 	nop.w
 8003508:	4601      	mov	r1, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	60ba      	str	r2, [r7, #8]
 8003510:	b2ca      	uxtb	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbf0      	blt.n	8003504 <_read+0x12>
  }

  return len;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e009      	b.n	8003552 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	60ba      	str	r2, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	dbf1      	blt.n	800353e <_write+0x12>
  }
  return len;
 800355a:	687b      	ldr	r3, [r7, #4]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_close>:

int _close(int file)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800358c:	605a      	str	r2, [r3, #4]
  return 0;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_isatty>:

int _isatty(int file)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035a4:	2301      	movs	r3, #1
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d4:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <_sbrk+0x5c>)
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <_sbrk+0x60>)
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <_sbrk+0x64>)
 80035ea:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <_sbrk+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <_sbrk+0x64>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d207      	bcs.n	800360c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035fc:	f006 fe84 	bl	800a308 <__errno>
 8003600:	4603      	mov	r3, r0
 8003602:	220c      	movs	r2, #12
 8003604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e009      	b.n	8003620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <_sbrk+0x64>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <_sbrk+0x64>)
 800361c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20020000 	.word	0x20020000
 800362c:	00000400 	.word	0x00000400
 8003630:	200004e8 	.word	0x200004e8
 8003634:	20000bb0 	.word	0x20000bb0

08003638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <SystemInit+0x20>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <SystemInit+0x20>)
 8003644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b096      	sub	sp, #88	@ 0x58
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003662:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003670:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800367a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2220      	movs	r2, #32
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f006 fde4 	bl	800a262 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800369a:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <MX_TIM1_Init+0x138>)
 800369c:	4a3e      	ldr	r2, [pc, #248]	@ (8003798 <MX_TIM1_Init+0x13c>)
 800369e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80036a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036a2:	2253      	movs	r2, #83	@ 0x53
 80036a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80036ac:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036ae:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80036b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b4:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036ba:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036c6:	4833      	ldr	r0, [pc, #204]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036c8:	f004 fca0 	bl	800800c <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80036d2:	f7ff fab5 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80036e0:	4619      	mov	r1, r3
 80036e2:	482c      	ldr	r0, [pc, #176]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036e4:	f005 f88e 	bl	8008804 <HAL_TIM_ConfigClockSource>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80036ee:	f7ff faa7 	bl	8002c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036f2:	4828      	ldr	r0, [pc, #160]	@ (8003794 <MX_TIM1_Init+0x138>)
 80036f4:	f004 fdb2 	bl	800825c <HAL_TIM_PWM_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80036fe:	f7ff fa9f 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003706:	2300      	movs	r3, #0
 8003708:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800370a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800370e:	4619      	mov	r1, r3
 8003710:	4820      	ldr	r0, [pc, #128]	@ (8003794 <MX_TIM1_Init+0x138>)
 8003712:	f005 fc83 	bl	800901c <HAL_TIMEx_MasterConfigSynchronization>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800371c:	f7ff fa90 	bl	8002c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003720:	2360      	movs	r3, #96	@ 0x60
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800372c:	2300      	movs	r3, #0
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003730:	2300      	movs	r3, #0
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003734:	2300      	movs	r3, #0
 8003736:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003738:	2300      	movs	r3, #0
 800373a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800373c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003740:	2200      	movs	r2, #0
 8003742:	4619      	mov	r1, r3
 8003744:	4813      	ldr	r0, [pc, #76]	@ (8003794 <MX_TIM1_Init+0x138>)
 8003746:	f004 ff9b 	bl	8008680 <HAL_TIM_PWM_ConfigChannel>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003750:	f7ff fa76 	bl	8002c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800376c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	4619      	mov	r1, r3
 8003776:	4807      	ldr	r0, [pc, #28]	@ (8003794 <MX_TIM1_Init+0x138>)
 8003778:	f005 fccc 	bl	8009114 <HAL_TIMEx_ConfigBreakDeadTime>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003782:	f7ff fa5d 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003786:	4803      	ldr	r0, [pc, #12]	@ (8003794 <MX_TIM1_Init+0x138>)
 8003788:	f000 f94a 	bl	8003a20 <HAL_TIM_MspPostInit>

}
 800378c:	bf00      	nop
 800378e:	3758      	adds	r7, #88	@ 0x58
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200004ec 	.word	0x200004ec
 8003798:	40010000 	.word	0x40010000

0800379c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	609a      	str	r2, [r3, #8]
 80037ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b0:	463b      	mov	r3, r7
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80037c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037c2:	f240 3247 	movw	r2, #839	@ 0x347
 80037c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400-1;
 80037ce:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037d0:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80037d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037dc:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037e2:	4814      	ldr	r0, [pc, #80]	@ (8003834 <MX_TIM2_Init+0x98>)
 80037e4:	f004 fc12 	bl	800800c <HAL_TIM_Base_Init>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037ee:	f7ff fa27 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	4619      	mov	r1, r3
 80037fe:	480d      	ldr	r0, [pc, #52]	@ (8003834 <MX_TIM2_Init+0x98>)
 8003800:	f005 f800 	bl	8008804 <HAL_TIM_ConfigClockSource>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800380a:	f7ff fa19 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003816:	463b      	mov	r3, r7
 8003818:	4619      	mov	r1, r3
 800381a:	4806      	ldr	r0, [pc, #24]	@ (8003834 <MX_TIM2_Init+0x98>)
 800381c:	f005 fbfe 	bl	800901c <HAL_TIMEx_MasterConfigSynchronization>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003826:	f7ff fa0b 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000534 	.word	0x20000534

08003838 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	f107 0308 	add.w	r3, r7, #8
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384c:	463b      	mov	r3, r7
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003854:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <MX_TIM3_Init+0x94>)
 8003856:	4a1e      	ldr	r2, [pc, #120]	@ (80038d0 <MX_TIM3_Init+0x98>)
 8003858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <MX_TIM3_Init+0x94>)
 800385c:	2253      	movs	r2, #83	@ 0x53
 800385e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003860:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <MX_TIM3_Init+0x94>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <MX_TIM3_Init+0x94>)
 8003868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800386c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <MX_TIM3_Init+0x94>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003874:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <MX_TIM3_Init+0x94>)
 8003876:	2200      	movs	r2, #0
 8003878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800387a:	4814      	ldr	r0, [pc, #80]	@ (80038cc <MX_TIM3_Init+0x94>)
 800387c:	f004 fbc6 	bl	800800c <HAL_TIM_Base_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003886:	f7ff f9db 	bl	8002c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800388e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	4619      	mov	r1, r3
 8003896:	480d      	ldr	r0, [pc, #52]	@ (80038cc <MX_TIM3_Init+0x94>)
 8003898:	f004 ffb4 	bl	8008804 <HAL_TIM_ConfigClockSource>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80038a2:	f7ff f9cd 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ae:	463b      	mov	r3, r7
 80038b0:	4619      	mov	r1, r3
 80038b2:	4806      	ldr	r0, [pc, #24]	@ (80038cc <MX_TIM3_Init+0x94>)
 80038b4:	f005 fbb2 	bl	800901c <HAL_TIMEx_MasterConfigSynchronization>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038be:	f7ff f9bf 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	2000057c 	.word	0x2000057c
 80038d0:	40000400 	.word	0x40000400

080038d4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038da:	463b      	mov	r3, r7
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <MX_TIM6_Init+0x64>)
 80038e4:	4a15      	ldr	r2, [pc, #84]	@ (800393c <MX_TIM6_Init+0x68>)
 80038e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <MX_TIM6_Init+0x64>)
 80038ea:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80038ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <MX_TIM6_Init+0x64>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000-1;
 80038f6:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <MX_TIM6_Init+0x64>)
 80038f8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80038fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <MX_TIM6_Init+0x64>)
 8003900:	2280      	movs	r2, #128	@ 0x80
 8003902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003904:	480c      	ldr	r0, [pc, #48]	@ (8003938 <MX_TIM6_Init+0x64>)
 8003906:	f004 fb81 	bl	800800c <HAL_TIM_Base_Init>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003910:	f7ff f996 	bl	8002c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003914:	2300      	movs	r3, #0
 8003916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003918:	2300      	movs	r3, #0
 800391a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800391c:	463b      	mov	r3, r7
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	@ (8003938 <MX_TIM6_Init+0x64>)
 8003922:	f005 fb7b 	bl	800901c <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800392c:	f7ff f988 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200005c4 	.word	0x200005c4
 800393c:	40001000 	.word	0x40001000

08003940 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a30      	ldr	r2, [pc, #192]	@ (8003a10 <HAL_TIM_Base_MspInit+0xd0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4b2f      	ldr	r3, [pc, #188]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6453      	str	r3, [r2, #68]	@ 0x44
 8003962:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800396e:	e04a      	b.n	8003a06 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003978:	d116      	bne.n	80039a8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6413      	str	r3, [r2, #64]	@ 0x40
 800398a:	4b22      	ldr	r3, [pc, #136]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	201c      	movs	r0, #28
 800399c:	f001 f9db 	bl	8004d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039a0:	201c      	movs	r0, #28
 80039a2:	f001 f9f4 	bl	8004d8e <HAL_NVIC_EnableIRQ>
}
 80039a6:	e02e      	b.n	8003a06 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <HAL_TIM_Base_MspInit+0xd8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b17      	ldr	r3, [pc, #92]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c2:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	e01a      	b.n	8003a06 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a11      	ldr	r2, [pc, #68]	@ (8003a1c <HAL_TIM_Base_MspInit+0xdc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d115      	bne.n	8003a06 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 80039e4:	f043 0310 	orr.w	r3, r3, #16
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_TIM_Base_MspInit+0xd4>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80039f6:	2200      	movs	r2, #0
 80039f8:	2100      	movs	r1, #0
 80039fa:	2036      	movs	r0, #54	@ 0x36
 80039fc:	f001 f9ab 	bl	8004d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a00:	2036      	movs	r0, #54	@ 0x36
 8003a02:	f001 f9c4 	bl	8004d8e <HAL_NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40000400 	.word	0x40000400
 8003a1c:	40001000 	.word	0x40001000

08003a20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <HAL_TIM_MspPostInit+0x68>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d11e      	bne.n	8003a80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_TIM_MspPostInit+0x6c>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <HAL_TIM_MspPostInit+0x6c>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_TIM_MspPostInit+0x6c>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4805      	ldr	r0, [pc, #20]	@ (8003a90 <HAL_TIM_MspPostInit+0x70>)
 8003a7c:	f001 fd40 	bl	8005500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a80:	bf00      	nop
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40020000 	.word	0x40020000

08003a94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003a9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <MX_USART2_UART_Init+0x50>)
 8003a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003aba:	220c      	movs	r2, #12
 8003abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003aca:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <MX_USART2_UART_Init+0x4c>)
 8003acc:	f005 fb88 	bl	80091e0 <HAL_UART_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ad6:	f7ff f8b3 	bl	8002c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000060c 	.word	0x2000060c
 8003ae4:	40004400 	.word	0x40004400

08003ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	@ 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a19      	ldr	r2, [pc, #100]	@ (8003b6c <HAL_UART_MspInit+0x84>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d12b      	bne.n	8003b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <HAL_UART_MspInit+0x88>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <HAL_UART_MspInit+0x88>)
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1a:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <HAL_UART_MspInit+0x88>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	4b11      	ldr	r3, [pc, #68]	@ (8003b70 <HAL_UART_MspInit+0x88>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	4a10      	ldr	r2, [pc, #64]	@ (8003b70 <HAL_UART_MspInit+0x88>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b36:	4b0e      	ldr	r3, [pc, #56]	@ (8003b70 <HAL_UART_MspInit+0x88>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b42:	230c      	movs	r3, #12
 8003b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b52:	2307      	movs	r3, #7
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4805      	ldr	r0, [pc, #20]	@ (8003b74 <HAL_UART_MspInit+0x8c>)
 8003b5e:	f001 fccf 	bl	8005500 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003b62:	bf00      	nop
 8003b64:	3728      	adds	r7, #40	@ 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40020000 	.word	0x40020000

08003b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b7c:	f7ff fd5c 	bl	8003638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b80:	480c      	ldr	r0, [pc, #48]	@ (8003bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b82:	490d      	ldr	r1, [pc, #52]	@ (8003bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b84:	4a0d      	ldr	r2, [pc, #52]	@ (8003bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b88:	e002      	b.n	8003b90 <LoopCopyDataInit>

08003b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8e:	3304      	adds	r3, #4

08003b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b94:	d3f9      	bcc.n	8003b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b96:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b98:	4c0a      	ldr	r4, [pc, #40]	@ (8003bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b9c:	e001      	b.n	8003ba2 <LoopFillZerobss>

08003b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba0:	3204      	adds	r2, #4

08003ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba4:	d3fb      	bcc.n	8003b9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ba6:	f006 fbb5 	bl	800a314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003baa:	f7fe fa43 	bl	8002034 <main>
  bx  lr    
 8003bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb8:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8003bbc:	0800e820 	.word	0x0800e820
  ldr r2, =_sbss
 8003bc0:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003bc4:	20000bac 	.word	0x20000bac

08003bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc8:	e7fe      	b.n	8003bc8 <ADC_IRQHandler>
	...

08003bcc <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003bd2:	f000 fb63 	bl	800429c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003bd6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2178      	movs	r1, #120	@ 0x78
 8003bde:	485b      	ldr	r0, [pc, #364]	@ (8003d4c <SSD1306_Init+0x180>)
 8003be0:	f002 fd84 	bl	80066ec <HAL_I2C_IsDeviceReady>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e0a9      	b.n	8003d42 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003bee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003bf2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bf4:	e002      	b.n	8003bfc <SSD1306_Init+0x30>
		p--;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f9      	bne.n	8003bf6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003c02:	22ae      	movs	r2, #174	@ 0xae
 8003c04:	2100      	movs	r1, #0
 8003c06:	2078      	movs	r0, #120	@ 0x78
 8003c08:	f000 fbc4 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	2100      	movs	r1, #0
 8003c10:	2078      	movs	r0, #120	@ 0x78
 8003c12:	f000 fbbf 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003c16:	2210      	movs	r2, #16
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2078      	movs	r0, #120	@ 0x78
 8003c1c:	f000 fbba 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003c20:	22b0      	movs	r2, #176	@ 0xb0
 8003c22:	2100      	movs	r1, #0
 8003c24:	2078      	movs	r0, #120	@ 0x78
 8003c26:	f000 fbb5 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003c2a:	22c8      	movs	r2, #200	@ 0xc8
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2078      	movs	r0, #120	@ 0x78
 8003c30:	f000 fbb0 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003c34:	2200      	movs	r2, #0
 8003c36:	2100      	movs	r1, #0
 8003c38:	2078      	movs	r0, #120	@ 0x78
 8003c3a:	f000 fbab 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003c3e:	2210      	movs	r2, #16
 8003c40:	2100      	movs	r1, #0
 8003c42:	2078      	movs	r0, #120	@ 0x78
 8003c44:	f000 fba6 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003c48:	2240      	movs	r2, #64	@ 0x40
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2078      	movs	r0, #120	@ 0x78
 8003c4e:	f000 fba1 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003c52:	2281      	movs	r2, #129	@ 0x81
 8003c54:	2100      	movs	r1, #0
 8003c56:	2078      	movs	r0, #120	@ 0x78
 8003c58:	f000 fb9c 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003c5c:	22ff      	movs	r2, #255	@ 0xff
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2078      	movs	r0, #120	@ 0x78
 8003c62:	f000 fb97 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003c66:	22a1      	movs	r2, #161	@ 0xa1
 8003c68:	2100      	movs	r1, #0
 8003c6a:	2078      	movs	r0, #120	@ 0x78
 8003c6c:	f000 fb92 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003c70:	22a6      	movs	r2, #166	@ 0xa6
 8003c72:	2100      	movs	r1, #0
 8003c74:	2078      	movs	r0, #120	@ 0x78
 8003c76:	f000 fb8d 	bl	8004394 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003c7a:	22a8      	movs	r2, #168	@ 0xa8
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2078      	movs	r0, #120	@ 0x78
 8003c80:	f000 fb88 	bl	8004394 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8003c84:	223f      	movs	r2, #63	@ 0x3f
 8003c86:	2100      	movs	r1, #0
 8003c88:	2078      	movs	r0, #120	@ 0x78
 8003c8a:	f000 fb83 	bl	8004394 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c8e:	22a4      	movs	r2, #164	@ 0xa4
 8003c90:	2100      	movs	r1, #0
 8003c92:	2078      	movs	r0, #120	@ 0x78
 8003c94:	f000 fb7e 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003c98:	22d3      	movs	r2, #211	@ 0xd3
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2078      	movs	r0, #120	@ 0x78
 8003c9e:	f000 fb79 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2078      	movs	r0, #120	@ 0x78
 8003ca8:	f000 fb74 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003cac:	22d5      	movs	r2, #213	@ 0xd5
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2078      	movs	r0, #120	@ 0x78
 8003cb2:	f000 fb6f 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003cb6:	22f0      	movs	r2, #240	@ 0xf0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2078      	movs	r0, #120	@ 0x78
 8003cbc:	f000 fb6a 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003cc0:	22d9      	movs	r2, #217	@ 0xd9
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	2078      	movs	r0, #120	@ 0x78
 8003cc6:	f000 fb65 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003cca:	2222      	movs	r2, #34	@ 0x22
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2078      	movs	r0, #120	@ 0x78
 8003cd0:	f000 fb60 	bl	8004394 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003cd4:	22da      	movs	r2, #218	@ 0xda
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2078      	movs	r0, #120	@ 0x78
 8003cda:	f000 fb5b 	bl	8004394 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8003cde:	2212      	movs	r2, #18
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2078      	movs	r0, #120	@ 0x78
 8003ce4:	f000 fb56 	bl	8004394 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003ce8:	22db      	movs	r2, #219	@ 0xdb
 8003cea:	2100      	movs	r1, #0
 8003cec:	2078      	movs	r0, #120	@ 0x78
 8003cee:	f000 fb51 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2078      	movs	r0, #120	@ 0x78
 8003cf8:	f000 fb4c 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003cfc:	228d      	movs	r2, #141	@ 0x8d
 8003cfe:	2100      	movs	r1, #0
 8003d00:	2078      	movs	r0, #120	@ 0x78
 8003d02:	f000 fb47 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003d06:	2214      	movs	r2, #20
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2078      	movs	r0, #120	@ 0x78
 8003d0c:	f000 fb42 	bl	8004394 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003d10:	22af      	movs	r2, #175	@ 0xaf
 8003d12:	2100      	movs	r1, #0
 8003d14:	2078      	movs	r0, #120	@ 0x78
 8003d16:	f000 fb3d 	bl	8004394 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003d1a:	222e      	movs	r2, #46	@ 0x2e
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2078      	movs	r0, #120	@ 0x78
 8003d20:	f000 fb38 	bl	8004394 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f000 f843 	bl	8003db0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003d2a:	f000 f813 	bl	8003d54 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <SSD1306_Init+0x184>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <SSD1306_Init+0x184>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <SSD1306_Init+0x184>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200002ec 	.word	0x200002ec
 8003d50:	20000a54 	.word	0x20000a54

08003d54 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	71fb      	strb	r3, [r7, #7]
 8003d5e:	e01d      	b.n	8003d9c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	3b50      	subs	r3, #80	@ 0x50
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2078      	movs	r0, #120	@ 0x78
 8003d6c:	f000 fb12 	bl	8004394 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003d70:	2200      	movs	r2, #0
 8003d72:	2100      	movs	r1, #0
 8003d74:	2078      	movs	r0, #120	@ 0x78
 8003d76:	f000 fb0d 	bl	8004394 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2078      	movs	r0, #120	@ 0x78
 8003d80:	f000 fb08 	bl	8004394 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	01db      	lsls	r3, r3, #7
 8003d88:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <SSD1306_UpdateScreen+0x58>)
 8003d8a:	441a      	add	r2, r3
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	2140      	movs	r1, #64	@ 0x40
 8003d90:	2078      	movs	r0, #120	@ 0x78
 8003d92:	f000 fa99 	bl	80042c8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	71fb      	strb	r3, [r7, #7]
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b07      	cmp	r3, #7
 8003da0:	d9de      	bls.n	8003d60 <SSD1306_UpdateScreen+0xc>
	}
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000654 	.word	0x20000654

08003db0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <SSD1306_Fill+0x14>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <SSD1306_Fill+0x16>
 8003dc4:	23ff      	movs	r3, #255	@ 0xff
 8003dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <SSD1306_Fill+0x2c>)
 8003dce:	f006 fa48 	bl	800a262 <memset>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000654 	.word	0x20000654

08003de0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
 8003dea:	460b      	mov	r3, r1
 8003dec:	80bb      	strh	r3, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	70fb      	strb	r3, [r7, #3]
	if (
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003df6:	d848      	bhi.n	8003e8a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003df8:	88bb      	ldrh	r3, [r7, #4]
 8003dfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dfc:	d845      	bhi.n	8003e8a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <SSD1306_DrawPixel+0xb8>)
 8003e00:	791b      	ldrb	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11a      	bne.n	8003e50 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	88bb      	ldrh	r3, [r7, #4]
 8003e1e:	08db      	lsrs	r3, r3, #3
 8003e20:	b298      	uxth	r0, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	01db      	lsls	r3, r3, #7
 8003e26:	4413      	add	r3, r2
 8003e28:	4a1c      	ldr	r2, [pc, #112]	@ (8003e9c <SSD1306_DrawPixel+0xbc>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	b25a      	sxtb	r2, r3
 8003e2e:	88bb      	ldrh	r3, [r7, #4]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	2101      	movs	r1, #1
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	b25b      	sxtb	r3, r3
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	b259      	sxtb	r1, r3
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	4603      	mov	r3, r0
 8003e44:	01db      	lsls	r3, r3, #7
 8003e46:	4413      	add	r3, r2
 8003e48:	b2c9      	uxtb	r1, r1
 8003e4a:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <SSD1306_DrawPixel+0xbc>)
 8003e4c:	54d1      	strb	r1, [r2, r3]
 8003e4e:	e01d      	b.n	8003e8c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	88bb      	ldrh	r3, [r7, #4]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	b298      	uxth	r0, r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	01db      	lsls	r3, r3, #7
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e9c <SSD1306_DrawPixel+0xbc>)
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
 8003e62:	b25a      	sxtb	r2, r3
 8003e64:	88bb      	ldrh	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	b25b      	sxtb	r3, r3
 8003e76:	4013      	ands	r3, r2
 8003e78:	b259      	sxtb	r1, r3
 8003e7a:	88fa      	ldrh	r2, [r7, #6]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	4413      	add	r3, r2
 8003e82:	b2c9      	uxtb	r1, r1
 8003e84:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <SSD1306_DrawPixel+0xbc>)
 8003e86:	54d1      	strb	r1, [r2, r3]
 8003e88:	e000      	b.n	8003e8c <SSD1306_DrawPixel+0xac>
		return;
 8003e8a:	bf00      	nop
	}
}
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000a54 	.word	0x20000a54
 8003e9c:	20000654 	.word	0x20000654

08003ea0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	80fb      	strh	r3, [r7, #6]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003eb0:	4a05      	ldr	r2, [pc, #20]	@ (8003ec8 <SSD1306_GotoXY+0x28>)
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003eb6:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <SSD1306_GotoXY+0x28>)
 8003eb8:	88bb      	ldrh	r3, [r7, #4]
 8003eba:	8053      	strh	r3, [r2, #2]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000a54 	.word	0x20000a54

08003ecc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003edc:	4b39      	ldr	r3, [pc, #228]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
	if (
 8003ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eea:	dc07      	bgt.n	8003efc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003eec:	4b35      	ldr	r3, [pc, #212]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003eee:	885b      	ldrh	r3, [r3, #2]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ef8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003efa:	dd01      	ble.n	8003f00 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e05d      	b.n	8003fbc <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e04b      	b.n	8003f9e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	3b20      	subs	r3, #32
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	7849      	ldrb	r1, [r1, #1]
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	440b      	add	r3, r1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e030      	b.n	8003f8c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003f3a:	4b22      	ldr	r3, [pc, #136]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	b298      	uxth	r0, r3
 8003f46:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003f48:	885a      	ldrh	r2, [r3, #2]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	79ba      	ldrb	r2, [r7, #6]
 8003f54:	4619      	mov	r1, r3
 8003f56:	f7ff ff43 	bl	8003de0 <SSD1306_DrawPixel>
 8003f5a:	e014      	b.n	8003f86 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	b298      	uxth	r0, r3
 8003f68:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003f6a:	885a      	ldrh	r2, [r3, #2]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4413      	add	r3, r2
 8003f72:	b299      	uxth	r1, r3
 8003f74:	79bb      	ldrb	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	f7ff ff2d 	bl	8003de0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d3c8      	bcc.n	8003f2a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d3ad      	bcc.n	8003f06 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	4b03      	ldr	r3, [pc, #12]	@ (8003fc4 <SSD1306_Putc+0xf8>)
 8003fb8:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003fba:	79fb      	ldrb	r3, [r7, #7]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000a54 	.word	0x20000a54

08003fc8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003fd6:	e012      	b.n	8003ffe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	79fa      	ldrb	r2, [r7, #7]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff73 	bl	8003ecc <SSD1306_Putc>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d002      	beq.n	8003ff8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	e008      	b.n	800400a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e8      	bne.n	8003fd8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	781b      	ldrb	r3, [r3, #0]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8004012:	b590      	push	{r4, r7, lr}
 8004014:	b087      	sub	sp, #28
 8004016:	af00      	add	r7, sp, #0
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	461a      	mov	r2, r3
 8004020:	4623      	mov	r3, r4
 8004022:	80fb      	strh	r3, [r7, #6]
 8004024:	4603      	mov	r3, r0
 8004026:	80bb      	strh	r3, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
 800402c:	4613      	mov	r3, r2
 800402e:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004030:	887b      	ldrh	r3, [r7, #2]
 8004032:	f1c3 0301 	rsb	r3, r3, #1
 8004036:	b29b      	uxth	r3, r3
 8004038:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	461a      	mov	r2, r3
 8004042:	03d2      	lsls	r2, r2, #15
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004050:	887b      	ldrh	r3, [r7, #2]
 8004052:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8004054:	88f8      	ldrh	r0, [r7, #6]
 8004056:	88ba      	ldrh	r2, [r7, #4]
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	4413      	add	r3, r2
 800405c:	b29b      	uxth	r3, r3
 800405e:	787a      	ldrb	r2, [r7, #1]
 8004060:	4619      	mov	r1, r3
 8004062:	f7ff febd 	bl	8003de0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8004066:	88f8      	ldrh	r0, [r7, #6]
 8004068:	88ba      	ldrh	r2, [r7, #4]
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	787a      	ldrb	r2, [r7, #1]
 8004072:	4619      	mov	r1, r3
 8004074:	f7ff feb4 	bl	8003de0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	4413      	add	r3, r2
 800407e:	b29b      	uxth	r3, r3
 8004080:	88b9      	ldrh	r1, [r7, #4]
 8004082:	787a      	ldrb	r2, [r7, #1]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff feab 	bl	8003de0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	887b      	ldrh	r3, [r7, #2]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	b29b      	uxth	r3, r3
 8004092:	88b9      	ldrh	r1, [r7, #4]
 8004094:	787a      	ldrb	r2, [r7, #1]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fea2 	bl	8003de0 <SSD1306_DrawPixel>

    while (x < y) {
 800409c:	e081      	b.n	80041a2 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 800409e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	db0e      	blt.n	80040c4 <SSD1306_DrawCircle+0xb2>
            y--;
 80040a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80040b2:	8a7b      	ldrh	r3, [r7, #18]
 80040b4:	3302      	adds	r3, #2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80040ba:	8afa      	ldrh	r2, [r7, #22]
 80040bc:	8a7b      	ldrh	r3, [r7, #18]
 80040be:	4413      	add	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80040c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80040d0:	8abb      	ldrh	r3, [r7, #20]
 80040d2:	3302      	adds	r3, #2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80040d8:	8afa      	ldrh	r2, [r7, #22]
 80040da:	8abb      	ldrh	r3, [r7, #20]
 80040dc:	4413      	add	r3, r2
 80040de:	b29b      	uxth	r3, r3
 80040e0:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	8a3b      	ldrh	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	b298      	uxth	r0, r3
 80040ea:	88ba      	ldrh	r2, [r7, #4]
 80040ec:	89fb      	ldrh	r3, [r7, #14]
 80040ee:	4413      	add	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	787a      	ldrb	r2, [r7, #1]
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7ff fe73 	bl	8003de0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	8a3b      	ldrh	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	b298      	uxth	r0, r3
 8004102:	88ba      	ldrh	r2, [r7, #4]
 8004104:	89fb      	ldrh	r3, [r7, #14]
 8004106:	4413      	add	r3, r2
 8004108:	b29b      	uxth	r3, r3
 800410a:	787a      	ldrb	r2, [r7, #1]
 800410c:	4619      	mov	r1, r3
 800410e:	f7ff fe67 	bl	8003de0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8004112:	88fa      	ldrh	r2, [r7, #6]
 8004114:	8a3b      	ldrh	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	b298      	uxth	r0, r3
 800411a:	88ba      	ldrh	r2, [r7, #4]
 800411c:	89fb      	ldrh	r3, [r7, #14]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	b29b      	uxth	r3, r3
 8004122:	787a      	ldrb	r2, [r7, #1]
 8004124:	4619      	mov	r1, r3
 8004126:	f7ff fe5b 	bl	8003de0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800412a:	88fa      	ldrh	r2, [r7, #6]
 800412c:	8a3b      	ldrh	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	b298      	uxth	r0, r3
 8004132:	88ba      	ldrh	r2, [r7, #4]
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	b29b      	uxth	r3, r3
 800413a:	787a      	ldrb	r2, [r7, #1]
 800413c:	4619      	mov	r1, r3
 800413e:	f7ff fe4f 	bl	8003de0 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	89fb      	ldrh	r3, [r7, #14]
 8004146:	4413      	add	r3, r2
 8004148:	b298      	uxth	r0, r3
 800414a:	88ba      	ldrh	r2, [r7, #4]
 800414c:	8a3b      	ldrh	r3, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	787a      	ldrb	r2, [r7, #1]
 8004154:	4619      	mov	r1, r3
 8004156:	f7ff fe43 	bl	8003de0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	89fb      	ldrh	r3, [r7, #14]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	b298      	uxth	r0, r3
 8004162:	88ba      	ldrh	r2, [r7, #4]
 8004164:	8a3b      	ldrh	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	787a      	ldrb	r2, [r7, #1]
 800416c:	4619      	mov	r1, r3
 800416e:	f7ff fe37 	bl	8003de0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	89fb      	ldrh	r3, [r7, #14]
 8004176:	4413      	add	r3, r2
 8004178:	b298      	uxth	r0, r3
 800417a:	88ba      	ldrh	r2, [r7, #4]
 800417c:	8a3b      	ldrh	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	787a      	ldrb	r2, [r7, #1]
 8004184:	4619      	mov	r1, r3
 8004186:	f7ff fe2b 	bl	8003de0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	89fb      	ldrh	r3, [r7, #14]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	b298      	uxth	r0, r3
 8004192:	88ba      	ldrh	r2, [r7, #4]
 8004194:	8a3b      	ldrh	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	787a      	ldrb	r2, [r7, #1]
 800419c:	4619      	mov	r1, r3
 800419e:	f7ff fe1f 	bl	8003de0 <SSD1306_DrawPixel>
    while (x < y) {
 80041a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	f6ff af77 	blt.w	800409e <SSD1306_DrawCircle+0x8c>
    }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}

080041ba <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60ba      	str	r2, [r7, #8]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4603      	mov	r3, r0
 80041c6:	81fb      	strh	r3, [r7, #14]
 80041c8:	460b      	mov	r3, r1
 80041ca:	81bb      	strh	r3, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80041d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d4:	3307      	adds	r3, #7
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da00      	bge.n	80041dc <SSD1306_DrawBitmap+0x22>
 80041da:	3307      	adds	r3, #7
 80041dc:	10db      	asrs	r3, r3, #3
 80041de:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	82bb      	strh	r3, [r7, #20]
 80041e8:	e044      	b.n	8004274 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	827b      	strh	r3, [r7, #18]
 80041ee:	e02f      	b.n	8004250 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80041f0:	8a7b      	ldrh	r3, [r7, #18]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
 8004200:	e012      	b.n	8004228 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004202:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004206:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800420a:	fb03 f202 	mul.w	r2, r3, r2
 800420e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004212:	2b00      	cmp	r3, #0
 8004214:	da00      	bge.n	8004218 <SSD1306_DrawBitmap+0x5e>
 8004216:	3307      	adds	r3, #7
 8004218:	10db      	asrs	r3, r3, #3
 800421a:	b21b      	sxth	r3, r3
 800421c:	4413      	add	r3, r2
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800422c:	2b00      	cmp	r3, #0
 800422e:	da09      	bge.n	8004244 <SSD1306_DrawBitmap+0x8a>
 8004230:	89fa      	ldrh	r2, [r7, #14]
 8004232:	8a7b      	ldrh	r3, [r7, #18]
 8004234:	4413      	add	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	89b9      	ldrh	r1, [r7, #12]
 800423a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fdce 	bl	8003de0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8004244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004248:	b29b      	uxth	r3, r3
 800424a:	3301      	adds	r3, #1
 800424c:	b29b      	uxth	r3, r3
 800424e:	827b      	strh	r3, [r7, #18]
 8004250:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004258:	429a      	cmp	r2, r3
 800425a:	dbc9      	blt.n	80041f0 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800425c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004260:	b29b      	uxth	r3, r3
 8004262:	3301      	adds	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	82bb      	strh	r3, [r7, #20]
 8004268:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800426c:	b29b      	uxth	r3, r3
 800426e:	3301      	adds	r3, #1
 8004270:	b29b      	uxth	r3, r3
 8004272:	81bb      	strh	r3, [r7, #12]
 8004274:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004278:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbb4      	blt.n	80041ea <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800428e:	2000      	movs	r0, #0
 8004290:	f7ff fd8e 	bl	8003db0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8004294:	f7ff fd5e 	bl	8003d54 <SSD1306_UpdateScreen>
}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}

0800429c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80042a2:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <ssd1306_I2C_Init+0x28>)
 80042a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042a6:	e002      	b.n	80042ae <ssd1306_I2C_Init+0x12>
		p--;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f9      	bne.n	80042a8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	0003d090 	.word	0x0003d090

080042c8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b0c7      	sub	sp, #284	@ 0x11c
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	4604      	mov	r4, r0
 80042d0:	4608      	mov	r0, r1
 80042d2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80042d6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80042da:	600a      	str	r2, [r1, #0]
 80042dc:	4619      	mov	r1, r3
 80042de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80042e6:	4622      	mov	r2, r4
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042ee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80042f2:	4602      	mov	r2, r0
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80042fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80042fe:	460a      	mov	r2, r1
 8004300:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800430a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800430e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004316:	2300      	movs	r3, #0
 8004318:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800431c:	e015      	b.n	800434a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800431e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004322:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004326:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	441a      	add	r2, r3
 800432e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004332:	3301      	adds	r3, #1
 8004334:	7811      	ldrb	r1, [r2, #0]
 8004336:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800433a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800433e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004340:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004344:	3301      	adds	r3, #1
 8004346:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800434a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800434e:	b29b      	uxth	r3, r3
 8004350:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004354:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004358:	8812      	ldrh	r2, [r2, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d8df      	bhi.n	800431e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800435e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004362:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b299      	uxth	r1, r3
 800436a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800436e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	b29b      	uxth	r3, r3
 8004378:	f107 020c 	add.w	r2, r7, #12
 800437c:	200a      	movs	r0, #10
 800437e:	9000      	str	r0, [sp, #0]
 8004380:	4803      	ldr	r0, [pc, #12]	@ (8004390 <ssd1306_I2C_WriteMulti+0xc8>)
 8004382:	f001 fbf9 	bl	8005b78 <HAL_I2C_Master_Transmit>
}
 8004386:	bf00      	nop
 8004388:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}
 8004390:	200002ec 	.word	0x200002ec

08004394 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af02      	add	r7, sp, #8
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
 800439e:	460b      	mov	r3, r1
 80043a0:	71bb      	strb	r3, [r7, #6]
 80043a2:	4613      	mov	r3, r2
 80043a4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80043a6:	79bb      	ldrb	r3, [r7, #6]
 80043a8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80043aa:	797b      	ldrb	r3, [r7, #5]
 80043ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	b299      	uxth	r1, r3
 80043b2:	f107 020c 	add.w	r2, r7, #12
 80043b6:	230a      	movs	r3, #10
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2302      	movs	r3, #2
 80043bc:	4803      	ldr	r0, [pc, #12]	@ (80043cc <ssd1306_I2C_Write+0x38>)
 80043be:	f001 fbdb 	bl	8005b78 <HAL_I2C_Master_Transmit>
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200002ec 	.word	0x200002ec

080043d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <HAL_Init+0x40>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004410 <HAL_Init+0x40>)
 80043da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <HAL_Init+0x40>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004410 <HAL_Init+0x40>)
 80043e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043ec:	4b08      	ldr	r3, [pc, #32]	@ (8004410 <HAL_Init+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a07      	ldr	r2, [pc, #28]	@ (8004410 <HAL_Init+0x40>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f8:	2003      	movs	r0, #3
 80043fa:	f000 fca1 	bl	8004d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043fe:	2000      	movs	r0, #0
 8004400:	f000 f808 	bl	8004414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004404:	f7fe ffdc 	bl	80033c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40023c00 	.word	0x40023c00

08004414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800441c:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <HAL_InitTick+0x54>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b12      	ldr	r3, [pc, #72]	@ (800446c <HAL_InitTick+0x58>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	4619      	mov	r1, r3
 8004426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800442a:	fbb3 f3f1 	udiv	r3, r3, r1
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fcb9 	bl	8004daa <HAL_SYSTICK_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e00e      	b.n	8004460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d80a      	bhi.n	800445e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004448:	2200      	movs	r2, #0
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	f000 fc81 	bl	8004d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004454:	4a06      	ldr	r2, [pc, #24]	@ (8004470 <HAL_InitTick+0x5c>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000098 	.word	0x20000098
 800446c:	200000a8 	.word	0x200000a8
 8004470:	200000a4 	.word	0x200000a4

08004474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004478:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <HAL_IncTick+0x20>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_IncTick+0x24>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4413      	add	r3, r2
 8004484:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <HAL_IncTick+0x24>)
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	200000a8 	.word	0x200000a8
 8004498:	20000a5c 	.word	0x20000a5c

0800449c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return uwTick;
 80044a0:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <HAL_GetTick+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000a5c 	.word	0x20000a5c

080044b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044bc:	f7ff ffee 	bl	800449c <HAL_GetTick>
 80044c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d005      	beq.n	80044da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <HAL_Delay+0x44>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044da:	bf00      	nop
 80044dc:	f7ff ffde 	bl	800449c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d8f7      	bhi.n	80044dc <HAL_Delay+0x28>
  {
  }
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200000a8 	.word	0x200000a8

080044fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e033      	b.n	800457a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fe24 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d118      	bne.n	800456c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004542:	f023 0302 	bic.w	r3, r3, #2
 8004546:	f043 0202 	orr.w	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa2a 	bl	80049a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	f043 0201 	orr.w	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40
 800456a:	e001      	b.n	8004570 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_ADC_Start+0x1a>
 800459a:	2302      	movs	r3, #2
 800459c:	e0b2      	b.n	8004704 <HAL_ADC_Start+0x180>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d018      	beq.n	80045e6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045c4:	4b52      	ldr	r3, [pc, #328]	@ (8004710 <HAL_ADC_Start+0x18c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a52      	ldr	r2, [pc, #328]	@ (8004714 <HAL_ADC_Start+0x190>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0c9a      	lsrs	r2, r3, #18
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80045d8:	e002      	b.n	80045e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3b01      	subs	r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f9      	bne.n	80045da <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d17a      	bne.n	80046ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800461e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d106      	bne.n	8004642 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004638:	f023 0206 	bic.w	r2, r3, #6
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004640:	e002      	b.n	8004648 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004650:	4b31      	ldr	r3, [pc, #196]	@ (8004718 <HAL_ADC_Start+0x194>)
 8004652:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800465c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	2b00      	cmp	r3, #0
 8004668:	d12a      	bne.n	80046c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2b      	ldr	r2, [pc, #172]	@ (800471c <HAL_ADC_Start+0x198>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d015      	beq.n	80046a0 <HAL_ADC_Start+0x11c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <HAL_ADC_Start+0x19c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d105      	bne.n	800468a <HAL_ADC_Start+0x106>
 800467e:	4b26      	ldr	r3, [pc, #152]	@ (8004718 <HAL_ADC_Start+0x194>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a25      	ldr	r2, [pc, #148]	@ (8004724 <HAL_ADC_Start+0x1a0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d136      	bne.n	8004702 <HAL_ADC_Start+0x17e>
 8004694:	4b20      	ldr	r3, [pc, #128]	@ (8004718 <HAL_ADC_Start+0x194>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	d130      	bne.n	8004702 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d129      	bne.n	8004702 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80046bc:	609a      	str	r2, [r3, #8]
 80046be:	e020      	b.n	8004702 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <HAL_ADC_Start+0x198>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d11b      	bne.n	8004702 <HAL_ADC_Start+0x17e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d114      	bne.n	8004702 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	e00b      	b.n	8004702 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f043 0210 	orr.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000098 	.word	0x20000098
 8004714:	431bde83 	.word	0x431bde83
 8004718:	40012300 	.word	0x40012300
 800471c:	40012000 	.word	0x40012000
 8004720:	40012100 	.word	0x40012100
 8004724:	40012200 	.word	0x40012200

08004728 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e113      	b.n	8004988 <HAL_ADC_ConfigChannel+0x244>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b09      	cmp	r3, #9
 800476e:	d925      	bls.n	80047bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68d9      	ldr	r1, [r3, #12]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	3b1e      	subs	r3, #30
 8004786:	2207      	movs	r2, #7
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43da      	mvns	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	400a      	ands	r2, r1
 8004794:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68d9      	ldr	r1, [r3, #12]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	4603      	mov	r3, r0
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4403      	add	r3, r0
 80047ae:	3b1e      	subs	r3, #30
 80047b0:	409a      	lsls	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	e022      	b.n	8004802 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6919      	ldr	r1, [r3, #16]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	4613      	mov	r3, r2
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	2207      	movs	r2, #7
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43da      	mvns	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	400a      	ands	r2, r1
 80047de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6919      	ldr	r1, [r3, #16]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4618      	mov	r0, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4403      	add	r3, r0
 80047f8:	409a      	lsls	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b06      	cmp	r3, #6
 8004808:	d824      	bhi.n	8004854 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	3b05      	subs	r3, #5
 800481c:	221f      	movs	r2, #31
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43da      	mvns	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	400a      	ands	r2, r1
 800482a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	4618      	mov	r0, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	3b05      	subs	r3, #5
 8004846:	fa00 f203 	lsl.w	r2, r0, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	635a      	str	r2, [r3, #52]	@ 0x34
 8004852:	e04c      	b.n	80048ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d824      	bhi.n	80048a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	3b23      	subs	r3, #35	@ 0x23
 800486e:	221f      	movs	r2, #31
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43da      	mvns	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	400a      	ands	r2, r1
 800487c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	4618      	mov	r0, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	3b23      	subs	r3, #35	@ 0x23
 8004898:	fa00 f203 	lsl.w	r2, r0, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048a4:	e023      	b.n	80048ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	3b41      	subs	r3, #65	@ 0x41
 80048b8:	221f      	movs	r2, #31
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43da      	mvns	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	400a      	ands	r2, r1
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	4618      	mov	r0, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	3b41      	subs	r3, #65	@ 0x41
 80048e2:	fa00 f203 	lsl.w	r2, r0, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048ee:	4b29      	ldr	r3, [pc, #164]	@ (8004994 <HAL_ADC_ConfigChannel+0x250>)
 80048f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a28      	ldr	r2, [pc, #160]	@ (8004998 <HAL_ADC_ConfigChannel+0x254>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10f      	bne.n	800491c <HAL_ADC_ConfigChannel+0x1d8>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b12      	cmp	r3, #18
 8004902:	d10b      	bne.n	800491c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <HAL_ADC_ConfigChannel+0x254>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d12b      	bne.n	800497e <HAL_ADC_ConfigChannel+0x23a>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_ADC_ConfigChannel+0x258>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <HAL_ADC_ConfigChannel+0x1f4>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b11      	cmp	r3, #17
 8004936:	d122      	bne.n	800497e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a11      	ldr	r2, [pc, #68]	@ (800499c <HAL_ADC_ConfigChannel+0x258>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d111      	bne.n	800497e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800495a:	4b11      	ldr	r3, [pc, #68]	@ (80049a0 <HAL_ADC_ConfigChannel+0x25c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a11      	ldr	r2, [pc, #68]	@ (80049a4 <HAL_ADC_ConfigChannel+0x260>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	0c9a      	lsrs	r2, r3, #18
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004970:	e002      	b.n	8004978 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3b01      	subs	r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f9      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	40012300 	.word	0x40012300
 8004998:	40012000 	.word	0x40012000
 800499c:	10000012 	.word	0x10000012
 80049a0:	20000098 	.word	0x20000098
 80049a4:	431bde83 	.word	0x431bde83

080049a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049b0:	4b79      	ldr	r3, [pc, #484]	@ (8004b98 <ADC_Init+0x1f0>)
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	021a      	lsls	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3a:	4a58      	ldr	r2, [pc, #352]	@ (8004b9c <ADC_Init+0x1f4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d022      	beq.n	8004a86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6899      	ldr	r1, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	e00f      	b.n	8004aa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0202 	bic.w	r2, r2, #2
 8004ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6899      	ldr	r1, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	7e1b      	ldrb	r3, [r3, #24]
 8004ac0:	005a      	lsls	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004af2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	3b01      	subs	r3, #1
 8004b00:	035a      	lsls	r2, r3, #13
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	e007      	b.n	8004b1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	051a      	lsls	r2, r3, #20
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b5e:	025a      	lsls	r2, r3, #9
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	029a      	lsls	r2, r3, #10
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40012300 	.word	0x40012300
 8004b9c:	0f000001 	.word	0x0f000001

08004ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bd2:	4a04      	ldr	r2, [pc, #16]	@ (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60d3      	str	r3, [r2, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bec:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <__NVIC_GetPriorityGrouping+0x18>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0307 	and.w	r3, r3, #7
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	db0b      	blt.n	8004c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	f003 021f 	and.w	r2, r3, #31
 8004c1c:	4907      	ldr	r1, [pc, #28]	@ (8004c3c <__NVIC_EnableIRQ+0x38>)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2001      	movs	r0, #1
 8004c26:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000e100 	.word	0xe000e100

08004c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db0a      	blt.n	8004c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	490c      	ldr	r1, [pc, #48]	@ (8004c8c <__NVIC_SetPriority+0x4c>)
 8004c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5e:	0112      	lsls	r2, r2, #4
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	440b      	add	r3, r1
 8004c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c68:	e00a      	b.n	8004c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4908      	ldr	r1, [pc, #32]	@ (8004c90 <__NVIC_SetPriority+0x50>)
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3b04      	subs	r3, #4
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	761a      	strb	r2, [r3, #24]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000e100 	.word	0xe000e100
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b089      	sub	sp, #36	@ 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f1c3 0307 	rsb	r3, r3, #7
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	bf28      	it	cs
 8004cb2:	2304      	movcs	r3, #4
 8004cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d902      	bls.n	8004cc4 <NVIC_EncodePriority+0x30>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3b03      	subs	r3, #3
 8004cc2:	e000      	b.n	8004cc6 <NVIC_EncodePriority+0x32>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	43d9      	mvns	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cec:	4313      	orrs	r3, r2
         );
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3724      	adds	r7, #36	@ 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d0c:	d301      	bcc.n	8004d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e00f      	b.n	8004d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d12:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <SysTick_Config+0x40>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d1a:	210f      	movs	r1, #15
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	f7ff ff8e 	bl	8004c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d24:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <SysTick_Config+0x40>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d2a:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <SysTick_Config+0x40>)
 8004d2c:	2207      	movs	r2, #7
 8004d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	e000e010 	.word	0xe000e010

08004d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff29 	bl	8004ba0 <__NVIC_SetPriorityGrouping>
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d68:	f7ff ff3e 	bl	8004be8 <__NVIC_GetPriorityGrouping>
 8004d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff8e 	bl	8004c94 <NVIC_EncodePriority>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff5d 	bl	8004c40 <__NVIC_SetPriority>
}
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	4603      	mov	r3, r0
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff31 	bl	8004c04 <__NVIC_EnableIRQ>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ffa2 	bl	8004cfc <SysTick_Config>
 8004db8:	4603      	mov	r3, r0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004dd0:	f7ff fb64 	bl	800449c <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e099      	b.n	8004f14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e00:	e00f      	b.n	8004e22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e02:	f7ff fb4b 	bl	800449c <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d908      	bls.n	8004e22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e078      	b.n	8004f14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e8      	bne.n	8004e02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4b38      	ldr	r3, [pc, #224]	@ (8004f1c <HAL_DMA_Init+0x158>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	4313      	orrs	r3, r2
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d117      	bne.n	8004ee6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa9d 	bl	8005408 <DMA_CheckFifoParam>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2240      	movs	r2, #64	@ 0x40
 8004ed8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e016      	b.n	8004f14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa54 	bl	800539c <DMA_CalcBaseAndBitshift>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	223f      	movs	r2, #63	@ 0x3f
 8004efe:	409a      	lsls	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	f010803f 	.word	0xf010803f

08004f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_DMA_Start_IT+0x26>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e040      	b.n	8004fc8 <HAL_DMA_Start_IT+0xa8>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12f      	bne.n	8004fba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f9e6 	bl	8005340 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	223f      	movs	r2, #63	@ 0x3f
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0216 	orr.w	r2, r2, #22
 8004f8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0208 	orr.w	r2, r2, #8
 8004fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e005      	b.n	8004fc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d004      	beq.n	8004fee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e00c      	b.n	8005008 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2205      	movs	r2, #5
 8004ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005020:	4b8e      	ldr	r3, [pc, #568]	@ (800525c <HAL_DMA_IRQHandler+0x248>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a8e      	ldr	r2, [pc, #568]	@ (8005260 <HAL_DMA_IRQHandler+0x24c>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	0a9b      	lsrs	r3, r3, #10
 800502c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503e:	2208      	movs	r2, #8
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01a      	beq.n	8005080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d013      	beq.n	8005080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	2208      	movs	r2, #8
 800506e:	409a      	lsls	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005078:	f043 0201 	orr.w	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005084:	2201      	movs	r2, #1
 8005086:	409a      	lsls	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d012      	beq.n	80050b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a2:	2201      	movs	r2, #1
 80050a4:	409a      	lsls	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	f043 0202 	orr.w	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ba:	2204      	movs	r2, #4
 80050bc:	409a      	lsls	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d8:	2204      	movs	r2, #4
 80050da:	409a      	lsls	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e4:	f043 0204 	orr.w	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f0:	2210      	movs	r2, #16
 80050f2:	409a      	lsls	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d043      	beq.n	8005184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d03c      	beq.n	8005184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510e:	2210      	movs	r2, #16
 8005110:	409a      	lsls	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d018      	beq.n	8005156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d024      	beq.n	8005184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	4798      	blx	r3
 8005142:	e01f      	b.n	8005184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01b      	beq.n	8005184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	4798      	blx	r3
 8005154:	e016      	b.n	8005184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0208 	bic.w	r2, r2, #8
 8005172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005188:	2220      	movs	r2, #32
 800518a:	409a      	lsls	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 808f 	beq.w	80052b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8087 	beq.w	80052b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	2220      	movs	r2, #32
 80051ac:	409a      	lsls	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d136      	bne.n	800522c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0216 	bic.w	r2, r2, #22
 80051cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <HAL_DMA_IRQHandler+0x1da>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0208 	bic.w	r2, r2, #8
 80051fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005202:	223f      	movs	r2, #63	@ 0x3f
 8005204:	409a      	lsls	r2, r3
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521e:	2b00      	cmp	r3, #0
 8005220:	d07e      	beq.n	8005320 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
        }
        return;
 800522a:	e079      	b.n	8005320 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01d      	beq.n	8005276 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10d      	bne.n	8005264 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524c:	2b00      	cmp	r3, #0
 800524e:	d031      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
 8005258:	e02c      	b.n	80052b4 <HAL_DMA_IRQHandler+0x2a0>
 800525a:	bf00      	nop
 800525c:	20000098 	.word	0x20000098
 8005260:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d023      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
 8005274:	e01e      	b.n	80052b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10f      	bne.n	80052a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0210 	bic.w	r2, r2, #16
 8005292:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d032      	beq.n	8005322 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d022      	beq.n	800530e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2205      	movs	r2, #5
 80052cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d307      	bcc.n	80052fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f2      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x2cc>
 80052fa:	e000      	b.n	80052fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
 800531e:	e000      	b.n	8005322 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005320:	bf00      	nop
    }
  }
}
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800535c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d108      	bne.n	8005380 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800537e:	e007      	b.n	8005390 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	3b10      	subs	r3, #16
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <DMA_CalcBaseAndBitshift+0x64>)
 80053ae:	fba2 2303 	umull	r2, r3, r2, r3
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053b6:	4a13      	ldr	r2, [pc, #76]	@ (8005404 <DMA_CalcBaseAndBitshift+0x68>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d909      	bls.n	80053de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80053d2:	f023 0303 	bic.w	r3, r3, #3
 80053d6:	1d1a      	adds	r2, r3, #4
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	659a      	str	r2, [r3, #88]	@ 0x58
 80053dc:	e007      	b.n	80053ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	aaaaaaab 	.word	0xaaaaaaab
 8005404:	0800e3f8 	.word	0x0800e3f8

08005408 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d11f      	bne.n	8005462 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d856      	bhi.n	80054d6 <DMA_CheckFifoParam+0xce>
 8005428:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <DMA_CheckFifoParam+0x28>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005441 	.word	0x08005441
 8005434:	08005453 	.word	0x08005453
 8005438:	08005441 	.word	0x08005441
 800543c:	080054d7 	.word	0x080054d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d046      	beq.n	80054da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005450:	e043      	b.n	80054da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800545a:	d140      	bne.n	80054de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e03d      	b.n	80054de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800546a:	d121      	bne.n	80054b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d837      	bhi.n	80054e2 <DMA_CheckFifoParam+0xda>
 8005472:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <DMA_CheckFifoParam+0x70>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005489 	.word	0x08005489
 800547c:	0800548f 	.word	0x0800548f
 8005480:	08005489 	.word	0x08005489
 8005484:	080054a1 	.word	0x080054a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e030      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005492:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d025      	beq.n	80054e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800549e:	e022      	b.n	80054e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054a8:	d11f      	bne.n	80054ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054ae:	e01c      	b.n	80054ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d903      	bls.n	80054be <DMA_CheckFifoParam+0xb6>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d003      	beq.n	80054c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054bc:	e018      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      break;
 80054c2:	e015      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	e00b      	b.n	80054ee <DMA_CheckFifoParam+0xe6>
      break;
 80054d6:	bf00      	nop
 80054d8:	e00a      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      break;
 80054da:	bf00      	nop
 80054dc:	e008      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      break;
 80054de:	bf00      	nop
 80054e0:	e006      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      break;
 80054e2:	bf00      	nop
 80054e4:	e004      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <DMA_CheckFifoParam+0xe8>
      break;
 80054ee:	bf00      	nop
    }
  } 
  
  return status; 
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005500:	b480      	push	{r7}
 8005502:	b089      	sub	sp, #36	@ 0x24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	e165      	b.n	80057e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800551c:	2201      	movs	r2, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	429a      	cmp	r2, r3
 8005536:	f040 8154 	bne.w	80057e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b01      	cmp	r3, #1
 8005544:	d005      	beq.n	8005552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800554e:	2b02      	cmp	r3, #2
 8005550:	d130      	bne.n	80055b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	2203      	movs	r2, #3
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4013      	ands	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4313      	orrs	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005588:	2201      	movs	r2, #1
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	4013      	ands	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	f003 0201 	and.w	r2, r3, #1
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d017      	beq.n	80055f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	2203      	movs	r2, #3
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d123      	bne.n	8005644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	08da      	lsrs	r2, r3, #3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3208      	adds	r2, #8
 8005604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	220f      	movs	r2, #15
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	08da      	lsrs	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3208      	adds	r2, #8
 800563e:	69b9      	ldr	r1, [r7, #24]
 8005640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	2203      	movs	r2, #3
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 0203 	and.w	r2, r3, #3
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80ae 	beq.w	80057e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	4b5d      	ldr	r3, [pc, #372]	@ (8005800 <HAL_GPIO_Init+0x300>)
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	4a5c      	ldr	r2, [pc, #368]	@ (8005800 <HAL_GPIO_Init+0x300>)
 8005690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005694:	6453      	str	r3, [r2, #68]	@ 0x44
 8005696:	4b5a      	ldr	r3, [pc, #360]	@ (8005800 <HAL_GPIO_Init+0x300>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056a2:	4a58      	ldr	r2, [pc, #352]	@ (8005804 <HAL_GPIO_Init+0x304>)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	089b      	lsrs	r3, r3, #2
 80056a8:	3302      	adds	r3, #2
 80056aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	220f      	movs	r2, #15
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4013      	ands	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005808 <HAL_GPIO_Init+0x308>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d025      	beq.n	800571a <HAL_GPIO_Init+0x21a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4e      	ldr	r2, [pc, #312]	@ (800580c <HAL_GPIO_Init+0x30c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <HAL_GPIO_Init+0x216>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005810 <HAL_GPIO_Init+0x310>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d019      	beq.n	8005712 <HAL_GPIO_Init+0x212>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005814 <HAL_GPIO_Init+0x314>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_GPIO_Init+0x20e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005818 <HAL_GPIO_Init+0x318>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00d      	beq.n	800570a <HAL_GPIO_Init+0x20a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a4a      	ldr	r2, [pc, #296]	@ (800581c <HAL_GPIO_Init+0x31c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <HAL_GPIO_Init+0x206>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a49      	ldr	r2, [pc, #292]	@ (8005820 <HAL_GPIO_Init+0x320>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_GPIO_Init+0x202>
 80056fe:	2306      	movs	r3, #6
 8005700:	e00c      	b.n	800571c <HAL_GPIO_Init+0x21c>
 8005702:	2307      	movs	r3, #7
 8005704:	e00a      	b.n	800571c <HAL_GPIO_Init+0x21c>
 8005706:	2305      	movs	r3, #5
 8005708:	e008      	b.n	800571c <HAL_GPIO_Init+0x21c>
 800570a:	2304      	movs	r3, #4
 800570c:	e006      	b.n	800571c <HAL_GPIO_Init+0x21c>
 800570e:	2303      	movs	r3, #3
 8005710:	e004      	b.n	800571c <HAL_GPIO_Init+0x21c>
 8005712:	2302      	movs	r3, #2
 8005714:	e002      	b.n	800571c <HAL_GPIO_Init+0x21c>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <HAL_GPIO_Init+0x21c>
 800571a:	2300      	movs	r3, #0
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	f002 0203 	and.w	r2, r2, #3
 8005722:	0092      	lsls	r2, r2, #2
 8005724:	4093      	lsls	r3, r2
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4313      	orrs	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800572c:	4935      	ldr	r1, [pc, #212]	@ (8005804 <HAL_GPIO_Init+0x304>)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	089b      	lsrs	r3, r3, #2
 8005732:	3302      	adds	r3, #2
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800573a:	4b3a      	ldr	r3, [pc, #232]	@ (8005824 <HAL_GPIO_Init+0x324>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800575e:	4a31      	ldr	r2, [pc, #196]	@ (8005824 <HAL_GPIO_Init+0x324>)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005764:	4b2f      	ldr	r3, [pc, #188]	@ (8005824 <HAL_GPIO_Init+0x324>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005788:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <HAL_GPIO_Init+0x324>)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800578e:	4b25      	ldr	r3, [pc, #148]	@ (8005824 <HAL_GPIO_Init+0x324>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	43db      	mvns	r3, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4013      	ands	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <HAL_GPIO_Init+0x324>)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <HAL_GPIO_Init+0x324>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057dc:	4a11      	ldr	r2, [pc, #68]	@ (8005824 <HAL_GPIO_Init+0x324>)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3301      	adds	r3, #1
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	f67f ae96 	bls.w	800551c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3724      	adds	r7, #36	@ 0x24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800
 8005804:	40013800 	.word	0x40013800
 8005808:	40020000 	.word	0x40020000
 800580c:	40020400 	.word	0x40020400
 8005810:	40020800 	.word	0x40020800
 8005814:	40020c00 	.word	0x40020c00
 8005818:	40021000 	.word	0x40021000
 800581c:	40021400 	.word	0x40021400
 8005820:	40021800 	.word	0x40021800
 8005824:	40013c00 	.word	0x40013c00

08005828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	e001      	b.n	800584a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	807b      	strh	r3, [r7, #2]
 8005864:	4613      	mov	r3, r2
 8005866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005868:	787b      	ldrb	r3, [r7, #1]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005874:	e003      	b.n	800587e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	041a      	lsls	r2, r3, #16
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	619a      	str	r2, [r3, #24]
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800589c:	887a      	ldrh	r2, [r7, #2]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4013      	ands	r3, r2
 80058a2:	041a      	lsls	r2, r3, #16
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	43d9      	mvns	r1, r3
 80058a8:	887b      	ldrh	r3, [r7, #2]
 80058aa:	400b      	ands	r3, r1
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	619a      	str	r2, [r3, #24]
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058ca:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058d6:	4a05      	ldr	r2, [pc, #20]	@ (80058ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fe26 	bl	8002530 <HAL_GPIO_EXTI_Callback>
  }
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40013c00 	.word	0x40013c00

080058f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e12b      	b.n	8005b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc fb12 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2224      	movs	r2, #36	@ 0x24
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005954:	f001 fe64 	bl	8007620 <HAL_RCC_GetPCLK1Freq>
 8005958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4a81      	ldr	r2, [pc, #516]	@ (8005b64 <HAL_I2C_Init+0x274>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d807      	bhi.n	8005974 <HAL_I2C_Init+0x84>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a80      	ldr	r2, [pc, #512]	@ (8005b68 <HAL_I2C_Init+0x278>)
 8005968:	4293      	cmp	r3, r2
 800596a:	bf94      	ite	ls
 800596c:	2301      	movls	r3, #1
 800596e:	2300      	movhi	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e006      	b.n	8005982 <HAL_I2C_Init+0x92>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a7d      	ldr	r2, [pc, #500]	@ (8005b6c <HAL_I2C_Init+0x27c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	bf94      	ite	ls
 800597c:	2301      	movls	r3, #1
 800597e:	2300      	movhi	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0e7      	b.n	8005b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a78      	ldr	r2, [pc, #480]	@ (8005b70 <HAL_I2C_Init+0x280>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	0c9b      	lsrs	r3, r3, #18
 8005994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a6a      	ldr	r2, [pc, #424]	@ (8005b64 <HAL_I2C_Init+0x274>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d802      	bhi.n	80059c4 <HAL_I2C_Init+0xd4>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	3301      	adds	r3, #1
 80059c2:	e009      	b.n	80059d8 <HAL_I2C_Init+0xe8>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059ca:	fb02 f303 	mul.w	r3, r2, r3
 80059ce:	4a69      	ldr	r2, [pc, #420]	@ (8005b74 <HAL_I2C_Init+0x284>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	099b      	lsrs	r3, r3, #6
 80059d6:	3301      	adds	r3, #1
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	430b      	orrs	r3, r1
 80059de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80059ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	495c      	ldr	r1, [pc, #368]	@ (8005b64 <HAL_I2C_Init+0x274>)
 80059f4:	428b      	cmp	r3, r1
 80059f6:	d819      	bhi.n	8005a2c <HAL_I2C_Init+0x13c>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1e59      	subs	r1, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a0c:	400b      	ands	r3, r1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_I2C_Init+0x138>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1e59      	subs	r1, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a20:	3301      	adds	r3, #1
 8005a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a26:	e051      	b.n	8005acc <HAL_I2C_Init+0x1dc>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	e04f      	b.n	8005acc <HAL_I2C_Init+0x1dc>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d111      	bne.n	8005a58 <HAL_I2C_Init+0x168>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1e58      	subs	r0, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	440b      	add	r3, r1
 8005a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e012      	b.n	8005a7e <HAL_I2C_Init+0x18e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1e58      	subs	r0, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6859      	ldr	r1, [r3, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	0099      	lsls	r1, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Init+0x196>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e022      	b.n	8005acc <HAL_I2C_Init+0x1dc>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10e      	bne.n	8005aac <HAL_I2C_Init+0x1bc>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1e58      	subs	r0, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	440b      	add	r3, r1
 8005a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aaa:	e00f      	b.n	8005acc <HAL_I2C_Init+0x1dc>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1e58      	subs	r0, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	0099      	lsls	r1, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	6809      	ldr	r1, [r1, #0]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005afa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6911      	ldr	r1, [r2, #16]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68d2      	ldr	r2, [r2, #12]
 8005b06:	4311      	orrs	r1, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	000186a0 	.word	0x000186a0
 8005b68:	001e847f 	.word	0x001e847f
 8005b6c:	003d08ff 	.word	0x003d08ff
 8005b70:	431bde83 	.word	0x431bde83
 8005b74:	10624dd3 	.word	0x10624dd3

08005b78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	460b      	mov	r3, r1
 8005b86:	817b      	strh	r3, [r7, #10]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b8c:	f7fe fc86 	bl	800449c <HAL_GetTick>
 8005b90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	f040 80e0 	bne.w	8005d60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2319      	movs	r3, #25
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4970      	ldr	r1, [pc, #448]	@ (8005d6c <HAL_I2C_Master_Transmit+0x1f4>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f001 fa10 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e0d3      	b.n	8005d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_I2C_Master_Transmit+0x50>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e0cc      	b.n	8005d62 <HAL_I2C_Master_Transmit+0x1ea>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d007      	beq.n	8005bee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0201 	orr.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2221      	movs	r2, #33	@ 0x21
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	893a      	ldrh	r2, [r7, #8]
 8005c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a50      	ldr	r2, [pc, #320]	@ (8005d70 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c30:	8979      	ldrh	r1, [r7, #10]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	6a3a      	ldr	r2, [r7, #32]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 feae 	bl	8006998 <I2C_MasterRequestWrite>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e08d      	b.n	8005d62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c5c:	e066      	b.n	8005d2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	6a39      	ldr	r1, [r7, #32]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f001 face 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00d      	beq.n	8005c8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d107      	bne.n	8005c86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e06b      	b.n	8005d62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d11b      	bne.n	8005d00 <HAL_I2C_Master_Transmit+0x188>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d017      	beq.n	8005d00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	781a      	ldrb	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	6a39      	ldr	r1, [r7, #32]
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f001 fac5 	bl	8007294 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d107      	bne.n	8005d28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e01a      	b.n	8005d62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d194      	bne.n	8005c5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	00100002 	.word	0x00100002
 8005d70:	ffff0000 	.word	0xffff0000

08005d74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	460b      	mov	r3, r1
 8005d88:	813b      	strh	r3, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d8e:	f7fe fb85 	bl	800449c <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	f040 80d9 	bne.w	8005f54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	2319      	movs	r3, #25
 8005da8:	2201      	movs	r2, #1
 8005daa:	496d      	ldr	r1, [pc, #436]	@ (8005f60 <HAL_I2C_Mem_Write+0x1ec>)
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f001 f90f 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0cc      	b.n	8005f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_I2C_Mem_Write+0x56>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e0c5      	b.n	8005f56 <HAL_I2C_Mem_Write+0x1e2>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d007      	beq.n	8005df0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2221      	movs	r2, #33	@ 0x21
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2240      	movs	r2, #64	@ 0x40
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a4d      	ldr	r2, [pc, #308]	@ (8005f64 <HAL_I2C_Mem_Write+0x1f0>)
 8005e30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e32:	88f8      	ldrh	r0, [r7, #6]
 8005e34:	893a      	ldrh	r2, [r7, #8]
 8005e36:	8979      	ldrh	r1, [r7, #10]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	4603      	mov	r3, r0
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fe2a 	bl	8006a9c <I2C_RequestMemoryWrite>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d052      	beq.n	8005ef4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e081      	b.n	8005f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f001 f9d4 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00d      	beq.n	8005e7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d107      	bne.n	8005e7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e06b      	b.n	8005f56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d11b      	bne.n	8005ef4 <HAL_I2C_Mem_Write+0x180>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d017      	beq.n	8005ef4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1aa      	bne.n	8005e52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f001 f9c7 	bl	8007294 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00d      	beq.n	8005f28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d107      	bne.n	8005f24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e016      	b.n	8005f56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	00100002 	.word	0x00100002
 8005f64:	ffff0000 	.word	0xffff0000

08005f68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08c      	sub	sp, #48	@ 0x30
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	461a      	mov	r2, r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	817b      	strh	r3, [r7, #10]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	813b      	strh	r3, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f82:	f7fe fa8b 	bl	800449c <HAL_GetTick>
 8005f86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	f040 8214 	bne.w	80063be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2319      	movs	r3, #25
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	497b      	ldr	r1, [pc, #492]	@ (800618c <HAL_I2C_Mem_Read+0x224>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f001 f815 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fac:	2302      	movs	r3, #2
 8005fae:	e207      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Mem_Read+0x56>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e200      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d007      	beq.n	8005fe4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2222      	movs	r2, #34	@ 0x22
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2240      	movs	r2, #64	@ 0x40
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006014:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a5b      	ldr	r2, [pc, #364]	@ (8006190 <HAL_I2C_Mem_Read+0x228>)
 8006024:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006026:	88f8      	ldrh	r0, [r7, #6]
 8006028:	893a      	ldrh	r2, [r7, #8]
 800602a:	8979      	ldrh	r1, [r7, #10]
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fdc6 	bl	8006bc8 <I2C_RequestMemoryRead>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e1bc      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d113      	bne.n	8006076 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604e:	2300      	movs	r3, #0
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e190      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607a:	2b01      	cmp	r3, #1
 800607c:	d11b      	bne.n	80060b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800608c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608e:	2300      	movs	r3, #0
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e170      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d11b      	bne.n	80060f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	e150      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800610c:	e144      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006112:	2b03      	cmp	r3, #3
 8006114:	f200 80f1 	bhi.w	80062fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611c:	2b01      	cmp	r3, #1
 800611e:	d123      	bne.n	8006168 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006122:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f001 f8fd 	bl	8007324 <I2C_WaitOnRXNEFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e145      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006166:	e117      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800616c:	2b02      	cmp	r3, #2
 800616e:	d14e      	bne.n	800620e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006176:	2200      	movs	r2, #0
 8006178:	4906      	ldr	r1, [pc, #24]	@ (8006194 <HAL_I2C_Mem_Read+0x22c>)
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 ff28 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e11a      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
 800618a:	bf00      	nop
 800618c:	00100002 	.word	0x00100002
 8006190:	ffff0000 	.word	0xffff0000
 8006194:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800620c:	e0c4      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	2200      	movs	r2, #0
 8006216:	496c      	ldr	r1, [pc, #432]	@ (80063c8 <HAL_I2C_Mem_Read+0x460>)
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fed9 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0cb      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006270:	2200      	movs	r2, #0
 8006272:	4955      	ldr	r1, [pc, #340]	@ (80063c8 <HAL_I2C_Mem_Read+0x460>)
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 feab 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e09d      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062f8:	e04e      	b.n	8006398 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f001 f810 	bl	8007324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e058      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b04      	cmp	r3, #4
 800634c:	d124      	bne.n	8006398 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006352:	2b03      	cmp	r3, #3
 8006354:	d107      	bne.n	8006366 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006364:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f aeb6 	bne.w	800610e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e000      	b.n	80063c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80063be:	2302      	movs	r3, #2
  }
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3728      	adds	r7, #40	@ 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	00010004 	.word	0x00010004

080063cc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	@ 0x30
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	4608      	mov	r0, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	461a      	mov	r2, r3
 80063da:	4603      	mov	r3, r0
 80063dc:	817b      	strh	r3, [r7, #10]
 80063de:	460b      	mov	r3, r1
 80063e0:	813b      	strh	r3, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063e6:	f7fe f859 	bl	800449c <HAL_GetTick>
 80063ea:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	f040 8172 	bne.w	80066e2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80063fe:	4b93      	ldr	r3, [pc, #588]	@ (800664c <HAL_I2C_Mem_Read_DMA+0x280>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	08db      	lsrs	r3, r3, #3
 8006404:	4a92      	ldr	r2, [pc, #584]	@ (8006650 <HAL_I2C_Mem_Read_DMA+0x284>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a1a      	lsrs	r2, r3, #8
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009a      	lsls	r2, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3b01      	subs	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d112      	bne.n	800644a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006446:	2302      	movs	r3, #2
 8006448:	e14c      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b02      	cmp	r3, #2
 8006456:	d0df      	beq.n	8006418 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_I2C_Mem_Read_DMA+0x9a>
 8006462:	2302      	movs	r3, #2
 8006464:	e13e      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	d007      	beq.n	800648c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800649a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2222      	movs	r2, #34	@ 0x22
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2240      	movs	r2, #64	@ 0x40
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80064bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a62      	ldr	r2, [pc, #392]	@ (8006654 <HAL_I2C_Mem_Read_DMA+0x288>)
 80064cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80064ce:	897a      	ldrh	r2, [r7, #10]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80064d4:	893a      	ldrh	r2, [r7, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80cc 	beq.w	8006688 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d02d      	beq.n	8006554 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fc:	4a56      	ldr	r2, [pc, #344]	@ (8006658 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80064fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006504:	4a55      	ldr	r2, [pc, #340]	@ (800665c <HAL_I2C_Mem_Read_DMA+0x290>)
 8006506:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	2200      	movs	r2, #0
 800650e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	2200      	movs	r2, #0
 8006516:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	2200      	movs	r2, #0
 800651e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006524:	2200      	movs	r2, #0
 8006526:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3310      	adds	r3, #16
 8006532:	4619      	mov	r1, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	461a      	mov	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653e:	f7fe fcef 	bl	8004f20 <HAL_DMA_Start_IT>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006548:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 8087 	bne.w	8006660 <HAL_I2C_Mem_Read_DMA+0x294>
 8006552:	e013      	b.n	800657c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006568:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0b3      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800657c:	88f8      	ldrh	r0, [r7, #6]
 800657e:	893a      	ldrh	r2, [r7, #8]
 8006580:	8979      	ldrh	r1, [r7, #10]
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	2323      	movs	r3, #35	@ 0x23
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	4603      	mov	r3, r0
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fb1b 	bl	8006bc8 <I2C_RequestMemoryRead>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d023      	beq.n	80065e0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fd17 	bl	8004fd0 <HAL_DMA_Abort_IT>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	2200      	movs	r2, #0
 80065ae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065be:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e081      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d108      	bne.n	80065fa <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e007      	b.n	800660a <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006608:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660a:	2300      	movs	r3, #0
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006636:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	e049      	b.n	80066de <HAL_I2C_Mem_Read_DMA+0x312>
 800664a:	bf00      	nop
 800664c:	20000098 	.word	0x20000098
 8006650:	14f8b589 	.word	0x14f8b589
 8006654:	ffff0000 	.word	0xffff0000
 8006658:	08006d99 	.word	0x08006d99
 800665c:	08006f57 	.word	0x08006f57
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	f043 0210 	orr.w	r2, r3, #16
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e02d      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006688:	88f8      	ldrh	r0, [r7, #6]
 800668a:	893a      	ldrh	r2, [r7, #8]
 800668c:	8979      	ldrh	r1, [r7, #10]
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	2323      	movs	r3, #35	@ 0x23
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4603      	mov	r3, r0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fa95 	bl	8006bc8 <I2C_RequestMemoryRead>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e01d      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066cc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e000      	b.n	80066e4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80066e2:	2302      	movs	r3, #2
  }
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3728      	adds	r7, #40	@ 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	460b      	mov	r3, r1
 80066fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80066fc:	f7fd fece 	bl	800449c <HAL_GetTick>
 8006700:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b20      	cmp	r3, #32
 8006710:	f040 8111 	bne.w	8006936 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2319      	movs	r3, #25
 800671a:	2201      	movs	r2, #1
 800671c:	4988      	ldr	r1, [pc, #544]	@ (8006940 <HAL_I2C_IsDeviceReady+0x254>)
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fc56 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800672a:	2302      	movs	r3, #2
 800672c:	e104      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_I2C_IsDeviceReady+0x50>
 8006738:	2302      	movs	r3, #2
 800673a:	e0fd      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b01      	cmp	r3, #1
 8006750:	d007      	beq.n	8006762 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006770:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2224      	movs	r2, #36	@ 0x24
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a70      	ldr	r2, [pc, #448]	@ (8006944 <HAL_I2C_IsDeviceReady+0x258>)
 8006784:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006794:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2200      	movs	r2, #0
 800679e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fc14 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067bc:	d103      	bne.n	80067c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e0b6      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ca:	897b      	ldrh	r3, [r7, #10]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80067da:	f7fd fe5f 	bl	800449c <HAL_GetTick>
 80067de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006804:	bf0c      	ite	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	2300      	movne	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800680e:	e025      	b.n	800685c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006810:	f7fd fe44 	bl	800449c <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d302      	bcc.n	8006826 <HAL_I2C_IsDeviceReady+0x13a>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	22a0      	movs	r2, #160	@ 0xa0
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b02      	cmp	r3, #2
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2ba0      	cmp	r3, #160	@ 0xa0
 8006866:	d005      	beq.n	8006874 <HAL_I2C_IsDeviceReady+0x188>
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <HAL_I2C_IsDeviceReady+0x188>
 800686e:	7dbb      	ldrb	r3, [r7, #22]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0cd      	beq.n	8006810 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d129      	bne.n	80068de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006898:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	2319      	movs	r3, #25
 80068b6:	2201      	movs	r2, #1
 80068b8:	4921      	ldr	r1, [pc, #132]	@ (8006940 <HAL_I2C_IsDeviceReady+0x254>)
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fb88 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e036      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e02c      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2319      	movs	r3, #25
 80068fe:	2201      	movs	r2, #1
 8006900:	490f      	ldr	r1, [pc, #60]	@ (8006940 <HAL_I2C_IsDeviceReady+0x254>)
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fb64 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e012      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	3301      	adds	r3, #1
 8006916:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	f4ff af32 	bcc.w	8006786 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006936:	2302      	movs	r3, #2
  }
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	00100002 	.word	0x00100002
 8006944:	ffff0000 	.word	0xffff0000

08006948 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	460b      	mov	r3, r1
 80069a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d006      	beq.n	80069c2 <I2C_MasterRequestWrite+0x2a>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d003      	beq.n	80069c2 <I2C_MasterRequestWrite+0x2a>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069c0:	d108      	bne.n	80069d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e00b      	b.n	80069ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d8:	2b12      	cmp	r3, #18
 80069da:	d107      	bne.n	80069ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fae9 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00d      	beq.n	8006a20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a12:	d103      	bne.n	8006a1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e035      	b.n	8006a8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a28:	d108      	bne.n	8006a3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a2a:	897b      	ldrh	r3, [r7, #10]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a38:	611a      	str	r2, [r3, #16]
 8006a3a:	e01b      	b.n	8006a74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a3c:	897b      	ldrh	r3, [r7, #10]
 8006a3e:	11db      	asrs	r3, r3, #7
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f063 030f 	orn	r3, r3, #15
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	490e      	ldr	r1, [pc, #56]	@ (8006a94 <I2C_MasterRequestWrite+0xfc>)
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fb32 	bl	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e010      	b.n	8006a8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a6a:	897b      	ldrh	r3, [r7, #10]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4907      	ldr	r1, [pc, #28]	@ (8006a98 <I2C_MasterRequestWrite+0x100>)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fb22 	bl	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	00010008 	.word	0x00010008
 8006a98:	00010002 	.word	0x00010002

08006a9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4603      	mov	r3, r0
 8006aac:	817b      	strh	r3, [r7, #10]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	813b      	strh	r3, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fa7c 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00d      	beq.n	8006afa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aec:	d103      	bne.n	8006af6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e05f      	b.n	8006bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006afa:	897b      	ldrh	r3, [r7, #10]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	492d      	ldr	r1, [pc, #180]	@ (8006bc4 <I2C_RequestMemoryWrite+0x128>)
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fad7 	bl	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e04c      	b.n	8006bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b38:	6a39      	ldr	r1, [r7, #32]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fb62 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d107      	bne.n	8006b5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e02b      	b.n	8006bba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	611a      	str	r2, [r3, #16]
 8006b72:	e021      	b.n	8006bb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b74:	893b      	ldrh	r3, [r7, #8]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b84:	6a39      	ldr	r1, [r7, #32]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 fb3c 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d107      	bne.n	8006baa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e005      	b.n	8006bba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bae:	893b      	ldrh	r3, [r7, #8]
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	00010002 	.word	0x00010002

08006bc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	817b      	strh	r3, [r7, #10]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	813b      	strh	r3, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f9de 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c28:	d103      	bne.n	8006c32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e0aa      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c36:	897b      	ldrh	r3, [r7, #10]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	4952      	ldr	r1, [pc, #328]	@ (8006d94 <I2C_RequestMemoryRead+0x1cc>)
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa39 	bl	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e097      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fac4 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d107      	bne.n	8006c9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e076      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d105      	bne.n	8006cb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca4:	893b      	ldrh	r3, [r7, #8]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	611a      	str	r2, [r3, #16]
 8006cae:	e021      	b.n	8006cf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb0:	893b      	ldrh	r3, [r7, #8]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc0:	6a39      	ldr	r1, [r7, #32]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fa9e 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d107      	bne.n	8006ce6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ce4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e050      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cea:	893b      	ldrh	r3, [r7, #8]
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf6:	6a39      	ldr	r1, [r7, #32]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fa83 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d107      	bne.n	8006d1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e035      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f947 	bl	8006fd0 <I2C_WaitOnFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d56:	d103      	bne.n	8006d60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e013      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d64:	897b      	ldrh	r3, [r7, #10]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	6a3a      	ldr	r2, [r7, #32]
 8006d78:	4906      	ldr	r1, [pc, #24]	@ (8006d94 <I2C_RequestMemoryRead+0x1cc>)
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f9a2 	bl	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	00010002 	.word	0x00010002

08006d98 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006dca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd8:	2200      	movs	r2, #0
 8006dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	2200      	movs	r2, #0
 8006dea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006df2:	2b21      	cmp	r3, #33	@ 0x21
 8006df4:	d007      	beq.n	8006e06 <I2C_DMAXferCplt+0x6e>
 8006df6:	7cfb      	ldrb	r3, [r7, #19]
 8006df8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006dfc:	2b22      	cmp	r3, #34	@ 0x22
 8006dfe:	d131      	bne.n	8006e64 <I2C_DMAXferCplt+0xcc>
 8006e00:	7cbb      	ldrb	r3, [r7, #18]
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d12e      	bne.n	8006e64 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e14:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e1c:	7cfb      	ldrb	r3, [r7, #19]
 8006e1e:	2b29      	cmp	r3, #41	@ 0x29
 8006e20:	d10a      	bne.n	8006e38 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2221      	movs	r2, #33	@ 0x21
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2228      	movs	r2, #40	@ 0x28
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e30:	6978      	ldr	r0, [r7, #20]
 8006e32:	f7ff fd93 	bl	800695c <HAL_I2C_SlaveTxCpltCallback>
 8006e36:	e00c      	b.n	8006e52 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e38:	7cfb      	ldrb	r3, [r7, #19]
 8006e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e3c:	d109      	bne.n	8006e52 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2222      	movs	r2, #34	@ 0x22
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2228      	movs	r2, #40	@ 0x28
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e4c:	6978      	ldr	r0, [r7, #20]
 8006e4e:	f7ff fd8f 	bl	8006970 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006e60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006e62:	e074      	b.n	8006f4e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d06e      	beq.n	8006f4e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d107      	bne.n	8006e8a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e88:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006e98:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ea0:	d009      	beq.n	8006eb6 <I2C_DMAXferCplt+0x11e>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d006      	beq.n	8006eb6 <I2C_DMAXferCplt+0x11e>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006eae:	d002      	beq.n	8006eb6 <I2C_DMAXferCplt+0x11e>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d107      	bne.n	8006ec6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ed4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ee4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006ef4:	6978      	ldr	r0, [r7, #20]
 8006ef6:	f7ff fd45 	bl	8006984 <HAL_I2C_ErrorCallback>
}
 8006efa:	e028      	b.n	8006f4e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b40      	cmp	r3, #64	@ 0x40
 8006f0e:	d10a      	bne.n	8006f26 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006f1e:	6978      	ldr	r0, [r7, #20]
 8006f20:	f7fb fb2a 	bl	8002578 <HAL_I2C_MemRxCpltCallback>
}
 8006f24:	e013      	b.n	8006f4e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d002      	beq.n	8006f3a <I2C_DMAXferCplt+0x1a2>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d103      	bne.n	8006f42 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f40:	e002      	b.n	8006f48 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2212      	movs	r2, #18
 8006f46:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f48:	6978      	ldr	r0, [r7, #20]
 8006f4a:	f7ff fcfd 	bl	8006948 <HAL_I2C_MasterRxCpltCallback>
}
 8006f4e:	bf00      	nop
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f70:	2200      	movs	r2, #0
 8006f72:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	2200      	movs	r2, #0
 8006f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fe f9cf 	bl	8005328 <HAL_DMA_GetError>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d01b      	beq.n	8006fc8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f9e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	f043 0210 	orr.w	r2, r3, #16
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff fcde 	bl	8006984 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fc8:	bf00      	nop
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	603b      	str	r3, [r7, #0]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fe0:	e048      	b.n	8007074 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d044      	beq.n	8007074 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fea:	f7fd fa57 	bl	800449c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d302      	bcc.n	8007000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d139      	bne.n	8007074 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d10d      	bne.n	8007026 <I2C_WaitOnFlagUntilTimeout+0x56>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	43da      	mvns	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	bf0c      	ite	eq
 800701c:	2301      	moveq	r3, #1
 800701e:	2300      	movne	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	e00c      	b.n	8007040 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	43da      	mvns	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	429a      	cmp	r2, r3
 8007044:	d116      	bne.n	8007074 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007060:	f043 0220 	orr.w	r2, r3, #32
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e023      	b.n	80070bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10d      	bne.n	800709a <I2C_WaitOnFlagUntilTimeout+0xca>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	43da      	mvns	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4013      	ands	r3, r2
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	e00c      	b.n	80070b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	43da      	mvns	r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4013      	ands	r3, r2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d093      	beq.n	8006fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070d2:	e071      	b.n	80071b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e2:	d123      	bne.n	800712c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	f043 0204 	orr.w	r2, r3, #4
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e067      	b.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d041      	beq.n	80071b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007134:	f7fd f9b2 	bl	800449c <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d302      	bcc.n	800714a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d136      	bne.n	80071b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10c      	bne.n	800716e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	43da      	mvns	r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4013      	ands	r3, r2
 8007160:	b29b      	uxth	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	bf14      	ite	ne
 8007166:	2301      	movne	r3, #1
 8007168:	2300      	moveq	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	e00b      	b.n	8007186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	43da      	mvns	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	bf14      	ite	ne
 8007180:	2301      	movne	r3, #1
 8007182:	2300      	moveq	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a4:	f043 0220 	orr.w	r2, r3, #32
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e021      	b.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d10c      	bne.n	80071dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	43da      	mvns	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4013      	ands	r3, r2
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bf14      	ite	ne
 80071d4:	2301      	movne	r3, #1
 80071d6:	2300      	moveq	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	e00b      	b.n	80071f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	43da      	mvns	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf14      	ite	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	2300      	moveq	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f af6d 	bne.w	80070d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007210:	e034      	b.n	800727c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 f8e3 	bl	80073de <I2C_IsAcknowledgeFailed>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e034      	b.n	800728c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d028      	beq.n	800727c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722a:	f7fd f937 	bl	800449c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d302      	bcc.n	8007240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d11d      	bne.n	800727c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800724a:	2b80      	cmp	r3, #128	@ 0x80
 800724c:	d016      	beq.n	800727c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007268:	f043 0220 	orr.w	r2, r3, #32
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e007      	b.n	800728c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007286:	2b80      	cmp	r3, #128	@ 0x80
 8007288:	d1c3      	bne.n	8007212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072a0:	e034      	b.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f89b 	bl	80073de <I2C_IsAcknowledgeFailed>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e034      	b.n	800731c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d028      	beq.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ba:	f7fd f8ef 	bl	800449c <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d302      	bcc.n	80072d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d11d      	bne.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d016      	beq.n	800730c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f8:	f043 0220 	orr.w	r2, r3, #32
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e007      	b.n	800731c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b04      	cmp	r3, #4
 8007318:	d1c3      	bne.n	80072a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007330:	e049      	b.n	80073c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b10      	cmp	r3, #16
 800733e:	d119      	bne.n	8007374 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0210 	mvn.w	r2, #16
 8007348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e030      	b.n	80073d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007374:	f7fd f892 	bl	800449c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	429a      	cmp	r2, r3
 8007382:	d302      	bcc.n	800738a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d11d      	bne.n	80073c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007394:	2b40      	cmp	r3, #64	@ 0x40
 8007396:	d016      	beq.n	80073c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f043 0220 	orr.w	r2, r3, #32
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e007      	b.n	80073d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b40      	cmp	r3, #64	@ 0x40
 80073d2:	d1ae      	bne.n	8007332 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f4:	d11b      	bne.n	800742e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	f043 0204 	orr.w	r2, r3, #4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e0cc      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007450:	4b68      	ldr	r3, [pc, #416]	@ (80075f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d90c      	bls.n	8007478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745e:	4b65      	ldr	r3, [pc, #404]	@ (80075f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007466:	4b63      	ldr	r3, [pc, #396]	@ (80075f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d001      	beq.n	8007478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e0b8      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d020      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007490:	4b59      	ldr	r3, [pc, #356]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4a58      	ldr	r2, [pc, #352]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800749a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0308 	and.w	r3, r3, #8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074a8:	4b53      	ldr	r3, [pc, #332]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4a52      	ldr	r2, [pc, #328]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80074b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074b4:	4b50      	ldr	r3, [pc, #320]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	494d      	ldr	r1, [pc, #308]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d044      	beq.n	800755c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d107      	bne.n	80074ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074da:	4b47      	ldr	r3, [pc, #284]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d119      	bne.n	800751a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e07f      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d003      	beq.n	80074fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d107      	bne.n	800750a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074fa:	4b3f      	ldr	r3, [pc, #252]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e06f      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800750a:	4b3b      	ldr	r3, [pc, #236]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e067      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800751a:	4b37      	ldr	r3, [pc, #220]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f023 0203 	bic.w	r2, r3, #3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	4934      	ldr	r1, [pc, #208]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	4313      	orrs	r3, r2
 800752a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800752c:	f7fc ffb6 	bl	800449c <HAL_GetTick>
 8007530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007532:	e00a      	b.n	800754a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007534:	f7fc ffb2 	bl	800449c <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007542:	4293      	cmp	r3, r2
 8007544:	d901      	bls.n	800754a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e04f      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754a:	4b2b      	ldr	r3, [pc, #172]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 020c 	and.w	r2, r3, #12
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	429a      	cmp	r2, r3
 800755a:	d1eb      	bne.n	8007534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800755c:	4b25      	ldr	r3, [pc, #148]	@ (80075f4 <HAL_RCC_ClockConfig+0x1b8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d20c      	bcs.n	8007584 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800756a:	4b22      	ldr	r3, [pc, #136]	@ (80075f4 <HAL_RCC_ClockConfig+0x1b8>)
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007572:	4b20      	ldr	r3, [pc, #128]	@ (80075f4 <HAL_RCC_ClockConfig+0x1b8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d001      	beq.n	8007584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e032      	b.n	80075ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d008      	beq.n	80075a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007590:	4b19      	ldr	r3, [pc, #100]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4916      	ldr	r1, [pc, #88]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d009      	beq.n	80075c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ae:	4b12      	ldr	r3, [pc, #72]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	490e      	ldr	r1, [pc, #56]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075c2:	f000 f855 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b0b      	ldr	r3, [pc, #44]	@ (80075f8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	091b      	lsrs	r3, r3, #4
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	490a      	ldr	r1, [pc, #40]	@ (80075fc <HAL_RCC_ClockConfig+0x1c0>)
 80075d4:	5ccb      	ldrb	r3, [r1, r3]
 80075d6:	fa22 f303 	lsr.w	r3, r2, r3
 80075da:	4a09      	ldr	r2, [pc, #36]	@ (8007600 <HAL_RCC_ClockConfig+0x1c4>)
 80075dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80075de:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <HAL_RCC_ClockConfig+0x1c8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fc ff16 	bl	8004414 <HAL_InitTick>

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40023c00 	.word	0x40023c00
 80075f8:	40023800 	.word	0x40023800
 80075fc:	0800dc74 	.word	0x0800dc74
 8007600:	20000098 	.word	0x20000098
 8007604:	200000a4 	.word	0x200000a4

08007608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800760c:	4b03      	ldr	r3, [pc, #12]	@ (800761c <HAL_RCC_GetHCLKFreq+0x14>)
 800760e:	681b      	ldr	r3, [r3, #0]
}
 8007610:	4618      	mov	r0, r3
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000098 	.word	0x20000098

08007620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007624:	f7ff fff0 	bl	8007608 <HAL_RCC_GetHCLKFreq>
 8007628:	4602      	mov	r2, r0
 800762a:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	0a9b      	lsrs	r3, r3, #10
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	4903      	ldr	r1, [pc, #12]	@ (8007644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007636:	5ccb      	ldrb	r3, [r1, r3]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40023800 	.word	0x40023800
 8007644:	0800dc84 	.word	0x0800dc84

08007648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800764c:	f7ff ffdc 	bl	8007608 <HAL_RCC_GetHCLKFreq>
 8007650:	4602      	mov	r2, r0
 8007652:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	0b5b      	lsrs	r3, r3, #13
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	4903      	ldr	r1, [pc, #12]	@ (800766c <HAL_RCC_GetPCLK2Freq+0x24>)
 800765e:	5ccb      	ldrb	r3, [r1, r3]
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40023800 	.word	0x40023800
 800766c:	0800dc84 	.word	0x0800dc84

08007670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007674:	b0ae      	sub	sp, #184	@ 0xb8
 8007676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007696:	4bcb      	ldr	r3, [pc, #812]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 030c 	and.w	r3, r3, #12
 800769e:	2b0c      	cmp	r3, #12
 80076a0:	f200 8206 	bhi.w	8007ab0 <HAL_RCC_GetSysClockFreq+0x440>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	08007ab1 	.word	0x08007ab1
 80076b4:	08007ab1 	.word	0x08007ab1
 80076b8:	08007ab1 	.word	0x08007ab1
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	08007ab1 	.word	0x08007ab1
 80076c4:	08007ab1 	.word	0x08007ab1
 80076c8:	08007ab1 	.word	0x08007ab1
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	08007ab1 	.word	0x08007ab1
 80076d4:	08007ab1 	.word	0x08007ab1
 80076d8:	08007ab1 	.word	0x08007ab1
 80076dc:	080078e1 	.word	0x080078e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076e0:	4bb9      	ldr	r3, [pc, #740]	@ (80079c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80076e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80076e6:	e1e7      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076e8:	4bb8      	ldr	r3, [pc, #736]	@ (80079cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80076ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80076ee:	e1e3      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076f0:	4bb4      	ldr	r3, [pc, #720]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076fc:	4bb1      	ldr	r3, [pc, #708]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d071      	beq.n	80077ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007708:	4bae      	ldr	r3, [pc, #696]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	099b      	lsrs	r3, r3, #6
 800770e:	2200      	movs	r2, #0
 8007710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007714:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007718:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800771c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007720:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007724:	2300      	movs	r3, #0
 8007726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800772a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800772e:	4622      	mov	r2, r4
 8007730:	462b      	mov	r3, r5
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f04f 0100 	mov.w	r1, #0
 800773a:	0159      	lsls	r1, r3, #5
 800773c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007740:	0150      	lsls	r0, r2, #5
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4621      	mov	r1, r4
 8007748:	1a51      	subs	r1, r2, r1
 800774a:	6439      	str	r1, [r7, #64]	@ 0x40
 800774c:	4629      	mov	r1, r5
 800774e:	eb63 0301 	sbc.w	r3, r3, r1
 8007752:	647b      	str	r3, [r7, #68]	@ 0x44
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007760:	4649      	mov	r1, r9
 8007762:	018b      	lsls	r3, r1, #6
 8007764:	4641      	mov	r1, r8
 8007766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800776a:	4641      	mov	r1, r8
 800776c:	018a      	lsls	r2, r1, #6
 800776e:	4641      	mov	r1, r8
 8007770:	1a51      	subs	r1, r2, r1
 8007772:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007774:	4649      	mov	r1, r9
 8007776:	eb63 0301 	sbc.w	r3, r3, r1
 800777a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007788:	4649      	mov	r1, r9
 800778a:	00cb      	lsls	r3, r1, #3
 800778c:	4641      	mov	r1, r8
 800778e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007792:	4641      	mov	r1, r8
 8007794:	00ca      	lsls	r2, r1, #3
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	4603      	mov	r3, r0
 800779c:	4622      	mov	r2, r4
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80077a2:	462b      	mov	r3, r5
 80077a4:	460a      	mov	r2, r1
 80077a6:	eb42 0303 	adc.w	r3, r2, r3
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077b8:	4629      	mov	r1, r5
 80077ba:	024b      	lsls	r3, r1, #9
 80077bc:	4621      	mov	r1, r4
 80077be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077c2:	4621      	mov	r1, r4
 80077c4:	024a      	lsls	r2, r1, #9
 80077c6:	4610      	mov	r0, r2
 80077c8:	4619      	mov	r1, r3
 80077ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80077dc:	f7f9 fac4 	bl	8000d68 <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4613      	mov	r3, r2
 80077e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077ea:	e067      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ec:	4b75      	ldr	r3, [pc, #468]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	099b      	lsrs	r3, r3, #6
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80077fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007804:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007806:	2300      	movs	r3, #0
 8007808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800780a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800780e:	4622      	mov	r2, r4
 8007810:	462b      	mov	r3, r5
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f04f 0100 	mov.w	r1, #0
 800781a:	0159      	lsls	r1, r3, #5
 800781c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007820:	0150      	lsls	r0, r2, #5
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4621      	mov	r1, r4
 8007828:	1a51      	subs	r1, r2, r1
 800782a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800782c:	4629      	mov	r1, r5
 800782e:	eb63 0301 	sbc.w	r3, r3, r1
 8007832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007840:	4649      	mov	r1, r9
 8007842:	018b      	lsls	r3, r1, #6
 8007844:	4641      	mov	r1, r8
 8007846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800784a:	4641      	mov	r1, r8
 800784c:	018a      	lsls	r2, r1, #6
 800784e:	4641      	mov	r1, r8
 8007850:	ebb2 0a01 	subs.w	sl, r2, r1
 8007854:	4649      	mov	r1, r9
 8007856:	eb63 0b01 	sbc.w	fp, r3, r1
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	f04f 0300 	mov.w	r3, #0
 8007862:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007866:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800786a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800786e:	4692      	mov	sl, r2
 8007870:	469b      	mov	fp, r3
 8007872:	4623      	mov	r3, r4
 8007874:	eb1a 0303 	adds.w	r3, sl, r3
 8007878:	623b      	str	r3, [r7, #32]
 800787a:	462b      	mov	r3, r5
 800787c:	eb4b 0303 	adc.w	r3, fp, r3
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	f04f 0300 	mov.w	r3, #0
 800788a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800788e:	4629      	mov	r1, r5
 8007890:	028b      	lsls	r3, r1, #10
 8007892:	4621      	mov	r1, r4
 8007894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007898:	4621      	mov	r1, r4
 800789a:	028a      	lsls	r2, r1, #10
 800789c:	4610      	mov	r0, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078a4:	2200      	movs	r2, #0
 80078a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80078a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80078aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80078ae:	f7f9 fa5b 	bl	8000d68 <__aeabi_uldivmod>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4613      	mov	r3, r2
 80078b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80078bc:	4b41      	ldr	r3, [pc, #260]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	3301      	adds	r3, #1
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80078ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80078de:	e0eb      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078e0:	4b38      	ldr	r3, [pc, #224]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078ec:	4b35      	ldr	r3, [pc, #212]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d06b      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078f8:	4b32      	ldr	r3, [pc, #200]	@ (80079c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	099b      	lsrs	r3, r3, #6
 80078fe:	2200      	movs	r2, #0
 8007900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	663b      	str	r3, [r7, #96]	@ 0x60
 800790c:	2300      	movs	r3, #0
 800790e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007910:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007914:	4622      	mov	r2, r4
 8007916:	462b      	mov	r3, r5
 8007918:	f04f 0000 	mov.w	r0, #0
 800791c:	f04f 0100 	mov.w	r1, #0
 8007920:	0159      	lsls	r1, r3, #5
 8007922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007926:	0150      	lsls	r0, r2, #5
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4621      	mov	r1, r4
 800792e:	1a51      	subs	r1, r2, r1
 8007930:	61b9      	str	r1, [r7, #24]
 8007932:	4629      	mov	r1, r5
 8007934:	eb63 0301 	sbc.w	r3, r3, r1
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007946:	4659      	mov	r1, fp
 8007948:	018b      	lsls	r3, r1, #6
 800794a:	4651      	mov	r1, sl
 800794c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007950:	4651      	mov	r1, sl
 8007952:	018a      	lsls	r2, r1, #6
 8007954:	4651      	mov	r1, sl
 8007956:	ebb2 0801 	subs.w	r8, r2, r1
 800795a:	4659      	mov	r1, fp
 800795c:	eb63 0901 	sbc.w	r9, r3, r1
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800796c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007970:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007974:	4690      	mov	r8, r2
 8007976:	4699      	mov	r9, r3
 8007978:	4623      	mov	r3, r4
 800797a:	eb18 0303 	adds.w	r3, r8, r3
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	462b      	mov	r3, r5
 8007982:	eb49 0303 	adc.w	r3, r9, r3
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007994:	4629      	mov	r1, r5
 8007996:	024b      	lsls	r3, r1, #9
 8007998:	4621      	mov	r1, r4
 800799a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800799e:	4621      	mov	r1, r4
 80079a0:	024a      	lsls	r2, r1, #9
 80079a2:	4610      	mov	r0, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079aa:	2200      	movs	r2, #0
 80079ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80079b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079b4:	f7f9 f9d8 	bl	8000d68 <__aeabi_uldivmod>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4613      	mov	r3, r2
 80079be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c2:	e065      	b.n	8007a90 <HAL_RCC_GetSysClockFreq+0x420>
 80079c4:	40023800 	.word	0x40023800
 80079c8:	00f42400 	.word	0x00f42400
 80079cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079d0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x458>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	099b      	lsrs	r3, r3, #6
 80079d6:	2200      	movs	r2, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	4611      	mov	r1, r2
 80079dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e2:	2300      	movs	r3, #0
 80079e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80079e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80079ea:	4642      	mov	r2, r8
 80079ec:	464b      	mov	r3, r9
 80079ee:	f04f 0000 	mov.w	r0, #0
 80079f2:	f04f 0100 	mov.w	r1, #0
 80079f6:	0159      	lsls	r1, r3, #5
 80079f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079fc:	0150      	lsls	r0, r2, #5
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4641      	mov	r1, r8
 8007a04:	1a51      	subs	r1, r2, r1
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	4649      	mov	r1, r9
 8007a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	018b      	lsls	r3, r1, #6
 8007a20:	4651      	mov	r1, sl
 8007a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a26:	4651      	mov	r1, sl
 8007a28:	018a      	lsls	r2, r1, #6
 8007a2a:	4651      	mov	r1, sl
 8007a2c:	1a54      	subs	r4, r2, r1
 8007a2e:	4659      	mov	r1, fp
 8007a30:	eb63 0501 	sbc.w	r5, r3, r1
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	00eb      	lsls	r3, r5, #3
 8007a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a42:	00e2      	lsls	r2, r4, #3
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	18e3      	adds	r3, r4, r3
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	464b      	mov	r3, r9
 8007a50:	eb45 0303 	adc.w	r3, r5, r3
 8007a54:	607b      	str	r3, [r7, #4]
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a62:	4629      	mov	r1, r5
 8007a64:	028b      	lsls	r3, r1, #10
 8007a66:	4621      	mov	r1, r4
 8007a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	028a      	lsls	r2, r1, #10
 8007a70:	4610      	mov	r0, r2
 8007a72:	4619      	mov	r1, r3
 8007a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a78:	2200      	movs	r2, #0
 8007a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a7c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a82:	f7f9 f971 	bl	8000d68 <__aeabi_uldivmod>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007a90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <HAL_RCC_GetSysClockFreq+0x458>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	0f1b      	lsrs	r3, r3, #28
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8007a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007aae:	e003      	b.n	8007ab8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <HAL_RCC_GetSysClockFreq+0x45c>)
 8007ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007ab6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	37b8      	adds	r7, #184	@ 0xb8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	00f42400 	.word	0x00f42400

08007ad0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e28d      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 8083 	beq.w	8007bf6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007af0:	4b94      	ldr	r3, [pc, #592]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d019      	beq.n	8007b30 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007afc:	4b91      	ldr	r3, [pc, #580]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 030c 	and.w	r3, r3, #12
        || \
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d106      	bne.n	8007b16 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007b08:	4b8e      	ldr	r3, [pc, #568]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b14:	d00c      	beq.n	8007b30 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b16:	4b8b      	ldr	r3, [pc, #556]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007b1e:	2b0c      	cmp	r3, #12
 8007b20:	d112      	bne.n	8007b48 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b22:	4b88      	ldr	r3, [pc, #544]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b2e:	d10b      	bne.n	8007b48 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b30:	4b84      	ldr	r3, [pc, #528]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05b      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x124>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d157      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e25a      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b50:	d106      	bne.n	8007b60 <HAL_RCC_OscConfig+0x90>
 8007b52:	4b7c      	ldr	r3, [pc, #496]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a7b      	ldr	r2, [pc, #492]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	e01d      	b.n	8007b9c <HAL_RCC_OscConfig+0xcc>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b68:	d10c      	bne.n	8007b84 <HAL_RCC_OscConfig+0xb4>
 8007b6a:	4b76      	ldr	r3, [pc, #472]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a75      	ldr	r2, [pc, #468]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	4b73      	ldr	r3, [pc, #460]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a72      	ldr	r2, [pc, #456]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e00b      	b.n	8007b9c <HAL_RCC_OscConfig+0xcc>
 8007b84:	4b6f      	ldr	r3, [pc, #444]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a6e      	ldr	r2, [pc, #440]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	4b6c      	ldr	r3, [pc, #432]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a6b      	ldr	r2, [pc, #428]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d013      	beq.n	8007bcc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba4:	f7fc fc7a 	bl	800449c <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bac:	f7fc fc76 	bl	800449c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b64      	cmp	r3, #100	@ 0x64
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e21f      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bbe:	4b61      	ldr	r3, [pc, #388]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f0      	beq.n	8007bac <HAL_RCC_OscConfig+0xdc>
 8007bca:	e014      	b.n	8007bf6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bcc:	f7fc fc66 	bl	800449c <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bd4:	f7fc fc62 	bl	800449c <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b64      	cmp	r3, #100	@ 0x64
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e20b      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007be6:	4b57      	ldr	r3, [pc, #348]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x104>
 8007bf2:	e000      	b.n	8007bf6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d06f      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007c02:	4b50      	ldr	r3, [pc, #320]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 030c 	and.w	r3, r3, #12
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 030c 	and.w	r3, r3, #12
        || \
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d105      	bne.n	8007c26 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c26:	4b47      	ldr	r3, [pc, #284]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007c2e:	2b0c      	cmp	r3, #12
 8007c30:	d11c      	bne.n	8007c6c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c32:	4b44      	ldr	r3, [pc, #272]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d116      	bne.n	8007c6c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c3e:	4b41      	ldr	r3, [pc, #260]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <HAL_RCC_OscConfig+0x186>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d001      	beq.n	8007c56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e1d3      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c56:	4b3b      	ldr	r3, [pc, #236]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4937      	ldr	r1, [pc, #220]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c6a:	e03a      	b.n	8007ce2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d020      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c74:	4b34      	ldr	r3, [pc, #208]	@ (8007d48 <HAL_RCC_OscConfig+0x278>)
 8007c76:	2201      	movs	r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c7a:	f7fc fc0f 	bl	800449c <HAL_GetTick>
 8007c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c80:	e008      	b.n	8007c94 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c82:	f7fc fc0b 	bl	800449c <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e1b4      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c94:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ca0:	4b28      	ldr	r3, [pc, #160]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	4925      	ldr	r1, [pc, #148]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	600b      	str	r3, [r1, #0]
 8007cb4:	e015      	b.n	8007ce2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cb6:	4b24      	ldr	r3, [pc, #144]	@ (8007d48 <HAL_RCC_OscConfig+0x278>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7fc fbee 	bl	800449c <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cc4:	f7fc fbea 	bl	800449c <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e193      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f0      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d036      	beq.n	8007d5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cf6:	4b15      	ldr	r3, [pc, #84]	@ (8007d4c <HAL_RCC_OscConfig+0x27c>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfc:	f7fc fbce 	bl	800449c <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d04:	f7fc fbca 	bl	800449c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e173      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d16:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <HAL_RCC_OscConfig+0x274>)
 8007d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0x234>
 8007d22:	e01b      	b.n	8007d5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d24:	4b09      	ldr	r3, [pc, #36]	@ (8007d4c <HAL_RCC_OscConfig+0x27c>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2a:	f7fc fbb7 	bl	800449c <HAL_GetTick>
 8007d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d30:	e00e      	b.n	8007d50 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d32:	f7fc fbb3 	bl	800449c <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d907      	bls.n	8007d50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e15c      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
 8007d44:	40023800 	.word	0x40023800
 8007d48:	42470000 	.word	0x42470000
 8007d4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d50:	4b8a      	ldr	r3, [pc, #552]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1ea      	bne.n	8007d32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8097 	beq.w	8007e98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d6e:	4b83      	ldr	r3, [pc, #524]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10f      	bne.n	8007d9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	4a7e      	ldr	r2, [pc, #504]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d92:	60bb      	str	r3, [r7, #8]
 8007d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d9a:	4b79      	ldr	r3, [pc, #484]	@ (8007f80 <HAL_RCC_OscConfig+0x4b0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d118      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007da6:	4b76      	ldr	r3, [pc, #472]	@ (8007f80 <HAL_RCC_OscConfig+0x4b0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a75      	ldr	r2, [pc, #468]	@ (8007f80 <HAL_RCC_OscConfig+0x4b0>)
 8007dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007db2:	f7fc fb73 	bl	800449c <HAL_GetTick>
 8007db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db8:	e008      	b.n	8007dcc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dba:	f7fc fb6f 	bl	800449c <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e118      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8007f80 <HAL_RCC_OscConfig+0x4b0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f0      	beq.n	8007dba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d106      	bne.n	8007dee <HAL_RCC_OscConfig+0x31e>
 8007de0:	4b66      	ldr	r3, [pc, #408]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de4:	4a65      	ldr	r2, [pc, #404]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007de6:	f043 0301 	orr.w	r3, r3, #1
 8007dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dec:	e01c      	b.n	8007e28 <HAL_RCC_OscConfig+0x358>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d10c      	bne.n	8007e10 <HAL_RCC_OscConfig+0x340>
 8007df6:	4b61      	ldr	r3, [pc, #388]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dfa:	4a60      	ldr	r2, [pc, #384]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007dfc:	f043 0304 	orr.w	r3, r3, #4
 8007e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e02:	4b5e      	ldr	r3, [pc, #376]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e06:	4a5d      	ldr	r2, [pc, #372]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e0e:	e00b      	b.n	8007e28 <HAL_RCC_OscConfig+0x358>
 8007e10:	4b5a      	ldr	r3, [pc, #360]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e14:	4a59      	ldr	r2, [pc, #356]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e16:	f023 0301 	bic.w	r3, r3, #1
 8007e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e1c:	4b57      	ldr	r3, [pc, #348]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e20:	4a56      	ldr	r2, [pc, #344]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e22:	f023 0304 	bic.w	r3, r3, #4
 8007e26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d015      	beq.n	8007e5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e30:	f7fc fb34 	bl	800449c <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e36:	e00a      	b.n	8007e4e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e38:	f7fc fb30 	bl	800449c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e0d7      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0ee      	beq.n	8007e38 <HAL_RCC_OscConfig+0x368>
 8007e5a:	e014      	b.n	8007e86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5c:	f7fc fb1e 	bl	800449c <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e62:	e00a      	b.n	8007e7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e64:	f7fc fb1a 	bl	800449c <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e0c1      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e7a:	4b40      	ldr	r3, [pc, #256]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1ee      	bne.n	8007e64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e86:	7dfb      	ldrb	r3, [r7, #23]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d105      	bne.n	8007e98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e90:	4a3a      	ldr	r2, [pc, #232]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007e92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80ad 	beq.w	8007ffc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ea2:	4b36      	ldr	r3, [pc, #216]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 030c 	and.w	r3, r3, #12
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d060      	beq.n	8007f70 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d145      	bne.n	8007f42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb6:	4b33      	ldr	r3, [pc, #204]	@ (8007f84 <HAL_RCC_OscConfig+0x4b4>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ebc:	f7fc faee 	bl	800449c <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec4:	f7fc faea 	bl	800449c <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e093      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed6:	4b29      	ldr	r3, [pc, #164]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69da      	ldr	r2, [r3, #28]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	019b      	lsls	r3, r3, #6
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef8:	085b      	lsrs	r3, r3, #1
 8007efa:	3b01      	subs	r3, #1
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	061b      	lsls	r3, r3, #24
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	071b      	lsls	r3, r3, #28
 8007f0e:	491b      	ldr	r1, [pc, #108]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f14:	4b1b      	ldr	r3, [pc, #108]	@ (8007f84 <HAL_RCC_OscConfig+0x4b4>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1a:	f7fc fabf 	bl	800449c <HAL_GetTick>
 8007f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f20:	e008      	b.n	8007f34 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f22:	f7fc fabb 	bl	800449c <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e064      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f34:	4b11      	ldr	r3, [pc, #68]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0f0      	beq.n	8007f22 <HAL_RCC_OscConfig+0x452>
 8007f40:	e05c      	b.n	8007ffc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f42:	4b10      	ldr	r3, [pc, #64]	@ (8007f84 <HAL_RCC_OscConfig+0x4b4>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fc faa8 	bl	800449c <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f50:	f7fc faa4 	bl	800449c <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e04d      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f62:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <HAL_RCC_OscConfig+0x4ac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x480>
 8007f6e:	e045      	b.n	8007ffc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d107      	bne.n	8007f88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e040      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	40007000 	.word	0x40007000
 8007f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f88:	4b1f      	ldr	r3, [pc, #124]	@ (8008008 <HAL_RCC_OscConfig+0x538>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d030      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d129      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d122      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007fb8:	4013      	ands	r3, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d119      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d10f      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d001      	beq.n	8007ffc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	40023800 	.word	0x40023800

0800800c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e041      	b.n	80080a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fb fc84 	bl	8003940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f000 fcca 	bl	80089e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d001      	beq.n	80080c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e046      	b.n	8008152 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a23      	ldr	r2, [pc, #140]	@ (8008160 <HAL_TIM_Base_Start+0xb4>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d022      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080de:	d01d      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008164 <HAL_TIM_Base_Start+0xb8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d018      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008168 <HAL_TIM_Base_Start+0xbc>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d013      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1c      	ldr	r2, [pc, #112]	@ (800816c <HAL_TIM_Base_Start+0xc0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00e      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1b      	ldr	r2, [pc, #108]	@ (8008170 <HAL_TIM_Base_Start+0xc4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a19      	ldr	r2, [pc, #100]	@ (8008174 <HAL_TIM_Base_Start+0xc8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <HAL_TIM_Base_Start+0x70>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	@ (8008178 <HAL_TIM_Base_Start+0xcc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d111      	bne.n	8008140 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b06      	cmp	r3, #6
 800812c:	d010      	beq.n	8008150 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0201 	orr.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813e:	e007      	b.n	8008150 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00
 8008170:	40010400 	.word	0x40010400
 8008174:	40014000 	.word	0x40014000
 8008178:	40001800 	.word	0x40001800

0800817c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b01      	cmp	r3, #1
 800818e:	d001      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e04e      	b.n	8008232 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0201 	orr.w	r2, r2, #1
 80081aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a23      	ldr	r2, [pc, #140]	@ (8008240 <HAL_TIM_Base_Start_IT+0xc4>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d022      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081be:	d01d      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008244 <HAL_TIM_Base_Start_IT+0xc8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d018      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008248 <HAL_TIM_Base_Start_IT+0xcc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1c      	ldr	r2, [pc, #112]	@ (800824c <HAL_TIM_Base_Start_IT+0xd0>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00e      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008250 <HAL_TIM_Base_Start_IT+0xd4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d009      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a19      	ldr	r2, [pc, #100]	@ (8008254 <HAL_TIM_Base_Start_IT+0xd8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <HAL_TIM_Base_Start_IT+0x80>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a18      	ldr	r2, [pc, #96]	@ (8008258 <HAL_TIM_Base_Start_IT+0xdc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d111      	bne.n	8008220 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b06      	cmp	r3, #6
 800820c:	d010      	beq.n	8008230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0201 	orr.w	r2, r2, #1
 800821c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821e:	e007      	b.n	8008230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40010000 	.word	0x40010000
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40010400 	.word	0x40010400
 8008254:	40014000 	.word	0x40014000
 8008258:	40001800 	.word	0x40001800

0800825c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e041      	b.n	80082f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f839 	bl	80082fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f000 fba2 	bl	80089e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <HAL_TIM_PWM_Start+0x24>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	bf14      	ite	ne
 800832c:	2301      	movne	r3, #1
 800832e:	2300      	moveq	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	e022      	b.n	800837a <HAL_TIM_PWM_Start+0x6a>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b04      	cmp	r3, #4
 8008338:	d109      	bne.n	800834e <HAL_TIM_PWM_Start+0x3e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b01      	cmp	r3, #1
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
 8008348:	2300      	moveq	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	e015      	b.n	800837a <HAL_TIM_PWM_Start+0x6a>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b08      	cmp	r3, #8
 8008352:	d109      	bne.n	8008368 <HAL_TIM_PWM_Start+0x58>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b01      	cmp	r3, #1
 800835e:	bf14      	ite	ne
 8008360:	2301      	movne	r3, #1
 8008362:	2300      	moveq	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	e008      	b.n	800837a <HAL_TIM_PWM_Start+0x6a>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b01      	cmp	r3, #1
 8008372:	bf14      	ite	ne
 8008374:	2301      	movne	r3, #1
 8008376:	2300      	moveq	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e07c      	b.n	800847c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_TIM_PWM_Start+0x82>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008390:	e013      	b.n	80083ba <HAL_TIM_PWM_Start+0xaa>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b04      	cmp	r3, #4
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_PWM_Start+0x92>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083a0:	e00b      	b.n	80083ba <HAL_TIM_PWM_Start+0xaa>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_PWM_Start+0xa2>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083b0:	e003      	b.n	80083ba <HAL_TIM_PWM_Start+0xaa>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2201      	movs	r2, #1
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fe04 	bl	8008fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008484 <HAL_TIM_PWM_Start+0x174>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d004      	beq.n	80083dc <HAL_TIM_PWM_Start+0xcc>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008488 <HAL_TIM_PWM_Start+0x178>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d101      	bne.n	80083e0 <HAL_TIM_PWM_Start+0xd0>
 80083dc:	2301      	movs	r3, #1
 80083de:	e000      	b.n	80083e2 <HAL_TIM_PWM_Start+0xd2>
 80083e0:	2300      	movs	r3, #0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a22      	ldr	r2, [pc, #136]	@ (8008484 <HAL_TIM_PWM_Start+0x174>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d022      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008408:	d01d      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1f      	ldr	r2, [pc, #124]	@ (800848c <HAL_TIM_PWM_Start+0x17c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d018      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1d      	ldr	r2, [pc, #116]	@ (8008490 <HAL_TIM_PWM_Start+0x180>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <HAL_TIM_PWM_Start+0x184>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00e      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a16      	ldr	r2, [pc, #88]	@ (8008488 <HAL_TIM_PWM_Start+0x178>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a18      	ldr	r2, [pc, #96]	@ (8008498 <HAL_TIM_PWM_Start+0x188>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d004      	beq.n	8008446 <HAL_TIM_PWM_Start+0x136>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a16      	ldr	r2, [pc, #88]	@ (800849c <HAL_TIM_PWM_Start+0x18c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d111      	bne.n	800846a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b06      	cmp	r3, #6
 8008456:	d010      	beq.n	800847a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0201 	orr.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008468:	e007      	b.n	800847a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0201 	orr.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	40010000 	.word	0x40010000
 8008488:	40010400 	.word	0x40010400
 800848c:	40000400 	.word	0x40000400
 8008490:	40000800 	.word	0x40000800
 8008494:	40000c00 	.word	0x40000c00
 8008498:	40014000 	.word	0x40014000
 800849c:	40001800 	.word	0x40001800

080084a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d020      	beq.n	8008504 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d01b      	beq.n	8008504 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0202 	mvn.w	r2, #2
 80084d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa5b 	bl	80089a6 <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa4d 	bl	8008992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fa5e 	bl	80089ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0304 	and.w	r3, r3, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	d020      	beq.n	8008550 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01b      	beq.n	8008550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0204 	mvn.w	r2, #4
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2202      	movs	r2, #2
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa35 	bl	80089a6 <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa27 	bl	8008992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fa38 	bl	80089ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d020      	beq.n	800859c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01b      	beq.n	800859c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0208 	mvn.w	r2, #8
 800856c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2204      	movs	r2, #4
 8008572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa0f 	bl	80089a6 <HAL_TIM_IC_CaptureCallback>
 8008588:	e005      	b.n	8008596 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa01 	bl	8008992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa12 	bl	80089ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d020      	beq.n	80085e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01b      	beq.n	80085e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0210 	mvn.w	r2, #16
 80085b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2208      	movs	r2, #8
 80085be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f9e9 	bl	80089a6 <HAL_TIM_IC_CaptureCallback>
 80085d4:	e005      	b.n	80085e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9db 	bl	8008992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f9ec 	bl	80089ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00c      	beq.n	800860c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f06f 0201 	mvn.w	r2, #1
 8008604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7f9 ffca 	bl	80025a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00c      	beq.n	8008630 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800861c:	2b00      	cmp	r3, #0
 800861e:	d007      	beq.n	8008630 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fdce 	bl	80091cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800864c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f9bd 	bl	80089ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f003 0320 	and.w	r3, r3, #32
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00c      	beq.n	8008678 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0220 	mvn.w	r2, #32
 8008670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fda0 	bl	80091b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008678:	bf00      	nop
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800869a:	2302      	movs	r3, #2
 800869c:	e0ae      	b.n	80087fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b0c      	cmp	r3, #12
 80086aa:	f200 809f 	bhi.w	80087ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086ae:	a201      	add	r2, pc, #4	@ (adr r2, 80086b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086e9 	.word	0x080086e9
 80086b8:	080087ed 	.word	0x080087ed
 80086bc:	080087ed 	.word	0x080087ed
 80086c0:	080087ed 	.word	0x080087ed
 80086c4:	08008729 	.word	0x08008729
 80086c8:	080087ed 	.word	0x080087ed
 80086cc:	080087ed 	.word	0x080087ed
 80086d0:	080087ed 	.word	0x080087ed
 80086d4:	0800876b 	.word	0x0800876b
 80086d8:	080087ed 	.word	0x080087ed
 80086dc:	080087ed 	.word	0x080087ed
 80086e0:	080087ed 	.word	0x080087ed
 80086e4:	080087ab 	.word	0x080087ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fa24 	bl	8008b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0208 	orr.w	r2, r2, #8
 8008702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0204 	bic.w	r2, r2, #4
 8008712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6999      	ldr	r1, [r3, #24]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	619a      	str	r2, [r3, #24]
      break;
 8008726:	e064      	b.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fa74 	bl	8008c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6999      	ldr	r1, [r3, #24]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	021a      	lsls	r2, r3, #8
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	619a      	str	r2, [r3, #24]
      break;
 8008768:	e043      	b.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fac9 	bl	8008d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69da      	ldr	r2, [r3, #28]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 0208 	orr.w	r2, r2, #8
 8008784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69da      	ldr	r2, [r3, #28]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0204 	bic.w	r2, r2, #4
 8008794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69d9      	ldr	r1, [r3, #28]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	691a      	ldr	r2, [r3, #16]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	61da      	str	r2, [r3, #28]
      break;
 80087a8:	e023      	b.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 fb1d 	bl	8008df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69da      	ldr	r2, [r3, #28]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69d9      	ldr	r1, [r3, #28]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	021a      	lsls	r2, r3, #8
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	61da      	str	r2, [r3, #28]
      break;
 80087ea:	e002      	b.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]
      break;
 80087f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_TIM_ConfigClockSource+0x1c>
 800881c:	2302      	movs	r3, #2
 800881e:	e0b4      	b.n	800898a <HAL_TIM_ConfigClockSource+0x186>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800883e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008858:	d03e      	beq.n	80088d8 <HAL_TIM_ConfigClockSource+0xd4>
 800885a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800885e:	f200 8087 	bhi.w	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008866:	f000 8086 	beq.w	8008976 <HAL_TIM_ConfigClockSource+0x172>
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886e:	d87f      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008870:	2b70      	cmp	r3, #112	@ 0x70
 8008872:	d01a      	beq.n	80088aa <HAL_TIM_ConfigClockSource+0xa6>
 8008874:	2b70      	cmp	r3, #112	@ 0x70
 8008876:	d87b      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008878:	2b60      	cmp	r3, #96	@ 0x60
 800887a:	d050      	beq.n	800891e <HAL_TIM_ConfigClockSource+0x11a>
 800887c:	2b60      	cmp	r3, #96	@ 0x60
 800887e:	d877      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008880:	2b50      	cmp	r3, #80	@ 0x50
 8008882:	d03c      	beq.n	80088fe <HAL_TIM_ConfigClockSource+0xfa>
 8008884:	2b50      	cmp	r3, #80	@ 0x50
 8008886:	d873      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008888:	2b40      	cmp	r3, #64	@ 0x40
 800888a:	d058      	beq.n	800893e <HAL_TIM_ConfigClockSource+0x13a>
 800888c:	2b40      	cmp	r3, #64	@ 0x40
 800888e:	d86f      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008890:	2b30      	cmp	r3, #48	@ 0x30
 8008892:	d064      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x15a>
 8008894:	2b30      	cmp	r3, #48	@ 0x30
 8008896:	d86b      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 8008898:	2b20      	cmp	r3, #32
 800889a:	d060      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x15a>
 800889c:	2b20      	cmp	r3, #32
 800889e:	d867      	bhi.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d05c      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x15a>
 80088a4:	2b10      	cmp	r3, #16
 80088a6:	d05a      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x15a>
 80088a8:	e062      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088ba:	f000 fb69 	bl	8008f90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80088cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	609a      	str	r2, [r3, #8]
      break;
 80088d6:	e04f      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088e8:	f000 fb52 	bl	8008f90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088fa:	609a      	str	r2, [r3, #8]
      break;
 80088fc:	e03c      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800890a:	461a      	mov	r2, r3
 800890c:	f000 fac6 	bl	8008e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2150      	movs	r1, #80	@ 0x50
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fb1f 	bl	8008f5a <TIM_ITRx_SetConfig>
      break;
 800891c:	e02c      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800892a:	461a      	mov	r2, r3
 800892c:	f000 fae5 	bl	8008efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2160      	movs	r1, #96	@ 0x60
 8008936:	4618      	mov	r0, r3
 8008938:	f000 fb0f 	bl	8008f5a <TIM_ITRx_SetConfig>
      break;
 800893c:	e01c      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800894a:	461a      	mov	r2, r3
 800894c:	f000 faa6 	bl	8008e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2140      	movs	r1, #64	@ 0x40
 8008956:	4618      	mov	r0, r3
 8008958:	f000 faff 	bl	8008f5a <TIM_ITRx_SetConfig>
      break;
 800895c:	e00c      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4619      	mov	r1, r3
 8008968:	4610      	mov	r0, r2
 800896a:	f000 faf6 	bl	8008f5a <TIM_ITRx_SetConfig>
      break;
 800896e:	e003      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
      break;
 8008974:	e000      	b.n	8008978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a46      	ldr	r2, [pc, #280]	@ (8008b10 <TIM_Base_SetConfig+0x12c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d013      	beq.n	8008a24 <TIM_Base_SetConfig+0x40>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a02:	d00f      	beq.n	8008a24 <TIM_Base_SetConfig+0x40>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a43      	ldr	r2, [pc, #268]	@ (8008b14 <TIM_Base_SetConfig+0x130>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00b      	beq.n	8008a24 <TIM_Base_SetConfig+0x40>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a42      	ldr	r2, [pc, #264]	@ (8008b18 <TIM_Base_SetConfig+0x134>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d007      	beq.n	8008a24 <TIM_Base_SetConfig+0x40>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a41      	ldr	r2, [pc, #260]	@ (8008b1c <TIM_Base_SetConfig+0x138>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_Base_SetConfig+0x40>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a40      	ldr	r2, [pc, #256]	@ (8008b20 <TIM_Base_SetConfig+0x13c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d108      	bne.n	8008a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a35      	ldr	r2, [pc, #212]	@ (8008b10 <TIM_Base_SetConfig+0x12c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d02b      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a44:	d027      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a32      	ldr	r2, [pc, #200]	@ (8008b14 <TIM_Base_SetConfig+0x130>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d023      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a31      	ldr	r2, [pc, #196]	@ (8008b18 <TIM_Base_SetConfig+0x134>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d01f      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a30      	ldr	r2, [pc, #192]	@ (8008b1c <TIM_Base_SetConfig+0x138>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01b      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a2f      	ldr	r2, [pc, #188]	@ (8008b20 <TIM_Base_SetConfig+0x13c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d017      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a2e      	ldr	r2, [pc, #184]	@ (8008b24 <TIM_Base_SetConfig+0x140>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d013      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a2d      	ldr	r2, [pc, #180]	@ (8008b28 <TIM_Base_SetConfig+0x144>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00f      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2c      	ldr	r2, [pc, #176]	@ (8008b2c <TIM_Base_SetConfig+0x148>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00b      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a2b      	ldr	r2, [pc, #172]	@ (8008b30 <TIM_Base_SetConfig+0x14c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d007      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a2a      	ldr	r2, [pc, #168]	@ (8008b34 <TIM_Base_SetConfig+0x150>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d003      	beq.n	8008a96 <TIM_Base_SetConfig+0xb2>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a29      	ldr	r2, [pc, #164]	@ (8008b38 <TIM_Base_SetConfig+0x154>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d108      	bne.n	8008aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a10      	ldr	r2, [pc, #64]	@ (8008b10 <TIM_Base_SetConfig+0x12c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d003      	beq.n	8008adc <TIM_Base_SetConfig+0xf8>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a12      	ldr	r2, [pc, #72]	@ (8008b20 <TIM_Base_SetConfig+0x13c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d103      	bne.n	8008ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	691a      	ldr	r2, [r3, #16]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d105      	bne.n	8008b02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f023 0201 	bic.w	r2, r3, #1
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	611a      	str	r2, [r3, #16]
  }
}
 8008b02:	bf00      	nop
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	40010000 	.word	0x40010000
 8008b14:	40000400 	.word	0x40000400
 8008b18:	40000800 	.word	0x40000800
 8008b1c:	40000c00 	.word	0x40000c00
 8008b20:	40010400 	.word	0x40010400
 8008b24:	40014000 	.word	0x40014000
 8008b28:	40014400 	.word	0x40014400
 8008b2c:	40014800 	.word	0x40014800
 8008b30:	40001800 	.word	0x40001800
 8008b34:	40001c00 	.word	0x40001c00
 8008b38:	40002000 	.word	0x40002000

08008b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	f023 0201 	bic.w	r2, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f023 0302 	bic.w	r3, r3, #2
 8008b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a20      	ldr	r2, [pc, #128]	@ (8008c14 <TIM_OC1_SetConfig+0xd8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_OC1_SetConfig+0x64>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008c18 <TIM_OC1_SetConfig+0xdc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d10c      	bne.n	8008bba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f023 0308 	bic.w	r3, r3, #8
 8008ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f023 0304 	bic.w	r3, r3, #4
 8008bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a15      	ldr	r2, [pc, #84]	@ (8008c14 <TIM_OC1_SetConfig+0xd8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d003      	beq.n	8008bca <TIM_OC1_SetConfig+0x8e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a14      	ldr	r2, [pc, #80]	@ (8008c18 <TIM_OC1_SetConfig+0xdc>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d111      	bne.n	8008bee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	621a      	str	r2, [r3, #32]
}
 8008c08:	bf00      	nop
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40010400 	.word	0x40010400

08008c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f023 0210 	bic.w	r2, r3, #16
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	021b      	lsls	r3, r3, #8
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f023 0320 	bic.w	r3, r3, #32
 8008c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a22      	ldr	r2, [pc, #136]	@ (8008d00 <TIM_OC2_SetConfig+0xe4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_OC2_SetConfig+0x68>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a21      	ldr	r2, [pc, #132]	@ (8008d04 <TIM_OC2_SetConfig+0xe8>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d10d      	bne.n	8008ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a17      	ldr	r2, [pc, #92]	@ (8008d00 <TIM_OC2_SetConfig+0xe4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_OC2_SetConfig+0x94>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a16      	ldr	r2, [pc, #88]	@ (8008d04 <TIM_OC2_SetConfig+0xe8>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d113      	bne.n	8008cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40010400 	.word	0x40010400

08008d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a21      	ldr	r2, [pc, #132]	@ (8008de8 <TIM_OC3_SetConfig+0xe0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d003      	beq.n	8008d6e <TIM_OC3_SetConfig+0x66>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a20      	ldr	r2, [pc, #128]	@ (8008dec <TIM_OC3_SetConfig+0xe4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d10d      	bne.n	8008d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a16      	ldr	r2, [pc, #88]	@ (8008de8 <TIM_OC3_SetConfig+0xe0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d003      	beq.n	8008d9a <TIM_OC3_SetConfig+0x92>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a15      	ldr	r2, [pc, #84]	@ (8008dec <TIM_OC3_SetConfig+0xe4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d113      	bne.n	8008dc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	621a      	str	r2, [r3, #32]
}
 8008ddc:	bf00      	nop
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	40010000 	.word	0x40010000
 8008dec:	40010400 	.word	0x40010400

08008df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	031b      	lsls	r3, r3, #12
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a12      	ldr	r2, [pc, #72]	@ (8008e94 <TIM_OC4_SetConfig+0xa4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d003      	beq.n	8008e58 <TIM_OC4_SetConfig+0x68>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a11      	ldr	r2, [pc, #68]	@ (8008e98 <TIM_OC4_SetConfig+0xa8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d109      	bne.n	8008e6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	019b      	lsls	r3, r3, #6
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400

08008e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	f023 0201 	bic.w	r2, r3, #1
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f023 030a 	bic.w	r3, r3, #10
 8008ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b087      	sub	sp, #28
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	f023 0210 	bic.w	r2, r3, #16
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	031b      	lsls	r3, r3, #12
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	011b      	lsls	r3, r3, #4
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	621a      	str	r2, [r3, #32]
}
 8008f4e:	bf00      	nop
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	f043 0307 	orr.w	r3, r3, #7
 8008f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	609a      	str	r2, [r3, #8]
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	021a      	lsls	r2, r3, #8
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	609a      	str	r2, [r3, #8]
}
 8008fc4:	bf00      	nop
 8008fc6:	371c      	adds	r7, #28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a1a      	ldr	r2, [r3, #32]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	401a      	ands	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1a      	ldr	r2, [r3, #32]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f003 031f 	and.w	r3, r3, #31
 8009002:	6879      	ldr	r1, [r7, #4]
 8009004:	fa01 f303 	lsl.w	r3, r1, r3
 8009008:	431a      	orrs	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
	...

0800901c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009030:	2302      	movs	r3, #2
 8009032:	e05a      	b.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800905a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a21      	ldr	r2, [pc, #132]	@ (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d022      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009080:	d01d      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a1d      	ldr	r2, [pc, #116]	@ (80090fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d018      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a1b      	ldr	r2, [pc, #108]	@ (8009100 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d013      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a1a      	ldr	r2, [pc, #104]	@ (8009104 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00e      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a18      	ldr	r2, [pc, #96]	@ (8009108 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d009      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a17      	ldr	r2, [pc, #92]	@ (800910c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d004      	beq.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a15      	ldr	r2, [pc, #84]	@ (8009110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d10c      	bne.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40000400 	.word	0x40000400
 8009100:	40000800 	.word	0x40000800
 8009104:	40000c00 	.word	0x40000c00
 8009108:	40010400 	.word	0x40010400
 800910c:	40014000 	.word	0x40014000
 8009110:	40001800 	.word	0x40001800

08009114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009128:	2b01      	cmp	r3, #1
 800912a:	d101      	bne.n	8009130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800912c:	2302      	movs	r3, #2
 800912e:	e03d      	b.n	80091ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e042      	b.n	8009278 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d106      	bne.n	800920c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fa fc6e 	bl	8003ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2224      	movs	r2, #36	@ 0x24
 8009210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f82b 	bl	8009280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695a      	ldr	r2, [r3, #20]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2220      	movs	r2, #32
 8009264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009284:	b0c0      	sub	sp, #256	@ 0x100
 8009286:	af00      	add	r7, sp, #0
 8009288:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929c:	68d9      	ldr	r1, [r3, #12]
 800929e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	ea40 0301 	orr.w	r3, r0, r1
 80092a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	431a      	orrs	r2, r3
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80092d8:	f021 010c 	bic.w	r1, r1, #12
 80092dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092e6:	430b      	orrs	r3, r1
 80092e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80092f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092fa:	6999      	ldr	r1, [r3, #24]
 80092fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	ea40 0301 	orr.w	r3, r0, r1
 8009306:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4b8f      	ldr	r3, [pc, #572]	@ (800954c <UART_SetConfig+0x2cc>)
 8009310:	429a      	cmp	r2, r3
 8009312:	d005      	beq.n	8009320 <UART_SetConfig+0xa0>
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b8d      	ldr	r3, [pc, #564]	@ (8009550 <UART_SetConfig+0x2d0>)
 800931c:	429a      	cmp	r2, r3
 800931e:	d104      	bne.n	800932a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009320:	f7fe f992 	bl	8007648 <HAL_RCC_GetPCLK2Freq>
 8009324:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009328:	e003      	b.n	8009332 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800932a:	f7fe f979 	bl	8007620 <HAL_RCC_GetPCLK1Freq>
 800932e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800933c:	f040 810c 	bne.w	8009558 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009344:	2200      	movs	r2, #0
 8009346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800934a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800934e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009352:	4622      	mov	r2, r4
 8009354:	462b      	mov	r3, r5
 8009356:	1891      	adds	r1, r2, r2
 8009358:	65b9      	str	r1, [r7, #88]	@ 0x58
 800935a:	415b      	adcs	r3, r3
 800935c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800935e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009362:	4621      	mov	r1, r4
 8009364:	eb12 0801 	adds.w	r8, r2, r1
 8009368:	4629      	mov	r1, r5
 800936a:	eb43 0901 	adc.w	r9, r3, r1
 800936e:	f04f 0200 	mov.w	r2, #0
 8009372:	f04f 0300 	mov.w	r3, #0
 8009376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800937a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800937e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009382:	4690      	mov	r8, r2
 8009384:	4699      	mov	r9, r3
 8009386:	4623      	mov	r3, r4
 8009388:	eb18 0303 	adds.w	r3, r8, r3
 800938c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009390:	462b      	mov	r3, r5
 8009392:	eb49 0303 	adc.w	r3, r9, r3
 8009396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800939a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80093aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093ae:	460b      	mov	r3, r1
 80093b0:	18db      	adds	r3, r3, r3
 80093b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80093b4:	4613      	mov	r3, r2
 80093b6:	eb42 0303 	adc.w	r3, r2, r3
 80093ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80093bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80093c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80093c4:	f7f7 fcd0 	bl	8000d68 <__aeabi_uldivmod>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4b61      	ldr	r3, [pc, #388]	@ (8009554 <UART_SetConfig+0x2d4>)
 80093ce:	fba3 2302 	umull	r2, r3, r3, r2
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	011c      	lsls	r4, r3, #4
 80093d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80093e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	1891      	adds	r1, r2, r2
 80093ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80093f0:	415b      	adcs	r3, r3
 80093f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093f8:	4641      	mov	r1, r8
 80093fa:	eb12 0a01 	adds.w	sl, r2, r1
 80093fe:	4649      	mov	r1, r9
 8009400:	eb43 0b01 	adc.w	fp, r3, r1
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009410:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009418:	4692      	mov	sl, r2
 800941a:	469b      	mov	fp, r3
 800941c:	4643      	mov	r3, r8
 800941e:	eb1a 0303 	adds.w	r3, sl, r3
 8009422:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009426:	464b      	mov	r3, r9
 8009428:	eb4b 0303 	adc.w	r3, fp, r3
 800942c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800943c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009440:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009444:	460b      	mov	r3, r1
 8009446:	18db      	adds	r3, r3, r3
 8009448:	643b      	str	r3, [r7, #64]	@ 0x40
 800944a:	4613      	mov	r3, r2
 800944c:	eb42 0303 	adc.w	r3, r2, r3
 8009450:	647b      	str	r3, [r7, #68]	@ 0x44
 8009452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009456:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800945a:	f7f7 fc85 	bl	8000d68 <__aeabi_uldivmod>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4611      	mov	r1, r2
 8009464:	4b3b      	ldr	r3, [pc, #236]	@ (8009554 <UART_SetConfig+0x2d4>)
 8009466:	fba3 2301 	umull	r2, r3, r3, r1
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2264      	movs	r2, #100	@ 0x64
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	1acb      	subs	r3, r1, r3
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800947a:	4b36      	ldr	r3, [pc, #216]	@ (8009554 <UART_SetConfig+0x2d4>)
 800947c:	fba3 2302 	umull	r2, r3, r3, r2
 8009480:	095b      	lsrs	r3, r3, #5
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009488:	441c      	add	r4, r3
 800948a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800948e:	2200      	movs	r2, #0
 8009490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009494:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009498:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	1891      	adds	r1, r2, r2
 80094a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80094a4:	415b      	adcs	r3, r3
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80094ac:	4641      	mov	r1, r8
 80094ae:	1851      	adds	r1, r2, r1
 80094b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80094b2:	4649      	mov	r1, r9
 80094b4:	414b      	adcs	r3, r1
 80094b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80094c4:	4659      	mov	r1, fp
 80094c6:	00cb      	lsls	r3, r1, #3
 80094c8:	4651      	mov	r1, sl
 80094ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ce:	4651      	mov	r1, sl
 80094d0:	00ca      	lsls	r2, r1, #3
 80094d2:	4610      	mov	r0, r2
 80094d4:	4619      	mov	r1, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	4642      	mov	r2, r8
 80094da:	189b      	adds	r3, r3, r2
 80094dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094e0:	464b      	mov	r3, r9
 80094e2:	460a      	mov	r2, r1
 80094e4:	eb42 0303 	adc.w	r3, r2, r3
 80094e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80094fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009500:	460b      	mov	r3, r1
 8009502:	18db      	adds	r3, r3, r3
 8009504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009506:	4613      	mov	r3, r2
 8009508:	eb42 0303 	adc.w	r3, r2, r3
 800950c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800950e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009512:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009516:	f7f7 fc27 	bl	8000d68 <__aeabi_uldivmod>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <UART_SetConfig+0x2d4>)
 8009520:	fba3 1302 	umull	r1, r3, r3, r2
 8009524:	095b      	lsrs	r3, r3, #5
 8009526:	2164      	movs	r1, #100	@ 0x64
 8009528:	fb01 f303 	mul.w	r3, r1, r3
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	3332      	adds	r3, #50	@ 0x32
 8009532:	4a08      	ldr	r2, [pc, #32]	@ (8009554 <UART_SetConfig+0x2d4>)
 8009534:	fba2 2303 	umull	r2, r3, r2, r3
 8009538:	095b      	lsrs	r3, r3, #5
 800953a:	f003 0207 	and.w	r2, r3, #7
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4422      	add	r2, r4
 8009546:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009548:	e106      	b.n	8009758 <UART_SetConfig+0x4d8>
 800954a:	bf00      	nop
 800954c:	40011000 	.word	0x40011000
 8009550:	40011400 	.word	0x40011400
 8009554:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800955c:	2200      	movs	r2, #0
 800955e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009562:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009566:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800956a:	4642      	mov	r2, r8
 800956c:	464b      	mov	r3, r9
 800956e:	1891      	adds	r1, r2, r2
 8009570:	6239      	str	r1, [r7, #32]
 8009572:	415b      	adcs	r3, r3
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
 8009576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800957a:	4641      	mov	r1, r8
 800957c:	1854      	adds	r4, r2, r1
 800957e:	4649      	mov	r1, r9
 8009580:	eb43 0501 	adc.w	r5, r3, r1
 8009584:	f04f 0200 	mov.w	r2, #0
 8009588:	f04f 0300 	mov.w	r3, #0
 800958c:	00eb      	lsls	r3, r5, #3
 800958e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009592:	00e2      	lsls	r2, r4, #3
 8009594:	4614      	mov	r4, r2
 8009596:	461d      	mov	r5, r3
 8009598:	4643      	mov	r3, r8
 800959a:	18e3      	adds	r3, r4, r3
 800959c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095a0:	464b      	mov	r3, r9
 80095a2:	eb45 0303 	adc.w	r3, r5, r3
 80095a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095ba:	f04f 0200 	mov.w	r2, #0
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80095c6:	4629      	mov	r1, r5
 80095c8:	008b      	lsls	r3, r1, #2
 80095ca:	4621      	mov	r1, r4
 80095cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095d0:	4621      	mov	r1, r4
 80095d2:	008a      	lsls	r2, r1, #2
 80095d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80095d8:	f7f7 fbc6 	bl	8000d68 <__aeabi_uldivmod>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4b60      	ldr	r3, [pc, #384]	@ (8009764 <UART_SetConfig+0x4e4>)
 80095e2:	fba3 2302 	umull	r2, r3, r3, r2
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	011c      	lsls	r4, r3, #4
 80095ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80095f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80095fc:	4642      	mov	r2, r8
 80095fe:	464b      	mov	r3, r9
 8009600:	1891      	adds	r1, r2, r2
 8009602:	61b9      	str	r1, [r7, #24]
 8009604:	415b      	adcs	r3, r3
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800960c:	4641      	mov	r1, r8
 800960e:	1851      	adds	r1, r2, r1
 8009610:	6139      	str	r1, [r7, #16]
 8009612:	4649      	mov	r1, r9
 8009614:	414b      	adcs	r3, r1
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	f04f 0300 	mov.w	r3, #0
 8009620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009624:	4659      	mov	r1, fp
 8009626:	00cb      	lsls	r3, r1, #3
 8009628:	4651      	mov	r1, sl
 800962a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800962e:	4651      	mov	r1, sl
 8009630:	00ca      	lsls	r2, r1, #3
 8009632:	4610      	mov	r0, r2
 8009634:	4619      	mov	r1, r3
 8009636:	4603      	mov	r3, r0
 8009638:	4642      	mov	r2, r8
 800963a:	189b      	adds	r3, r3, r2
 800963c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009640:	464b      	mov	r3, r9
 8009642:	460a      	mov	r2, r1
 8009644:	eb42 0303 	adc.w	r3, r2, r3
 8009648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800964c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009656:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009664:	4649      	mov	r1, r9
 8009666:	008b      	lsls	r3, r1, #2
 8009668:	4641      	mov	r1, r8
 800966a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800966e:	4641      	mov	r1, r8
 8009670:	008a      	lsls	r2, r1, #2
 8009672:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009676:	f7f7 fb77 	bl	8000d68 <__aeabi_uldivmod>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4611      	mov	r1, r2
 8009680:	4b38      	ldr	r3, [pc, #224]	@ (8009764 <UART_SetConfig+0x4e4>)
 8009682:	fba3 2301 	umull	r2, r3, r3, r1
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	2264      	movs	r2, #100	@ 0x64
 800968a:	fb02 f303 	mul.w	r3, r2, r3
 800968e:	1acb      	subs	r3, r1, r3
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	3332      	adds	r3, #50	@ 0x32
 8009694:	4a33      	ldr	r2, [pc, #204]	@ (8009764 <UART_SetConfig+0x4e4>)
 8009696:	fba2 2303 	umull	r2, r3, r2, r3
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096a0:	441c      	add	r4, r3
 80096a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096a6:	2200      	movs	r2, #0
 80096a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80096aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80096ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80096b0:	4642      	mov	r2, r8
 80096b2:	464b      	mov	r3, r9
 80096b4:	1891      	adds	r1, r2, r2
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	415b      	adcs	r3, r3
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096c0:	4641      	mov	r1, r8
 80096c2:	1851      	adds	r1, r2, r1
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	4649      	mov	r1, r9
 80096c8:	414b      	adcs	r3, r1
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	f04f 0200 	mov.w	r2, #0
 80096d0:	f04f 0300 	mov.w	r3, #0
 80096d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096d8:	4659      	mov	r1, fp
 80096da:	00cb      	lsls	r3, r1, #3
 80096dc:	4651      	mov	r1, sl
 80096de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096e2:	4651      	mov	r1, sl
 80096e4:	00ca      	lsls	r2, r1, #3
 80096e6:	4610      	mov	r0, r2
 80096e8:	4619      	mov	r1, r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	4642      	mov	r2, r8
 80096ee:	189b      	adds	r3, r3, r2
 80096f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096f2:	464b      	mov	r3, r9
 80096f4:	460a      	mov	r2, r1
 80096f6:	eb42 0303 	adc.w	r3, r2, r3
 80096fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	663b      	str	r3, [r7, #96]	@ 0x60
 8009706:	667a      	str	r2, [r7, #100]	@ 0x64
 8009708:	f04f 0200 	mov.w	r2, #0
 800970c:	f04f 0300 	mov.w	r3, #0
 8009710:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009714:	4649      	mov	r1, r9
 8009716:	008b      	lsls	r3, r1, #2
 8009718:	4641      	mov	r1, r8
 800971a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800971e:	4641      	mov	r1, r8
 8009720:	008a      	lsls	r2, r1, #2
 8009722:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009726:	f7f7 fb1f 	bl	8000d68 <__aeabi_uldivmod>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4b0d      	ldr	r3, [pc, #52]	@ (8009764 <UART_SetConfig+0x4e4>)
 8009730:	fba3 1302 	umull	r1, r3, r3, r2
 8009734:	095b      	lsrs	r3, r3, #5
 8009736:	2164      	movs	r1, #100	@ 0x64
 8009738:	fb01 f303 	mul.w	r3, r1, r3
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	011b      	lsls	r3, r3, #4
 8009740:	3332      	adds	r3, #50	@ 0x32
 8009742:	4a08      	ldr	r2, [pc, #32]	@ (8009764 <UART_SetConfig+0x4e4>)
 8009744:	fba2 2303 	umull	r2, r3, r2, r3
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	f003 020f 	and.w	r2, r3, #15
 800974e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4422      	add	r2, r4
 8009756:	609a      	str	r2, [r3, #8]
}
 8009758:	bf00      	nop
 800975a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800975e:	46bd      	mov	sp, r7
 8009760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009764:	51eb851f 	.word	0x51eb851f

08009768 <__cvt>:
 8009768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	ec57 6b10 	vmov	r6, r7, d0
 8009770:	2f00      	cmp	r7, #0
 8009772:	460c      	mov	r4, r1
 8009774:	4619      	mov	r1, r3
 8009776:	463b      	mov	r3, r7
 8009778:	bfbb      	ittet	lt
 800977a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800977e:	461f      	movlt	r7, r3
 8009780:	2300      	movge	r3, #0
 8009782:	232d      	movlt	r3, #45	@ 0x2d
 8009784:	700b      	strb	r3, [r1, #0]
 8009786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009788:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800978c:	4691      	mov	r9, r2
 800978e:	f023 0820 	bic.w	r8, r3, #32
 8009792:	bfbc      	itt	lt
 8009794:	4632      	movlt	r2, r6
 8009796:	4616      	movlt	r6, r2
 8009798:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800979c:	d005      	beq.n	80097aa <__cvt+0x42>
 800979e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80097a2:	d100      	bne.n	80097a6 <__cvt+0x3e>
 80097a4:	3401      	adds	r4, #1
 80097a6:	2102      	movs	r1, #2
 80097a8:	e000      	b.n	80097ac <__cvt+0x44>
 80097aa:	2103      	movs	r1, #3
 80097ac:	ab03      	add	r3, sp, #12
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	ab02      	add	r3, sp, #8
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	ec47 6b10 	vmov	d0, r6, r7
 80097b8:	4653      	mov	r3, sl
 80097ba:	4622      	mov	r2, r4
 80097bc:	f000 fe5c 	bl	800a478 <_dtoa_r>
 80097c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097c4:	4605      	mov	r5, r0
 80097c6:	d119      	bne.n	80097fc <__cvt+0x94>
 80097c8:	f019 0f01 	tst.w	r9, #1
 80097cc:	d00e      	beq.n	80097ec <__cvt+0x84>
 80097ce:	eb00 0904 	add.w	r9, r0, r4
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f995 	bl	8000b08 <__aeabi_dcmpeq>
 80097de:	b108      	cbz	r0, 80097e4 <__cvt+0x7c>
 80097e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80097e4:	2230      	movs	r2, #48	@ 0x30
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	454b      	cmp	r3, r9
 80097ea:	d31e      	bcc.n	800982a <__cvt+0xc2>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097f0:	1b5b      	subs	r3, r3, r5
 80097f2:	4628      	mov	r0, r5
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	b004      	add	sp, #16
 80097f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009800:	eb00 0904 	add.w	r9, r0, r4
 8009804:	d1e5      	bne.n	80097d2 <__cvt+0x6a>
 8009806:	7803      	ldrb	r3, [r0, #0]
 8009808:	2b30      	cmp	r3, #48	@ 0x30
 800980a:	d10a      	bne.n	8009822 <__cvt+0xba>
 800980c:	2200      	movs	r2, #0
 800980e:	2300      	movs	r3, #0
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f7 f978 	bl	8000b08 <__aeabi_dcmpeq>
 8009818:	b918      	cbnz	r0, 8009822 <__cvt+0xba>
 800981a:	f1c4 0401 	rsb	r4, r4, #1
 800981e:	f8ca 4000 	str.w	r4, [sl]
 8009822:	f8da 3000 	ldr.w	r3, [sl]
 8009826:	4499      	add	r9, r3
 8009828:	e7d3      	b.n	80097d2 <__cvt+0x6a>
 800982a:	1c59      	adds	r1, r3, #1
 800982c:	9103      	str	r1, [sp, #12]
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e7d9      	b.n	80097e6 <__cvt+0x7e>

08009832 <__exponent>:
 8009832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009834:	2900      	cmp	r1, #0
 8009836:	bfba      	itte	lt
 8009838:	4249      	neglt	r1, r1
 800983a:	232d      	movlt	r3, #45	@ 0x2d
 800983c:	232b      	movge	r3, #43	@ 0x2b
 800983e:	2909      	cmp	r1, #9
 8009840:	7002      	strb	r2, [r0, #0]
 8009842:	7043      	strb	r3, [r0, #1]
 8009844:	dd29      	ble.n	800989a <__exponent+0x68>
 8009846:	f10d 0307 	add.w	r3, sp, #7
 800984a:	461d      	mov	r5, r3
 800984c:	270a      	movs	r7, #10
 800984e:	461a      	mov	r2, r3
 8009850:	fbb1 f6f7 	udiv	r6, r1, r7
 8009854:	fb07 1416 	mls	r4, r7, r6, r1
 8009858:	3430      	adds	r4, #48	@ 0x30
 800985a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800985e:	460c      	mov	r4, r1
 8009860:	2c63      	cmp	r4, #99	@ 0x63
 8009862:	f103 33ff 	add.w	r3, r3, #4294967295
 8009866:	4631      	mov	r1, r6
 8009868:	dcf1      	bgt.n	800984e <__exponent+0x1c>
 800986a:	3130      	adds	r1, #48	@ 0x30
 800986c:	1e94      	subs	r4, r2, #2
 800986e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009872:	1c41      	adds	r1, r0, #1
 8009874:	4623      	mov	r3, r4
 8009876:	42ab      	cmp	r3, r5
 8009878:	d30a      	bcc.n	8009890 <__exponent+0x5e>
 800987a:	f10d 0309 	add.w	r3, sp, #9
 800987e:	1a9b      	subs	r3, r3, r2
 8009880:	42ac      	cmp	r4, r5
 8009882:	bf88      	it	hi
 8009884:	2300      	movhi	r3, #0
 8009886:	3302      	adds	r3, #2
 8009888:	4403      	add	r3, r0
 800988a:	1a18      	subs	r0, r3, r0
 800988c:	b003      	add	sp, #12
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009890:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009894:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009898:	e7ed      	b.n	8009876 <__exponent+0x44>
 800989a:	2330      	movs	r3, #48	@ 0x30
 800989c:	3130      	adds	r1, #48	@ 0x30
 800989e:	7083      	strb	r3, [r0, #2]
 80098a0:	70c1      	strb	r1, [r0, #3]
 80098a2:	1d03      	adds	r3, r0, #4
 80098a4:	e7f1      	b.n	800988a <__exponent+0x58>
	...

080098a8 <_printf_float>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	b08d      	sub	sp, #52	@ 0x34
 80098ae:	460c      	mov	r4, r1
 80098b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80098b4:	4616      	mov	r6, r2
 80098b6:	461f      	mov	r7, r3
 80098b8:	4605      	mov	r5, r0
 80098ba:	f000 fcdb 	bl	800a274 <_localeconv_r>
 80098be:	6803      	ldr	r3, [r0, #0]
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7f6 fcf4 	bl	80002b0 <strlen>
 80098c8:	2300      	movs	r3, #0
 80098ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80098cc:	f8d8 3000 	ldr.w	r3, [r8]
 80098d0:	9005      	str	r0, [sp, #20]
 80098d2:	3307      	adds	r3, #7
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	f103 0208 	add.w	r2, r3, #8
 80098dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098e0:	f8d4 b000 	ldr.w	fp, [r4]
 80098e4:	f8c8 2000 	str.w	r2, [r8]
 80098e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098f0:	9307      	str	r3, [sp, #28]
 80098f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80098f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009b70 <_printf_float+0x2c8>)
 8009900:	f04f 32ff 	mov.w	r2, #4294967295
 8009904:	f7f7 f932 	bl	8000b6c <__aeabi_dcmpun>
 8009908:	bb70      	cbnz	r0, 8009968 <_printf_float+0xc0>
 800990a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800990e:	4b98      	ldr	r3, [pc, #608]	@ (8009b70 <_printf_float+0x2c8>)
 8009910:	f04f 32ff 	mov.w	r2, #4294967295
 8009914:	f7f7 f90c 	bl	8000b30 <__aeabi_dcmple>
 8009918:	bb30      	cbnz	r0, 8009968 <_printf_float+0xc0>
 800991a:	2200      	movs	r2, #0
 800991c:	2300      	movs	r3, #0
 800991e:	4640      	mov	r0, r8
 8009920:	4649      	mov	r1, r9
 8009922:	f7f7 f8fb 	bl	8000b1c <__aeabi_dcmplt>
 8009926:	b110      	cbz	r0, 800992e <_printf_float+0x86>
 8009928:	232d      	movs	r3, #45	@ 0x2d
 800992a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800992e:	4a91      	ldr	r2, [pc, #580]	@ (8009b74 <_printf_float+0x2cc>)
 8009930:	4b91      	ldr	r3, [pc, #580]	@ (8009b78 <_printf_float+0x2d0>)
 8009932:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009936:	bf94      	ite	ls
 8009938:	4690      	movls	r8, r2
 800993a:	4698      	movhi	r8, r3
 800993c:	2303      	movs	r3, #3
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	f02b 0304 	bic.w	r3, fp, #4
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	f04f 0900 	mov.w	r9, #0
 800994a:	9700      	str	r7, [sp, #0]
 800994c:	4633      	mov	r3, r6
 800994e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009950:	4621      	mov	r1, r4
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f9d2 	bl	8009cfc <_printf_common>
 8009958:	3001      	adds	r0, #1
 800995a:	f040 808d 	bne.w	8009a78 <_printf_float+0x1d0>
 800995e:	f04f 30ff 	mov.w	r0, #4294967295
 8009962:	b00d      	add	sp, #52	@ 0x34
 8009964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009968:	4642      	mov	r2, r8
 800996a:	464b      	mov	r3, r9
 800996c:	4640      	mov	r0, r8
 800996e:	4649      	mov	r1, r9
 8009970:	f7f7 f8fc 	bl	8000b6c <__aeabi_dcmpun>
 8009974:	b140      	cbz	r0, 8009988 <_printf_float+0xe0>
 8009976:	464b      	mov	r3, r9
 8009978:	2b00      	cmp	r3, #0
 800997a:	bfbc      	itt	lt
 800997c:	232d      	movlt	r3, #45	@ 0x2d
 800997e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009982:	4a7e      	ldr	r2, [pc, #504]	@ (8009b7c <_printf_float+0x2d4>)
 8009984:	4b7e      	ldr	r3, [pc, #504]	@ (8009b80 <_printf_float+0x2d8>)
 8009986:	e7d4      	b.n	8009932 <_printf_float+0x8a>
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800998e:	9206      	str	r2, [sp, #24]
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	d13b      	bne.n	8009a0c <_printf_float+0x164>
 8009994:	2306      	movs	r3, #6
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800999c:	2300      	movs	r3, #0
 800999e:	6022      	str	r2, [r4, #0]
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80099a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80099a8:	ab09      	add	r3, sp, #36	@ 0x24
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	6861      	ldr	r1, [r4, #4]
 80099ae:	ec49 8b10 	vmov	d0, r8, r9
 80099b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80099b6:	4628      	mov	r0, r5
 80099b8:	f7ff fed6 	bl	8009768 <__cvt>
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099c0:	2b47      	cmp	r3, #71	@ 0x47
 80099c2:	4680      	mov	r8, r0
 80099c4:	d129      	bne.n	8009a1a <_printf_float+0x172>
 80099c6:	1cc8      	adds	r0, r1, #3
 80099c8:	db02      	blt.n	80099d0 <_printf_float+0x128>
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	4299      	cmp	r1, r3
 80099ce:	dd41      	ble.n	8009a54 <_printf_float+0x1ac>
 80099d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80099d4:	fa5f fa8a 	uxtb.w	sl, sl
 80099d8:	3901      	subs	r1, #1
 80099da:	4652      	mov	r2, sl
 80099dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80099e2:	f7ff ff26 	bl	8009832 <__exponent>
 80099e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099e8:	1813      	adds	r3, r2, r0
 80099ea:	2a01      	cmp	r2, #1
 80099ec:	4681      	mov	r9, r0
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	dc02      	bgt.n	80099f8 <_printf_float+0x150>
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	07d2      	lsls	r2, r2, #31
 80099f6:	d501      	bpl.n	80099fc <_printf_float+0x154>
 80099f8:	3301      	adds	r3, #1
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0a2      	beq.n	800994a <_printf_float+0xa2>
 8009a04:	232d      	movs	r3, #45	@ 0x2d
 8009a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a0a:	e79e      	b.n	800994a <_printf_float+0xa2>
 8009a0c:	9a06      	ldr	r2, [sp, #24]
 8009a0e:	2a47      	cmp	r2, #71	@ 0x47
 8009a10:	d1c2      	bne.n	8009998 <_printf_float+0xf0>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1c0      	bne.n	8009998 <_printf_float+0xf0>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e7bd      	b.n	8009996 <_printf_float+0xee>
 8009a1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a1e:	d9db      	bls.n	80099d8 <_printf_float+0x130>
 8009a20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a24:	d118      	bne.n	8009a58 <_printf_float+0x1b0>
 8009a26:	2900      	cmp	r1, #0
 8009a28:	6863      	ldr	r3, [r4, #4]
 8009a2a:	dd0b      	ble.n	8009a44 <_printf_float+0x19c>
 8009a2c:	6121      	str	r1, [r4, #16]
 8009a2e:	b913      	cbnz	r3, 8009a36 <_printf_float+0x18e>
 8009a30:	6822      	ldr	r2, [r4, #0]
 8009a32:	07d0      	lsls	r0, r2, #31
 8009a34:	d502      	bpl.n	8009a3c <_printf_float+0x194>
 8009a36:	3301      	adds	r3, #1
 8009a38:	440b      	add	r3, r1
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a3e:	f04f 0900 	mov.w	r9, #0
 8009a42:	e7db      	b.n	80099fc <_printf_float+0x154>
 8009a44:	b913      	cbnz	r3, 8009a4c <_printf_float+0x1a4>
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	07d2      	lsls	r2, r2, #31
 8009a4a:	d501      	bpl.n	8009a50 <_printf_float+0x1a8>
 8009a4c:	3302      	adds	r3, #2
 8009a4e:	e7f4      	b.n	8009a3a <_printf_float+0x192>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e7f2      	b.n	8009a3a <_printf_float+0x192>
 8009a54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	db05      	blt.n	8009a6a <_printf_float+0x1c2>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	6121      	str	r1, [r4, #16]
 8009a62:	07d8      	lsls	r0, r3, #31
 8009a64:	d5ea      	bpl.n	8009a3c <_printf_float+0x194>
 8009a66:	1c4b      	adds	r3, r1, #1
 8009a68:	e7e7      	b.n	8009a3a <_printf_float+0x192>
 8009a6a:	2900      	cmp	r1, #0
 8009a6c:	bfd4      	ite	le
 8009a6e:	f1c1 0202 	rsble	r2, r1, #2
 8009a72:	2201      	movgt	r2, #1
 8009a74:	4413      	add	r3, r2
 8009a76:	e7e0      	b.n	8009a3a <_printf_float+0x192>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	055a      	lsls	r2, r3, #21
 8009a7c:	d407      	bmi.n	8009a8e <_printf_float+0x1e6>
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	4642      	mov	r2, r8
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d12b      	bne.n	8009ae4 <_printf_float+0x23c>
 8009a8c:	e767      	b.n	800995e <_printf_float+0xb6>
 8009a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a92:	f240 80dd 	bls.w	8009c50 <_printf_float+0x3a8>
 8009a96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f7f7 f833 	bl	8000b08 <__aeabi_dcmpeq>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d033      	beq.n	8009b0e <_printf_float+0x266>
 8009aa6:	4a37      	ldr	r2, [pc, #220]	@ (8009b84 <_printf_float+0x2dc>)
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b8      	blx	r7
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	f43f af54 	beq.w	800995e <_printf_float+0xb6>
 8009ab6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009aba:	4543      	cmp	r3, r8
 8009abc:	db02      	blt.n	8009ac4 <_printf_float+0x21c>
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	07d8      	lsls	r0, r3, #31
 8009ac2:	d50f      	bpl.n	8009ae4 <_printf_float+0x23c>
 8009ac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4628      	mov	r0, r5
 8009acc:	47b8      	blx	r7
 8009ace:	3001      	adds	r0, #1
 8009ad0:	f43f af45 	beq.w	800995e <_printf_float+0xb6>
 8009ad4:	f04f 0900 	mov.w	r9, #0
 8009ad8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009adc:	f104 0a1a 	add.w	sl, r4, #26
 8009ae0:	45c8      	cmp	r8, r9
 8009ae2:	dc09      	bgt.n	8009af8 <_printf_float+0x250>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	079b      	lsls	r3, r3, #30
 8009ae8:	f100 8103 	bmi.w	8009cf2 <_printf_float+0x44a>
 8009aec:	68e0      	ldr	r0, [r4, #12]
 8009aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009af0:	4298      	cmp	r0, r3
 8009af2:	bfb8      	it	lt
 8009af4:	4618      	movlt	r0, r3
 8009af6:	e734      	b.n	8009962 <_printf_float+0xba>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4652      	mov	r2, sl
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f af2b 	beq.w	800995e <_printf_float+0xb6>
 8009b08:	f109 0901 	add.w	r9, r9, #1
 8009b0c:	e7e8      	b.n	8009ae0 <_printf_float+0x238>
 8009b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	dc39      	bgt.n	8009b88 <_printf_float+0x2e0>
 8009b14:	4a1b      	ldr	r2, [pc, #108]	@ (8009b84 <_printf_float+0x2dc>)
 8009b16:	2301      	movs	r3, #1
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f af1d 	beq.w	800995e <_printf_float+0xb6>
 8009b24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b28:	ea59 0303 	orrs.w	r3, r9, r3
 8009b2c:	d102      	bne.n	8009b34 <_printf_float+0x28c>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	07d9      	lsls	r1, r3, #31
 8009b32:	d5d7      	bpl.n	8009ae4 <_printf_float+0x23c>
 8009b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	47b8      	blx	r7
 8009b3e:	3001      	adds	r0, #1
 8009b40:	f43f af0d 	beq.w	800995e <_printf_float+0xb6>
 8009b44:	f04f 0a00 	mov.w	sl, #0
 8009b48:	f104 0b1a 	add.w	fp, r4, #26
 8009b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4e:	425b      	negs	r3, r3
 8009b50:	4553      	cmp	r3, sl
 8009b52:	dc01      	bgt.n	8009b58 <_printf_float+0x2b0>
 8009b54:	464b      	mov	r3, r9
 8009b56:	e793      	b.n	8009a80 <_printf_float+0x1d8>
 8009b58:	2301      	movs	r3, #1
 8009b5a:	465a      	mov	r2, fp
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4628      	mov	r0, r5
 8009b60:	47b8      	blx	r7
 8009b62:	3001      	adds	r0, #1
 8009b64:	f43f aefb 	beq.w	800995e <_printf_float+0xb6>
 8009b68:	f10a 0a01 	add.w	sl, sl, #1
 8009b6c:	e7ee      	b.n	8009b4c <_printf_float+0x2a4>
 8009b6e:	bf00      	nop
 8009b70:	7fefffff 	.word	0x7fefffff
 8009b74:	0800e400 	.word	0x0800e400
 8009b78:	0800e404 	.word	0x0800e404
 8009b7c:	0800e408 	.word	0x0800e408
 8009b80:	0800e40c 	.word	0x0800e40c
 8009b84:	0800e410 	.word	0x0800e410
 8009b88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b8e:	4553      	cmp	r3, sl
 8009b90:	bfa8      	it	ge
 8009b92:	4653      	movge	r3, sl
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	4699      	mov	r9, r3
 8009b98:	dc36      	bgt.n	8009c08 <_printf_float+0x360>
 8009b9a:	f04f 0b00 	mov.w	fp, #0
 8009b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ba2:	f104 021a 	add.w	r2, r4, #26
 8009ba6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ba8:	9306      	str	r3, [sp, #24]
 8009baa:	eba3 0309 	sub.w	r3, r3, r9
 8009bae:	455b      	cmp	r3, fp
 8009bb0:	dc31      	bgt.n	8009c16 <_printf_float+0x36e>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	459a      	cmp	sl, r3
 8009bb6:	dc3a      	bgt.n	8009c2e <_printf_float+0x386>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	07da      	lsls	r2, r3, #31
 8009bbc:	d437      	bmi.n	8009c2e <_printf_float+0x386>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc0:	ebaa 0903 	sub.w	r9, sl, r3
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8009bca:	4599      	cmp	r9, r3
 8009bcc:	bfa8      	it	ge
 8009bce:	4699      	movge	r9, r3
 8009bd0:	f1b9 0f00 	cmp.w	r9, #0
 8009bd4:	dc33      	bgt.n	8009c3e <_printf_float+0x396>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bde:	f104 0b1a 	add.w	fp, r4, #26
 8009be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be4:	ebaa 0303 	sub.w	r3, sl, r3
 8009be8:	eba3 0309 	sub.w	r3, r3, r9
 8009bec:	4543      	cmp	r3, r8
 8009bee:	f77f af79 	ble.w	8009ae4 <_printf_float+0x23c>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	465a      	mov	r2, fp
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f aeae 	beq.w	800995e <_printf_float+0xb6>
 8009c02:	f108 0801 	add.w	r8, r8, #1
 8009c06:	e7ec      	b.n	8009be2 <_printf_float+0x33a>
 8009c08:	4642      	mov	r2, r8
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	47b8      	blx	r7
 8009c10:	3001      	adds	r0, #1
 8009c12:	d1c2      	bne.n	8009b9a <_printf_float+0x2f2>
 8009c14:	e6a3      	b.n	800995e <_printf_float+0xb6>
 8009c16:	2301      	movs	r3, #1
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	9206      	str	r2, [sp, #24]
 8009c1e:	47b8      	blx	r7
 8009c20:	3001      	adds	r0, #1
 8009c22:	f43f ae9c 	beq.w	800995e <_printf_float+0xb6>
 8009c26:	9a06      	ldr	r2, [sp, #24]
 8009c28:	f10b 0b01 	add.w	fp, fp, #1
 8009c2c:	e7bb      	b.n	8009ba6 <_printf_float+0x2fe>
 8009c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c32:	4631      	mov	r1, r6
 8009c34:	4628      	mov	r0, r5
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d1c0      	bne.n	8009bbe <_printf_float+0x316>
 8009c3c:	e68f      	b.n	800995e <_printf_float+0xb6>
 8009c3e:	9a06      	ldr	r2, [sp, #24]
 8009c40:	464b      	mov	r3, r9
 8009c42:	4442      	add	r2, r8
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	d1c3      	bne.n	8009bd6 <_printf_float+0x32e>
 8009c4e:	e686      	b.n	800995e <_printf_float+0xb6>
 8009c50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c54:	f1ba 0f01 	cmp.w	sl, #1
 8009c58:	dc01      	bgt.n	8009c5e <_printf_float+0x3b6>
 8009c5a:	07db      	lsls	r3, r3, #31
 8009c5c:	d536      	bpl.n	8009ccc <_printf_float+0x424>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4642      	mov	r2, r8
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f ae78 	beq.w	800995e <_printf_float+0xb6>
 8009c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f ae70 	beq.w	800995e <_printf_float+0xb6>
 8009c7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c82:	2200      	movs	r2, #0
 8009c84:	2300      	movs	r3, #0
 8009c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c8a:	f7f6 ff3d 	bl	8000b08 <__aeabi_dcmpeq>
 8009c8e:	b9c0      	cbnz	r0, 8009cc2 <_printf_float+0x41a>
 8009c90:	4653      	mov	r3, sl
 8009c92:	f108 0201 	add.w	r2, r8, #1
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	47b8      	blx	r7
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d10c      	bne.n	8009cba <_printf_float+0x412>
 8009ca0:	e65d      	b.n	800995e <_printf_float+0xb6>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	465a      	mov	r2, fp
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f ae56 	beq.w	800995e <_printf_float+0xb6>
 8009cb2:	f108 0801 	add.w	r8, r8, #1
 8009cb6:	45d0      	cmp	r8, sl
 8009cb8:	dbf3      	blt.n	8009ca2 <_printf_float+0x3fa>
 8009cba:	464b      	mov	r3, r9
 8009cbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009cc0:	e6df      	b.n	8009a82 <_printf_float+0x1da>
 8009cc2:	f04f 0800 	mov.w	r8, #0
 8009cc6:	f104 0b1a 	add.w	fp, r4, #26
 8009cca:	e7f4      	b.n	8009cb6 <_printf_float+0x40e>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4642      	mov	r2, r8
 8009cd0:	e7e1      	b.n	8009c96 <_printf_float+0x3ee>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	464a      	mov	r2, r9
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	f43f ae3e 	beq.w	800995e <_printf_float+0xb6>
 8009ce2:	f108 0801 	add.w	r8, r8, #1
 8009ce6:	68e3      	ldr	r3, [r4, #12]
 8009ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cea:	1a5b      	subs	r3, r3, r1
 8009cec:	4543      	cmp	r3, r8
 8009cee:	dcf0      	bgt.n	8009cd2 <_printf_float+0x42a>
 8009cf0:	e6fc      	b.n	8009aec <_printf_float+0x244>
 8009cf2:	f04f 0800 	mov.w	r8, #0
 8009cf6:	f104 0919 	add.w	r9, r4, #25
 8009cfa:	e7f4      	b.n	8009ce6 <_printf_float+0x43e>

08009cfc <_printf_common>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	4616      	mov	r6, r2
 8009d02:	4698      	mov	r8, r3
 8009d04:	688a      	ldr	r2, [r1, #8]
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bfb8      	it	lt
 8009d10:	4613      	movlt	r3, r2
 8009d12:	6033      	str	r3, [r6, #0]
 8009d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d18:	4607      	mov	r7, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	b10a      	cbz	r2, 8009d22 <_printf_common+0x26>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	6033      	str	r3, [r6, #0]
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	0699      	lsls	r1, r3, #26
 8009d26:	bf42      	ittt	mi
 8009d28:	6833      	ldrmi	r3, [r6, #0]
 8009d2a:	3302      	addmi	r3, #2
 8009d2c:	6033      	strmi	r3, [r6, #0]
 8009d2e:	6825      	ldr	r5, [r4, #0]
 8009d30:	f015 0506 	ands.w	r5, r5, #6
 8009d34:	d106      	bne.n	8009d44 <_printf_common+0x48>
 8009d36:	f104 0a19 	add.w	sl, r4, #25
 8009d3a:	68e3      	ldr	r3, [r4, #12]
 8009d3c:	6832      	ldr	r2, [r6, #0]
 8009d3e:	1a9b      	subs	r3, r3, r2
 8009d40:	42ab      	cmp	r3, r5
 8009d42:	dc26      	bgt.n	8009d92 <_printf_common+0x96>
 8009d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d48:	6822      	ldr	r2, [r4, #0]
 8009d4a:	3b00      	subs	r3, #0
 8009d4c:	bf18      	it	ne
 8009d4e:	2301      	movne	r3, #1
 8009d50:	0692      	lsls	r2, r2, #26
 8009d52:	d42b      	bmi.n	8009dac <_printf_common+0xb0>
 8009d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d58:	4641      	mov	r1, r8
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	47c8      	blx	r9
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d01e      	beq.n	8009da0 <_printf_common+0xa4>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	6922      	ldr	r2, [r4, #16]
 8009d66:	f003 0306 	and.w	r3, r3, #6
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	bf02      	ittt	eq
 8009d6e:	68e5      	ldreq	r5, [r4, #12]
 8009d70:	6833      	ldreq	r3, [r6, #0]
 8009d72:	1aed      	subeq	r5, r5, r3
 8009d74:	68a3      	ldr	r3, [r4, #8]
 8009d76:	bf0c      	ite	eq
 8009d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d7c:	2500      	movne	r5, #0
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	bfc4      	itt	gt
 8009d82:	1a9b      	subgt	r3, r3, r2
 8009d84:	18ed      	addgt	r5, r5, r3
 8009d86:	2600      	movs	r6, #0
 8009d88:	341a      	adds	r4, #26
 8009d8a:	42b5      	cmp	r5, r6
 8009d8c:	d11a      	bne.n	8009dc4 <_printf_common+0xc8>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e008      	b.n	8009da4 <_printf_common+0xa8>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4652      	mov	r2, sl
 8009d96:	4641      	mov	r1, r8
 8009d98:	4638      	mov	r0, r7
 8009d9a:	47c8      	blx	r9
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d103      	bne.n	8009da8 <_printf_common+0xac>
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da8:	3501      	adds	r5, #1
 8009daa:	e7c6      	b.n	8009d3a <_printf_common+0x3e>
 8009dac:	18e1      	adds	r1, r4, r3
 8009dae:	1c5a      	adds	r2, r3, #1
 8009db0:	2030      	movs	r0, #48	@ 0x30
 8009db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009db6:	4422      	add	r2, r4
 8009db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dc0:	3302      	adds	r3, #2
 8009dc2:	e7c7      	b.n	8009d54 <_printf_common+0x58>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	4641      	mov	r1, r8
 8009dca:	4638      	mov	r0, r7
 8009dcc:	47c8      	blx	r9
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d0e6      	beq.n	8009da0 <_printf_common+0xa4>
 8009dd2:	3601      	adds	r6, #1
 8009dd4:	e7d9      	b.n	8009d8a <_printf_common+0x8e>
	...

08009dd8 <_printf_i>:
 8009dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	7e0f      	ldrb	r7, [r1, #24]
 8009dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009de0:	2f78      	cmp	r7, #120	@ 0x78
 8009de2:	4691      	mov	r9, r2
 8009de4:	4680      	mov	r8, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	469a      	mov	sl, r3
 8009dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dee:	d807      	bhi.n	8009e00 <_printf_i+0x28>
 8009df0:	2f62      	cmp	r7, #98	@ 0x62
 8009df2:	d80a      	bhi.n	8009e0a <_printf_i+0x32>
 8009df4:	2f00      	cmp	r7, #0
 8009df6:	f000 80d2 	beq.w	8009f9e <_printf_i+0x1c6>
 8009dfa:	2f58      	cmp	r7, #88	@ 0x58
 8009dfc:	f000 80b9 	beq.w	8009f72 <_printf_i+0x19a>
 8009e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e08:	e03a      	b.n	8009e80 <_printf_i+0xa8>
 8009e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e0e:	2b15      	cmp	r3, #21
 8009e10:	d8f6      	bhi.n	8009e00 <_printf_i+0x28>
 8009e12:	a101      	add	r1, pc, #4	@ (adr r1, 8009e18 <_printf_i+0x40>)
 8009e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e85 	.word	0x08009e85
 8009e20:	08009e01 	.word	0x08009e01
 8009e24:	08009e01 	.word	0x08009e01
 8009e28:	08009e01 	.word	0x08009e01
 8009e2c:	08009e01 	.word	0x08009e01
 8009e30:	08009e85 	.word	0x08009e85
 8009e34:	08009e01 	.word	0x08009e01
 8009e38:	08009e01 	.word	0x08009e01
 8009e3c:	08009e01 	.word	0x08009e01
 8009e40:	08009e01 	.word	0x08009e01
 8009e44:	08009f85 	.word	0x08009f85
 8009e48:	08009eaf 	.word	0x08009eaf
 8009e4c:	08009f3f 	.word	0x08009f3f
 8009e50:	08009e01 	.word	0x08009e01
 8009e54:	08009e01 	.word	0x08009e01
 8009e58:	08009fa7 	.word	0x08009fa7
 8009e5c:	08009e01 	.word	0x08009e01
 8009e60:	08009eaf 	.word	0x08009eaf
 8009e64:	08009e01 	.word	0x08009e01
 8009e68:	08009e01 	.word	0x08009e01
 8009e6c:	08009f47 	.word	0x08009f47
 8009e70:	6833      	ldr	r3, [r6, #0]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6032      	str	r2, [r6, #0]
 8009e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e80:	2301      	movs	r3, #1
 8009e82:	e09d      	b.n	8009fc0 <_printf_i+0x1e8>
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	6820      	ldr	r0, [r4, #0]
 8009e88:	1d19      	adds	r1, r3, #4
 8009e8a:	6031      	str	r1, [r6, #0]
 8009e8c:	0606      	lsls	r6, r0, #24
 8009e8e:	d501      	bpl.n	8009e94 <_printf_i+0xbc>
 8009e90:	681d      	ldr	r5, [r3, #0]
 8009e92:	e003      	b.n	8009e9c <_printf_i+0xc4>
 8009e94:	0645      	lsls	r5, r0, #25
 8009e96:	d5fb      	bpl.n	8009e90 <_printf_i+0xb8>
 8009e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	da03      	bge.n	8009ea8 <_printf_i+0xd0>
 8009ea0:	232d      	movs	r3, #45	@ 0x2d
 8009ea2:	426d      	negs	r5, r5
 8009ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea8:	4859      	ldr	r0, [pc, #356]	@ (800a010 <_printf_i+0x238>)
 8009eaa:	230a      	movs	r3, #10
 8009eac:	e011      	b.n	8009ed2 <_printf_i+0xfa>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	6833      	ldr	r3, [r6, #0]
 8009eb2:	0608      	lsls	r0, r1, #24
 8009eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009eb8:	d402      	bmi.n	8009ec0 <_printf_i+0xe8>
 8009eba:	0649      	lsls	r1, r1, #25
 8009ebc:	bf48      	it	mi
 8009ebe:	b2ad      	uxthmi	r5, r5
 8009ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ec2:	4853      	ldr	r0, [pc, #332]	@ (800a010 <_printf_i+0x238>)
 8009ec4:	6033      	str	r3, [r6, #0]
 8009ec6:	bf14      	ite	ne
 8009ec8:	230a      	movne	r3, #10
 8009eca:	2308      	moveq	r3, #8
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ed2:	6866      	ldr	r6, [r4, #4]
 8009ed4:	60a6      	str	r6, [r4, #8]
 8009ed6:	2e00      	cmp	r6, #0
 8009ed8:	bfa2      	ittt	ge
 8009eda:	6821      	ldrge	r1, [r4, #0]
 8009edc:	f021 0104 	bicge.w	r1, r1, #4
 8009ee0:	6021      	strge	r1, [r4, #0]
 8009ee2:	b90d      	cbnz	r5, 8009ee8 <_printf_i+0x110>
 8009ee4:	2e00      	cmp	r6, #0
 8009ee6:	d04b      	beq.n	8009f80 <_printf_i+0x1a8>
 8009ee8:	4616      	mov	r6, r2
 8009eea:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eee:	fb03 5711 	mls	r7, r3, r1, r5
 8009ef2:	5dc7      	ldrb	r7, [r0, r7]
 8009ef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ef8:	462f      	mov	r7, r5
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	460d      	mov	r5, r1
 8009efe:	d9f4      	bls.n	8009eea <_printf_i+0x112>
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d10b      	bne.n	8009f1c <_printf_i+0x144>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	07df      	lsls	r7, r3, #31
 8009f08:	d508      	bpl.n	8009f1c <_printf_i+0x144>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6861      	ldr	r1, [r4, #4]
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	bfde      	ittt	le
 8009f12:	2330      	movle	r3, #48	@ 0x30
 8009f14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f1c:	1b92      	subs	r2, r2, r6
 8009f1e:	6122      	str	r2, [r4, #16]
 8009f20:	f8cd a000 	str.w	sl, [sp]
 8009f24:	464b      	mov	r3, r9
 8009f26:	aa03      	add	r2, sp, #12
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7ff fee6 	bl	8009cfc <_printf_common>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d14a      	bne.n	8009fca <_printf_i+0x1f2>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b004      	add	sp, #16
 8009f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	f043 0320 	orr.w	r3, r3, #32
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	4833      	ldr	r0, [pc, #204]	@ (800a014 <_printf_i+0x23c>)
 8009f48:	2778      	movs	r7, #120	@ 0x78
 8009f4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	6831      	ldr	r1, [r6, #0]
 8009f52:	061f      	lsls	r7, r3, #24
 8009f54:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f58:	d402      	bmi.n	8009f60 <_printf_i+0x188>
 8009f5a:	065f      	lsls	r7, r3, #25
 8009f5c:	bf48      	it	mi
 8009f5e:	b2ad      	uxthmi	r5, r5
 8009f60:	6031      	str	r1, [r6, #0]
 8009f62:	07d9      	lsls	r1, r3, #31
 8009f64:	bf44      	itt	mi
 8009f66:	f043 0320 	orrmi.w	r3, r3, #32
 8009f6a:	6023      	strmi	r3, [r4, #0]
 8009f6c:	b11d      	cbz	r5, 8009f76 <_printf_i+0x19e>
 8009f6e:	2310      	movs	r3, #16
 8009f70:	e7ac      	b.n	8009ecc <_printf_i+0xf4>
 8009f72:	4827      	ldr	r0, [pc, #156]	@ (800a010 <_printf_i+0x238>)
 8009f74:	e7e9      	b.n	8009f4a <_printf_i+0x172>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	f023 0320 	bic.w	r3, r3, #32
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	e7f6      	b.n	8009f6e <_printf_i+0x196>
 8009f80:	4616      	mov	r6, r2
 8009f82:	e7bd      	b.n	8009f00 <_printf_i+0x128>
 8009f84:	6833      	ldr	r3, [r6, #0]
 8009f86:	6825      	ldr	r5, [r4, #0]
 8009f88:	6961      	ldr	r1, [r4, #20]
 8009f8a:	1d18      	adds	r0, r3, #4
 8009f8c:	6030      	str	r0, [r6, #0]
 8009f8e:	062e      	lsls	r6, r5, #24
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	d501      	bpl.n	8009f98 <_printf_i+0x1c0>
 8009f94:	6019      	str	r1, [r3, #0]
 8009f96:	e002      	b.n	8009f9e <_printf_i+0x1c6>
 8009f98:	0668      	lsls	r0, r5, #25
 8009f9a:	d5fb      	bpl.n	8009f94 <_printf_i+0x1bc>
 8009f9c:	8019      	strh	r1, [r3, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	4616      	mov	r6, r2
 8009fa4:	e7bc      	b.n	8009f20 <_printf_i+0x148>
 8009fa6:	6833      	ldr	r3, [r6, #0]
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	6032      	str	r2, [r6, #0]
 8009fac:	681e      	ldr	r6, [r3, #0]
 8009fae:	6862      	ldr	r2, [r4, #4]
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7f6 f92c 	bl	8000210 <memchr>
 8009fb8:	b108      	cbz	r0, 8009fbe <_printf_i+0x1e6>
 8009fba:	1b80      	subs	r0, r0, r6
 8009fbc:	6060      	str	r0, [r4, #4]
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fc8:	e7aa      	b.n	8009f20 <_printf_i+0x148>
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	47d0      	blx	sl
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d0ad      	beq.n	8009f34 <_printf_i+0x15c>
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	079b      	lsls	r3, r3, #30
 8009fdc:	d413      	bmi.n	800a006 <_printf_i+0x22e>
 8009fde:	68e0      	ldr	r0, [r4, #12]
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	4298      	cmp	r0, r3
 8009fe4:	bfb8      	it	lt
 8009fe6:	4618      	movlt	r0, r3
 8009fe8:	e7a6      	b.n	8009f38 <_printf_i+0x160>
 8009fea:	2301      	movs	r3, #1
 8009fec:	4632      	mov	r2, r6
 8009fee:	4649      	mov	r1, r9
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	47d0      	blx	sl
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	d09d      	beq.n	8009f34 <_printf_i+0x15c>
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	9903      	ldr	r1, [sp, #12]
 8009ffe:	1a5b      	subs	r3, r3, r1
 800a000:	42ab      	cmp	r3, r5
 800a002:	dcf2      	bgt.n	8009fea <_printf_i+0x212>
 800a004:	e7eb      	b.n	8009fde <_printf_i+0x206>
 800a006:	2500      	movs	r5, #0
 800a008:	f104 0619 	add.w	r6, r4, #25
 800a00c:	e7f5      	b.n	8009ffa <_printf_i+0x222>
 800a00e:	bf00      	nop
 800a010:	0800e412 	.word	0x0800e412
 800a014:	0800e423 	.word	0x0800e423

0800a018 <std>:
 800a018:	2300      	movs	r3, #0
 800a01a:	b510      	push	{r4, lr}
 800a01c:	4604      	mov	r4, r0
 800a01e:	e9c0 3300 	strd	r3, r3, [r0]
 800a022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a026:	6083      	str	r3, [r0, #8]
 800a028:	8181      	strh	r1, [r0, #12]
 800a02a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a02c:	81c2      	strh	r2, [r0, #14]
 800a02e:	6183      	str	r3, [r0, #24]
 800a030:	4619      	mov	r1, r3
 800a032:	2208      	movs	r2, #8
 800a034:	305c      	adds	r0, #92	@ 0x5c
 800a036:	f000 f914 	bl	800a262 <memset>
 800a03a:	4b0d      	ldr	r3, [pc, #52]	@ (800a070 <std+0x58>)
 800a03c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a03e:	4b0d      	ldr	r3, [pc, #52]	@ (800a074 <std+0x5c>)
 800a040:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a042:	4b0d      	ldr	r3, [pc, #52]	@ (800a078 <std+0x60>)
 800a044:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a046:	4b0d      	ldr	r3, [pc, #52]	@ (800a07c <std+0x64>)
 800a048:	6323      	str	r3, [r4, #48]	@ 0x30
 800a04a:	4b0d      	ldr	r3, [pc, #52]	@ (800a080 <std+0x68>)
 800a04c:	6224      	str	r4, [r4, #32]
 800a04e:	429c      	cmp	r4, r3
 800a050:	d006      	beq.n	800a060 <std+0x48>
 800a052:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a056:	4294      	cmp	r4, r2
 800a058:	d002      	beq.n	800a060 <std+0x48>
 800a05a:	33d0      	adds	r3, #208	@ 0xd0
 800a05c:	429c      	cmp	r4, r3
 800a05e:	d105      	bne.n	800a06c <std+0x54>
 800a060:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a068:	f000 b978 	b.w	800a35c <__retarget_lock_init_recursive>
 800a06c:	bd10      	pop	{r4, pc}
 800a06e:	bf00      	nop
 800a070:	0800a1dd 	.word	0x0800a1dd
 800a074:	0800a1ff 	.word	0x0800a1ff
 800a078:	0800a237 	.word	0x0800a237
 800a07c:	0800a25b 	.word	0x0800a25b
 800a080:	20000a60 	.word	0x20000a60

0800a084 <stdio_exit_handler>:
 800a084:	4a02      	ldr	r2, [pc, #8]	@ (800a090 <stdio_exit_handler+0xc>)
 800a086:	4903      	ldr	r1, [pc, #12]	@ (800a094 <stdio_exit_handler+0x10>)
 800a088:	4803      	ldr	r0, [pc, #12]	@ (800a098 <stdio_exit_handler+0x14>)
 800a08a:	f000 b869 	b.w	800a160 <_fwalk_sglue>
 800a08e:	bf00      	nop
 800a090:	200000ac 	.word	0x200000ac
 800a094:	0800bcbd 	.word	0x0800bcbd
 800a098:	200000bc 	.word	0x200000bc

0800a09c <cleanup_stdio>:
 800a09c:	6841      	ldr	r1, [r0, #4]
 800a09e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0d0 <cleanup_stdio+0x34>)
 800a0a0:	4299      	cmp	r1, r3
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	d001      	beq.n	800a0ac <cleanup_stdio+0x10>
 800a0a8:	f001 fe08 	bl	800bcbc <_fflush_r>
 800a0ac:	68a1      	ldr	r1, [r4, #8]
 800a0ae:	4b09      	ldr	r3, [pc, #36]	@ (800a0d4 <cleanup_stdio+0x38>)
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <cleanup_stdio+0x1e>
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f001 fe01 	bl	800bcbc <_fflush_r>
 800a0ba:	68e1      	ldr	r1, [r4, #12]
 800a0bc:	4b06      	ldr	r3, [pc, #24]	@ (800a0d8 <cleanup_stdio+0x3c>)
 800a0be:	4299      	cmp	r1, r3
 800a0c0:	d004      	beq.n	800a0cc <cleanup_stdio+0x30>
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c8:	f001 bdf8 	b.w	800bcbc <_fflush_r>
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000a60 	.word	0x20000a60
 800a0d4:	20000ac8 	.word	0x20000ac8
 800a0d8:	20000b30 	.word	0x20000b30

0800a0dc <global_stdio_init.part.0>:
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <global_stdio_init.part.0+0x30>)
 800a0e0:	4c0b      	ldr	r4, [pc, #44]	@ (800a110 <global_stdio_init.part.0+0x34>)
 800a0e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a114 <global_stdio_init.part.0+0x38>)
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2104      	movs	r1, #4
 800a0ec:	f7ff ff94 	bl	800a018 <std>
 800a0f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	2109      	movs	r1, #9
 800a0f8:	f7ff ff8e 	bl	800a018 <std>
 800a0fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a100:	2202      	movs	r2, #2
 800a102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a106:	2112      	movs	r1, #18
 800a108:	f7ff bf86 	b.w	800a018 <std>
 800a10c:	20000b98 	.word	0x20000b98
 800a110:	20000a60 	.word	0x20000a60
 800a114:	0800a085 	.word	0x0800a085

0800a118 <__sfp_lock_acquire>:
 800a118:	4801      	ldr	r0, [pc, #4]	@ (800a120 <__sfp_lock_acquire+0x8>)
 800a11a:	f000 b920 	b.w	800a35e <__retarget_lock_acquire_recursive>
 800a11e:	bf00      	nop
 800a120:	20000ba1 	.word	0x20000ba1

0800a124 <__sfp_lock_release>:
 800a124:	4801      	ldr	r0, [pc, #4]	@ (800a12c <__sfp_lock_release+0x8>)
 800a126:	f000 b91b 	b.w	800a360 <__retarget_lock_release_recursive>
 800a12a:	bf00      	nop
 800a12c:	20000ba1 	.word	0x20000ba1

0800a130 <__sinit>:
 800a130:	b510      	push	{r4, lr}
 800a132:	4604      	mov	r4, r0
 800a134:	f7ff fff0 	bl	800a118 <__sfp_lock_acquire>
 800a138:	6a23      	ldr	r3, [r4, #32]
 800a13a:	b11b      	cbz	r3, 800a144 <__sinit+0x14>
 800a13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a140:	f7ff bff0 	b.w	800a124 <__sfp_lock_release>
 800a144:	4b04      	ldr	r3, [pc, #16]	@ (800a158 <__sinit+0x28>)
 800a146:	6223      	str	r3, [r4, #32]
 800a148:	4b04      	ldr	r3, [pc, #16]	@ (800a15c <__sinit+0x2c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1f5      	bne.n	800a13c <__sinit+0xc>
 800a150:	f7ff ffc4 	bl	800a0dc <global_stdio_init.part.0>
 800a154:	e7f2      	b.n	800a13c <__sinit+0xc>
 800a156:	bf00      	nop
 800a158:	0800a09d 	.word	0x0800a09d
 800a15c:	20000b98 	.word	0x20000b98

0800a160 <_fwalk_sglue>:
 800a160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a164:	4607      	mov	r7, r0
 800a166:	4688      	mov	r8, r1
 800a168:	4614      	mov	r4, r2
 800a16a:	2600      	movs	r6, #0
 800a16c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a170:	f1b9 0901 	subs.w	r9, r9, #1
 800a174:	d505      	bpl.n	800a182 <_fwalk_sglue+0x22>
 800a176:	6824      	ldr	r4, [r4, #0]
 800a178:	2c00      	cmp	r4, #0
 800a17a:	d1f7      	bne.n	800a16c <_fwalk_sglue+0xc>
 800a17c:	4630      	mov	r0, r6
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d907      	bls.n	800a198 <_fwalk_sglue+0x38>
 800a188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a18c:	3301      	adds	r3, #1
 800a18e:	d003      	beq.n	800a198 <_fwalk_sglue+0x38>
 800a190:	4629      	mov	r1, r5
 800a192:	4638      	mov	r0, r7
 800a194:	47c0      	blx	r8
 800a196:	4306      	orrs	r6, r0
 800a198:	3568      	adds	r5, #104	@ 0x68
 800a19a:	e7e9      	b.n	800a170 <_fwalk_sglue+0x10>

0800a19c <siprintf>:
 800a19c:	b40e      	push	{r1, r2, r3}
 800a19e:	b500      	push	{lr}
 800a1a0:	b09c      	sub	sp, #112	@ 0x70
 800a1a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800a1a4:	9002      	str	r0, [sp, #8]
 800a1a6:	9006      	str	r0, [sp, #24]
 800a1a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a1ac:	4809      	ldr	r0, [pc, #36]	@ (800a1d4 <siprintf+0x38>)
 800a1ae:	9107      	str	r1, [sp, #28]
 800a1b0:	9104      	str	r1, [sp, #16]
 800a1b2:	4909      	ldr	r1, [pc, #36]	@ (800a1d8 <siprintf+0x3c>)
 800a1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b8:	9105      	str	r1, [sp, #20]
 800a1ba:	6800      	ldr	r0, [r0, #0]
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	a902      	add	r1, sp, #8
 800a1c0:	f001 fbfc 	bl	800b9bc <_svfiprintf_r>
 800a1c4:	9b02      	ldr	r3, [sp, #8]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	b01c      	add	sp, #112	@ 0x70
 800a1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d0:	b003      	add	sp, #12
 800a1d2:	4770      	bx	lr
 800a1d4:	200000b8 	.word	0x200000b8
 800a1d8:	ffff0208 	.word	0xffff0208

0800a1dc <__sread>:
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	460c      	mov	r4, r1
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	f000 f86c 	bl	800a2c0 <_read_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	bfab      	itete	ge
 800a1ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a1f0:	181b      	addge	r3, r3, r0
 800a1f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1f6:	bfac      	ite	ge
 800a1f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1fa:	81a3      	strhlt	r3, [r4, #12]
 800a1fc:	bd10      	pop	{r4, pc}

0800a1fe <__swrite>:
 800a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a202:	461f      	mov	r7, r3
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	05db      	lsls	r3, r3, #23
 800a208:	4605      	mov	r5, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	4616      	mov	r6, r2
 800a20e:	d505      	bpl.n	800a21c <__swrite+0x1e>
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	2302      	movs	r3, #2
 800a216:	2200      	movs	r2, #0
 800a218:	f000 f840 	bl	800a29c <_lseek_r>
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	4632      	mov	r2, r6
 800a22a:	463b      	mov	r3, r7
 800a22c:	4628      	mov	r0, r5
 800a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	f000 b857 	b.w	800a2e4 <_write_r>

0800a236 <__sseek>:
 800a236:	b510      	push	{r4, lr}
 800a238:	460c      	mov	r4, r1
 800a23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23e:	f000 f82d 	bl	800a29c <_lseek_r>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	bf15      	itete	ne
 800a248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a24a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a24e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a252:	81a3      	strheq	r3, [r4, #12]
 800a254:	bf18      	it	ne
 800a256:	81a3      	strhne	r3, [r4, #12]
 800a258:	bd10      	pop	{r4, pc}

0800a25a <__sclose>:
 800a25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25e:	f000 b80d 	b.w	800a27c <_close_r>

0800a262 <memset>:
 800a262:	4402      	add	r2, r0
 800a264:	4603      	mov	r3, r0
 800a266:	4293      	cmp	r3, r2
 800a268:	d100      	bne.n	800a26c <memset+0xa>
 800a26a:	4770      	bx	lr
 800a26c:	f803 1b01 	strb.w	r1, [r3], #1
 800a270:	e7f9      	b.n	800a266 <memset+0x4>
	...

0800a274 <_localeconv_r>:
 800a274:	4800      	ldr	r0, [pc, #0]	@ (800a278 <_localeconv_r+0x4>)
 800a276:	4770      	bx	lr
 800a278:	200001f8 	.word	0x200001f8

0800a27c <_close_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d06      	ldr	r5, [pc, #24]	@ (800a298 <_close_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7f9 f96c 	bl	8003564 <_close>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_close_r+0x1a>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_close_r+0x1a>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20000b9c 	.word	0x20000b9c

0800a29c <_lseek_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	@ (800a2bc <_lseek_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7f9 f981 	bl	80035b2 <_lseek>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_lseek_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_lseek_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20000b9c 	.word	0x20000b9c

0800a2c0 <_read_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	@ (800a2e0 <_read_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f9 f90f 	bl	80034f2 <_read>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_read_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_read_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20000b9c 	.word	0x20000b9c

0800a2e4 <_write_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	@ (800a304 <_write_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7f9 f91a 	bl	800352c <_write>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_write_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_write_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	20000b9c 	.word	0x20000b9c

0800a308 <__errno>:
 800a308:	4b01      	ldr	r3, [pc, #4]	@ (800a310 <__errno+0x8>)
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	200000b8 	.word	0x200000b8

0800a314 <__libc_init_array>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	4d0d      	ldr	r5, [pc, #52]	@ (800a34c <__libc_init_array+0x38>)
 800a318:	4c0d      	ldr	r4, [pc, #52]	@ (800a350 <__libc_init_array+0x3c>)
 800a31a:	1b64      	subs	r4, r4, r5
 800a31c:	10a4      	asrs	r4, r4, #2
 800a31e:	2600      	movs	r6, #0
 800a320:	42a6      	cmp	r6, r4
 800a322:	d109      	bne.n	800a338 <__libc_init_array+0x24>
 800a324:	4d0b      	ldr	r5, [pc, #44]	@ (800a354 <__libc_init_array+0x40>)
 800a326:	4c0c      	ldr	r4, [pc, #48]	@ (800a358 <__libc_init_array+0x44>)
 800a328:	f003 fa56 	bl	800d7d8 <_init>
 800a32c:	1b64      	subs	r4, r4, r5
 800a32e:	10a4      	asrs	r4, r4, #2
 800a330:	2600      	movs	r6, #0
 800a332:	42a6      	cmp	r6, r4
 800a334:	d105      	bne.n	800a342 <__libc_init_array+0x2e>
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	f855 3b04 	ldr.w	r3, [r5], #4
 800a33c:	4798      	blx	r3
 800a33e:	3601      	adds	r6, #1
 800a340:	e7ee      	b.n	800a320 <__libc_init_array+0xc>
 800a342:	f855 3b04 	ldr.w	r3, [r5], #4
 800a346:	4798      	blx	r3
 800a348:	3601      	adds	r6, #1
 800a34a:	e7f2      	b.n	800a332 <__libc_init_array+0x1e>
 800a34c:	0800e818 	.word	0x0800e818
 800a350:	0800e818 	.word	0x0800e818
 800a354:	0800e818 	.word	0x0800e818
 800a358:	0800e81c 	.word	0x0800e81c

0800a35c <__retarget_lock_init_recursive>:
 800a35c:	4770      	bx	lr

0800a35e <__retarget_lock_acquire_recursive>:
 800a35e:	4770      	bx	lr

0800a360 <__retarget_lock_release_recursive>:
 800a360:	4770      	bx	lr

0800a362 <quorem>:
 800a362:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a366:	6903      	ldr	r3, [r0, #16]
 800a368:	690c      	ldr	r4, [r1, #16]
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	4607      	mov	r7, r0
 800a36e:	db7e      	blt.n	800a46e <quorem+0x10c>
 800a370:	3c01      	subs	r4, #1
 800a372:	f101 0814 	add.w	r8, r1, #20
 800a376:	00a3      	lsls	r3, r4, #2
 800a378:	f100 0514 	add.w	r5, r0, #20
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a38c:	3301      	adds	r3, #1
 800a38e:	429a      	cmp	r2, r3
 800a390:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a394:	fbb2 f6f3 	udiv	r6, r2, r3
 800a398:	d32e      	bcc.n	800a3f8 <quorem+0x96>
 800a39a:	f04f 0a00 	mov.w	sl, #0
 800a39e:	46c4      	mov	ip, r8
 800a3a0:	46ae      	mov	lr, r5
 800a3a2:	46d3      	mov	fp, sl
 800a3a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3a8:	b298      	uxth	r0, r3
 800a3aa:	fb06 a000 	mla	r0, r6, r0, sl
 800a3ae:	0c02      	lsrs	r2, r0, #16
 800a3b0:	0c1b      	lsrs	r3, r3, #16
 800a3b2:	fb06 2303 	mla	r3, r6, r3, r2
 800a3b6:	f8de 2000 	ldr.w	r2, [lr]
 800a3ba:	b280      	uxth	r0, r0
 800a3bc:	b292      	uxth	r2, r2
 800a3be:	1a12      	subs	r2, r2, r0
 800a3c0:	445a      	add	r2, fp
 800a3c2:	f8de 0000 	ldr.w	r0, [lr]
 800a3c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a3d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a3d4:	b292      	uxth	r2, r2
 800a3d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a3da:	45e1      	cmp	r9, ip
 800a3dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a3e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a3e4:	d2de      	bcs.n	800a3a4 <quorem+0x42>
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	58eb      	ldr	r3, [r5, r3]
 800a3ea:	b92b      	cbnz	r3, 800a3f8 <quorem+0x96>
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	3b04      	subs	r3, #4
 800a3f0:	429d      	cmp	r5, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	d32f      	bcc.n	800a456 <quorem+0xf4>
 800a3f6:	613c      	str	r4, [r7, #16]
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f001 f97b 	bl	800b6f4 <__mcmp>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	db25      	blt.n	800a44e <quorem+0xec>
 800a402:	4629      	mov	r1, r5
 800a404:	2000      	movs	r0, #0
 800a406:	f858 2b04 	ldr.w	r2, [r8], #4
 800a40a:	f8d1 c000 	ldr.w	ip, [r1]
 800a40e:	fa1f fe82 	uxth.w	lr, r2
 800a412:	fa1f f38c 	uxth.w	r3, ip
 800a416:	eba3 030e 	sub.w	r3, r3, lr
 800a41a:	4403      	add	r3, r0
 800a41c:	0c12      	lsrs	r2, r2, #16
 800a41e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a422:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a42c:	45c1      	cmp	r9, r8
 800a42e:	f841 3b04 	str.w	r3, [r1], #4
 800a432:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a436:	d2e6      	bcs.n	800a406 <quorem+0xa4>
 800a438:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a43c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a440:	b922      	cbnz	r2, 800a44c <quorem+0xea>
 800a442:	3b04      	subs	r3, #4
 800a444:	429d      	cmp	r5, r3
 800a446:	461a      	mov	r2, r3
 800a448:	d30b      	bcc.n	800a462 <quorem+0x100>
 800a44a:	613c      	str	r4, [r7, #16]
 800a44c:	3601      	adds	r6, #1
 800a44e:	4630      	mov	r0, r6
 800a450:	b003      	add	sp, #12
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	3b04      	subs	r3, #4
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d1cb      	bne.n	800a3f6 <quorem+0x94>
 800a45e:	3c01      	subs	r4, #1
 800a460:	e7c6      	b.n	800a3f0 <quorem+0x8e>
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	3b04      	subs	r3, #4
 800a466:	2a00      	cmp	r2, #0
 800a468:	d1ef      	bne.n	800a44a <quorem+0xe8>
 800a46a:	3c01      	subs	r4, #1
 800a46c:	e7ea      	b.n	800a444 <quorem+0xe2>
 800a46e:	2000      	movs	r0, #0
 800a470:	e7ee      	b.n	800a450 <quorem+0xee>
 800a472:	0000      	movs	r0, r0
 800a474:	0000      	movs	r0, r0
	...

0800a478 <_dtoa_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	69c7      	ldr	r7, [r0, #28]
 800a47e:	b099      	sub	sp, #100	@ 0x64
 800a480:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a484:	ec55 4b10 	vmov	r4, r5, d0
 800a488:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a48a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a48c:	4683      	mov	fp, r0
 800a48e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a490:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a492:	b97f      	cbnz	r7, 800a4b4 <_dtoa_r+0x3c>
 800a494:	2010      	movs	r0, #16
 800a496:	f000 fdfd 	bl	800b094 <malloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a4a0:	b920      	cbnz	r0, 800a4ac <_dtoa_r+0x34>
 800a4a2:	4ba7      	ldr	r3, [pc, #668]	@ (800a740 <_dtoa_r+0x2c8>)
 800a4a4:	21ef      	movs	r1, #239	@ 0xef
 800a4a6:	48a7      	ldr	r0, [pc, #668]	@ (800a744 <_dtoa_r+0x2cc>)
 800a4a8:	f001 fc68 	bl	800bd7c <__assert_func>
 800a4ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a4b0:	6007      	str	r7, [r0, #0]
 800a4b2:	60c7      	str	r7, [r0, #12]
 800a4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4b8:	6819      	ldr	r1, [r3, #0]
 800a4ba:	b159      	cbz	r1, 800a4d4 <_dtoa_r+0x5c>
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	604a      	str	r2, [r1, #4]
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	4093      	lsls	r3, r2
 800a4c4:	608b      	str	r3, [r1, #8]
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f000 feda 	bl	800b280 <_Bfree>
 800a4cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	1e2b      	subs	r3, r5, #0
 800a4d6:	bfb9      	ittee	lt
 800a4d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a4dc:	9303      	strlt	r3, [sp, #12]
 800a4de:	2300      	movge	r3, #0
 800a4e0:	6033      	strge	r3, [r6, #0]
 800a4e2:	9f03      	ldr	r7, [sp, #12]
 800a4e4:	4b98      	ldr	r3, [pc, #608]	@ (800a748 <_dtoa_r+0x2d0>)
 800a4e6:	bfbc      	itt	lt
 800a4e8:	2201      	movlt	r2, #1
 800a4ea:	6032      	strlt	r2, [r6, #0]
 800a4ec:	43bb      	bics	r3, r7
 800a4ee:	d112      	bne.n	800a516 <_dtoa_r+0x9e>
 800a4f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a4f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4fc:	4323      	orrs	r3, r4
 800a4fe:	f000 854d 	beq.w	800af9c <_dtoa_r+0xb24>
 800a502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a504:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a75c <_dtoa_r+0x2e4>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 854f 	beq.w	800afac <_dtoa_r+0xb34>
 800a50e:	f10a 0303 	add.w	r3, sl, #3
 800a512:	f000 bd49 	b.w	800afa8 <_dtoa_r+0xb30>
 800a516:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	ec51 0b17 	vmov	r0, r1, d7
 800a520:	2300      	movs	r3, #0
 800a522:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a526:	f7f6 faef 	bl	8000b08 <__aeabi_dcmpeq>
 800a52a:	4680      	mov	r8, r0
 800a52c:	b158      	cbz	r0, 800a546 <_dtoa_r+0xce>
 800a52e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a530:	2301      	movs	r3, #1
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a536:	b113      	cbz	r3, 800a53e <_dtoa_r+0xc6>
 800a538:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a53a:	4b84      	ldr	r3, [pc, #528]	@ (800a74c <_dtoa_r+0x2d4>)
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a760 <_dtoa_r+0x2e8>
 800a542:	f000 bd33 	b.w	800afac <_dtoa_r+0xb34>
 800a546:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a54a:	aa16      	add	r2, sp, #88	@ 0x58
 800a54c:	a917      	add	r1, sp, #92	@ 0x5c
 800a54e:	4658      	mov	r0, fp
 800a550:	f001 f980 	bl	800b854 <__d2b>
 800a554:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a558:	4681      	mov	r9, r0
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d077      	beq.n	800a64e <_dtoa_r+0x1d6>
 800a55e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a560:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a56c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a570:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a574:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a578:	4619      	mov	r1, r3
 800a57a:	2200      	movs	r2, #0
 800a57c:	4b74      	ldr	r3, [pc, #464]	@ (800a750 <_dtoa_r+0x2d8>)
 800a57e:	f7f5 fea3 	bl	80002c8 <__aeabi_dsub>
 800a582:	a369      	add	r3, pc, #420	@ (adr r3, 800a728 <_dtoa_r+0x2b0>)
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f7f6 f856 	bl	8000638 <__aeabi_dmul>
 800a58c:	a368      	add	r3, pc, #416	@ (adr r3, 800a730 <_dtoa_r+0x2b8>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f7f5 fe9b 	bl	80002cc <__adddf3>
 800a596:	4604      	mov	r4, r0
 800a598:	4630      	mov	r0, r6
 800a59a:	460d      	mov	r5, r1
 800a59c:	f7f5 ffe2 	bl	8000564 <__aeabi_i2d>
 800a5a0:	a365      	add	r3, pc, #404	@ (adr r3, 800a738 <_dtoa_r+0x2c0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	f7f6 f847 	bl	8000638 <__aeabi_dmul>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7f5 fe8b 	bl	80002cc <__adddf3>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	f7f6 faed 	bl	8000b98 <__aeabi_d2iz>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f6 faa8 	bl	8000b1c <__aeabi_dcmplt>
 800a5cc:	b140      	cbz	r0, 800a5e0 <_dtoa_r+0x168>
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f7f5 ffc8 	bl	8000564 <__aeabi_i2d>
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	462b      	mov	r3, r5
 800a5d8:	f7f6 fa96 	bl	8000b08 <__aeabi_dcmpeq>
 800a5dc:	b900      	cbnz	r0, 800a5e0 <_dtoa_r+0x168>
 800a5de:	3f01      	subs	r7, #1
 800a5e0:	2f16      	cmp	r7, #22
 800a5e2:	d851      	bhi.n	800a688 <_dtoa_r+0x210>
 800a5e4:	4b5b      	ldr	r3, [pc, #364]	@ (800a754 <_dtoa_r+0x2dc>)
 800a5e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5f2:	f7f6 fa93 	bl	8000b1c <__aeabi_dcmplt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d048      	beq.n	800a68c <_dtoa_r+0x214>
 800a5fa:	3f01      	subs	r7, #1
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9312      	str	r3, [sp, #72]	@ 0x48
 800a600:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a602:	1b9b      	subs	r3, r3, r6
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	bf44      	itt	mi
 800a608:	f1c3 0801 	rsbmi	r8, r3, #1
 800a60c:	2300      	movmi	r3, #0
 800a60e:	9208      	str	r2, [sp, #32]
 800a610:	bf54      	ite	pl
 800a612:	f04f 0800 	movpl.w	r8, #0
 800a616:	9308      	strmi	r3, [sp, #32]
 800a618:	2f00      	cmp	r7, #0
 800a61a:	db39      	blt.n	800a690 <_dtoa_r+0x218>
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a620:	443b      	add	r3, r7
 800a622:	9308      	str	r3, [sp, #32]
 800a624:	2300      	movs	r3, #0
 800a626:	930a      	str	r3, [sp, #40]	@ 0x28
 800a628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	d864      	bhi.n	800a6f8 <_dtoa_r+0x280>
 800a62e:	2b05      	cmp	r3, #5
 800a630:	bfc4      	itt	gt
 800a632:	3b04      	subgt	r3, #4
 800a634:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a638:	f1a3 0302 	sub.w	r3, r3, #2
 800a63c:	bfcc      	ite	gt
 800a63e:	2400      	movgt	r4, #0
 800a640:	2401      	movle	r4, #1
 800a642:	2b03      	cmp	r3, #3
 800a644:	d863      	bhi.n	800a70e <_dtoa_r+0x296>
 800a646:	e8df f003 	tbb	[pc, r3]
 800a64a:	372a      	.short	0x372a
 800a64c:	5535      	.short	0x5535
 800a64e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a652:	441e      	add	r6, r3
 800a654:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a658:	2b20      	cmp	r3, #32
 800a65a:	bfc1      	itttt	gt
 800a65c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a660:	409f      	lslgt	r7, r3
 800a662:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a666:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a66a:	bfd6      	itet	le
 800a66c:	f1c3 0320 	rsble	r3, r3, #32
 800a670:	ea47 0003 	orrgt.w	r0, r7, r3
 800a674:	fa04 f003 	lslle.w	r0, r4, r3
 800a678:	f7f5 ff64 	bl	8000544 <__aeabi_ui2d>
 800a67c:	2201      	movs	r2, #1
 800a67e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a682:	3e01      	subs	r6, #1
 800a684:	9214      	str	r2, [sp, #80]	@ 0x50
 800a686:	e777      	b.n	800a578 <_dtoa_r+0x100>
 800a688:	2301      	movs	r3, #1
 800a68a:	e7b8      	b.n	800a5fe <_dtoa_r+0x186>
 800a68c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a68e:	e7b7      	b.n	800a600 <_dtoa_r+0x188>
 800a690:	427b      	negs	r3, r7
 800a692:	930a      	str	r3, [sp, #40]	@ 0x28
 800a694:	2300      	movs	r3, #0
 800a696:	eba8 0807 	sub.w	r8, r8, r7
 800a69a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a69c:	e7c4      	b.n	800a628 <_dtoa_r+0x1b0>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dc35      	bgt.n	800a714 <_dtoa_r+0x29c>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	9307      	str	r3, [sp, #28]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6b2:	e00b      	b.n	800a6cc <_dtoa_r+0x254>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e7f3      	b.n	800a6a0 <_dtoa_r+0x228>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	9307      	str	r3, [sp, #28]
 800a6c8:	bfb8      	it	lt
 800a6ca:	2301      	movlt	r3, #1
 800a6cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	2204      	movs	r2, #4
 800a6d4:	f102 0514 	add.w	r5, r2, #20
 800a6d8:	429d      	cmp	r5, r3
 800a6da:	d91f      	bls.n	800a71c <_dtoa_r+0x2a4>
 800a6dc:	6041      	str	r1, [r0, #4]
 800a6de:	4658      	mov	r0, fp
 800a6e0:	f000 fd8e 	bl	800b200 <_Balloc>
 800a6e4:	4682      	mov	sl, r0
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d13c      	bne.n	800a764 <_dtoa_r+0x2ec>
 800a6ea:	4b1b      	ldr	r3, [pc, #108]	@ (800a758 <_dtoa_r+0x2e0>)
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	f240 11af 	movw	r1, #431	@ 0x1af
 800a6f2:	e6d8      	b.n	800a4a6 <_dtoa_r+0x2e>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e7e0      	b.n	800a6ba <_dtoa_r+0x242>
 800a6f8:	2401      	movs	r4, #1
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a700:	f04f 33ff 	mov.w	r3, #4294967295
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	9307      	str	r3, [sp, #28]
 800a708:	2200      	movs	r2, #0
 800a70a:	2312      	movs	r3, #18
 800a70c:	e7d0      	b.n	800a6b0 <_dtoa_r+0x238>
 800a70e:	2301      	movs	r3, #1
 800a710:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a712:	e7f5      	b.n	800a700 <_dtoa_r+0x288>
 800a714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	e7d7      	b.n	800a6cc <_dtoa_r+0x254>
 800a71c:	3101      	adds	r1, #1
 800a71e:	0052      	lsls	r2, r2, #1
 800a720:	e7d8      	b.n	800a6d4 <_dtoa_r+0x25c>
 800a722:	bf00      	nop
 800a724:	f3af 8000 	nop.w
 800a728:	636f4361 	.word	0x636f4361
 800a72c:	3fd287a7 	.word	0x3fd287a7
 800a730:	8b60c8b3 	.word	0x8b60c8b3
 800a734:	3fc68a28 	.word	0x3fc68a28
 800a738:	509f79fb 	.word	0x509f79fb
 800a73c:	3fd34413 	.word	0x3fd34413
 800a740:	0800e441 	.word	0x0800e441
 800a744:	0800e458 	.word	0x0800e458
 800a748:	7ff00000 	.word	0x7ff00000
 800a74c:	0800e411 	.word	0x0800e411
 800a750:	3ff80000 	.word	0x3ff80000
 800a754:	0800e550 	.word	0x0800e550
 800a758:	0800e4b0 	.word	0x0800e4b0
 800a75c:	0800e43d 	.word	0x0800e43d
 800a760:	0800e410 	.word	0x0800e410
 800a764:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a768:	6018      	str	r0, [r3, #0]
 800a76a:	9b07      	ldr	r3, [sp, #28]
 800a76c:	2b0e      	cmp	r3, #14
 800a76e:	f200 80a4 	bhi.w	800a8ba <_dtoa_r+0x442>
 800a772:	2c00      	cmp	r4, #0
 800a774:	f000 80a1 	beq.w	800a8ba <_dtoa_r+0x442>
 800a778:	2f00      	cmp	r7, #0
 800a77a:	dd33      	ble.n	800a7e4 <_dtoa_r+0x36c>
 800a77c:	4bad      	ldr	r3, [pc, #692]	@ (800aa34 <_dtoa_r+0x5bc>)
 800a77e:	f007 020f 	and.w	r2, r7, #15
 800a782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a786:	ed93 7b00 	vldr	d7, [r3]
 800a78a:	05f8      	lsls	r0, r7, #23
 800a78c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a790:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a794:	d516      	bpl.n	800a7c4 <_dtoa_r+0x34c>
 800a796:	4ba8      	ldr	r3, [pc, #672]	@ (800aa38 <_dtoa_r+0x5c0>)
 800a798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a79c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7a0:	f7f6 f874 	bl	800088c <__aeabi_ddiv>
 800a7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a8:	f004 040f 	and.w	r4, r4, #15
 800a7ac:	2603      	movs	r6, #3
 800a7ae:	4da2      	ldr	r5, [pc, #648]	@ (800aa38 <_dtoa_r+0x5c0>)
 800a7b0:	b954      	cbnz	r4, 800a7c8 <_dtoa_r+0x350>
 800a7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ba:	f7f6 f867 	bl	800088c <__aeabi_ddiv>
 800a7be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c2:	e028      	b.n	800a816 <_dtoa_r+0x39e>
 800a7c4:	2602      	movs	r6, #2
 800a7c6:	e7f2      	b.n	800a7ae <_dtoa_r+0x336>
 800a7c8:	07e1      	lsls	r1, r4, #31
 800a7ca:	d508      	bpl.n	800a7de <_dtoa_r+0x366>
 800a7cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7d4:	f7f5 ff30 	bl	8000638 <__aeabi_dmul>
 800a7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7dc:	3601      	adds	r6, #1
 800a7de:	1064      	asrs	r4, r4, #1
 800a7e0:	3508      	adds	r5, #8
 800a7e2:	e7e5      	b.n	800a7b0 <_dtoa_r+0x338>
 800a7e4:	f000 80d2 	beq.w	800a98c <_dtoa_r+0x514>
 800a7e8:	427c      	negs	r4, r7
 800a7ea:	4b92      	ldr	r3, [pc, #584]	@ (800aa34 <_dtoa_r+0x5bc>)
 800a7ec:	4d92      	ldr	r5, [pc, #584]	@ (800aa38 <_dtoa_r+0x5c0>)
 800a7ee:	f004 020f 	and.w	r2, r4, #15
 800a7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7fe:	f7f5 ff1b 	bl	8000638 <__aeabi_dmul>
 800a802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a806:	1124      	asrs	r4, r4, #4
 800a808:	2300      	movs	r3, #0
 800a80a:	2602      	movs	r6, #2
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	f040 80b2 	bne.w	800a976 <_dtoa_r+0x4fe>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1d3      	bne.n	800a7be <_dtoa_r+0x346>
 800a816:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a818:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 80b7 	beq.w	800a990 <_dtoa_r+0x518>
 800a822:	4b86      	ldr	r3, [pc, #536]	@ (800aa3c <_dtoa_r+0x5c4>)
 800a824:	2200      	movs	r2, #0
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f6 f977 	bl	8000b1c <__aeabi_dcmplt>
 800a82e:	2800      	cmp	r0, #0
 800a830:	f000 80ae 	beq.w	800a990 <_dtoa_r+0x518>
 800a834:	9b07      	ldr	r3, [sp, #28]
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 80aa 	beq.w	800a990 <_dtoa_r+0x518>
 800a83c:	9b00      	ldr	r3, [sp, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd37      	ble.n	800a8b2 <_dtoa_r+0x43a>
 800a842:	1e7b      	subs	r3, r7, #1
 800a844:	9304      	str	r3, [sp, #16]
 800a846:	4620      	mov	r0, r4
 800a848:	4b7d      	ldr	r3, [pc, #500]	@ (800aa40 <_dtoa_r+0x5c8>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f5 fef3 	bl	8000638 <__aeabi_dmul>
 800a852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a856:	9c00      	ldr	r4, [sp, #0]
 800a858:	3601      	adds	r6, #1
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7f5 fe82 	bl	8000564 <__aeabi_i2d>
 800a860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a864:	f7f5 fee8 	bl	8000638 <__aeabi_dmul>
 800a868:	4b76      	ldr	r3, [pc, #472]	@ (800aa44 <_dtoa_r+0x5cc>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	f7f5 fd2e 	bl	80002cc <__adddf3>
 800a870:	4605      	mov	r5, r0
 800a872:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a876:	2c00      	cmp	r4, #0
 800a878:	f040 808d 	bne.w	800a996 <_dtoa_r+0x51e>
 800a87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a880:	4b71      	ldr	r3, [pc, #452]	@ (800aa48 <_dtoa_r+0x5d0>)
 800a882:	2200      	movs	r2, #0
 800a884:	f7f5 fd20 	bl	80002c8 <__aeabi_dsub>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a890:	462a      	mov	r2, r5
 800a892:	4633      	mov	r3, r6
 800a894:	f7f6 f960 	bl	8000b58 <__aeabi_dcmpgt>
 800a898:	2800      	cmp	r0, #0
 800a89a:	f040 828b 	bne.w	800adb4 <_dtoa_r+0x93c>
 800a89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a8a8:	f7f6 f938 	bl	8000b1c <__aeabi_dcmplt>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f040 8128 	bne.w	800ab02 <_dtoa_r+0x68a>
 800a8b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a8b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a8ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f2c0 815a 	blt.w	800ab76 <_dtoa_r+0x6fe>
 800a8c2:	2f0e      	cmp	r7, #14
 800a8c4:	f300 8157 	bgt.w	800ab76 <_dtoa_r+0x6fe>
 800a8c8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa34 <_dtoa_r+0x5bc>)
 800a8ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8ce:	ed93 7b00 	vldr	d7, [r3]
 800a8d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	ed8d 7b00 	vstr	d7, [sp]
 800a8da:	da03      	bge.n	800a8e4 <_dtoa_r+0x46c>
 800a8dc:	9b07      	ldr	r3, [sp, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f340 8101 	ble.w	800aae6 <_dtoa_r+0x66e>
 800a8e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a8e8:	4656      	mov	r6, sl
 800a8ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	f7f5 ffcb 	bl	800088c <__aeabi_ddiv>
 800a8f6:	f7f6 f94f 	bl	8000b98 <__aeabi_d2iz>
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	f7f5 fe32 	bl	8000564 <__aeabi_i2d>
 800a900:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a904:	f7f5 fe98 	bl	8000638 <__aeabi_dmul>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	4620      	mov	r0, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a914:	f7f5 fcd8 	bl	80002c8 <__aeabi_dsub>
 800a918:	f806 4b01 	strb.w	r4, [r6], #1
 800a91c:	9d07      	ldr	r5, [sp, #28]
 800a91e:	eba6 040a 	sub.w	r4, r6, sl
 800a922:	42a5      	cmp	r5, r4
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	f040 8117 	bne.w	800ab5a <_dtoa_r+0x6e2>
 800a92c:	f7f5 fcce 	bl	80002cc <__adddf3>
 800a930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
 800a938:	f7f6 f90e 	bl	8000b58 <__aeabi_dcmpgt>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f040 80f9 	bne.w	800ab34 <_dtoa_r+0x6bc>
 800a942:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a946:	4620      	mov	r0, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	f7f6 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 800a94e:	b118      	cbz	r0, 800a958 <_dtoa_r+0x4e0>
 800a950:	f018 0f01 	tst.w	r8, #1
 800a954:	f040 80ee 	bne.w	800ab34 <_dtoa_r+0x6bc>
 800a958:	4649      	mov	r1, r9
 800a95a:	4658      	mov	r0, fp
 800a95c:	f000 fc90 	bl	800b280 <_Bfree>
 800a960:	2300      	movs	r3, #0
 800a962:	7033      	strb	r3, [r6, #0]
 800a964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a966:	3701      	adds	r7, #1
 800a968:	601f      	str	r7, [r3, #0]
 800a96a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 831d 	beq.w	800afac <_dtoa_r+0xb34>
 800a972:	601e      	str	r6, [r3, #0]
 800a974:	e31a      	b.n	800afac <_dtoa_r+0xb34>
 800a976:	07e2      	lsls	r2, r4, #31
 800a978:	d505      	bpl.n	800a986 <_dtoa_r+0x50e>
 800a97a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a97e:	f7f5 fe5b 	bl	8000638 <__aeabi_dmul>
 800a982:	3601      	adds	r6, #1
 800a984:	2301      	movs	r3, #1
 800a986:	1064      	asrs	r4, r4, #1
 800a988:	3508      	adds	r5, #8
 800a98a:	e73f      	b.n	800a80c <_dtoa_r+0x394>
 800a98c:	2602      	movs	r6, #2
 800a98e:	e742      	b.n	800a816 <_dtoa_r+0x39e>
 800a990:	9c07      	ldr	r4, [sp, #28]
 800a992:	9704      	str	r7, [sp, #16]
 800a994:	e761      	b.n	800a85a <_dtoa_r+0x3e2>
 800a996:	4b27      	ldr	r3, [pc, #156]	@ (800aa34 <_dtoa_r+0x5bc>)
 800a998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a99a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a99e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9a2:	4454      	add	r4, sl
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	d053      	beq.n	800aa50 <_dtoa_r+0x5d8>
 800a9a8:	4928      	ldr	r1, [pc, #160]	@ (800aa4c <_dtoa_r+0x5d4>)
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	f7f5 ff6e 	bl	800088c <__aeabi_ddiv>
 800a9b0:	4633      	mov	r3, r6
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	f7f5 fc88 	bl	80002c8 <__aeabi_dsub>
 800a9b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9bc:	4656      	mov	r6, sl
 800a9be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c2:	f7f6 f8e9 	bl	8000b98 <__aeabi_d2iz>
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	f7f5 fdcc 	bl	8000564 <__aeabi_i2d>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d4:	f7f5 fc78 	bl	80002c8 <__aeabi_dsub>
 800a9d8:	3530      	adds	r5, #48	@ 0x30
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9e2:	f806 5b01 	strb.w	r5, [r6], #1
 800a9e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9ea:	f7f6 f897 	bl	8000b1c <__aeabi_dcmplt>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d171      	bne.n	800aad6 <_dtoa_r+0x65e>
 800a9f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9f6:	4911      	ldr	r1, [pc, #68]	@ (800aa3c <_dtoa_r+0x5c4>)
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	f7f5 fc65 	bl	80002c8 <__aeabi_dsub>
 800a9fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa02:	f7f6 f88b 	bl	8000b1c <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f040 8095 	bne.w	800ab36 <_dtoa_r+0x6be>
 800aa0c:	42a6      	cmp	r6, r4
 800aa0e:	f43f af50 	beq.w	800a8b2 <_dtoa_r+0x43a>
 800aa12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa16:	4b0a      	ldr	r3, [pc, #40]	@ (800aa40 <_dtoa_r+0x5c8>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f7f5 fe0d 	bl	8000638 <__aeabi_dmul>
 800aa1e:	4b08      	ldr	r3, [pc, #32]	@ (800aa40 <_dtoa_r+0x5c8>)
 800aa20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa24:	2200      	movs	r2, #0
 800aa26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa2a:	f7f5 fe05 	bl	8000638 <__aeabi_dmul>
 800aa2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa32:	e7c4      	b.n	800a9be <_dtoa_r+0x546>
 800aa34:	0800e550 	.word	0x0800e550
 800aa38:	0800e528 	.word	0x0800e528
 800aa3c:	3ff00000 	.word	0x3ff00000
 800aa40:	40240000 	.word	0x40240000
 800aa44:	401c0000 	.word	0x401c0000
 800aa48:	40140000 	.word	0x40140000
 800aa4c:	3fe00000 	.word	0x3fe00000
 800aa50:	4631      	mov	r1, r6
 800aa52:	4628      	mov	r0, r5
 800aa54:	f7f5 fdf0 	bl	8000638 <__aeabi_dmul>
 800aa58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa5c:	9415      	str	r4, [sp, #84]	@ 0x54
 800aa5e:	4656      	mov	r6, sl
 800aa60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa64:	f7f6 f898 	bl	8000b98 <__aeabi_d2iz>
 800aa68:	4605      	mov	r5, r0
 800aa6a:	f7f5 fd7b 	bl	8000564 <__aeabi_i2d>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa76:	f7f5 fc27 	bl	80002c8 <__aeabi_dsub>
 800aa7a:	3530      	adds	r5, #48	@ 0x30
 800aa7c:	f806 5b01 	strb.w	r5, [r6], #1
 800aa80:	4602      	mov	r2, r0
 800aa82:	460b      	mov	r3, r1
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa8a:	f04f 0200 	mov.w	r2, #0
 800aa8e:	d124      	bne.n	800aada <_dtoa_r+0x662>
 800aa90:	4bac      	ldr	r3, [pc, #688]	@ (800ad44 <_dtoa_r+0x8cc>)
 800aa92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa96:	f7f5 fc19 	bl	80002cc <__adddf3>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa2:	f7f6 f859 	bl	8000b58 <__aeabi_dcmpgt>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d145      	bne.n	800ab36 <_dtoa_r+0x6be>
 800aaaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aaae:	49a5      	ldr	r1, [pc, #660]	@ (800ad44 <_dtoa_r+0x8cc>)
 800aab0:	2000      	movs	r0, #0
 800aab2:	f7f5 fc09 	bl	80002c8 <__aeabi_dsub>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aabe:	f7f6 f82d 	bl	8000b1c <__aeabi_dcmplt>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	f43f aef5 	beq.w	800a8b2 <_dtoa_r+0x43a>
 800aac8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aaca:	1e73      	subs	r3, r6, #1
 800aacc:	9315      	str	r3, [sp, #84]	@ 0x54
 800aace:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aad2:	2b30      	cmp	r3, #48	@ 0x30
 800aad4:	d0f8      	beq.n	800aac8 <_dtoa_r+0x650>
 800aad6:	9f04      	ldr	r7, [sp, #16]
 800aad8:	e73e      	b.n	800a958 <_dtoa_r+0x4e0>
 800aada:	4b9b      	ldr	r3, [pc, #620]	@ (800ad48 <_dtoa_r+0x8d0>)
 800aadc:	f7f5 fdac 	bl	8000638 <__aeabi_dmul>
 800aae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae4:	e7bc      	b.n	800aa60 <_dtoa_r+0x5e8>
 800aae6:	d10c      	bne.n	800ab02 <_dtoa_r+0x68a>
 800aae8:	4b98      	ldr	r3, [pc, #608]	@ (800ad4c <_dtoa_r+0x8d4>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf0:	f7f5 fda2 	bl	8000638 <__aeabi_dmul>
 800aaf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaf8:	f7f6 f824 	bl	8000b44 <__aeabi_dcmpge>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f000 8157 	beq.w	800adb0 <_dtoa_r+0x938>
 800ab02:	2400      	movs	r4, #0
 800ab04:	4625      	mov	r5, r4
 800ab06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab08:	43db      	mvns	r3, r3
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	4656      	mov	r6, sl
 800ab0e:	2700      	movs	r7, #0
 800ab10:	4621      	mov	r1, r4
 800ab12:	4658      	mov	r0, fp
 800ab14:	f000 fbb4 	bl	800b280 <_Bfree>
 800ab18:	2d00      	cmp	r5, #0
 800ab1a:	d0dc      	beq.n	800aad6 <_dtoa_r+0x65e>
 800ab1c:	b12f      	cbz	r7, 800ab2a <_dtoa_r+0x6b2>
 800ab1e:	42af      	cmp	r7, r5
 800ab20:	d003      	beq.n	800ab2a <_dtoa_r+0x6b2>
 800ab22:	4639      	mov	r1, r7
 800ab24:	4658      	mov	r0, fp
 800ab26:	f000 fbab 	bl	800b280 <_Bfree>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4658      	mov	r0, fp
 800ab2e:	f000 fba7 	bl	800b280 <_Bfree>
 800ab32:	e7d0      	b.n	800aad6 <_dtoa_r+0x65e>
 800ab34:	9704      	str	r7, [sp, #16]
 800ab36:	4633      	mov	r3, r6
 800ab38:	461e      	mov	r6, r3
 800ab3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab3e:	2a39      	cmp	r2, #57	@ 0x39
 800ab40:	d107      	bne.n	800ab52 <_dtoa_r+0x6da>
 800ab42:	459a      	cmp	sl, r3
 800ab44:	d1f8      	bne.n	800ab38 <_dtoa_r+0x6c0>
 800ab46:	9a04      	ldr	r2, [sp, #16]
 800ab48:	3201      	adds	r2, #1
 800ab4a:	9204      	str	r2, [sp, #16]
 800ab4c:	2230      	movs	r2, #48	@ 0x30
 800ab4e:	f88a 2000 	strb.w	r2, [sl]
 800ab52:	781a      	ldrb	r2, [r3, #0]
 800ab54:	3201      	adds	r2, #1
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	e7bd      	b.n	800aad6 <_dtoa_r+0x65e>
 800ab5a:	4b7b      	ldr	r3, [pc, #492]	@ (800ad48 <_dtoa_r+0x8d0>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f7f5 fd6b 	bl	8000638 <__aeabi_dmul>
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	460d      	mov	r5, r1
 800ab6a:	f7f5 ffcd 	bl	8000b08 <__aeabi_dcmpeq>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f43f aebb 	beq.w	800a8ea <_dtoa_r+0x472>
 800ab74:	e6f0      	b.n	800a958 <_dtoa_r+0x4e0>
 800ab76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	f000 80db 	beq.w	800ad34 <_dtoa_r+0x8bc>
 800ab7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab80:	2a01      	cmp	r2, #1
 800ab82:	f300 80bf 	bgt.w	800ad04 <_dtoa_r+0x88c>
 800ab86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	f000 80b7 	beq.w	800acfc <_dtoa_r+0x884>
 800ab8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ab92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab94:	4646      	mov	r6, r8
 800ab96:	9a08      	ldr	r2, [sp, #32]
 800ab98:	2101      	movs	r1, #1
 800ab9a:	441a      	add	r2, r3
 800ab9c:	4658      	mov	r0, fp
 800ab9e:	4498      	add	r8, r3
 800aba0:	9208      	str	r2, [sp, #32]
 800aba2:	f000 fc21 	bl	800b3e8 <__i2b>
 800aba6:	4605      	mov	r5, r0
 800aba8:	b15e      	cbz	r6, 800abc2 <_dtoa_r+0x74a>
 800abaa:	9b08      	ldr	r3, [sp, #32]
 800abac:	2b00      	cmp	r3, #0
 800abae:	dd08      	ble.n	800abc2 <_dtoa_r+0x74a>
 800abb0:	42b3      	cmp	r3, r6
 800abb2:	9a08      	ldr	r2, [sp, #32]
 800abb4:	bfa8      	it	ge
 800abb6:	4633      	movge	r3, r6
 800abb8:	eba8 0803 	sub.w	r8, r8, r3
 800abbc:	1af6      	subs	r6, r6, r3
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	9308      	str	r3, [sp, #32]
 800abc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abc4:	b1f3      	cbz	r3, 800ac04 <_dtoa_r+0x78c>
 800abc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 80b7 	beq.w	800ad3c <_dtoa_r+0x8c4>
 800abce:	b18c      	cbz	r4, 800abf4 <_dtoa_r+0x77c>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4622      	mov	r2, r4
 800abd4:	4658      	mov	r0, fp
 800abd6:	f000 fcc7 	bl	800b568 <__pow5mult>
 800abda:	464a      	mov	r2, r9
 800abdc:	4601      	mov	r1, r0
 800abde:	4605      	mov	r5, r0
 800abe0:	4658      	mov	r0, fp
 800abe2:	f000 fc17 	bl	800b414 <__multiply>
 800abe6:	4649      	mov	r1, r9
 800abe8:	9004      	str	r0, [sp, #16]
 800abea:	4658      	mov	r0, fp
 800abec:	f000 fb48 	bl	800b280 <_Bfree>
 800abf0:	9b04      	ldr	r3, [sp, #16]
 800abf2:	4699      	mov	r9, r3
 800abf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abf6:	1b1a      	subs	r2, r3, r4
 800abf8:	d004      	beq.n	800ac04 <_dtoa_r+0x78c>
 800abfa:	4649      	mov	r1, r9
 800abfc:	4658      	mov	r0, fp
 800abfe:	f000 fcb3 	bl	800b568 <__pow5mult>
 800ac02:	4681      	mov	r9, r0
 800ac04:	2101      	movs	r1, #1
 800ac06:	4658      	mov	r0, fp
 800ac08:	f000 fbee 	bl	800b3e8 <__i2b>
 800ac0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac0e:	4604      	mov	r4, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 81cf 	beq.w	800afb4 <_dtoa_r+0xb3c>
 800ac16:	461a      	mov	r2, r3
 800ac18:	4601      	mov	r1, r0
 800ac1a:	4658      	mov	r0, fp
 800ac1c:	f000 fca4 	bl	800b568 <__pow5mult>
 800ac20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	4604      	mov	r4, r0
 800ac26:	f300 8095 	bgt.w	800ad54 <_dtoa_r+0x8dc>
 800ac2a:	9b02      	ldr	r3, [sp, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f040 8087 	bne.w	800ad40 <_dtoa_r+0x8c8>
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f040 8089 	bne.w	800ad50 <_dtoa_r+0x8d8>
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac44:	0d1b      	lsrs	r3, r3, #20
 800ac46:	051b      	lsls	r3, r3, #20
 800ac48:	b12b      	cbz	r3, 800ac56 <_dtoa_r+0x7de>
 800ac4a:	9b08      	ldr	r3, [sp, #32]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	9308      	str	r3, [sp, #32]
 800ac50:	f108 0801 	add.w	r8, r8, #1
 800ac54:	2301      	movs	r3, #1
 800ac56:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 81b0 	beq.w	800afc0 <_dtoa_r+0xb48>
 800ac60:	6923      	ldr	r3, [r4, #16]
 800ac62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac66:	6918      	ldr	r0, [r3, #16]
 800ac68:	f000 fb72 	bl	800b350 <__hi0bits>
 800ac6c:	f1c0 0020 	rsb	r0, r0, #32
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	4418      	add	r0, r3
 800ac74:	f010 001f 	ands.w	r0, r0, #31
 800ac78:	d077      	beq.n	800ad6a <_dtoa_r+0x8f2>
 800ac7a:	f1c0 0320 	rsb	r3, r0, #32
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	dd6b      	ble.n	800ad5a <_dtoa_r+0x8e2>
 800ac82:	9b08      	ldr	r3, [sp, #32]
 800ac84:	f1c0 001c 	rsb	r0, r0, #28
 800ac88:	4403      	add	r3, r0
 800ac8a:	4480      	add	r8, r0
 800ac8c:	4406      	add	r6, r0
 800ac8e:	9308      	str	r3, [sp, #32]
 800ac90:	f1b8 0f00 	cmp.w	r8, #0
 800ac94:	dd05      	ble.n	800aca2 <_dtoa_r+0x82a>
 800ac96:	4649      	mov	r1, r9
 800ac98:	4642      	mov	r2, r8
 800ac9a:	4658      	mov	r0, fp
 800ac9c:	f000 fcbe 	bl	800b61c <__lshift>
 800aca0:	4681      	mov	r9, r0
 800aca2:	9b08      	ldr	r3, [sp, #32]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dd05      	ble.n	800acb4 <_dtoa_r+0x83c>
 800aca8:	4621      	mov	r1, r4
 800acaa:	461a      	mov	r2, r3
 800acac:	4658      	mov	r0, fp
 800acae:	f000 fcb5 	bl	800b61c <__lshift>
 800acb2:	4604      	mov	r4, r0
 800acb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d059      	beq.n	800ad6e <_dtoa_r+0x8f6>
 800acba:	4621      	mov	r1, r4
 800acbc:	4648      	mov	r0, r9
 800acbe:	f000 fd19 	bl	800b6f4 <__mcmp>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	da53      	bge.n	800ad6e <_dtoa_r+0x8f6>
 800acc6:	1e7b      	subs	r3, r7, #1
 800acc8:	9304      	str	r3, [sp, #16]
 800acca:	4649      	mov	r1, r9
 800accc:	2300      	movs	r3, #0
 800acce:	220a      	movs	r2, #10
 800acd0:	4658      	mov	r0, fp
 800acd2:	f000 faf7 	bl	800b2c4 <__multadd>
 800acd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acd8:	4681      	mov	r9, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 8172 	beq.w	800afc4 <_dtoa_r+0xb4c>
 800ace0:	2300      	movs	r3, #0
 800ace2:	4629      	mov	r1, r5
 800ace4:	220a      	movs	r2, #10
 800ace6:	4658      	mov	r0, fp
 800ace8:	f000 faec 	bl	800b2c4 <__multadd>
 800acec:	9b00      	ldr	r3, [sp, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	4605      	mov	r5, r0
 800acf2:	dc67      	bgt.n	800adc4 <_dtoa_r+0x94c>
 800acf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	dc41      	bgt.n	800ad7e <_dtoa_r+0x906>
 800acfa:	e063      	b.n	800adc4 <_dtoa_r+0x94c>
 800acfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800acfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad02:	e746      	b.n	800ab92 <_dtoa_r+0x71a>
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	1e5c      	subs	r4, r3, #1
 800ad08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	bfbf      	itttt	lt
 800ad0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ad10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ad12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ad14:	1ae3      	sublt	r3, r4, r3
 800ad16:	bfb4      	ite	lt
 800ad18:	18d2      	addlt	r2, r2, r3
 800ad1a:	1b1c      	subge	r4, r3, r4
 800ad1c:	9b07      	ldr	r3, [sp, #28]
 800ad1e:	bfbc      	itt	lt
 800ad20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ad22:	2400      	movlt	r4, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfb5      	itete	lt
 800ad28:	eba8 0603 	sublt.w	r6, r8, r3
 800ad2c:	9b07      	ldrge	r3, [sp, #28]
 800ad2e:	2300      	movlt	r3, #0
 800ad30:	4646      	movge	r6, r8
 800ad32:	e730      	b.n	800ab96 <_dtoa_r+0x71e>
 800ad34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad38:	4646      	mov	r6, r8
 800ad3a:	e735      	b.n	800aba8 <_dtoa_r+0x730>
 800ad3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad3e:	e75c      	b.n	800abfa <_dtoa_r+0x782>
 800ad40:	2300      	movs	r3, #0
 800ad42:	e788      	b.n	800ac56 <_dtoa_r+0x7de>
 800ad44:	3fe00000 	.word	0x3fe00000
 800ad48:	40240000 	.word	0x40240000
 800ad4c:	40140000 	.word	0x40140000
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	e780      	b.n	800ac56 <_dtoa_r+0x7de>
 800ad54:	2300      	movs	r3, #0
 800ad56:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad58:	e782      	b.n	800ac60 <_dtoa_r+0x7e8>
 800ad5a:	d099      	beq.n	800ac90 <_dtoa_r+0x818>
 800ad5c:	9a08      	ldr	r2, [sp, #32]
 800ad5e:	331c      	adds	r3, #28
 800ad60:	441a      	add	r2, r3
 800ad62:	4498      	add	r8, r3
 800ad64:	441e      	add	r6, r3
 800ad66:	9208      	str	r2, [sp, #32]
 800ad68:	e792      	b.n	800ac90 <_dtoa_r+0x818>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	e7f6      	b.n	800ad5c <_dtoa_r+0x8e4>
 800ad6e:	9b07      	ldr	r3, [sp, #28]
 800ad70:	9704      	str	r7, [sp, #16]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc20      	bgt.n	800adb8 <_dtoa_r+0x940>
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	dd1e      	ble.n	800adbc <_dtoa_r+0x944>
 800ad7e:	9b00      	ldr	r3, [sp, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f47f aec0 	bne.w	800ab06 <_dtoa_r+0x68e>
 800ad86:	4621      	mov	r1, r4
 800ad88:	2205      	movs	r2, #5
 800ad8a:	4658      	mov	r0, fp
 800ad8c:	f000 fa9a 	bl	800b2c4 <__multadd>
 800ad90:	4601      	mov	r1, r0
 800ad92:	4604      	mov	r4, r0
 800ad94:	4648      	mov	r0, r9
 800ad96:	f000 fcad 	bl	800b6f4 <__mcmp>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f77f aeb3 	ble.w	800ab06 <_dtoa_r+0x68e>
 800ada0:	4656      	mov	r6, sl
 800ada2:	2331      	movs	r3, #49	@ 0x31
 800ada4:	f806 3b01 	strb.w	r3, [r6], #1
 800ada8:	9b04      	ldr	r3, [sp, #16]
 800adaa:	3301      	adds	r3, #1
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	e6ae      	b.n	800ab0e <_dtoa_r+0x696>
 800adb0:	9c07      	ldr	r4, [sp, #28]
 800adb2:	9704      	str	r7, [sp, #16]
 800adb4:	4625      	mov	r5, r4
 800adb6:	e7f3      	b.n	800ada0 <_dtoa_r+0x928>
 800adb8:	9b07      	ldr	r3, [sp, #28]
 800adba:	9300      	str	r3, [sp, #0]
 800adbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 8104 	beq.w	800afcc <_dtoa_r+0xb54>
 800adc4:	2e00      	cmp	r6, #0
 800adc6:	dd05      	ble.n	800add4 <_dtoa_r+0x95c>
 800adc8:	4629      	mov	r1, r5
 800adca:	4632      	mov	r2, r6
 800adcc:	4658      	mov	r0, fp
 800adce:	f000 fc25 	bl	800b61c <__lshift>
 800add2:	4605      	mov	r5, r0
 800add4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add6:	2b00      	cmp	r3, #0
 800add8:	d05a      	beq.n	800ae90 <_dtoa_r+0xa18>
 800adda:	6869      	ldr	r1, [r5, #4]
 800addc:	4658      	mov	r0, fp
 800adde:	f000 fa0f 	bl	800b200 <_Balloc>
 800ade2:	4606      	mov	r6, r0
 800ade4:	b928      	cbnz	r0, 800adf2 <_dtoa_r+0x97a>
 800ade6:	4b84      	ldr	r3, [pc, #528]	@ (800aff8 <_dtoa_r+0xb80>)
 800ade8:	4602      	mov	r2, r0
 800adea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800adee:	f7ff bb5a 	b.w	800a4a6 <_dtoa_r+0x2e>
 800adf2:	692a      	ldr	r2, [r5, #16]
 800adf4:	3202      	adds	r2, #2
 800adf6:	0092      	lsls	r2, r2, #2
 800adf8:	f105 010c 	add.w	r1, r5, #12
 800adfc:	300c      	adds	r0, #12
 800adfe:	f000 ffaf 	bl	800bd60 <memcpy>
 800ae02:	2201      	movs	r2, #1
 800ae04:	4631      	mov	r1, r6
 800ae06:	4658      	mov	r0, fp
 800ae08:	f000 fc08 	bl	800b61c <__lshift>
 800ae0c:	f10a 0301 	add.w	r3, sl, #1
 800ae10:	9307      	str	r3, [sp, #28]
 800ae12:	9b00      	ldr	r3, [sp, #0]
 800ae14:	4453      	add	r3, sl
 800ae16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae18:	9b02      	ldr	r3, [sp, #8]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	462f      	mov	r7, r5
 800ae20:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae22:	4605      	mov	r5, r0
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	4621      	mov	r1, r4
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	f7ff fa98 	bl	800a362 <quorem>
 800ae32:	4639      	mov	r1, r7
 800ae34:	9002      	str	r0, [sp, #8]
 800ae36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae3a:	4648      	mov	r0, r9
 800ae3c:	f000 fc5a 	bl	800b6f4 <__mcmp>
 800ae40:	462a      	mov	r2, r5
 800ae42:	9008      	str	r0, [sp, #32]
 800ae44:	4621      	mov	r1, r4
 800ae46:	4658      	mov	r0, fp
 800ae48:	f000 fc70 	bl	800b72c <__mdiff>
 800ae4c:	68c2      	ldr	r2, [r0, #12]
 800ae4e:	4606      	mov	r6, r0
 800ae50:	bb02      	cbnz	r2, 800ae94 <_dtoa_r+0xa1c>
 800ae52:	4601      	mov	r1, r0
 800ae54:	4648      	mov	r0, r9
 800ae56:	f000 fc4d 	bl	800b6f4 <__mcmp>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4658      	mov	r0, fp
 800ae60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae62:	f000 fa0d 	bl	800b280 <_Bfree>
 800ae66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae6a:	9e07      	ldr	r6, [sp, #28]
 800ae6c:	ea43 0102 	orr.w	r1, r3, r2
 800ae70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae72:	4319      	orrs	r1, r3
 800ae74:	d110      	bne.n	800ae98 <_dtoa_r+0xa20>
 800ae76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae7a:	d029      	beq.n	800aed0 <_dtoa_r+0xa58>
 800ae7c:	9b08      	ldr	r3, [sp, #32]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	dd02      	ble.n	800ae88 <_dtoa_r+0xa10>
 800ae82:	9b02      	ldr	r3, [sp, #8]
 800ae84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ae88:	9b00      	ldr	r3, [sp, #0]
 800ae8a:	f883 8000 	strb.w	r8, [r3]
 800ae8e:	e63f      	b.n	800ab10 <_dtoa_r+0x698>
 800ae90:	4628      	mov	r0, r5
 800ae92:	e7bb      	b.n	800ae0c <_dtoa_r+0x994>
 800ae94:	2201      	movs	r2, #1
 800ae96:	e7e1      	b.n	800ae5c <_dtoa_r+0x9e4>
 800ae98:	9b08      	ldr	r3, [sp, #32]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	db04      	blt.n	800aea8 <_dtoa_r+0xa30>
 800ae9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aea0:	430b      	orrs	r3, r1
 800aea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aea4:	430b      	orrs	r3, r1
 800aea6:	d120      	bne.n	800aeea <_dtoa_r+0xa72>
 800aea8:	2a00      	cmp	r2, #0
 800aeaa:	dded      	ble.n	800ae88 <_dtoa_r+0xa10>
 800aeac:	4649      	mov	r1, r9
 800aeae:	2201      	movs	r2, #1
 800aeb0:	4658      	mov	r0, fp
 800aeb2:	f000 fbb3 	bl	800b61c <__lshift>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4681      	mov	r9, r0
 800aeba:	f000 fc1b 	bl	800b6f4 <__mcmp>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	dc03      	bgt.n	800aeca <_dtoa_r+0xa52>
 800aec2:	d1e1      	bne.n	800ae88 <_dtoa_r+0xa10>
 800aec4:	f018 0f01 	tst.w	r8, #1
 800aec8:	d0de      	beq.n	800ae88 <_dtoa_r+0xa10>
 800aeca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aece:	d1d8      	bne.n	800ae82 <_dtoa_r+0xa0a>
 800aed0:	9a00      	ldr	r2, [sp, #0]
 800aed2:	2339      	movs	r3, #57	@ 0x39
 800aed4:	7013      	strb	r3, [r2, #0]
 800aed6:	4633      	mov	r3, r6
 800aed8:	461e      	mov	r6, r3
 800aeda:	3b01      	subs	r3, #1
 800aedc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aee0:	2a39      	cmp	r2, #57	@ 0x39
 800aee2:	d052      	beq.n	800af8a <_dtoa_r+0xb12>
 800aee4:	3201      	adds	r2, #1
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	e612      	b.n	800ab10 <_dtoa_r+0x698>
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	dd07      	ble.n	800aefe <_dtoa_r+0xa86>
 800aeee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aef2:	d0ed      	beq.n	800aed0 <_dtoa_r+0xa58>
 800aef4:	9a00      	ldr	r2, [sp, #0]
 800aef6:	f108 0301 	add.w	r3, r8, #1
 800aefa:	7013      	strb	r3, [r2, #0]
 800aefc:	e608      	b.n	800ab10 <_dtoa_r+0x698>
 800aefe:	9b07      	ldr	r3, [sp, #28]
 800af00:	9a07      	ldr	r2, [sp, #28]
 800af02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800af06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af08:	4293      	cmp	r3, r2
 800af0a:	d028      	beq.n	800af5e <_dtoa_r+0xae6>
 800af0c:	4649      	mov	r1, r9
 800af0e:	2300      	movs	r3, #0
 800af10:	220a      	movs	r2, #10
 800af12:	4658      	mov	r0, fp
 800af14:	f000 f9d6 	bl	800b2c4 <__multadd>
 800af18:	42af      	cmp	r7, r5
 800af1a:	4681      	mov	r9, r0
 800af1c:	f04f 0300 	mov.w	r3, #0
 800af20:	f04f 020a 	mov.w	r2, #10
 800af24:	4639      	mov	r1, r7
 800af26:	4658      	mov	r0, fp
 800af28:	d107      	bne.n	800af3a <_dtoa_r+0xac2>
 800af2a:	f000 f9cb 	bl	800b2c4 <__multadd>
 800af2e:	4607      	mov	r7, r0
 800af30:	4605      	mov	r5, r0
 800af32:	9b07      	ldr	r3, [sp, #28]
 800af34:	3301      	adds	r3, #1
 800af36:	9307      	str	r3, [sp, #28]
 800af38:	e774      	b.n	800ae24 <_dtoa_r+0x9ac>
 800af3a:	f000 f9c3 	bl	800b2c4 <__multadd>
 800af3e:	4629      	mov	r1, r5
 800af40:	4607      	mov	r7, r0
 800af42:	2300      	movs	r3, #0
 800af44:	220a      	movs	r2, #10
 800af46:	4658      	mov	r0, fp
 800af48:	f000 f9bc 	bl	800b2c4 <__multadd>
 800af4c:	4605      	mov	r5, r0
 800af4e:	e7f0      	b.n	800af32 <_dtoa_r+0xaba>
 800af50:	9b00      	ldr	r3, [sp, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	bfcc      	ite	gt
 800af56:	461e      	movgt	r6, r3
 800af58:	2601      	movle	r6, #1
 800af5a:	4456      	add	r6, sl
 800af5c:	2700      	movs	r7, #0
 800af5e:	4649      	mov	r1, r9
 800af60:	2201      	movs	r2, #1
 800af62:	4658      	mov	r0, fp
 800af64:	f000 fb5a 	bl	800b61c <__lshift>
 800af68:	4621      	mov	r1, r4
 800af6a:	4681      	mov	r9, r0
 800af6c:	f000 fbc2 	bl	800b6f4 <__mcmp>
 800af70:	2800      	cmp	r0, #0
 800af72:	dcb0      	bgt.n	800aed6 <_dtoa_r+0xa5e>
 800af74:	d102      	bne.n	800af7c <_dtoa_r+0xb04>
 800af76:	f018 0f01 	tst.w	r8, #1
 800af7a:	d1ac      	bne.n	800aed6 <_dtoa_r+0xa5e>
 800af7c:	4633      	mov	r3, r6
 800af7e:	461e      	mov	r6, r3
 800af80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af84:	2a30      	cmp	r2, #48	@ 0x30
 800af86:	d0fa      	beq.n	800af7e <_dtoa_r+0xb06>
 800af88:	e5c2      	b.n	800ab10 <_dtoa_r+0x698>
 800af8a:	459a      	cmp	sl, r3
 800af8c:	d1a4      	bne.n	800aed8 <_dtoa_r+0xa60>
 800af8e:	9b04      	ldr	r3, [sp, #16]
 800af90:	3301      	adds	r3, #1
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	2331      	movs	r3, #49	@ 0x31
 800af96:	f88a 3000 	strb.w	r3, [sl]
 800af9a:	e5b9      	b.n	800ab10 <_dtoa_r+0x698>
 800af9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800affc <_dtoa_r+0xb84>
 800afa2:	b11b      	cbz	r3, 800afac <_dtoa_r+0xb34>
 800afa4:	f10a 0308 	add.w	r3, sl, #8
 800afa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	4650      	mov	r0, sl
 800afae:	b019      	add	sp, #100	@ 0x64
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	f77f ae37 	ble.w	800ac2a <_dtoa_r+0x7b2>
 800afbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc0:	2001      	movs	r0, #1
 800afc2:	e655      	b.n	800ac70 <_dtoa_r+0x7f8>
 800afc4:	9b00      	ldr	r3, [sp, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f77f aed6 	ble.w	800ad78 <_dtoa_r+0x900>
 800afcc:	4656      	mov	r6, sl
 800afce:	4621      	mov	r1, r4
 800afd0:	4648      	mov	r0, r9
 800afd2:	f7ff f9c6 	bl	800a362 <quorem>
 800afd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800afda:	f806 8b01 	strb.w	r8, [r6], #1
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	eba6 020a 	sub.w	r2, r6, sl
 800afe4:	4293      	cmp	r3, r2
 800afe6:	ddb3      	ble.n	800af50 <_dtoa_r+0xad8>
 800afe8:	4649      	mov	r1, r9
 800afea:	2300      	movs	r3, #0
 800afec:	220a      	movs	r2, #10
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 f968 	bl	800b2c4 <__multadd>
 800aff4:	4681      	mov	r9, r0
 800aff6:	e7ea      	b.n	800afce <_dtoa_r+0xb56>
 800aff8:	0800e4b0 	.word	0x0800e4b0
 800affc:	0800e434 	.word	0x0800e434

0800b000 <_free_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4605      	mov	r5, r0
 800b004:	2900      	cmp	r1, #0
 800b006:	d041      	beq.n	800b08c <_free_r+0x8c>
 800b008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00c:	1f0c      	subs	r4, r1, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bfb8      	it	lt
 800b012:	18e4      	addlt	r4, r4, r3
 800b014:	f000 f8e8 	bl	800b1e8 <__malloc_lock>
 800b018:	4a1d      	ldr	r2, [pc, #116]	@ (800b090 <_free_r+0x90>)
 800b01a:	6813      	ldr	r3, [r2, #0]
 800b01c:	b933      	cbnz	r3, 800b02c <_free_r+0x2c>
 800b01e:	6063      	str	r3, [r4, #4]
 800b020:	6014      	str	r4, [r2, #0]
 800b022:	4628      	mov	r0, r5
 800b024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b028:	f000 b8e4 	b.w	800b1f4 <__malloc_unlock>
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	d908      	bls.n	800b042 <_free_r+0x42>
 800b030:	6820      	ldr	r0, [r4, #0]
 800b032:	1821      	adds	r1, r4, r0
 800b034:	428b      	cmp	r3, r1
 800b036:	bf01      	itttt	eq
 800b038:	6819      	ldreq	r1, [r3, #0]
 800b03a:	685b      	ldreq	r3, [r3, #4]
 800b03c:	1809      	addeq	r1, r1, r0
 800b03e:	6021      	streq	r1, [r4, #0]
 800b040:	e7ed      	b.n	800b01e <_free_r+0x1e>
 800b042:	461a      	mov	r2, r3
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	b10b      	cbz	r3, 800b04c <_free_r+0x4c>
 800b048:	42a3      	cmp	r3, r4
 800b04a:	d9fa      	bls.n	800b042 <_free_r+0x42>
 800b04c:	6811      	ldr	r1, [r2, #0]
 800b04e:	1850      	adds	r0, r2, r1
 800b050:	42a0      	cmp	r0, r4
 800b052:	d10b      	bne.n	800b06c <_free_r+0x6c>
 800b054:	6820      	ldr	r0, [r4, #0]
 800b056:	4401      	add	r1, r0
 800b058:	1850      	adds	r0, r2, r1
 800b05a:	4283      	cmp	r3, r0
 800b05c:	6011      	str	r1, [r2, #0]
 800b05e:	d1e0      	bne.n	800b022 <_free_r+0x22>
 800b060:	6818      	ldr	r0, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	6053      	str	r3, [r2, #4]
 800b066:	4408      	add	r0, r1
 800b068:	6010      	str	r0, [r2, #0]
 800b06a:	e7da      	b.n	800b022 <_free_r+0x22>
 800b06c:	d902      	bls.n	800b074 <_free_r+0x74>
 800b06e:	230c      	movs	r3, #12
 800b070:	602b      	str	r3, [r5, #0]
 800b072:	e7d6      	b.n	800b022 <_free_r+0x22>
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	1821      	adds	r1, r4, r0
 800b078:	428b      	cmp	r3, r1
 800b07a:	bf04      	itt	eq
 800b07c:	6819      	ldreq	r1, [r3, #0]
 800b07e:	685b      	ldreq	r3, [r3, #4]
 800b080:	6063      	str	r3, [r4, #4]
 800b082:	bf04      	itt	eq
 800b084:	1809      	addeq	r1, r1, r0
 800b086:	6021      	streq	r1, [r4, #0]
 800b088:	6054      	str	r4, [r2, #4]
 800b08a:	e7ca      	b.n	800b022 <_free_r+0x22>
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	20000ba8 	.word	0x20000ba8

0800b094 <malloc>:
 800b094:	4b02      	ldr	r3, [pc, #8]	@ (800b0a0 <malloc+0xc>)
 800b096:	4601      	mov	r1, r0
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f000 b825 	b.w	800b0e8 <_malloc_r>
 800b09e:	bf00      	nop
 800b0a0:	200000b8 	.word	0x200000b8

0800b0a4 <sbrk_aligned>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	4e0f      	ldr	r6, [pc, #60]	@ (800b0e4 <sbrk_aligned+0x40>)
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	b911      	cbnz	r1, 800b0b6 <sbrk_aligned+0x12>
 800b0b0:	f000 fe46 	bl	800bd40 <_sbrk_r>
 800b0b4:	6030      	str	r0, [r6, #0]
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f000 fe41 	bl	800bd40 <_sbrk_r>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	d103      	bne.n	800b0ca <sbrk_aligned+0x26>
 800b0c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ca:	1cc4      	adds	r4, r0, #3
 800b0cc:	f024 0403 	bic.w	r4, r4, #3
 800b0d0:	42a0      	cmp	r0, r4
 800b0d2:	d0f8      	beq.n	800b0c6 <sbrk_aligned+0x22>
 800b0d4:	1a21      	subs	r1, r4, r0
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f000 fe32 	bl	800bd40 <_sbrk_r>
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d1f2      	bne.n	800b0c6 <sbrk_aligned+0x22>
 800b0e0:	e7ef      	b.n	800b0c2 <sbrk_aligned+0x1e>
 800b0e2:	bf00      	nop
 800b0e4:	20000ba4 	.word	0x20000ba4

0800b0e8 <_malloc_r>:
 800b0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	1ccd      	adds	r5, r1, #3
 800b0ee:	f025 0503 	bic.w	r5, r5, #3
 800b0f2:	3508      	adds	r5, #8
 800b0f4:	2d0c      	cmp	r5, #12
 800b0f6:	bf38      	it	cc
 800b0f8:	250c      	movcc	r5, #12
 800b0fa:	2d00      	cmp	r5, #0
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	db01      	blt.n	800b104 <_malloc_r+0x1c>
 800b100:	42a9      	cmp	r1, r5
 800b102:	d904      	bls.n	800b10e <_malloc_r+0x26>
 800b104:	230c      	movs	r3, #12
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	2000      	movs	r0, #0
 800b10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1e4 <_malloc_r+0xfc>
 800b112:	f000 f869 	bl	800b1e8 <__malloc_lock>
 800b116:	f8d8 3000 	ldr.w	r3, [r8]
 800b11a:	461c      	mov	r4, r3
 800b11c:	bb44      	cbnz	r4, 800b170 <_malloc_r+0x88>
 800b11e:	4629      	mov	r1, r5
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff ffbf 	bl	800b0a4 <sbrk_aligned>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	4604      	mov	r4, r0
 800b12a:	d158      	bne.n	800b1de <_malloc_r+0xf6>
 800b12c:	f8d8 4000 	ldr.w	r4, [r8]
 800b130:	4627      	mov	r7, r4
 800b132:	2f00      	cmp	r7, #0
 800b134:	d143      	bne.n	800b1be <_malloc_r+0xd6>
 800b136:	2c00      	cmp	r4, #0
 800b138:	d04b      	beq.n	800b1d2 <_malloc_r+0xea>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	4639      	mov	r1, r7
 800b13e:	4630      	mov	r0, r6
 800b140:	eb04 0903 	add.w	r9, r4, r3
 800b144:	f000 fdfc 	bl	800bd40 <_sbrk_r>
 800b148:	4581      	cmp	r9, r0
 800b14a:	d142      	bne.n	800b1d2 <_malloc_r+0xea>
 800b14c:	6821      	ldr	r1, [r4, #0]
 800b14e:	1a6d      	subs	r5, r5, r1
 800b150:	4629      	mov	r1, r5
 800b152:	4630      	mov	r0, r6
 800b154:	f7ff ffa6 	bl	800b0a4 <sbrk_aligned>
 800b158:	3001      	adds	r0, #1
 800b15a:	d03a      	beq.n	800b1d2 <_malloc_r+0xea>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	442b      	add	r3, r5
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	f8d8 3000 	ldr.w	r3, [r8]
 800b166:	685a      	ldr	r2, [r3, #4]
 800b168:	bb62      	cbnz	r2, 800b1c4 <_malloc_r+0xdc>
 800b16a:	f8c8 7000 	str.w	r7, [r8]
 800b16e:	e00f      	b.n	800b190 <_malloc_r+0xa8>
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	1b52      	subs	r2, r2, r5
 800b174:	d420      	bmi.n	800b1b8 <_malloc_r+0xd0>
 800b176:	2a0b      	cmp	r2, #11
 800b178:	d917      	bls.n	800b1aa <_malloc_r+0xc2>
 800b17a:	1961      	adds	r1, r4, r5
 800b17c:	42a3      	cmp	r3, r4
 800b17e:	6025      	str	r5, [r4, #0]
 800b180:	bf18      	it	ne
 800b182:	6059      	strne	r1, [r3, #4]
 800b184:	6863      	ldr	r3, [r4, #4]
 800b186:	bf08      	it	eq
 800b188:	f8c8 1000 	streq.w	r1, [r8]
 800b18c:	5162      	str	r2, [r4, r5]
 800b18e:	604b      	str	r3, [r1, #4]
 800b190:	4630      	mov	r0, r6
 800b192:	f000 f82f 	bl	800b1f4 <__malloc_unlock>
 800b196:	f104 000b 	add.w	r0, r4, #11
 800b19a:	1d23      	adds	r3, r4, #4
 800b19c:	f020 0007 	bic.w	r0, r0, #7
 800b1a0:	1ac2      	subs	r2, r0, r3
 800b1a2:	bf1c      	itt	ne
 800b1a4:	1a1b      	subne	r3, r3, r0
 800b1a6:	50a3      	strne	r3, [r4, r2]
 800b1a8:	e7af      	b.n	800b10a <_malloc_r+0x22>
 800b1aa:	6862      	ldr	r2, [r4, #4]
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	bf0c      	ite	eq
 800b1b0:	f8c8 2000 	streq.w	r2, [r8]
 800b1b4:	605a      	strne	r2, [r3, #4]
 800b1b6:	e7eb      	b.n	800b190 <_malloc_r+0xa8>
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	6864      	ldr	r4, [r4, #4]
 800b1bc:	e7ae      	b.n	800b11c <_malloc_r+0x34>
 800b1be:	463c      	mov	r4, r7
 800b1c0:	687f      	ldr	r7, [r7, #4]
 800b1c2:	e7b6      	b.n	800b132 <_malloc_r+0x4a>
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d1fb      	bne.n	800b1c4 <_malloc_r+0xdc>
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	6053      	str	r3, [r2, #4]
 800b1d0:	e7de      	b.n	800b190 <_malloc_r+0xa8>
 800b1d2:	230c      	movs	r3, #12
 800b1d4:	6033      	str	r3, [r6, #0]
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 f80c 	bl	800b1f4 <__malloc_unlock>
 800b1dc:	e794      	b.n	800b108 <_malloc_r+0x20>
 800b1de:	6005      	str	r5, [r0, #0]
 800b1e0:	e7d6      	b.n	800b190 <_malloc_r+0xa8>
 800b1e2:	bf00      	nop
 800b1e4:	20000ba8 	.word	0x20000ba8

0800b1e8 <__malloc_lock>:
 800b1e8:	4801      	ldr	r0, [pc, #4]	@ (800b1f0 <__malloc_lock+0x8>)
 800b1ea:	f7ff b8b8 	b.w	800a35e <__retarget_lock_acquire_recursive>
 800b1ee:	bf00      	nop
 800b1f0:	20000ba0 	.word	0x20000ba0

0800b1f4 <__malloc_unlock>:
 800b1f4:	4801      	ldr	r0, [pc, #4]	@ (800b1fc <__malloc_unlock+0x8>)
 800b1f6:	f7ff b8b3 	b.w	800a360 <__retarget_lock_release_recursive>
 800b1fa:	bf00      	nop
 800b1fc:	20000ba0 	.word	0x20000ba0

0800b200 <_Balloc>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	69c6      	ldr	r6, [r0, #28]
 800b204:	4604      	mov	r4, r0
 800b206:	460d      	mov	r5, r1
 800b208:	b976      	cbnz	r6, 800b228 <_Balloc+0x28>
 800b20a:	2010      	movs	r0, #16
 800b20c:	f7ff ff42 	bl	800b094 <malloc>
 800b210:	4602      	mov	r2, r0
 800b212:	61e0      	str	r0, [r4, #28]
 800b214:	b920      	cbnz	r0, 800b220 <_Balloc+0x20>
 800b216:	4b18      	ldr	r3, [pc, #96]	@ (800b278 <_Balloc+0x78>)
 800b218:	4818      	ldr	r0, [pc, #96]	@ (800b27c <_Balloc+0x7c>)
 800b21a:	216b      	movs	r1, #107	@ 0x6b
 800b21c:	f000 fdae 	bl	800bd7c <__assert_func>
 800b220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b224:	6006      	str	r6, [r0, #0]
 800b226:	60c6      	str	r6, [r0, #12]
 800b228:	69e6      	ldr	r6, [r4, #28]
 800b22a:	68f3      	ldr	r3, [r6, #12]
 800b22c:	b183      	cbz	r3, 800b250 <_Balloc+0x50>
 800b22e:	69e3      	ldr	r3, [r4, #28]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b236:	b9b8      	cbnz	r0, 800b268 <_Balloc+0x68>
 800b238:	2101      	movs	r1, #1
 800b23a:	fa01 f605 	lsl.w	r6, r1, r5
 800b23e:	1d72      	adds	r2, r6, #5
 800b240:	0092      	lsls	r2, r2, #2
 800b242:	4620      	mov	r0, r4
 800b244:	f000 fdb8 	bl	800bdb8 <_calloc_r>
 800b248:	b160      	cbz	r0, 800b264 <_Balloc+0x64>
 800b24a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b24e:	e00e      	b.n	800b26e <_Balloc+0x6e>
 800b250:	2221      	movs	r2, #33	@ 0x21
 800b252:	2104      	movs	r1, #4
 800b254:	4620      	mov	r0, r4
 800b256:	f000 fdaf 	bl	800bdb8 <_calloc_r>
 800b25a:	69e3      	ldr	r3, [r4, #28]
 800b25c:	60f0      	str	r0, [r6, #12]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1e4      	bne.n	800b22e <_Balloc+0x2e>
 800b264:	2000      	movs	r0, #0
 800b266:	bd70      	pop	{r4, r5, r6, pc}
 800b268:	6802      	ldr	r2, [r0, #0]
 800b26a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b26e:	2300      	movs	r3, #0
 800b270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b274:	e7f7      	b.n	800b266 <_Balloc+0x66>
 800b276:	bf00      	nop
 800b278:	0800e441 	.word	0x0800e441
 800b27c:	0800e4c1 	.word	0x0800e4c1

0800b280 <_Bfree>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	69c6      	ldr	r6, [r0, #28]
 800b284:	4605      	mov	r5, r0
 800b286:	460c      	mov	r4, r1
 800b288:	b976      	cbnz	r6, 800b2a8 <_Bfree+0x28>
 800b28a:	2010      	movs	r0, #16
 800b28c:	f7ff ff02 	bl	800b094 <malloc>
 800b290:	4602      	mov	r2, r0
 800b292:	61e8      	str	r0, [r5, #28]
 800b294:	b920      	cbnz	r0, 800b2a0 <_Bfree+0x20>
 800b296:	4b09      	ldr	r3, [pc, #36]	@ (800b2bc <_Bfree+0x3c>)
 800b298:	4809      	ldr	r0, [pc, #36]	@ (800b2c0 <_Bfree+0x40>)
 800b29a:	218f      	movs	r1, #143	@ 0x8f
 800b29c:	f000 fd6e 	bl	800bd7c <__assert_func>
 800b2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a4:	6006      	str	r6, [r0, #0]
 800b2a6:	60c6      	str	r6, [r0, #12]
 800b2a8:	b13c      	cbz	r4, 800b2ba <_Bfree+0x3a>
 800b2aa:	69eb      	ldr	r3, [r5, #28]
 800b2ac:	6862      	ldr	r2, [r4, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2b4:	6021      	str	r1, [r4, #0]
 800b2b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
 800b2bc:	0800e441 	.word	0x0800e441
 800b2c0:	0800e4c1 	.word	0x0800e4c1

0800b2c4 <__multadd>:
 800b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	690d      	ldr	r5, [r1, #16]
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	461e      	mov	r6, r3
 800b2d0:	f101 0c14 	add.w	ip, r1, #20
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2da:	b299      	uxth	r1, r3
 800b2dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b2e0:	0c1e      	lsrs	r6, r3, #16
 800b2e2:	0c0b      	lsrs	r3, r1, #16
 800b2e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2e8:	b289      	uxth	r1, r1
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2f0:	4285      	cmp	r5, r0
 800b2f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2fa:	dcec      	bgt.n	800b2d6 <__multadd+0x12>
 800b2fc:	b30e      	cbz	r6, 800b342 <__multadd+0x7e>
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	42ab      	cmp	r3, r5
 800b302:	dc19      	bgt.n	800b338 <__multadd+0x74>
 800b304:	6861      	ldr	r1, [r4, #4]
 800b306:	4638      	mov	r0, r7
 800b308:	3101      	adds	r1, #1
 800b30a:	f7ff ff79 	bl	800b200 <_Balloc>
 800b30e:	4680      	mov	r8, r0
 800b310:	b928      	cbnz	r0, 800b31e <__multadd+0x5a>
 800b312:	4602      	mov	r2, r0
 800b314:	4b0c      	ldr	r3, [pc, #48]	@ (800b348 <__multadd+0x84>)
 800b316:	480d      	ldr	r0, [pc, #52]	@ (800b34c <__multadd+0x88>)
 800b318:	21ba      	movs	r1, #186	@ 0xba
 800b31a:	f000 fd2f 	bl	800bd7c <__assert_func>
 800b31e:	6922      	ldr	r2, [r4, #16]
 800b320:	3202      	adds	r2, #2
 800b322:	f104 010c 	add.w	r1, r4, #12
 800b326:	0092      	lsls	r2, r2, #2
 800b328:	300c      	adds	r0, #12
 800b32a:	f000 fd19 	bl	800bd60 <memcpy>
 800b32e:	4621      	mov	r1, r4
 800b330:	4638      	mov	r0, r7
 800b332:	f7ff ffa5 	bl	800b280 <_Bfree>
 800b336:	4644      	mov	r4, r8
 800b338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b33c:	3501      	adds	r5, #1
 800b33e:	615e      	str	r6, [r3, #20]
 800b340:	6125      	str	r5, [r4, #16]
 800b342:	4620      	mov	r0, r4
 800b344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b348:	0800e4b0 	.word	0x0800e4b0
 800b34c:	0800e4c1 	.word	0x0800e4c1

0800b350 <__hi0bits>:
 800b350:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b354:	4603      	mov	r3, r0
 800b356:	bf36      	itet	cc
 800b358:	0403      	lslcc	r3, r0, #16
 800b35a:	2000      	movcs	r0, #0
 800b35c:	2010      	movcc	r0, #16
 800b35e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b362:	bf3c      	itt	cc
 800b364:	021b      	lslcc	r3, r3, #8
 800b366:	3008      	addcc	r0, #8
 800b368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b36c:	bf3c      	itt	cc
 800b36e:	011b      	lslcc	r3, r3, #4
 800b370:	3004      	addcc	r0, #4
 800b372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b376:	bf3c      	itt	cc
 800b378:	009b      	lslcc	r3, r3, #2
 800b37a:	3002      	addcc	r0, #2
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	db05      	blt.n	800b38c <__hi0bits+0x3c>
 800b380:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b384:	f100 0001 	add.w	r0, r0, #1
 800b388:	bf08      	it	eq
 800b38a:	2020      	moveq	r0, #32
 800b38c:	4770      	bx	lr

0800b38e <__lo0bits>:
 800b38e:	6803      	ldr	r3, [r0, #0]
 800b390:	4602      	mov	r2, r0
 800b392:	f013 0007 	ands.w	r0, r3, #7
 800b396:	d00b      	beq.n	800b3b0 <__lo0bits+0x22>
 800b398:	07d9      	lsls	r1, r3, #31
 800b39a:	d421      	bmi.n	800b3e0 <__lo0bits+0x52>
 800b39c:	0798      	lsls	r0, r3, #30
 800b39e:	bf49      	itett	mi
 800b3a0:	085b      	lsrmi	r3, r3, #1
 800b3a2:	089b      	lsrpl	r3, r3, #2
 800b3a4:	2001      	movmi	r0, #1
 800b3a6:	6013      	strmi	r3, [r2, #0]
 800b3a8:	bf5c      	itt	pl
 800b3aa:	6013      	strpl	r3, [r2, #0]
 800b3ac:	2002      	movpl	r0, #2
 800b3ae:	4770      	bx	lr
 800b3b0:	b299      	uxth	r1, r3
 800b3b2:	b909      	cbnz	r1, 800b3b8 <__lo0bits+0x2a>
 800b3b4:	0c1b      	lsrs	r3, r3, #16
 800b3b6:	2010      	movs	r0, #16
 800b3b8:	b2d9      	uxtb	r1, r3
 800b3ba:	b909      	cbnz	r1, 800b3c0 <__lo0bits+0x32>
 800b3bc:	3008      	adds	r0, #8
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	0719      	lsls	r1, r3, #28
 800b3c2:	bf04      	itt	eq
 800b3c4:	091b      	lsreq	r3, r3, #4
 800b3c6:	3004      	addeq	r0, #4
 800b3c8:	0799      	lsls	r1, r3, #30
 800b3ca:	bf04      	itt	eq
 800b3cc:	089b      	lsreq	r3, r3, #2
 800b3ce:	3002      	addeq	r0, #2
 800b3d0:	07d9      	lsls	r1, r3, #31
 800b3d2:	d403      	bmi.n	800b3dc <__lo0bits+0x4e>
 800b3d4:	085b      	lsrs	r3, r3, #1
 800b3d6:	f100 0001 	add.w	r0, r0, #1
 800b3da:	d003      	beq.n	800b3e4 <__lo0bits+0x56>
 800b3dc:	6013      	str	r3, [r2, #0]
 800b3de:	4770      	bx	lr
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	4770      	bx	lr
 800b3e4:	2020      	movs	r0, #32
 800b3e6:	4770      	bx	lr

0800b3e8 <__i2b>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	f7ff ff07 	bl	800b200 <_Balloc>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	b928      	cbnz	r0, 800b402 <__i2b+0x1a>
 800b3f6:	4b05      	ldr	r3, [pc, #20]	@ (800b40c <__i2b+0x24>)
 800b3f8:	4805      	ldr	r0, [pc, #20]	@ (800b410 <__i2b+0x28>)
 800b3fa:	f240 1145 	movw	r1, #325	@ 0x145
 800b3fe:	f000 fcbd 	bl	800bd7c <__assert_func>
 800b402:	2301      	movs	r3, #1
 800b404:	6144      	str	r4, [r0, #20]
 800b406:	6103      	str	r3, [r0, #16]
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	bf00      	nop
 800b40c:	0800e4b0 	.word	0x0800e4b0
 800b410:	0800e4c1 	.word	0x0800e4c1

0800b414 <__multiply>:
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	4614      	mov	r4, r2
 800b41a:	690a      	ldr	r2, [r1, #16]
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	429a      	cmp	r2, r3
 800b420:	bfa8      	it	ge
 800b422:	4623      	movge	r3, r4
 800b424:	460f      	mov	r7, r1
 800b426:	bfa4      	itt	ge
 800b428:	460c      	movge	r4, r1
 800b42a:	461f      	movge	r7, r3
 800b42c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b430:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b434:	68a3      	ldr	r3, [r4, #8]
 800b436:	6861      	ldr	r1, [r4, #4]
 800b438:	eb0a 0609 	add.w	r6, sl, r9
 800b43c:	42b3      	cmp	r3, r6
 800b43e:	b085      	sub	sp, #20
 800b440:	bfb8      	it	lt
 800b442:	3101      	addlt	r1, #1
 800b444:	f7ff fedc 	bl	800b200 <_Balloc>
 800b448:	b930      	cbnz	r0, 800b458 <__multiply+0x44>
 800b44a:	4602      	mov	r2, r0
 800b44c:	4b44      	ldr	r3, [pc, #272]	@ (800b560 <__multiply+0x14c>)
 800b44e:	4845      	ldr	r0, [pc, #276]	@ (800b564 <__multiply+0x150>)
 800b450:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b454:	f000 fc92 	bl	800bd7c <__assert_func>
 800b458:	f100 0514 	add.w	r5, r0, #20
 800b45c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b460:	462b      	mov	r3, r5
 800b462:	2200      	movs	r2, #0
 800b464:	4543      	cmp	r3, r8
 800b466:	d321      	bcc.n	800b4ac <__multiply+0x98>
 800b468:	f107 0114 	add.w	r1, r7, #20
 800b46c:	f104 0214 	add.w	r2, r4, #20
 800b470:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b474:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b478:	9302      	str	r3, [sp, #8]
 800b47a:	1b13      	subs	r3, r2, r4
 800b47c:	3b15      	subs	r3, #21
 800b47e:	f023 0303 	bic.w	r3, r3, #3
 800b482:	3304      	adds	r3, #4
 800b484:	f104 0715 	add.w	r7, r4, #21
 800b488:	42ba      	cmp	r2, r7
 800b48a:	bf38      	it	cc
 800b48c:	2304      	movcc	r3, #4
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	9103      	str	r1, [sp, #12]
 800b494:	428b      	cmp	r3, r1
 800b496:	d80c      	bhi.n	800b4b2 <__multiply+0x9e>
 800b498:	2e00      	cmp	r6, #0
 800b49a:	dd03      	ble.n	800b4a4 <__multiply+0x90>
 800b49c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d05b      	beq.n	800b55c <__multiply+0x148>
 800b4a4:	6106      	str	r6, [r0, #16]
 800b4a6:	b005      	add	sp, #20
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ac:	f843 2b04 	str.w	r2, [r3], #4
 800b4b0:	e7d8      	b.n	800b464 <__multiply+0x50>
 800b4b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b4b6:	f1ba 0f00 	cmp.w	sl, #0
 800b4ba:	d024      	beq.n	800b506 <__multiply+0xf2>
 800b4bc:	f104 0e14 	add.w	lr, r4, #20
 800b4c0:	46a9      	mov	r9, r5
 800b4c2:	f04f 0c00 	mov.w	ip, #0
 800b4c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4ca:	f8d9 3000 	ldr.w	r3, [r9]
 800b4ce:	fa1f fb87 	uxth.w	fp, r7
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b4d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b4dc:	f8d9 7000 	ldr.w	r7, [r9]
 800b4e0:	4463      	add	r3, ip
 800b4e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b4e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b4ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b4f4:	4572      	cmp	r2, lr
 800b4f6:	f849 3b04 	str.w	r3, [r9], #4
 800b4fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b4fe:	d8e2      	bhi.n	800b4c6 <__multiply+0xb2>
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	f845 c003 	str.w	ip, [r5, r3]
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b50c:	3104      	adds	r1, #4
 800b50e:	f1b9 0f00 	cmp.w	r9, #0
 800b512:	d021      	beq.n	800b558 <__multiply+0x144>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	f104 0c14 	add.w	ip, r4, #20
 800b51a:	46ae      	mov	lr, r5
 800b51c:	f04f 0a00 	mov.w	sl, #0
 800b520:	f8bc b000 	ldrh.w	fp, [ip]
 800b524:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b528:	fb09 770b 	mla	r7, r9, fp, r7
 800b52c:	4457      	add	r7, sl
 800b52e:	b29b      	uxth	r3, r3
 800b530:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b534:	f84e 3b04 	str.w	r3, [lr], #4
 800b538:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b53c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b540:	f8be 3000 	ldrh.w	r3, [lr]
 800b544:	fb09 330a 	mla	r3, r9, sl, r3
 800b548:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b54c:	4562      	cmp	r2, ip
 800b54e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b552:	d8e5      	bhi.n	800b520 <__multiply+0x10c>
 800b554:	9f01      	ldr	r7, [sp, #4]
 800b556:	51eb      	str	r3, [r5, r7]
 800b558:	3504      	adds	r5, #4
 800b55a:	e799      	b.n	800b490 <__multiply+0x7c>
 800b55c:	3e01      	subs	r6, #1
 800b55e:	e79b      	b.n	800b498 <__multiply+0x84>
 800b560:	0800e4b0 	.word	0x0800e4b0
 800b564:	0800e4c1 	.word	0x0800e4c1

0800b568 <__pow5mult>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	4615      	mov	r5, r2
 800b56e:	f012 0203 	ands.w	r2, r2, #3
 800b572:	4607      	mov	r7, r0
 800b574:	460e      	mov	r6, r1
 800b576:	d007      	beq.n	800b588 <__pow5mult+0x20>
 800b578:	4c25      	ldr	r4, [pc, #148]	@ (800b610 <__pow5mult+0xa8>)
 800b57a:	3a01      	subs	r2, #1
 800b57c:	2300      	movs	r3, #0
 800b57e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b582:	f7ff fe9f 	bl	800b2c4 <__multadd>
 800b586:	4606      	mov	r6, r0
 800b588:	10ad      	asrs	r5, r5, #2
 800b58a:	d03d      	beq.n	800b608 <__pow5mult+0xa0>
 800b58c:	69fc      	ldr	r4, [r7, #28]
 800b58e:	b97c      	cbnz	r4, 800b5b0 <__pow5mult+0x48>
 800b590:	2010      	movs	r0, #16
 800b592:	f7ff fd7f 	bl	800b094 <malloc>
 800b596:	4602      	mov	r2, r0
 800b598:	61f8      	str	r0, [r7, #28]
 800b59a:	b928      	cbnz	r0, 800b5a8 <__pow5mult+0x40>
 800b59c:	4b1d      	ldr	r3, [pc, #116]	@ (800b614 <__pow5mult+0xac>)
 800b59e:	481e      	ldr	r0, [pc, #120]	@ (800b618 <__pow5mult+0xb0>)
 800b5a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5a4:	f000 fbea 	bl	800bd7c <__assert_func>
 800b5a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5ac:	6004      	str	r4, [r0, #0]
 800b5ae:	60c4      	str	r4, [r0, #12]
 800b5b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b5b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5b8:	b94c      	cbnz	r4, 800b5ce <__pow5mult+0x66>
 800b5ba:	f240 2171 	movw	r1, #625	@ 0x271
 800b5be:	4638      	mov	r0, r7
 800b5c0:	f7ff ff12 	bl	800b3e8 <__i2b>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	6003      	str	r3, [r0, #0]
 800b5ce:	f04f 0900 	mov.w	r9, #0
 800b5d2:	07eb      	lsls	r3, r5, #31
 800b5d4:	d50a      	bpl.n	800b5ec <__pow5mult+0x84>
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4638      	mov	r0, r7
 800b5dc:	f7ff ff1a 	bl	800b414 <__multiply>
 800b5e0:	4631      	mov	r1, r6
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	f7ff fe4b 	bl	800b280 <_Bfree>
 800b5ea:	4646      	mov	r6, r8
 800b5ec:	106d      	asrs	r5, r5, #1
 800b5ee:	d00b      	beq.n	800b608 <__pow5mult+0xa0>
 800b5f0:	6820      	ldr	r0, [r4, #0]
 800b5f2:	b938      	cbnz	r0, 800b604 <__pow5mult+0x9c>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f7ff ff0b 	bl	800b414 <__multiply>
 800b5fe:	6020      	str	r0, [r4, #0]
 800b600:	f8c0 9000 	str.w	r9, [r0]
 800b604:	4604      	mov	r4, r0
 800b606:	e7e4      	b.n	800b5d2 <__pow5mult+0x6a>
 800b608:	4630      	mov	r0, r6
 800b60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60e:	bf00      	nop
 800b610:	0800e51c 	.word	0x0800e51c
 800b614:	0800e441 	.word	0x0800e441
 800b618:	0800e4c1 	.word	0x0800e4c1

0800b61c <__lshift>:
 800b61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	460c      	mov	r4, r1
 800b622:	6849      	ldr	r1, [r1, #4]
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b62a:	68a3      	ldr	r3, [r4, #8]
 800b62c:	4607      	mov	r7, r0
 800b62e:	4691      	mov	r9, r2
 800b630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b634:	f108 0601 	add.w	r6, r8, #1
 800b638:	42b3      	cmp	r3, r6
 800b63a:	db0b      	blt.n	800b654 <__lshift+0x38>
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7ff fddf 	bl	800b200 <_Balloc>
 800b642:	4605      	mov	r5, r0
 800b644:	b948      	cbnz	r0, 800b65a <__lshift+0x3e>
 800b646:	4602      	mov	r2, r0
 800b648:	4b28      	ldr	r3, [pc, #160]	@ (800b6ec <__lshift+0xd0>)
 800b64a:	4829      	ldr	r0, [pc, #164]	@ (800b6f0 <__lshift+0xd4>)
 800b64c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b650:	f000 fb94 	bl	800bd7c <__assert_func>
 800b654:	3101      	adds	r1, #1
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	e7ee      	b.n	800b638 <__lshift+0x1c>
 800b65a:	2300      	movs	r3, #0
 800b65c:	f100 0114 	add.w	r1, r0, #20
 800b660:	f100 0210 	add.w	r2, r0, #16
 800b664:	4618      	mov	r0, r3
 800b666:	4553      	cmp	r3, sl
 800b668:	db33      	blt.n	800b6d2 <__lshift+0xb6>
 800b66a:	6920      	ldr	r0, [r4, #16]
 800b66c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b670:	f104 0314 	add.w	r3, r4, #20
 800b674:	f019 091f 	ands.w	r9, r9, #31
 800b678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b67c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b680:	d02b      	beq.n	800b6da <__lshift+0xbe>
 800b682:	f1c9 0e20 	rsb	lr, r9, #32
 800b686:	468a      	mov	sl, r1
 800b688:	2200      	movs	r2, #0
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	fa00 f009 	lsl.w	r0, r0, r9
 800b690:	4310      	orrs	r0, r2
 800b692:	f84a 0b04 	str.w	r0, [sl], #4
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	459c      	cmp	ip, r3
 800b69c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6a0:	d8f3      	bhi.n	800b68a <__lshift+0x6e>
 800b6a2:	ebac 0304 	sub.w	r3, ip, r4
 800b6a6:	3b15      	subs	r3, #21
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	f104 0015 	add.w	r0, r4, #21
 800b6b2:	4584      	cmp	ip, r0
 800b6b4:	bf38      	it	cc
 800b6b6:	2304      	movcc	r3, #4
 800b6b8:	50ca      	str	r2, [r1, r3]
 800b6ba:	b10a      	cbz	r2, 800b6c0 <__lshift+0xa4>
 800b6bc:	f108 0602 	add.w	r6, r8, #2
 800b6c0:	3e01      	subs	r6, #1
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	612e      	str	r6, [r5, #16]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f7ff fdda 	bl	800b280 <_Bfree>
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	e7c5      	b.n	800b666 <__lshift+0x4a>
 800b6da:	3904      	subs	r1, #4
 800b6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e4:	459c      	cmp	ip, r3
 800b6e6:	d8f9      	bhi.n	800b6dc <__lshift+0xc0>
 800b6e8:	e7ea      	b.n	800b6c0 <__lshift+0xa4>
 800b6ea:	bf00      	nop
 800b6ec:	0800e4b0 	.word	0x0800e4b0
 800b6f0:	0800e4c1 	.word	0x0800e4c1

0800b6f4 <__mcmp>:
 800b6f4:	690a      	ldr	r2, [r1, #16]
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	6900      	ldr	r0, [r0, #16]
 800b6fa:	1a80      	subs	r0, r0, r2
 800b6fc:	b530      	push	{r4, r5, lr}
 800b6fe:	d10e      	bne.n	800b71e <__mcmp+0x2a>
 800b700:	3314      	adds	r3, #20
 800b702:	3114      	adds	r1, #20
 800b704:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b708:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b70c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b710:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b714:	4295      	cmp	r5, r2
 800b716:	d003      	beq.n	800b720 <__mcmp+0x2c>
 800b718:	d205      	bcs.n	800b726 <__mcmp+0x32>
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	bd30      	pop	{r4, r5, pc}
 800b720:	42a3      	cmp	r3, r4
 800b722:	d3f3      	bcc.n	800b70c <__mcmp+0x18>
 800b724:	e7fb      	b.n	800b71e <__mcmp+0x2a>
 800b726:	2001      	movs	r0, #1
 800b728:	e7f9      	b.n	800b71e <__mcmp+0x2a>
	...

0800b72c <__mdiff>:
 800b72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	4689      	mov	r9, r1
 800b732:	4606      	mov	r6, r0
 800b734:	4611      	mov	r1, r2
 800b736:	4648      	mov	r0, r9
 800b738:	4614      	mov	r4, r2
 800b73a:	f7ff ffdb 	bl	800b6f4 <__mcmp>
 800b73e:	1e05      	subs	r5, r0, #0
 800b740:	d112      	bne.n	800b768 <__mdiff+0x3c>
 800b742:	4629      	mov	r1, r5
 800b744:	4630      	mov	r0, r6
 800b746:	f7ff fd5b 	bl	800b200 <_Balloc>
 800b74a:	4602      	mov	r2, r0
 800b74c:	b928      	cbnz	r0, 800b75a <__mdiff+0x2e>
 800b74e:	4b3f      	ldr	r3, [pc, #252]	@ (800b84c <__mdiff+0x120>)
 800b750:	f240 2137 	movw	r1, #567	@ 0x237
 800b754:	483e      	ldr	r0, [pc, #248]	@ (800b850 <__mdiff+0x124>)
 800b756:	f000 fb11 	bl	800bd7c <__assert_func>
 800b75a:	2301      	movs	r3, #1
 800b75c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b760:	4610      	mov	r0, r2
 800b762:	b003      	add	sp, #12
 800b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b768:	bfbc      	itt	lt
 800b76a:	464b      	movlt	r3, r9
 800b76c:	46a1      	movlt	r9, r4
 800b76e:	4630      	mov	r0, r6
 800b770:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b774:	bfba      	itte	lt
 800b776:	461c      	movlt	r4, r3
 800b778:	2501      	movlt	r5, #1
 800b77a:	2500      	movge	r5, #0
 800b77c:	f7ff fd40 	bl	800b200 <_Balloc>
 800b780:	4602      	mov	r2, r0
 800b782:	b918      	cbnz	r0, 800b78c <__mdiff+0x60>
 800b784:	4b31      	ldr	r3, [pc, #196]	@ (800b84c <__mdiff+0x120>)
 800b786:	f240 2145 	movw	r1, #581	@ 0x245
 800b78a:	e7e3      	b.n	800b754 <__mdiff+0x28>
 800b78c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b790:	6926      	ldr	r6, [r4, #16]
 800b792:	60c5      	str	r5, [r0, #12]
 800b794:	f109 0310 	add.w	r3, r9, #16
 800b798:	f109 0514 	add.w	r5, r9, #20
 800b79c:	f104 0e14 	add.w	lr, r4, #20
 800b7a0:	f100 0b14 	add.w	fp, r0, #20
 800b7a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	46d9      	mov	r9, fp
 800b7b0:	f04f 0c00 	mov.w	ip, #0
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b7ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	fa1f f38a 	uxth.w	r3, sl
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	b283      	uxth	r3, r0
 800b7c8:	1acb      	subs	r3, r1, r3
 800b7ca:	0c00      	lsrs	r0, r0, #16
 800b7cc:	4463      	add	r3, ip
 800b7ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b7d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b7dc:	4576      	cmp	r6, lr
 800b7de:	f849 3b04 	str.w	r3, [r9], #4
 800b7e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7e6:	d8e5      	bhi.n	800b7b4 <__mdiff+0x88>
 800b7e8:	1b33      	subs	r3, r6, r4
 800b7ea:	3b15      	subs	r3, #21
 800b7ec:	f023 0303 	bic.w	r3, r3, #3
 800b7f0:	3415      	adds	r4, #21
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	42a6      	cmp	r6, r4
 800b7f6:	bf38      	it	cc
 800b7f8:	2304      	movcc	r3, #4
 800b7fa:	441d      	add	r5, r3
 800b7fc:	445b      	add	r3, fp
 800b7fe:	461e      	mov	r6, r3
 800b800:	462c      	mov	r4, r5
 800b802:	4544      	cmp	r4, r8
 800b804:	d30e      	bcc.n	800b824 <__mdiff+0xf8>
 800b806:	f108 0103 	add.w	r1, r8, #3
 800b80a:	1b49      	subs	r1, r1, r5
 800b80c:	f021 0103 	bic.w	r1, r1, #3
 800b810:	3d03      	subs	r5, #3
 800b812:	45a8      	cmp	r8, r5
 800b814:	bf38      	it	cc
 800b816:	2100      	movcc	r1, #0
 800b818:	440b      	add	r3, r1
 800b81a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b81e:	b191      	cbz	r1, 800b846 <__mdiff+0x11a>
 800b820:	6117      	str	r7, [r2, #16]
 800b822:	e79d      	b.n	800b760 <__mdiff+0x34>
 800b824:	f854 1b04 	ldr.w	r1, [r4], #4
 800b828:	46e6      	mov	lr, ip
 800b82a:	0c08      	lsrs	r0, r1, #16
 800b82c:	fa1c fc81 	uxtah	ip, ip, r1
 800b830:	4471      	add	r1, lr
 800b832:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b836:	b289      	uxth	r1, r1
 800b838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b83c:	f846 1b04 	str.w	r1, [r6], #4
 800b840:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b844:	e7dd      	b.n	800b802 <__mdiff+0xd6>
 800b846:	3f01      	subs	r7, #1
 800b848:	e7e7      	b.n	800b81a <__mdiff+0xee>
 800b84a:	bf00      	nop
 800b84c:	0800e4b0 	.word	0x0800e4b0
 800b850:	0800e4c1 	.word	0x0800e4c1

0800b854 <__d2b>:
 800b854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b858:	460f      	mov	r7, r1
 800b85a:	2101      	movs	r1, #1
 800b85c:	ec59 8b10 	vmov	r8, r9, d0
 800b860:	4616      	mov	r6, r2
 800b862:	f7ff fccd 	bl	800b200 <_Balloc>
 800b866:	4604      	mov	r4, r0
 800b868:	b930      	cbnz	r0, 800b878 <__d2b+0x24>
 800b86a:	4602      	mov	r2, r0
 800b86c:	4b23      	ldr	r3, [pc, #140]	@ (800b8fc <__d2b+0xa8>)
 800b86e:	4824      	ldr	r0, [pc, #144]	@ (800b900 <__d2b+0xac>)
 800b870:	f240 310f 	movw	r1, #783	@ 0x30f
 800b874:	f000 fa82 	bl	800bd7c <__assert_func>
 800b878:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b87c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b880:	b10d      	cbz	r5, 800b886 <__d2b+0x32>
 800b882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	f1b8 0300 	subs.w	r3, r8, #0
 800b88c:	d023      	beq.n	800b8d6 <__d2b+0x82>
 800b88e:	4668      	mov	r0, sp
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	f7ff fd7c 	bl	800b38e <__lo0bits>
 800b896:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b89a:	b1d0      	cbz	r0, 800b8d2 <__d2b+0x7e>
 800b89c:	f1c0 0320 	rsb	r3, r0, #32
 800b8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a4:	430b      	orrs	r3, r1
 800b8a6:	40c2      	lsrs	r2, r0
 800b8a8:	6163      	str	r3, [r4, #20]
 800b8aa:	9201      	str	r2, [sp, #4]
 800b8ac:	9b01      	ldr	r3, [sp, #4]
 800b8ae:	61a3      	str	r3, [r4, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	bf0c      	ite	eq
 800b8b4:	2201      	moveq	r2, #1
 800b8b6:	2202      	movne	r2, #2
 800b8b8:	6122      	str	r2, [r4, #16]
 800b8ba:	b1a5      	cbz	r5, 800b8e6 <__d2b+0x92>
 800b8bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b8c0:	4405      	add	r5, r0
 800b8c2:	603d      	str	r5, [r7, #0]
 800b8c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b8c8:	6030      	str	r0, [r6, #0]
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	b003      	add	sp, #12
 800b8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8d2:	6161      	str	r1, [r4, #20]
 800b8d4:	e7ea      	b.n	800b8ac <__d2b+0x58>
 800b8d6:	a801      	add	r0, sp, #4
 800b8d8:	f7ff fd59 	bl	800b38e <__lo0bits>
 800b8dc:	9b01      	ldr	r3, [sp, #4]
 800b8de:	6163      	str	r3, [r4, #20]
 800b8e0:	3020      	adds	r0, #32
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	e7e8      	b.n	800b8b8 <__d2b+0x64>
 800b8e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b8ee:	6038      	str	r0, [r7, #0]
 800b8f0:	6918      	ldr	r0, [r3, #16]
 800b8f2:	f7ff fd2d 	bl	800b350 <__hi0bits>
 800b8f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8fa:	e7e5      	b.n	800b8c8 <__d2b+0x74>
 800b8fc:	0800e4b0 	.word	0x0800e4b0
 800b900:	0800e4c1 	.word	0x0800e4c1

0800b904 <__ssputs_r>:
 800b904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b908:	688e      	ldr	r6, [r1, #8]
 800b90a:	461f      	mov	r7, r3
 800b90c:	42be      	cmp	r6, r7
 800b90e:	680b      	ldr	r3, [r1, #0]
 800b910:	4682      	mov	sl, r0
 800b912:	460c      	mov	r4, r1
 800b914:	4690      	mov	r8, r2
 800b916:	d82d      	bhi.n	800b974 <__ssputs_r+0x70>
 800b918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b91c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b920:	d026      	beq.n	800b970 <__ssputs_r+0x6c>
 800b922:	6965      	ldr	r5, [r4, #20]
 800b924:	6909      	ldr	r1, [r1, #16]
 800b926:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b92a:	eba3 0901 	sub.w	r9, r3, r1
 800b92e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b932:	1c7b      	adds	r3, r7, #1
 800b934:	444b      	add	r3, r9
 800b936:	106d      	asrs	r5, r5, #1
 800b938:	429d      	cmp	r5, r3
 800b93a:	bf38      	it	cc
 800b93c:	461d      	movcc	r5, r3
 800b93e:	0553      	lsls	r3, r2, #21
 800b940:	d527      	bpl.n	800b992 <__ssputs_r+0x8e>
 800b942:	4629      	mov	r1, r5
 800b944:	f7ff fbd0 	bl	800b0e8 <_malloc_r>
 800b948:	4606      	mov	r6, r0
 800b94a:	b360      	cbz	r0, 800b9a6 <__ssputs_r+0xa2>
 800b94c:	6921      	ldr	r1, [r4, #16]
 800b94e:	464a      	mov	r2, r9
 800b950:	f000 fa06 	bl	800bd60 <memcpy>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	6126      	str	r6, [r4, #16]
 800b962:	6165      	str	r5, [r4, #20]
 800b964:	444e      	add	r6, r9
 800b966:	eba5 0509 	sub.w	r5, r5, r9
 800b96a:	6026      	str	r6, [r4, #0]
 800b96c:	60a5      	str	r5, [r4, #8]
 800b96e:	463e      	mov	r6, r7
 800b970:	42be      	cmp	r6, r7
 800b972:	d900      	bls.n	800b976 <__ssputs_r+0x72>
 800b974:	463e      	mov	r6, r7
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	4632      	mov	r2, r6
 800b97a:	4641      	mov	r1, r8
 800b97c:	f000 f9c6 	bl	800bd0c <memmove>
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	1b9b      	subs	r3, r3, r6
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	4433      	add	r3, r6
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	2000      	movs	r0, #0
 800b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b992:	462a      	mov	r2, r5
 800b994:	f000 fa36 	bl	800be04 <_realloc_r>
 800b998:	4606      	mov	r6, r0
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d1e0      	bne.n	800b960 <__ssputs_r+0x5c>
 800b99e:	6921      	ldr	r1, [r4, #16]
 800b9a0:	4650      	mov	r0, sl
 800b9a2:	f7ff fb2d 	bl	800b000 <_free_r>
 800b9a6:	230c      	movs	r3, #12
 800b9a8:	f8ca 3000 	str.w	r3, [sl]
 800b9ac:	89a3      	ldrh	r3, [r4, #12]
 800b9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b8:	e7e9      	b.n	800b98e <__ssputs_r+0x8a>
	...

0800b9bc <_svfiprintf_r>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	4698      	mov	r8, r3
 800b9c2:	898b      	ldrh	r3, [r1, #12]
 800b9c4:	061b      	lsls	r3, r3, #24
 800b9c6:	b09d      	sub	sp, #116	@ 0x74
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	d510      	bpl.n	800b9f2 <_svfiprintf_r+0x36>
 800b9d0:	690b      	ldr	r3, [r1, #16]
 800b9d2:	b973      	cbnz	r3, 800b9f2 <_svfiprintf_r+0x36>
 800b9d4:	2140      	movs	r1, #64	@ 0x40
 800b9d6:	f7ff fb87 	bl	800b0e8 <_malloc_r>
 800b9da:	6028      	str	r0, [r5, #0]
 800b9dc:	6128      	str	r0, [r5, #16]
 800b9de:	b930      	cbnz	r0, 800b9ee <_svfiprintf_r+0x32>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e8:	b01d      	add	sp, #116	@ 0x74
 800b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ee:	2340      	movs	r3, #64	@ 0x40
 800b9f0:	616b      	str	r3, [r5, #20]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba00:	2330      	movs	r3, #48	@ 0x30
 800ba02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bba0 <_svfiprintf_r+0x1e4>
 800ba06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba0a:	f04f 0901 	mov.w	r9, #1
 800ba0e:	4623      	mov	r3, r4
 800ba10:	469a      	mov	sl, r3
 800ba12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba16:	b10a      	cbz	r2, 800ba1c <_svfiprintf_r+0x60>
 800ba18:	2a25      	cmp	r2, #37	@ 0x25
 800ba1a:	d1f9      	bne.n	800ba10 <_svfiprintf_r+0x54>
 800ba1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba20:	d00b      	beq.n	800ba3a <_svfiprintf_r+0x7e>
 800ba22:	465b      	mov	r3, fp
 800ba24:	4622      	mov	r2, r4
 800ba26:	4629      	mov	r1, r5
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7ff ff6b 	bl	800b904 <__ssputs_r>
 800ba2e:	3001      	adds	r0, #1
 800ba30:	f000 80a7 	beq.w	800bb82 <_svfiprintf_r+0x1c6>
 800ba34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba36:	445a      	add	r2, fp
 800ba38:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 809f 	beq.w	800bb82 <_svfiprintf_r+0x1c6>
 800ba44:	2300      	movs	r3, #0
 800ba46:	f04f 32ff 	mov.w	r2, #4294967295
 800ba4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba4e:	f10a 0a01 	add.w	sl, sl, #1
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	9307      	str	r3, [sp, #28]
 800ba56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba5c:	4654      	mov	r4, sl
 800ba5e:	2205      	movs	r2, #5
 800ba60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba64:	484e      	ldr	r0, [pc, #312]	@ (800bba0 <_svfiprintf_r+0x1e4>)
 800ba66:	f7f4 fbd3 	bl	8000210 <memchr>
 800ba6a:	9a04      	ldr	r2, [sp, #16]
 800ba6c:	b9d8      	cbnz	r0, 800baa6 <_svfiprintf_r+0xea>
 800ba6e:	06d0      	lsls	r0, r2, #27
 800ba70:	bf44      	itt	mi
 800ba72:	2320      	movmi	r3, #32
 800ba74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba78:	0711      	lsls	r1, r2, #28
 800ba7a:	bf44      	itt	mi
 800ba7c:	232b      	movmi	r3, #43	@ 0x2b
 800ba7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba82:	f89a 3000 	ldrb.w	r3, [sl]
 800ba86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba88:	d015      	beq.n	800bab6 <_svfiprintf_r+0xfa>
 800ba8a:	9a07      	ldr	r2, [sp, #28]
 800ba8c:	4654      	mov	r4, sl
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f04f 0c0a 	mov.w	ip, #10
 800ba94:	4621      	mov	r1, r4
 800ba96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba9a:	3b30      	subs	r3, #48	@ 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d94b      	bls.n	800bb38 <_svfiprintf_r+0x17c>
 800baa0:	b1b0      	cbz	r0, 800bad0 <_svfiprintf_r+0x114>
 800baa2:	9207      	str	r2, [sp, #28]
 800baa4:	e014      	b.n	800bad0 <_svfiprintf_r+0x114>
 800baa6:	eba0 0308 	sub.w	r3, r0, r8
 800baaa:	fa09 f303 	lsl.w	r3, r9, r3
 800baae:	4313      	orrs	r3, r2
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	46a2      	mov	sl, r4
 800bab4:	e7d2      	b.n	800ba5c <_svfiprintf_r+0xa0>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	1d19      	adds	r1, r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	9103      	str	r1, [sp, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfbb      	ittet	lt
 800bac2:	425b      	neglt	r3, r3
 800bac4:	f042 0202 	orrlt.w	r2, r2, #2
 800bac8:	9307      	strge	r3, [sp, #28]
 800baca:	9307      	strlt	r3, [sp, #28]
 800bacc:	bfb8      	it	lt
 800bace:	9204      	strlt	r2, [sp, #16]
 800bad0:	7823      	ldrb	r3, [r4, #0]
 800bad2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bad4:	d10a      	bne.n	800baec <_svfiprintf_r+0x130>
 800bad6:	7863      	ldrb	r3, [r4, #1]
 800bad8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bada:	d132      	bne.n	800bb42 <_svfiprintf_r+0x186>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	9203      	str	r2, [sp, #12]
 800bae4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bae8:	3402      	adds	r4, #2
 800baea:	9305      	str	r3, [sp, #20]
 800baec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bbb0 <_svfiprintf_r+0x1f4>
 800baf0:	7821      	ldrb	r1, [r4, #0]
 800baf2:	2203      	movs	r2, #3
 800baf4:	4650      	mov	r0, sl
 800baf6:	f7f4 fb8b 	bl	8000210 <memchr>
 800bafa:	b138      	cbz	r0, 800bb0c <_svfiprintf_r+0x150>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	eba0 000a 	sub.w	r0, r0, sl
 800bb02:	2240      	movs	r2, #64	@ 0x40
 800bb04:	4082      	lsls	r2, r0
 800bb06:	4313      	orrs	r3, r2
 800bb08:	3401      	adds	r4, #1
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb10:	4824      	ldr	r0, [pc, #144]	@ (800bba4 <_svfiprintf_r+0x1e8>)
 800bb12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb16:	2206      	movs	r2, #6
 800bb18:	f7f4 fb7a 	bl	8000210 <memchr>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d036      	beq.n	800bb8e <_svfiprintf_r+0x1d2>
 800bb20:	4b21      	ldr	r3, [pc, #132]	@ (800bba8 <_svfiprintf_r+0x1ec>)
 800bb22:	bb1b      	cbnz	r3, 800bb6c <_svfiprintf_r+0x1b0>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	3307      	adds	r3, #7
 800bb28:	f023 0307 	bic.w	r3, r3, #7
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	9303      	str	r3, [sp, #12]
 800bb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb32:	4433      	add	r3, r6
 800bb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb36:	e76a      	b.n	800ba0e <_svfiprintf_r+0x52>
 800bb38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	2001      	movs	r0, #1
 800bb40:	e7a8      	b.n	800ba94 <_svfiprintf_r+0xd8>
 800bb42:	2300      	movs	r3, #0
 800bb44:	3401      	adds	r4, #1
 800bb46:	9305      	str	r3, [sp, #20]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	f04f 0c0a 	mov.w	ip, #10
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb54:	3a30      	subs	r2, #48	@ 0x30
 800bb56:	2a09      	cmp	r2, #9
 800bb58:	d903      	bls.n	800bb62 <_svfiprintf_r+0x1a6>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0c6      	beq.n	800baec <_svfiprintf_r+0x130>
 800bb5e:	9105      	str	r1, [sp, #20]
 800bb60:	e7c4      	b.n	800baec <_svfiprintf_r+0x130>
 800bb62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb66:	4604      	mov	r4, r0
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7f0      	b.n	800bb4e <_svfiprintf_r+0x192>
 800bb6c:	ab03      	add	r3, sp, #12
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	462a      	mov	r2, r5
 800bb72:	4b0e      	ldr	r3, [pc, #56]	@ (800bbac <_svfiprintf_r+0x1f0>)
 800bb74:	a904      	add	r1, sp, #16
 800bb76:	4638      	mov	r0, r7
 800bb78:	f7fd fe96 	bl	80098a8 <_printf_float>
 800bb7c:	1c42      	adds	r2, r0, #1
 800bb7e:	4606      	mov	r6, r0
 800bb80:	d1d6      	bne.n	800bb30 <_svfiprintf_r+0x174>
 800bb82:	89ab      	ldrh	r3, [r5, #12]
 800bb84:	065b      	lsls	r3, r3, #25
 800bb86:	f53f af2d 	bmi.w	800b9e4 <_svfiprintf_r+0x28>
 800bb8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb8c:	e72c      	b.n	800b9e8 <_svfiprintf_r+0x2c>
 800bb8e:	ab03      	add	r3, sp, #12
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	462a      	mov	r2, r5
 800bb94:	4b05      	ldr	r3, [pc, #20]	@ (800bbac <_svfiprintf_r+0x1f0>)
 800bb96:	a904      	add	r1, sp, #16
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7fe f91d 	bl	8009dd8 <_printf_i>
 800bb9e:	e7ed      	b.n	800bb7c <_svfiprintf_r+0x1c0>
 800bba0:	0800e618 	.word	0x0800e618
 800bba4:	0800e622 	.word	0x0800e622
 800bba8:	080098a9 	.word	0x080098a9
 800bbac:	0800b905 	.word	0x0800b905
 800bbb0:	0800e61e 	.word	0x0800e61e

0800bbb4 <__sflush_r>:
 800bbb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	0716      	lsls	r6, r2, #28
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	d454      	bmi.n	800bc6e <__sflush_r+0xba>
 800bbc4:	684b      	ldr	r3, [r1, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	dc02      	bgt.n	800bbd0 <__sflush_r+0x1c>
 800bbca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	dd48      	ble.n	800bc62 <__sflush_r+0xae>
 800bbd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	d045      	beq.n	800bc62 <__sflush_r+0xae>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bbdc:	682f      	ldr	r7, [r5, #0]
 800bbde:	6a21      	ldr	r1, [r4, #32]
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	d030      	beq.n	800bc46 <__sflush_r+0x92>
 800bbe4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	0759      	lsls	r1, r3, #29
 800bbea:	d505      	bpl.n	800bbf8 <__sflush_r+0x44>
 800bbec:	6863      	ldr	r3, [r4, #4]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbf2:	b10b      	cbz	r3, 800bbf8 <__sflush_r+0x44>
 800bbf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbf6:	1ad2      	subs	r2, r2, r3
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbfc:	6a21      	ldr	r1, [r4, #32]
 800bbfe:	4628      	mov	r0, r5
 800bc00:	47b0      	blx	r6
 800bc02:	1c43      	adds	r3, r0, #1
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	d106      	bne.n	800bc16 <__sflush_r+0x62>
 800bc08:	6829      	ldr	r1, [r5, #0]
 800bc0a:	291d      	cmp	r1, #29
 800bc0c:	d82b      	bhi.n	800bc66 <__sflush_r+0xb2>
 800bc0e:	4a2a      	ldr	r2, [pc, #168]	@ (800bcb8 <__sflush_r+0x104>)
 800bc10:	410a      	asrs	r2, r1
 800bc12:	07d6      	lsls	r6, r2, #31
 800bc14:	d427      	bmi.n	800bc66 <__sflush_r+0xb2>
 800bc16:	2200      	movs	r2, #0
 800bc18:	6062      	str	r2, [r4, #4]
 800bc1a:	04d9      	lsls	r1, r3, #19
 800bc1c:	6922      	ldr	r2, [r4, #16]
 800bc1e:	6022      	str	r2, [r4, #0]
 800bc20:	d504      	bpl.n	800bc2c <__sflush_r+0x78>
 800bc22:	1c42      	adds	r2, r0, #1
 800bc24:	d101      	bne.n	800bc2a <__sflush_r+0x76>
 800bc26:	682b      	ldr	r3, [r5, #0]
 800bc28:	b903      	cbnz	r3, 800bc2c <__sflush_r+0x78>
 800bc2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc2e:	602f      	str	r7, [r5, #0]
 800bc30:	b1b9      	cbz	r1, 800bc62 <__sflush_r+0xae>
 800bc32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc36:	4299      	cmp	r1, r3
 800bc38:	d002      	beq.n	800bc40 <__sflush_r+0x8c>
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f7ff f9e0 	bl	800b000 <_free_r>
 800bc40:	2300      	movs	r3, #0
 800bc42:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc44:	e00d      	b.n	800bc62 <__sflush_r+0xae>
 800bc46:	2301      	movs	r3, #1
 800bc48:	4628      	mov	r0, r5
 800bc4a:	47b0      	blx	r6
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	1c50      	adds	r0, r2, #1
 800bc50:	d1c9      	bne.n	800bbe6 <__sflush_r+0x32>
 800bc52:	682b      	ldr	r3, [r5, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0c6      	beq.n	800bbe6 <__sflush_r+0x32>
 800bc58:	2b1d      	cmp	r3, #29
 800bc5a:	d001      	beq.n	800bc60 <__sflush_r+0xac>
 800bc5c:	2b16      	cmp	r3, #22
 800bc5e:	d11e      	bne.n	800bc9e <__sflush_r+0xea>
 800bc60:	602f      	str	r7, [r5, #0]
 800bc62:	2000      	movs	r0, #0
 800bc64:	e022      	b.n	800bcac <__sflush_r+0xf8>
 800bc66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc6a:	b21b      	sxth	r3, r3
 800bc6c:	e01b      	b.n	800bca6 <__sflush_r+0xf2>
 800bc6e:	690f      	ldr	r7, [r1, #16]
 800bc70:	2f00      	cmp	r7, #0
 800bc72:	d0f6      	beq.n	800bc62 <__sflush_r+0xae>
 800bc74:	0793      	lsls	r3, r2, #30
 800bc76:	680e      	ldr	r6, [r1, #0]
 800bc78:	bf08      	it	eq
 800bc7a:	694b      	ldreq	r3, [r1, #20]
 800bc7c:	600f      	str	r7, [r1, #0]
 800bc7e:	bf18      	it	ne
 800bc80:	2300      	movne	r3, #0
 800bc82:	eba6 0807 	sub.w	r8, r6, r7
 800bc86:	608b      	str	r3, [r1, #8]
 800bc88:	f1b8 0f00 	cmp.w	r8, #0
 800bc8c:	dde9      	ble.n	800bc62 <__sflush_r+0xae>
 800bc8e:	6a21      	ldr	r1, [r4, #32]
 800bc90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc92:	4643      	mov	r3, r8
 800bc94:	463a      	mov	r2, r7
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b0      	blx	r6
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	dc08      	bgt.n	800bcb0 <__sflush_r+0xfc>
 800bc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bca6:	81a3      	strh	r3, [r4, #12]
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb0:	4407      	add	r7, r0
 800bcb2:	eba8 0800 	sub.w	r8, r8, r0
 800bcb6:	e7e7      	b.n	800bc88 <__sflush_r+0xd4>
 800bcb8:	dfbffffe 	.word	0xdfbffffe

0800bcbc <_fflush_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	690b      	ldr	r3, [r1, #16]
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	b913      	cbnz	r3, 800bccc <_fflush_r+0x10>
 800bcc6:	2500      	movs	r5, #0
 800bcc8:	4628      	mov	r0, r5
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	b118      	cbz	r0, 800bcd6 <_fflush_r+0x1a>
 800bcce:	6a03      	ldr	r3, [r0, #32]
 800bcd0:	b90b      	cbnz	r3, 800bcd6 <_fflush_r+0x1a>
 800bcd2:	f7fe fa2d 	bl	800a130 <__sinit>
 800bcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0f3      	beq.n	800bcc6 <_fflush_r+0xa>
 800bcde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bce0:	07d0      	lsls	r0, r2, #31
 800bce2:	d404      	bmi.n	800bcee <_fflush_r+0x32>
 800bce4:	0599      	lsls	r1, r3, #22
 800bce6:	d402      	bmi.n	800bcee <_fflush_r+0x32>
 800bce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcea:	f7fe fb38 	bl	800a35e <__retarget_lock_acquire_recursive>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	f7ff ff5f 	bl	800bbb4 <__sflush_r>
 800bcf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcf8:	07da      	lsls	r2, r3, #31
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	d4e4      	bmi.n	800bcc8 <_fflush_r+0xc>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	059b      	lsls	r3, r3, #22
 800bd02:	d4e1      	bmi.n	800bcc8 <_fflush_r+0xc>
 800bd04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd06:	f7fe fb2b 	bl	800a360 <__retarget_lock_release_recursive>
 800bd0a:	e7dd      	b.n	800bcc8 <_fflush_r+0xc>

0800bd0c <memmove>:
 800bd0c:	4288      	cmp	r0, r1
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	eb01 0402 	add.w	r4, r1, r2
 800bd14:	d902      	bls.n	800bd1c <memmove+0x10>
 800bd16:	4284      	cmp	r4, r0
 800bd18:	4623      	mov	r3, r4
 800bd1a:	d807      	bhi.n	800bd2c <memmove+0x20>
 800bd1c:	1e43      	subs	r3, r0, #1
 800bd1e:	42a1      	cmp	r1, r4
 800bd20:	d008      	beq.n	800bd34 <memmove+0x28>
 800bd22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd2a:	e7f8      	b.n	800bd1e <memmove+0x12>
 800bd2c:	4402      	add	r2, r0
 800bd2e:	4601      	mov	r1, r0
 800bd30:	428a      	cmp	r2, r1
 800bd32:	d100      	bne.n	800bd36 <memmove+0x2a>
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd3e:	e7f7      	b.n	800bd30 <memmove+0x24>

0800bd40 <_sbrk_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d06      	ldr	r5, [pc, #24]	@ (800bd5c <_sbrk_r+0x1c>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	602b      	str	r3, [r5, #0]
 800bd4c:	f7f7 fc3e 	bl	80035cc <_sbrk>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_sbrk_r+0x1a>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_sbrk_r+0x1a>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20000b9c 	.word	0x20000b9c

0800bd60 <memcpy>:
 800bd60:	440a      	add	r2, r1
 800bd62:	4291      	cmp	r1, r2
 800bd64:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd68:	d100      	bne.n	800bd6c <memcpy+0xc>
 800bd6a:	4770      	bx	lr
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd76:	4291      	cmp	r1, r2
 800bd78:	d1f9      	bne.n	800bd6e <memcpy+0xe>
 800bd7a:	bd10      	pop	{r4, pc}

0800bd7c <__assert_func>:
 800bd7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd7e:	4614      	mov	r4, r2
 800bd80:	461a      	mov	r2, r3
 800bd82:	4b09      	ldr	r3, [pc, #36]	@ (800bda8 <__assert_func+0x2c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4605      	mov	r5, r0
 800bd88:	68d8      	ldr	r0, [r3, #12]
 800bd8a:	b954      	cbnz	r4, 800bda2 <__assert_func+0x26>
 800bd8c:	4b07      	ldr	r3, [pc, #28]	@ (800bdac <__assert_func+0x30>)
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd94:	9100      	str	r1, [sp, #0]
 800bd96:	462b      	mov	r3, r5
 800bd98:	4905      	ldr	r1, [pc, #20]	@ (800bdb0 <__assert_func+0x34>)
 800bd9a:	f000 f86f 	bl	800be7c <fiprintf>
 800bd9e:	f000 f87f 	bl	800bea0 <abort>
 800bda2:	4b04      	ldr	r3, [pc, #16]	@ (800bdb4 <__assert_func+0x38>)
 800bda4:	e7f4      	b.n	800bd90 <__assert_func+0x14>
 800bda6:	bf00      	nop
 800bda8:	200000b8 	.word	0x200000b8
 800bdac:	0800e66e 	.word	0x0800e66e
 800bdb0:	0800e640 	.word	0x0800e640
 800bdb4:	0800e633 	.word	0x0800e633

0800bdb8 <_calloc_r>:
 800bdb8:	b570      	push	{r4, r5, r6, lr}
 800bdba:	fba1 5402 	umull	r5, r4, r1, r2
 800bdbe:	b93c      	cbnz	r4, 800bdd0 <_calloc_r+0x18>
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7ff f991 	bl	800b0e8 <_malloc_r>
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	b928      	cbnz	r0, 800bdd6 <_calloc_r+0x1e>
 800bdca:	2600      	movs	r6, #0
 800bdcc:	4630      	mov	r0, r6
 800bdce:	bd70      	pop	{r4, r5, r6, pc}
 800bdd0:	220c      	movs	r2, #12
 800bdd2:	6002      	str	r2, [r0, #0]
 800bdd4:	e7f9      	b.n	800bdca <_calloc_r+0x12>
 800bdd6:	462a      	mov	r2, r5
 800bdd8:	4621      	mov	r1, r4
 800bdda:	f7fe fa42 	bl	800a262 <memset>
 800bdde:	e7f5      	b.n	800bdcc <_calloc_r+0x14>

0800bde0 <__ascii_mbtowc>:
 800bde0:	b082      	sub	sp, #8
 800bde2:	b901      	cbnz	r1, 800bde6 <__ascii_mbtowc+0x6>
 800bde4:	a901      	add	r1, sp, #4
 800bde6:	b142      	cbz	r2, 800bdfa <__ascii_mbtowc+0x1a>
 800bde8:	b14b      	cbz	r3, 800bdfe <__ascii_mbtowc+0x1e>
 800bdea:	7813      	ldrb	r3, [r2, #0]
 800bdec:	600b      	str	r3, [r1, #0]
 800bdee:	7812      	ldrb	r2, [r2, #0]
 800bdf0:	1e10      	subs	r0, r2, #0
 800bdf2:	bf18      	it	ne
 800bdf4:	2001      	movne	r0, #1
 800bdf6:	b002      	add	sp, #8
 800bdf8:	4770      	bx	lr
 800bdfa:	4610      	mov	r0, r2
 800bdfc:	e7fb      	b.n	800bdf6 <__ascii_mbtowc+0x16>
 800bdfe:	f06f 0001 	mvn.w	r0, #1
 800be02:	e7f8      	b.n	800bdf6 <__ascii_mbtowc+0x16>

0800be04 <_realloc_r>:
 800be04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be08:	4680      	mov	r8, r0
 800be0a:	4615      	mov	r5, r2
 800be0c:	460c      	mov	r4, r1
 800be0e:	b921      	cbnz	r1, 800be1a <_realloc_r+0x16>
 800be10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be14:	4611      	mov	r1, r2
 800be16:	f7ff b967 	b.w	800b0e8 <_malloc_r>
 800be1a:	b92a      	cbnz	r2, 800be28 <_realloc_r+0x24>
 800be1c:	f7ff f8f0 	bl	800b000 <_free_r>
 800be20:	2400      	movs	r4, #0
 800be22:	4620      	mov	r0, r4
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	f000 f841 	bl	800beae <_malloc_usable_size_r>
 800be2c:	4285      	cmp	r5, r0
 800be2e:	4606      	mov	r6, r0
 800be30:	d802      	bhi.n	800be38 <_realloc_r+0x34>
 800be32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800be36:	d8f4      	bhi.n	800be22 <_realloc_r+0x1e>
 800be38:	4629      	mov	r1, r5
 800be3a:	4640      	mov	r0, r8
 800be3c:	f7ff f954 	bl	800b0e8 <_malloc_r>
 800be40:	4607      	mov	r7, r0
 800be42:	2800      	cmp	r0, #0
 800be44:	d0ec      	beq.n	800be20 <_realloc_r+0x1c>
 800be46:	42b5      	cmp	r5, r6
 800be48:	462a      	mov	r2, r5
 800be4a:	4621      	mov	r1, r4
 800be4c:	bf28      	it	cs
 800be4e:	4632      	movcs	r2, r6
 800be50:	f7ff ff86 	bl	800bd60 <memcpy>
 800be54:	4621      	mov	r1, r4
 800be56:	4640      	mov	r0, r8
 800be58:	f7ff f8d2 	bl	800b000 <_free_r>
 800be5c:	463c      	mov	r4, r7
 800be5e:	e7e0      	b.n	800be22 <_realloc_r+0x1e>

0800be60 <__ascii_wctomb>:
 800be60:	4603      	mov	r3, r0
 800be62:	4608      	mov	r0, r1
 800be64:	b141      	cbz	r1, 800be78 <__ascii_wctomb+0x18>
 800be66:	2aff      	cmp	r2, #255	@ 0xff
 800be68:	d904      	bls.n	800be74 <__ascii_wctomb+0x14>
 800be6a:	228a      	movs	r2, #138	@ 0x8a
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	4770      	bx	lr
 800be74:	700a      	strb	r2, [r1, #0]
 800be76:	2001      	movs	r0, #1
 800be78:	4770      	bx	lr
	...

0800be7c <fiprintf>:
 800be7c:	b40e      	push	{r1, r2, r3}
 800be7e:	b503      	push	{r0, r1, lr}
 800be80:	4601      	mov	r1, r0
 800be82:	ab03      	add	r3, sp, #12
 800be84:	4805      	ldr	r0, [pc, #20]	@ (800be9c <fiprintf+0x20>)
 800be86:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	f000 f83f 	bl	800bf10 <_vfiprintf_r>
 800be92:	b002      	add	sp, #8
 800be94:	f85d eb04 	ldr.w	lr, [sp], #4
 800be98:	b003      	add	sp, #12
 800be9a:	4770      	bx	lr
 800be9c:	200000b8 	.word	0x200000b8

0800bea0 <abort>:
 800bea0:	b508      	push	{r3, lr}
 800bea2:	2006      	movs	r0, #6
 800bea4:	f000 fa08 	bl	800c2b8 <raise>
 800bea8:	2001      	movs	r0, #1
 800beaa:	f7f7 fb17 	bl	80034dc <_exit>

0800beae <_malloc_usable_size_r>:
 800beae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beb2:	1f18      	subs	r0, r3, #4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bfbc      	itt	lt
 800beb8:	580b      	ldrlt	r3, [r1, r0]
 800beba:	18c0      	addlt	r0, r0, r3
 800bebc:	4770      	bx	lr

0800bebe <__sfputc_r>:
 800bebe:	6893      	ldr	r3, [r2, #8]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	b410      	push	{r4}
 800bec6:	6093      	str	r3, [r2, #8]
 800bec8:	da08      	bge.n	800bedc <__sfputc_r+0x1e>
 800beca:	6994      	ldr	r4, [r2, #24]
 800becc:	42a3      	cmp	r3, r4
 800bece:	db01      	blt.n	800bed4 <__sfputc_r+0x16>
 800bed0:	290a      	cmp	r1, #10
 800bed2:	d103      	bne.n	800bedc <__sfputc_r+0x1e>
 800bed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bed8:	f000 b932 	b.w	800c140 <__swbuf_r>
 800bedc:	6813      	ldr	r3, [r2, #0]
 800bede:	1c58      	adds	r0, r3, #1
 800bee0:	6010      	str	r0, [r2, #0]
 800bee2:	7019      	strb	r1, [r3, #0]
 800bee4:	4608      	mov	r0, r1
 800bee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beea:	4770      	bx	lr

0800beec <__sfputs_r>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	4606      	mov	r6, r0
 800bef0:	460f      	mov	r7, r1
 800bef2:	4614      	mov	r4, r2
 800bef4:	18d5      	adds	r5, r2, r3
 800bef6:	42ac      	cmp	r4, r5
 800bef8:	d101      	bne.n	800befe <__sfputs_r+0x12>
 800befa:	2000      	movs	r0, #0
 800befc:	e007      	b.n	800bf0e <__sfputs_r+0x22>
 800befe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf02:	463a      	mov	r2, r7
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7ff ffda 	bl	800bebe <__sfputc_r>
 800bf0a:	1c43      	adds	r3, r0, #1
 800bf0c:	d1f3      	bne.n	800bef6 <__sfputs_r+0xa>
 800bf0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf10 <_vfiprintf_r>:
 800bf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf14:	460d      	mov	r5, r1
 800bf16:	b09d      	sub	sp, #116	@ 0x74
 800bf18:	4614      	mov	r4, r2
 800bf1a:	4698      	mov	r8, r3
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	b118      	cbz	r0, 800bf28 <_vfiprintf_r+0x18>
 800bf20:	6a03      	ldr	r3, [r0, #32]
 800bf22:	b90b      	cbnz	r3, 800bf28 <_vfiprintf_r+0x18>
 800bf24:	f7fe f904 	bl	800a130 <__sinit>
 800bf28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf2a:	07d9      	lsls	r1, r3, #31
 800bf2c:	d405      	bmi.n	800bf3a <_vfiprintf_r+0x2a>
 800bf2e:	89ab      	ldrh	r3, [r5, #12]
 800bf30:	059a      	lsls	r2, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_vfiprintf_r+0x2a>
 800bf34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf36:	f7fe fa12 	bl	800a35e <__retarget_lock_acquire_recursive>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	071b      	lsls	r3, r3, #28
 800bf3e:	d501      	bpl.n	800bf44 <_vfiprintf_r+0x34>
 800bf40:	692b      	ldr	r3, [r5, #16]
 800bf42:	b99b      	cbnz	r3, 800bf6c <_vfiprintf_r+0x5c>
 800bf44:	4629      	mov	r1, r5
 800bf46:	4630      	mov	r0, r6
 800bf48:	f000 f938 	bl	800c1bc <__swsetup_r>
 800bf4c:	b170      	cbz	r0, 800bf6c <_vfiprintf_r+0x5c>
 800bf4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf50:	07dc      	lsls	r4, r3, #31
 800bf52:	d504      	bpl.n	800bf5e <_vfiprintf_r+0x4e>
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295
 800bf58:	b01d      	add	sp, #116	@ 0x74
 800bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5e:	89ab      	ldrh	r3, [r5, #12]
 800bf60:	0598      	lsls	r0, r3, #22
 800bf62:	d4f7      	bmi.n	800bf54 <_vfiprintf_r+0x44>
 800bf64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf66:	f7fe f9fb 	bl	800a360 <__retarget_lock_release_recursive>
 800bf6a:	e7f3      	b.n	800bf54 <_vfiprintf_r+0x44>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf70:	2320      	movs	r3, #32
 800bf72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf7a:	2330      	movs	r3, #48	@ 0x30
 800bf7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c12c <_vfiprintf_r+0x21c>
 800bf80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf84:	f04f 0901 	mov.w	r9, #1
 800bf88:	4623      	mov	r3, r4
 800bf8a:	469a      	mov	sl, r3
 800bf8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf90:	b10a      	cbz	r2, 800bf96 <_vfiprintf_r+0x86>
 800bf92:	2a25      	cmp	r2, #37	@ 0x25
 800bf94:	d1f9      	bne.n	800bf8a <_vfiprintf_r+0x7a>
 800bf96:	ebba 0b04 	subs.w	fp, sl, r4
 800bf9a:	d00b      	beq.n	800bfb4 <_vfiprintf_r+0xa4>
 800bf9c:	465b      	mov	r3, fp
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f7ff ffa2 	bl	800beec <__sfputs_r>
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	f000 80a7 	beq.w	800c0fc <_vfiprintf_r+0x1ec>
 800bfae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfb0:	445a      	add	r2, fp
 800bfb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 809f 	beq.w	800c0fc <_vfiprintf_r+0x1ec>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfc8:	f10a 0a01 	add.w	sl, sl, #1
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	9307      	str	r3, [sp, #28]
 800bfd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfd6:	4654      	mov	r4, sl
 800bfd8:	2205      	movs	r2, #5
 800bfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfde:	4853      	ldr	r0, [pc, #332]	@ (800c12c <_vfiprintf_r+0x21c>)
 800bfe0:	f7f4 f916 	bl	8000210 <memchr>
 800bfe4:	9a04      	ldr	r2, [sp, #16]
 800bfe6:	b9d8      	cbnz	r0, 800c020 <_vfiprintf_r+0x110>
 800bfe8:	06d1      	lsls	r1, r2, #27
 800bfea:	bf44      	itt	mi
 800bfec:	2320      	movmi	r3, #32
 800bfee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bff2:	0713      	lsls	r3, r2, #28
 800bff4:	bf44      	itt	mi
 800bff6:	232b      	movmi	r3, #43	@ 0x2b
 800bff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bffc:	f89a 3000 	ldrb.w	r3, [sl]
 800c000:	2b2a      	cmp	r3, #42	@ 0x2a
 800c002:	d015      	beq.n	800c030 <_vfiprintf_r+0x120>
 800c004:	9a07      	ldr	r2, [sp, #28]
 800c006:	4654      	mov	r4, sl
 800c008:	2000      	movs	r0, #0
 800c00a:	f04f 0c0a 	mov.w	ip, #10
 800c00e:	4621      	mov	r1, r4
 800c010:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c014:	3b30      	subs	r3, #48	@ 0x30
 800c016:	2b09      	cmp	r3, #9
 800c018:	d94b      	bls.n	800c0b2 <_vfiprintf_r+0x1a2>
 800c01a:	b1b0      	cbz	r0, 800c04a <_vfiprintf_r+0x13a>
 800c01c:	9207      	str	r2, [sp, #28]
 800c01e:	e014      	b.n	800c04a <_vfiprintf_r+0x13a>
 800c020:	eba0 0308 	sub.w	r3, r0, r8
 800c024:	fa09 f303 	lsl.w	r3, r9, r3
 800c028:	4313      	orrs	r3, r2
 800c02a:	9304      	str	r3, [sp, #16]
 800c02c:	46a2      	mov	sl, r4
 800c02e:	e7d2      	b.n	800bfd6 <_vfiprintf_r+0xc6>
 800c030:	9b03      	ldr	r3, [sp, #12]
 800c032:	1d19      	adds	r1, r3, #4
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	9103      	str	r1, [sp, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bfbb      	ittet	lt
 800c03c:	425b      	neglt	r3, r3
 800c03e:	f042 0202 	orrlt.w	r2, r2, #2
 800c042:	9307      	strge	r3, [sp, #28]
 800c044:	9307      	strlt	r3, [sp, #28]
 800c046:	bfb8      	it	lt
 800c048:	9204      	strlt	r2, [sp, #16]
 800c04a:	7823      	ldrb	r3, [r4, #0]
 800c04c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c04e:	d10a      	bne.n	800c066 <_vfiprintf_r+0x156>
 800c050:	7863      	ldrb	r3, [r4, #1]
 800c052:	2b2a      	cmp	r3, #42	@ 0x2a
 800c054:	d132      	bne.n	800c0bc <_vfiprintf_r+0x1ac>
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	1d1a      	adds	r2, r3, #4
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	9203      	str	r2, [sp, #12]
 800c05e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c062:	3402      	adds	r4, #2
 800c064:	9305      	str	r3, [sp, #20]
 800c066:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c13c <_vfiprintf_r+0x22c>
 800c06a:	7821      	ldrb	r1, [r4, #0]
 800c06c:	2203      	movs	r2, #3
 800c06e:	4650      	mov	r0, sl
 800c070:	f7f4 f8ce 	bl	8000210 <memchr>
 800c074:	b138      	cbz	r0, 800c086 <_vfiprintf_r+0x176>
 800c076:	9b04      	ldr	r3, [sp, #16]
 800c078:	eba0 000a 	sub.w	r0, r0, sl
 800c07c:	2240      	movs	r2, #64	@ 0x40
 800c07e:	4082      	lsls	r2, r0
 800c080:	4313      	orrs	r3, r2
 800c082:	3401      	adds	r4, #1
 800c084:	9304      	str	r3, [sp, #16]
 800c086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c08a:	4829      	ldr	r0, [pc, #164]	@ (800c130 <_vfiprintf_r+0x220>)
 800c08c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c090:	2206      	movs	r2, #6
 800c092:	f7f4 f8bd 	bl	8000210 <memchr>
 800c096:	2800      	cmp	r0, #0
 800c098:	d03f      	beq.n	800c11a <_vfiprintf_r+0x20a>
 800c09a:	4b26      	ldr	r3, [pc, #152]	@ (800c134 <_vfiprintf_r+0x224>)
 800c09c:	bb1b      	cbnz	r3, 800c0e6 <_vfiprintf_r+0x1d6>
 800c09e:	9b03      	ldr	r3, [sp, #12]
 800c0a0:	3307      	adds	r3, #7
 800c0a2:	f023 0307 	bic.w	r3, r3, #7
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	9303      	str	r3, [sp, #12]
 800c0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ac:	443b      	add	r3, r7
 800c0ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0b0:	e76a      	b.n	800bf88 <_vfiprintf_r+0x78>
 800c0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	2001      	movs	r0, #1
 800c0ba:	e7a8      	b.n	800c00e <_vfiprintf_r+0xfe>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	3401      	adds	r4, #1
 800c0c0:	9305      	str	r3, [sp, #20]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	f04f 0c0a 	mov.w	ip, #10
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0ce:	3a30      	subs	r2, #48	@ 0x30
 800c0d0:	2a09      	cmp	r2, #9
 800c0d2:	d903      	bls.n	800c0dc <_vfiprintf_r+0x1cc>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0c6      	beq.n	800c066 <_vfiprintf_r+0x156>
 800c0d8:	9105      	str	r1, [sp, #20]
 800c0da:	e7c4      	b.n	800c066 <_vfiprintf_r+0x156>
 800c0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e7f0      	b.n	800c0c8 <_vfiprintf_r+0x1b8>
 800c0e6:	ab03      	add	r3, sp, #12
 800c0e8:	9300      	str	r3, [sp, #0]
 800c0ea:	462a      	mov	r2, r5
 800c0ec:	4b12      	ldr	r3, [pc, #72]	@ (800c138 <_vfiprintf_r+0x228>)
 800c0ee:	a904      	add	r1, sp, #16
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7fd fbd9 	bl	80098a8 <_printf_float>
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	1c78      	adds	r0, r7, #1
 800c0fa:	d1d6      	bne.n	800c0aa <_vfiprintf_r+0x19a>
 800c0fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0fe:	07d9      	lsls	r1, r3, #31
 800c100:	d405      	bmi.n	800c10e <_vfiprintf_r+0x1fe>
 800c102:	89ab      	ldrh	r3, [r5, #12]
 800c104:	059a      	lsls	r2, r3, #22
 800c106:	d402      	bmi.n	800c10e <_vfiprintf_r+0x1fe>
 800c108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c10a:	f7fe f929 	bl	800a360 <__retarget_lock_release_recursive>
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	065b      	lsls	r3, r3, #25
 800c112:	f53f af1f 	bmi.w	800bf54 <_vfiprintf_r+0x44>
 800c116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c118:	e71e      	b.n	800bf58 <_vfiprintf_r+0x48>
 800c11a:	ab03      	add	r3, sp, #12
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	462a      	mov	r2, r5
 800c120:	4b05      	ldr	r3, [pc, #20]	@ (800c138 <_vfiprintf_r+0x228>)
 800c122:	a904      	add	r1, sp, #16
 800c124:	4630      	mov	r0, r6
 800c126:	f7fd fe57 	bl	8009dd8 <_printf_i>
 800c12a:	e7e4      	b.n	800c0f6 <_vfiprintf_r+0x1e6>
 800c12c:	0800e618 	.word	0x0800e618
 800c130:	0800e622 	.word	0x0800e622
 800c134:	080098a9 	.word	0x080098a9
 800c138:	0800beed 	.word	0x0800beed
 800c13c:	0800e61e 	.word	0x0800e61e

0800c140 <__swbuf_r>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	460e      	mov	r6, r1
 800c144:	4614      	mov	r4, r2
 800c146:	4605      	mov	r5, r0
 800c148:	b118      	cbz	r0, 800c152 <__swbuf_r+0x12>
 800c14a:	6a03      	ldr	r3, [r0, #32]
 800c14c:	b90b      	cbnz	r3, 800c152 <__swbuf_r+0x12>
 800c14e:	f7fd ffef 	bl	800a130 <__sinit>
 800c152:	69a3      	ldr	r3, [r4, #24]
 800c154:	60a3      	str	r3, [r4, #8]
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	071a      	lsls	r2, r3, #28
 800c15a:	d501      	bpl.n	800c160 <__swbuf_r+0x20>
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	b943      	cbnz	r3, 800c172 <__swbuf_r+0x32>
 800c160:	4621      	mov	r1, r4
 800c162:	4628      	mov	r0, r5
 800c164:	f000 f82a 	bl	800c1bc <__swsetup_r>
 800c168:	b118      	cbz	r0, 800c172 <__swbuf_r+0x32>
 800c16a:	f04f 37ff 	mov.w	r7, #4294967295
 800c16e:	4638      	mov	r0, r7
 800c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	6922      	ldr	r2, [r4, #16]
 800c176:	1a98      	subs	r0, r3, r2
 800c178:	6963      	ldr	r3, [r4, #20]
 800c17a:	b2f6      	uxtb	r6, r6
 800c17c:	4283      	cmp	r3, r0
 800c17e:	4637      	mov	r7, r6
 800c180:	dc05      	bgt.n	800c18e <__swbuf_r+0x4e>
 800c182:	4621      	mov	r1, r4
 800c184:	4628      	mov	r0, r5
 800c186:	f7ff fd99 	bl	800bcbc <_fflush_r>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d1ed      	bne.n	800c16a <__swbuf_r+0x2a>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	3b01      	subs	r3, #1
 800c192:	60a3      	str	r3, [r4, #8]
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	1c5a      	adds	r2, r3, #1
 800c198:	6022      	str	r2, [r4, #0]
 800c19a:	701e      	strb	r6, [r3, #0]
 800c19c:	6962      	ldr	r2, [r4, #20]
 800c19e:	1c43      	adds	r3, r0, #1
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d004      	beq.n	800c1ae <__swbuf_r+0x6e>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	07db      	lsls	r3, r3, #31
 800c1a8:	d5e1      	bpl.n	800c16e <__swbuf_r+0x2e>
 800c1aa:	2e0a      	cmp	r6, #10
 800c1ac:	d1df      	bne.n	800c16e <__swbuf_r+0x2e>
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f7ff fd83 	bl	800bcbc <_fflush_r>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d0d9      	beq.n	800c16e <__swbuf_r+0x2e>
 800c1ba:	e7d6      	b.n	800c16a <__swbuf_r+0x2a>

0800c1bc <__swsetup_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4b29      	ldr	r3, [pc, #164]	@ (800c264 <__swsetup_r+0xa8>)
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	b118      	cbz	r0, 800c1d0 <__swsetup_r+0x14>
 800c1c8:	6a03      	ldr	r3, [r0, #32]
 800c1ca:	b90b      	cbnz	r3, 800c1d0 <__swsetup_r+0x14>
 800c1cc:	f7fd ffb0 	bl	800a130 <__sinit>
 800c1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d4:	0719      	lsls	r1, r3, #28
 800c1d6:	d422      	bmi.n	800c21e <__swsetup_r+0x62>
 800c1d8:	06da      	lsls	r2, r3, #27
 800c1da:	d407      	bmi.n	800c1ec <__swsetup_r+0x30>
 800c1dc:	2209      	movs	r2, #9
 800c1de:	602a      	str	r2, [r5, #0]
 800c1e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ea:	e033      	b.n	800c254 <__swsetup_r+0x98>
 800c1ec:	0758      	lsls	r0, r3, #29
 800c1ee:	d512      	bpl.n	800c216 <__swsetup_r+0x5a>
 800c1f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1f2:	b141      	cbz	r1, 800c206 <__swsetup_r+0x4a>
 800c1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1f8:	4299      	cmp	r1, r3
 800c1fa:	d002      	beq.n	800c202 <__swsetup_r+0x46>
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f7fe feff 	bl	800b000 <_free_r>
 800c202:	2300      	movs	r3, #0
 800c204:	6363      	str	r3, [r4, #52]	@ 0x34
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c20c:	81a3      	strh	r3, [r4, #12]
 800c20e:	2300      	movs	r3, #0
 800c210:	6063      	str	r3, [r4, #4]
 800c212:	6923      	ldr	r3, [r4, #16]
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	89a3      	ldrh	r3, [r4, #12]
 800c218:	f043 0308 	orr.w	r3, r3, #8
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	6923      	ldr	r3, [r4, #16]
 800c220:	b94b      	cbnz	r3, 800c236 <__swsetup_r+0x7a>
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c22c:	d003      	beq.n	800c236 <__swsetup_r+0x7a>
 800c22e:	4621      	mov	r1, r4
 800c230:	4628      	mov	r0, r5
 800c232:	f000 f883 	bl	800c33c <__smakebuf_r>
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	f013 0201 	ands.w	r2, r3, #1
 800c23e:	d00a      	beq.n	800c256 <__swsetup_r+0x9a>
 800c240:	2200      	movs	r2, #0
 800c242:	60a2      	str	r2, [r4, #8]
 800c244:	6962      	ldr	r2, [r4, #20]
 800c246:	4252      	negs	r2, r2
 800c248:	61a2      	str	r2, [r4, #24]
 800c24a:	6922      	ldr	r2, [r4, #16]
 800c24c:	b942      	cbnz	r2, 800c260 <__swsetup_r+0xa4>
 800c24e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c252:	d1c5      	bne.n	800c1e0 <__swsetup_r+0x24>
 800c254:	bd38      	pop	{r3, r4, r5, pc}
 800c256:	0799      	lsls	r1, r3, #30
 800c258:	bf58      	it	pl
 800c25a:	6962      	ldrpl	r2, [r4, #20]
 800c25c:	60a2      	str	r2, [r4, #8]
 800c25e:	e7f4      	b.n	800c24a <__swsetup_r+0x8e>
 800c260:	2000      	movs	r0, #0
 800c262:	e7f7      	b.n	800c254 <__swsetup_r+0x98>
 800c264:	200000b8 	.word	0x200000b8

0800c268 <_raise_r>:
 800c268:	291f      	cmp	r1, #31
 800c26a:	b538      	push	{r3, r4, r5, lr}
 800c26c:	4605      	mov	r5, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	d904      	bls.n	800c27c <_raise_r+0x14>
 800c272:	2316      	movs	r3, #22
 800c274:	6003      	str	r3, [r0, #0]
 800c276:	f04f 30ff 	mov.w	r0, #4294967295
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c27e:	b112      	cbz	r2, 800c286 <_raise_r+0x1e>
 800c280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c284:	b94b      	cbnz	r3, 800c29a <_raise_r+0x32>
 800c286:	4628      	mov	r0, r5
 800c288:	f000 f830 	bl	800c2ec <_getpid_r>
 800c28c:	4622      	mov	r2, r4
 800c28e:	4601      	mov	r1, r0
 800c290:	4628      	mov	r0, r5
 800c292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c296:	f000 b817 	b.w	800c2c8 <_kill_r>
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d00a      	beq.n	800c2b4 <_raise_r+0x4c>
 800c29e:	1c59      	adds	r1, r3, #1
 800c2a0:	d103      	bne.n	800c2aa <_raise_r+0x42>
 800c2a2:	2316      	movs	r3, #22
 800c2a4:	6003      	str	r3, [r0, #0]
 800c2a6:	2001      	movs	r0, #1
 800c2a8:	e7e7      	b.n	800c27a <_raise_r+0x12>
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4798      	blx	r3
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	e7e0      	b.n	800c27a <_raise_r+0x12>

0800c2b8 <raise>:
 800c2b8:	4b02      	ldr	r3, [pc, #8]	@ (800c2c4 <raise+0xc>)
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	f7ff bfd3 	b.w	800c268 <_raise_r>
 800c2c2:	bf00      	nop
 800c2c4:	200000b8 	.word	0x200000b8

0800c2c8 <_kill_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d07      	ldr	r5, [pc, #28]	@ (800c2e8 <_kill_r+0x20>)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	602b      	str	r3, [r5, #0]
 800c2d6:	f7f7 f8f1 	bl	80034bc <_kill>
 800c2da:	1c43      	adds	r3, r0, #1
 800c2dc:	d102      	bne.n	800c2e4 <_kill_r+0x1c>
 800c2de:	682b      	ldr	r3, [r5, #0]
 800c2e0:	b103      	cbz	r3, 800c2e4 <_kill_r+0x1c>
 800c2e2:	6023      	str	r3, [r4, #0]
 800c2e4:	bd38      	pop	{r3, r4, r5, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20000b9c 	.word	0x20000b9c

0800c2ec <_getpid_r>:
 800c2ec:	f7f7 b8de 	b.w	80034ac <_getpid>

0800c2f0 <__swhatbuf_r>:
 800c2f0:	b570      	push	{r4, r5, r6, lr}
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2f8:	2900      	cmp	r1, #0
 800c2fa:	b096      	sub	sp, #88	@ 0x58
 800c2fc:	4615      	mov	r5, r2
 800c2fe:	461e      	mov	r6, r3
 800c300:	da0d      	bge.n	800c31e <__swhatbuf_r+0x2e>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c308:	f04f 0100 	mov.w	r1, #0
 800c30c:	bf14      	ite	ne
 800c30e:	2340      	movne	r3, #64	@ 0x40
 800c310:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c314:	2000      	movs	r0, #0
 800c316:	6031      	str	r1, [r6, #0]
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	b016      	add	sp, #88	@ 0x58
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
 800c31e:	466a      	mov	r2, sp
 800c320:	f000 f848 	bl	800c3b4 <_fstat_r>
 800c324:	2800      	cmp	r0, #0
 800c326:	dbec      	blt.n	800c302 <__swhatbuf_r+0x12>
 800c328:	9901      	ldr	r1, [sp, #4]
 800c32a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c32e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c332:	4259      	negs	r1, r3
 800c334:	4159      	adcs	r1, r3
 800c336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c33a:	e7eb      	b.n	800c314 <__swhatbuf_r+0x24>

0800c33c <__smakebuf_r>:
 800c33c:	898b      	ldrh	r3, [r1, #12]
 800c33e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c340:	079d      	lsls	r5, r3, #30
 800c342:	4606      	mov	r6, r0
 800c344:	460c      	mov	r4, r1
 800c346:	d507      	bpl.n	800c358 <__smakebuf_r+0x1c>
 800c348:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	6123      	str	r3, [r4, #16]
 800c350:	2301      	movs	r3, #1
 800c352:	6163      	str	r3, [r4, #20]
 800c354:	b003      	add	sp, #12
 800c356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c358:	ab01      	add	r3, sp, #4
 800c35a:	466a      	mov	r2, sp
 800c35c:	f7ff ffc8 	bl	800c2f0 <__swhatbuf_r>
 800c360:	9f00      	ldr	r7, [sp, #0]
 800c362:	4605      	mov	r5, r0
 800c364:	4639      	mov	r1, r7
 800c366:	4630      	mov	r0, r6
 800c368:	f7fe febe 	bl	800b0e8 <_malloc_r>
 800c36c:	b948      	cbnz	r0, 800c382 <__smakebuf_r+0x46>
 800c36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c372:	059a      	lsls	r2, r3, #22
 800c374:	d4ee      	bmi.n	800c354 <__smakebuf_r+0x18>
 800c376:	f023 0303 	bic.w	r3, r3, #3
 800c37a:	f043 0302 	orr.w	r3, r3, #2
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	e7e2      	b.n	800c348 <__smakebuf_r+0xc>
 800c382:	89a3      	ldrh	r3, [r4, #12]
 800c384:	6020      	str	r0, [r4, #0]
 800c386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	9b01      	ldr	r3, [sp, #4]
 800c38e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c392:	b15b      	cbz	r3, 800c3ac <__smakebuf_r+0x70>
 800c394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f81d 	bl	800c3d8 <_isatty_r>
 800c39e:	b128      	cbz	r0, 800c3ac <__smakebuf_r+0x70>
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	431d      	orrs	r5, r3
 800c3b0:	81a5      	strh	r5, [r4, #12]
 800c3b2:	e7cf      	b.n	800c354 <__smakebuf_r+0x18>

0800c3b4 <_fstat_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4d07      	ldr	r5, [pc, #28]	@ (800c3d4 <_fstat_r+0x20>)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	4608      	mov	r0, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	602b      	str	r3, [r5, #0]
 800c3c2:	f7f7 f8db 	bl	800357c <_fstat>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	d102      	bne.n	800c3d0 <_fstat_r+0x1c>
 800c3ca:	682b      	ldr	r3, [r5, #0]
 800c3cc:	b103      	cbz	r3, 800c3d0 <_fstat_r+0x1c>
 800c3ce:	6023      	str	r3, [r4, #0]
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20000b9c 	.word	0x20000b9c

0800c3d8 <_isatty_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d06      	ldr	r5, [pc, #24]	@ (800c3f4 <_isatty_r+0x1c>)
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4604      	mov	r4, r0
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	602b      	str	r3, [r5, #0]
 800c3e4:	f7f7 f8da 	bl	800359c <_isatty>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d102      	bne.n	800c3f2 <_isatty_r+0x1a>
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	b103      	cbz	r3, 800c3f2 <_isatty_r+0x1a>
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	20000b9c 	.word	0x20000b9c

0800c3f8 <atan2>:
 800c3f8:	f000 bb26 	b.w	800ca48 <__ieee754_atan2>

0800c3fc <pow>:
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fe:	ed2d 8b02 	vpush	{d8}
 800c402:	eeb0 8a40 	vmov.f32	s16, s0
 800c406:	eef0 8a60 	vmov.f32	s17, s1
 800c40a:	ec55 4b11 	vmov	r4, r5, d1
 800c40e:	f000 fbe3 	bl	800cbd8 <__ieee754_pow>
 800c412:	4622      	mov	r2, r4
 800c414:	462b      	mov	r3, r5
 800c416:	4620      	mov	r0, r4
 800c418:	4629      	mov	r1, r5
 800c41a:	ec57 6b10 	vmov	r6, r7, d0
 800c41e:	f7f4 fba5 	bl	8000b6c <__aeabi_dcmpun>
 800c422:	2800      	cmp	r0, #0
 800c424:	d13b      	bne.n	800c49e <pow+0xa2>
 800c426:	ec51 0b18 	vmov	r0, r1, d8
 800c42a:	2200      	movs	r2, #0
 800c42c:	2300      	movs	r3, #0
 800c42e:	f7f4 fb6b 	bl	8000b08 <__aeabi_dcmpeq>
 800c432:	b1b8      	cbz	r0, 800c464 <pow+0x68>
 800c434:	2200      	movs	r2, #0
 800c436:	2300      	movs	r3, #0
 800c438:	4620      	mov	r0, r4
 800c43a:	4629      	mov	r1, r5
 800c43c:	f7f4 fb64 	bl	8000b08 <__aeabi_dcmpeq>
 800c440:	2800      	cmp	r0, #0
 800c442:	d146      	bne.n	800c4d2 <pow+0xd6>
 800c444:	ec45 4b10 	vmov	d0, r4, r5
 800c448:	f000 fa16 	bl	800c878 <finite>
 800c44c:	b338      	cbz	r0, 800c49e <pow+0xa2>
 800c44e:	2200      	movs	r2, #0
 800c450:	2300      	movs	r3, #0
 800c452:	4620      	mov	r0, r4
 800c454:	4629      	mov	r1, r5
 800c456:	f7f4 fb61 	bl	8000b1c <__aeabi_dcmplt>
 800c45a:	b300      	cbz	r0, 800c49e <pow+0xa2>
 800c45c:	f7fd ff54 	bl	800a308 <__errno>
 800c460:	2322      	movs	r3, #34	@ 0x22
 800c462:	e01b      	b.n	800c49c <pow+0xa0>
 800c464:	ec47 6b10 	vmov	d0, r6, r7
 800c468:	f000 fa06 	bl	800c878 <finite>
 800c46c:	b9e0      	cbnz	r0, 800c4a8 <pow+0xac>
 800c46e:	eeb0 0a48 	vmov.f32	s0, s16
 800c472:	eef0 0a68 	vmov.f32	s1, s17
 800c476:	f000 f9ff 	bl	800c878 <finite>
 800c47a:	b1a8      	cbz	r0, 800c4a8 <pow+0xac>
 800c47c:	ec45 4b10 	vmov	d0, r4, r5
 800c480:	f000 f9fa 	bl	800c878 <finite>
 800c484:	b180      	cbz	r0, 800c4a8 <pow+0xac>
 800c486:	4632      	mov	r2, r6
 800c488:	463b      	mov	r3, r7
 800c48a:	4630      	mov	r0, r6
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f4 fb6d 	bl	8000b6c <__aeabi_dcmpun>
 800c492:	2800      	cmp	r0, #0
 800c494:	d0e2      	beq.n	800c45c <pow+0x60>
 800c496:	f7fd ff37 	bl	800a308 <__errno>
 800c49a:	2321      	movs	r3, #33	@ 0x21
 800c49c:	6003      	str	r3, [r0, #0]
 800c49e:	ecbd 8b02 	vpop	{d8}
 800c4a2:	ec47 6b10 	vmov	d0, r6, r7
 800c4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	f7f4 fb2a 	bl	8000b08 <__aeabi_dcmpeq>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d0f2      	beq.n	800c49e <pow+0xa2>
 800c4b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c4bc:	eef0 0a68 	vmov.f32	s1, s17
 800c4c0:	f000 f9da 	bl	800c878 <finite>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d0ea      	beq.n	800c49e <pow+0xa2>
 800c4c8:	ec45 4b10 	vmov	d0, r4, r5
 800c4cc:	f000 f9d4 	bl	800c878 <finite>
 800c4d0:	e7c3      	b.n	800c45a <pow+0x5e>
 800c4d2:	4f01      	ldr	r7, [pc, #4]	@ (800c4d8 <pow+0xdc>)
 800c4d4:	2600      	movs	r6, #0
 800c4d6:	e7e2      	b.n	800c49e <pow+0xa2>
 800c4d8:	3ff00000 	.word	0x3ff00000

0800c4dc <sqrt>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	ed2d 8b02 	vpush	{d8}
 800c4e2:	ec55 4b10 	vmov	r4, r5, d0
 800c4e6:	f000 f9d3 	bl	800c890 <__ieee754_sqrt>
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4f6:	eef0 8a60 	vmov.f32	s17, s1
 800c4fa:	f7f4 fb37 	bl	8000b6c <__aeabi_dcmpun>
 800c4fe:	b990      	cbnz	r0, 800c526 <sqrt+0x4a>
 800c500:	2200      	movs	r2, #0
 800c502:	2300      	movs	r3, #0
 800c504:	4620      	mov	r0, r4
 800c506:	4629      	mov	r1, r5
 800c508:	f7f4 fb08 	bl	8000b1c <__aeabi_dcmplt>
 800c50c:	b158      	cbz	r0, 800c526 <sqrt+0x4a>
 800c50e:	f7fd fefb 	bl	800a308 <__errno>
 800c512:	2321      	movs	r3, #33	@ 0x21
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	2200      	movs	r2, #0
 800c518:	2300      	movs	r3, #0
 800c51a:	4610      	mov	r0, r2
 800c51c:	4619      	mov	r1, r3
 800c51e:	f7f4 f9b5 	bl	800088c <__aeabi_ddiv>
 800c522:	ec41 0b18 	vmov	d8, r0, r1
 800c526:	eeb0 0a48 	vmov.f32	s0, s16
 800c52a:	eef0 0a68 	vmov.f32	s1, s17
 800c52e:	ecbd 8b02 	vpop	{d8}
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	0000      	movs	r0, r0
	...

0800c538 <atan>:
 800c538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	ec55 4b10 	vmov	r4, r5, d0
 800c540:	4bbf      	ldr	r3, [pc, #764]	@ (800c840 <atan+0x308>)
 800c542:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c546:	429e      	cmp	r6, r3
 800c548:	46ab      	mov	fp, r5
 800c54a:	d918      	bls.n	800c57e <atan+0x46>
 800c54c:	4bbd      	ldr	r3, [pc, #756]	@ (800c844 <atan+0x30c>)
 800c54e:	429e      	cmp	r6, r3
 800c550:	d801      	bhi.n	800c556 <atan+0x1e>
 800c552:	d109      	bne.n	800c568 <atan+0x30>
 800c554:	b144      	cbz	r4, 800c568 <atan+0x30>
 800c556:	4622      	mov	r2, r4
 800c558:	462b      	mov	r3, r5
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f3 feb5 	bl	80002cc <__adddf3>
 800c562:	4604      	mov	r4, r0
 800c564:	460d      	mov	r5, r1
 800c566:	e006      	b.n	800c576 <atan+0x3e>
 800c568:	f1bb 0f00 	cmp.w	fp, #0
 800c56c:	f340 812b 	ble.w	800c7c6 <atan+0x28e>
 800c570:	a597      	add	r5, pc, #604	@ (adr r5, 800c7d0 <atan+0x298>)
 800c572:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c576:	ec45 4b10 	vmov	d0, r4, r5
 800c57a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57e:	4bb2      	ldr	r3, [pc, #712]	@ (800c848 <atan+0x310>)
 800c580:	429e      	cmp	r6, r3
 800c582:	d813      	bhi.n	800c5ac <atan+0x74>
 800c584:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c588:	429e      	cmp	r6, r3
 800c58a:	d80c      	bhi.n	800c5a6 <atan+0x6e>
 800c58c:	a392      	add	r3, pc, #584	@ (adr r3, 800c7d8 <atan+0x2a0>)
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	4620      	mov	r0, r4
 800c594:	4629      	mov	r1, r5
 800c596:	f7f3 fe99 	bl	80002cc <__adddf3>
 800c59a:	4bac      	ldr	r3, [pc, #688]	@ (800c84c <atan+0x314>)
 800c59c:	2200      	movs	r2, #0
 800c59e:	f7f4 fadb 	bl	8000b58 <__aeabi_dcmpgt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d1e7      	bne.n	800c576 <atan+0x3e>
 800c5a6:	f04f 3aff 	mov.w	sl, #4294967295
 800c5aa:	e029      	b.n	800c600 <atan+0xc8>
 800c5ac:	f000 f95c 	bl	800c868 <fabs>
 800c5b0:	4ba7      	ldr	r3, [pc, #668]	@ (800c850 <atan+0x318>)
 800c5b2:	429e      	cmp	r6, r3
 800c5b4:	ec55 4b10 	vmov	r4, r5, d0
 800c5b8:	f200 80bc 	bhi.w	800c734 <atan+0x1fc>
 800c5bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c5c0:	429e      	cmp	r6, r3
 800c5c2:	f200 809e 	bhi.w	800c702 <atan+0x1ca>
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	462b      	mov	r3, r5
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7f3 fe7d 	bl	80002cc <__adddf3>
 800c5d2:	4b9e      	ldr	r3, [pc, #632]	@ (800c84c <atan+0x314>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f7f3 fe77 	bl	80002c8 <__aeabi_dsub>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4606      	mov	r6, r0
 800c5de:	460f      	mov	r7, r1
 800c5e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f7f3 fe70 	bl	80002cc <__adddf3>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	4639      	mov	r1, r7
 800c5f4:	f7f4 f94a 	bl	800088c <__aeabi_ddiv>
 800c5f8:	f04f 0a00 	mov.w	sl, #0
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	460d      	mov	r5, r1
 800c600:	4622      	mov	r2, r4
 800c602:	462b      	mov	r3, r5
 800c604:	4620      	mov	r0, r4
 800c606:	4629      	mov	r1, r5
 800c608:	f7f4 f816 	bl	8000638 <__aeabi_dmul>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4680      	mov	r8, r0
 800c612:	4689      	mov	r9, r1
 800c614:	f7f4 f810 	bl	8000638 <__aeabi_dmul>
 800c618:	a371      	add	r3, pc, #452	@ (adr r3, 800c7e0 <atan+0x2a8>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	4606      	mov	r6, r0
 800c620:	460f      	mov	r7, r1
 800c622:	f7f4 f809 	bl	8000638 <__aeabi_dmul>
 800c626:	a370      	add	r3, pc, #448	@ (adr r3, 800c7e8 <atan+0x2b0>)
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f7f3 fe4e 	bl	80002cc <__adddf3>
 800c630:	4632      	mov	r2, r6
 800c632:	463b      	mov	r3, r7
 800c634:	f7f4 f800 	bl	8000638 <__aeabi_dmul>
 800c638:	a36d      	add	r3, pc, #436	@ (adr r3, 800c7f0 <atan+0x2b8>)
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	f7f3 fe45 	bl	80002cc <__adddf3>
 800c642:	4632      	mov	r2, r6
 800c644:	463b      	mov	r3, r7
 800c646:	f7f3 fff7 	bl	8000638 <__aeabi_dmul>
 800c64a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c7f8 <atan+0x2c0>)
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f7f3 fe3c 	bl	80002cc <__adddf3>
 800c654:	4632      	mov	r2, r6
 800c656:	463b      	mov	r3, r7
 800c658:	f7f3 ffee 	bl	8000638 <__aeabi_dmul>
 800c65c:	a368      	add	r3, pc, #416	@ (adr r3, 800c800 <atan+0x2c8>)
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	f7f3 fe33 	bl	80002cc <__adddf3>
 800c666:	4632      	mov	r2, r6
 800c668:	463b      	mov	r3, r7
 800c66a:	f7f3 ffe5 	bl	8000638 <__aeabi_dmul>
 800c66e:	a366      	add	r3, pc, #408	@ (adr r3, 800c808 <atan+0x2d0>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f7f3 fe2a 	bl	80002cc <__adddf3>
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	f7f3 ffdc 	bl	8000638 <__aeabi_dmul>
 800c680:	a363      	add	r3, pc, #396	@ (adr r3, 800c810 <atan+0x2d8>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	4680      	mov	r8, r0
 800c688:	4689      	mov	r9, r1
 800c68a:	4630      	mov	r0, r6
 800c68c:	4639      	mov	r1, r7
 800c68e:	f7f3 ffd3 	bl	8000638 <__aeabi_dmul>
 800c692:	a361      	add	r3, pc, #388	@ (adr r3, 800c818 <atan+0x2e0>)
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	f7f3 fe16 	bl	80002c8 <__aeabi_dsub>
 800c69c:	4632      	mov	r2, r6
 800c69e:	463b      	mov	r3, r7
 800c6a0:	f7f3 ffca 	bl	8000638 <__aeabi_dmul>
 800c6a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800c820 <atan+0x2e8>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f7f3 fe0d 	bl	80002c8 <__aeabi_dsub>
 800c6ae:	4632      	mov	r2, r6
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	f7f3 ffc1 	bl	8000638 <__aeabi_dmul>
 800c6b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800c828 <atan+0x2f0>)
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	f7f3 fe04 	bl	80002c8 <__aeabi_dsub>
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	463b      	mov	r3, r7
 800c6c4:	f7f3 ffb8 	bl	8000638 <__aeabi_dmul>
 800c6c8:	a359      	add	r3, pc, #356	@ (adr r3, 800c830 <atan+0x2f8>)
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f7f3 fdfb 	bl	80002c8 <__aeabi_dsub>
 800c6d2:	4632      	mov	r2, r6
 800c6d4:	463b      	mov	r3, r7
 800c6d6:	f7f3 ffaf 	bl	8000638 <__aeabi_dmul>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	4640      	mov	r0, r8
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	f7f3 fdf3 	bl	80002cc <__adddf3>
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	f7f3 ffa5 	bl	8000638 <__aeabi_dmul>
 800c6ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	d148      	bne.n	800c78a <atan+0x252>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	f7f3 fde4 	bl	80002c8 <__aeabi_dsub>
 800c700:	e72f      	b.n	800c562 <atan+0x2a>
 800c702:	4b52      	ldr	r3, [pc, #328]	@ (800c84c <atan+0x314>)
 800c704:	2200      	movs	r2, #0
 800c706:	4620      	mov	r0, r4
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f3 fddd 	bl	80002c8 <__aeabi_dsub>
 800c70e:	4b4f      	ldr	r3, [pc, #316]	@ (800c84c <atan+0x314>)
 800c710:	4606      	mov	r6, r0
 800c712:	460f      	mov	r7, r1
 800c714:	2200      	movs	r2, #0
 800c716:	4620      	mov	r0, r4
 800c718:	4629      	mov	r1, r5
 800c71a:	f7f3 fdd7 	bl	80002cc <__adddf3>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4630      	mov	r0, r6
 800c724:	4639      	mov	r1, r7
 800c726:	f7f4 f8b1 	bl	800088c <__aeabi_ddiv>
 800c72a:	f04f 0a01 	mov.w	sl, #1
 800c72e:	4604      	mov	r4, r0
 800c730:	460d      	mov	r5, r1
 800c732:	e765      	b.n	800c600 <atan+0xc8>
 800c734:	4b47      	ldr	r3, [pc, #284]	@ (800c854 <atan+0x31c>)
 800c736:	429e      	cmp	r6, r3
 800c738:	d21c      	bcs.n	800c774 <atan+0x23c>
 800c73a:	4b47      	ldr	r3, [pc, #284]	@ (800c858 <atan+0x320>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	4620      	mov	r0, r4
 800c740:	4629      	mov	r1, r5
 800c742:	f7f3 fdc1 	bl	80002c8 <__aeabi_dsub>
 800c746:	4b44      	ldr	r3, [pc, #272]	@ (800c858 <atan+0x320>)
 800c748:	4606      	mov	r6, r0
 800c74a:	460f      	mov	r7, r1
 800c74c:	2200      	movs	r2, #0
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	f7f3 ff71 	bl	8000638 <__aeabi_dmul>
 800c756:	4b3d      	ldr	r3, [pc, #244]	@ (800c84c <atan+0x314>)
 800c758:	2200      	movs	r2, #0
 800c75a:	f7f3 fdb7 	bl	80002cc <__adddf3>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4630      	mov	r0, r6
 800c764:	4639      	mov	r1, r7
 800c766:	f7f4 f891 	bl	800088c <__aeabi_ddiv>
 800c76a:	f04f 0a02 	mov.w	sl, #2
 800c76e:	4604      	mov	r4, r0
 800c770:	460d      	mov	r5, r1
 800c772:	e745      	b.n	800c600 <atan+0xc8>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	4938      	ldr	r1, [pc, #224]	@ (800c85c <atan+0x324>)
 800c77a:	2000      	movs	r0, #0
 800c77c:	f7f4 f886 	bl	800088c <__aeabi_ddiv>
 800c780:	f04f 0a03 	mov.w	sl, #3
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	e73a      	b.n	800c600 <atan+0xc8>
 800c78a:	4b35      	ldr	r3, [pc, #212]	@ (800c860 <atan+0x328>)
 800c78c:	4e35      	ldr	r6, [pc, #212]	@ (800c864 <atan+0x32c>)
 800c78e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c796:	f7f3 fd97 	bl	80002c8 <__aeabi_dsub>
 800c79a:	4622      	mov	r2, r4
 800c79c:	462b      	mov	r3, r5
 800c79e:	f7f3 fd93 	bl	80002c8 <__aeabi_dsub>
 800c7a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c7ae:	f7f3 fd8b 	bl	80002c8 <__aeabi_dsub>
 800c7b2:	f1bb 0f00 	cmp.w	fp, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	f6bf aedc 	bge.w	800c576 <atan+0x3e>
 800c7be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7c2:	461d      	mov	r5, r3
 800c7c4:	e6d7      	b.n	800c576 <atan+0x3e>
 800c7c6:	a51c      	add	r5, pc, #112	@ (adr r5, 800c838 <atan+0x300>)
 800c7c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c7cc:	e6d3      	b.n	800c576 <atan+0x3e>
 800c7ce:	bf00      	nop
 800c7d0:	54442d18 	.word	0x54442d18
 800c7d4:	3ff921fb 	.word	0x3ff921fb
 800c7d8:	8800759c 	.word	0x8800759c
 800c7dc:	7e37e43c 	.word	0x7e37e43c
 800c7e0:	e322da11 	.word	0xe322da11
 800c7e4:	3f90ad3a 	.word	0x3f90ad3a
 800c7e8:	24760deb 	.word	0x24760deb
 800c7ec:	3fa97b4b 	.word	0x3fa97b4b
 800c7f0:	a0d03d51 	.word	0xa0d03d51
 800c7f4:	3fb10d66 	.word	0x3fb10d66
 800c7f8:	c54c206e 	.word	0xc54c206e
 800c7fc:	3fb745cd 	.word	0x3fb745cd
 800c800:	920083ff 	.word	0x920083ff
 800c804:	3fc24924 	.word	0x3fc24924
 800c808:	5555550d 	.word	0x5555550d
 800c80c:	3fd55555 	.word	0x3fd55555
 800c810:	2c6a6c2f 	.word	0x2c6a6c2f
 800c814:	bfa2b444 	.word	0xbfa2b444
 800c818:	52defd9a 	.word	0x52defd9a
 800c81c:	3fadde2d 	.word	0x3fadde2d
 800c820:	af749a6d 	.word	0xaf749a6d
 800c824:	3fb3b0f2 	.word	0x3fb3b0f2
 800c828:	fe231671 	.word	0xfe231671
 800c82c:	3fbc71c6 	.word	0x3fbc71c6
 800c830:	9998ebc4 	.word	0x9998ebc4
 800c834:	3fc99999 	.word	0x3fc99999
 800c838:	54442d18 	.word	0x54442d18
 800c83c:	bff921fb 	.word	0xbff921fb
 800c840:	440fffff 	.word	0x440fffff
 800c844:	7ff00000 	.word	0x7ff00000
 800c848:	3fdbffff 	.word	0x3fdbffff
 800c84c:	3ff00000 	.word	0x3ff00000
 800c850:	3ff2ffff 	.word	0x3ff2ffff
 800c854:	40038000 	.word	0x40038000
 800c858:	3ff80000 	.word	0x3ff80000
 800c85c:	bff00000 	.word	0xbff00000
 800c860:	0800e770 	.word	0x0800e770
 800c864:	0800e790 	.word	0x0800e790

0800c868 <fabs>:
 800c868:	ec51 0b10 	vmov	r0, r1, d0
 800c86c:	4602      	mov	r2, r0
 800c86e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c872:	ec43 2b10 	vmov	d0, r2, r3
 800c876:	4770      	bx	lr

0800c878 <finite>:
 800c878:	b082      	sub	sp, #8
 800c87a:	ed8d 0b00 	vstr	d0, [sp]
 800c87e:	9801      	ldr	r0, [sp, #4]
 800c880:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c884:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c888:	0fc0      	lsrs	r0, r0, #31
 800c88a:	b002      	add	sp, #8
 800c88c:	4770      	bx	lr
	...

0800c890 <__ieee754_sqrt>:
 800c890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	4a68      	ldr	r2, [pc, #416]	@ (800ca38 <__ieee754_sqrt+0x1a8>)
 800c896:	ec55 4b10 	vmov	r4, r5, d0
 800c89a:	43aa      	bics	r2, r5
 800c89c:	462b      	mov	r3, r5
 800c89e:	4621      	mov	r1, r4
 800c8a0:	d110      	bne.n	800c8c4 <__ieee754_sqrt+0x34>
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f7f3 fec6 	bl	8000638 <__aeabi_dmul>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fd0a 	bl	80002cc <__adddf3>
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	460d      	mov	r5, r1
 800c8bc:	ec45 4b10 	vmov	d0, r4, r5
 800c8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c4:	2d00      	cmp	r5, #0
 800c8c6:	dc0e      	bgt.n	800c8e6 <__ieee754_sqrt+0x56>
 800c8c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c8cc:	4322      	orrs	r2, r4
 800c8ce:	d0f5      	beq.n	800c8bc <__ieee754_sqrt+0x2c>
 800c8d0:	b19d      	cbz	r5, 800c8fa <__ieee754_sqrt+0x6a>
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f7f3 fcf6 	bl	80002c8 <__aeabi_dsub>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	f7f3 ffd4 	bl	800088c <__aeabi_ddiv>
 800c8e4:	e7e8      	b.n	800c8b8 <__ieee754_sqrt+0x28>
 800c8e6:	152a      	asrs	r2, r5, #20
 800c8e8:	d115      	bne.n	800c916 <__ieee754_sqrt+0x86>
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	e009      	b.n	800c902 <__ieee754_sqrt+0x72>
 800c8ee:	0acb      	lsrs	r3, r1, #11
 800c8f0:	3a15      	subs	r2, #21
 800c8f2:	0549      	lsls	r1, r1, #21
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d0fa      	beq.n	800c8ee <__ieee754_sqrt+0x5e>
 800c8f8:	e7f7      	b.n	800c8ea <__ieee754_sqrt+0x5a>
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	e7fa      	b.n	800c8f4 <__ieee754_sqrt+0x64>
 800c8fe:	005b      	lsls	r3, r3, #1
 800c900:	3001      	adds	r0, #1
 800c902:	02dc      	lsls	r4, r3, #11
 800c904:	d5fb      	bpl.n	800c8fe <__ieee754_sqrt+0x6e>
 800c906:	1e44      	subs	r4, r0, #1
 800c908:	1b12      	subs	r2, r2, r4
 800c90a:	f1c0 0420 	rsb	r4, r0, #32
 800c90e:	fa21 f404 	lsr.w	r4, r1, r4
 800c912:	4323      	orrs	r3, r4
 800c914:	4081      	lsls	r1, r0
 800c916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c91a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c91e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c922:	07d2      	lsls	r2, r2, #31
 800c924:	bf5c      	itt	pl
 800c926:	005b      	lslpl	r3, r3, #1
 800c928:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c92c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c930:	bf58      	it	pl
 800c932:	0049      	lslpl	r1, r1, #1
 800c934:	2600      	movs	r6, #0
 800c936:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c93a:	106d      	asrs	r5, r5, #1
 800c93c:	0049      	lsls	r1, r1, #1
 800c93e:	2016      	movs	r0, #22
 800c940:	4632      	mov	r2, r6
 800c942:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c946:	1917      	adds	r7, r2, r4
 800c948:	429f      	cmp	r7, r3
 800c94a:	bfde      	ittt	le
 800c94c:	193a      	addle	r2, r7, r4
 800c94e:	1bdb      	suble	r3, r3, r7
 800c950:	1936      	addle	r6, r6, r4
 800c952:	0fcf      	lsrs	r7, r1, #31
 800c954:	3801      	subs	r0, #1
 800c956:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c95a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c95e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c962:	d1f0      	bne.n	800c946 <__ieee754_sqrt+0xb6>
 800c964:	4604      	mov	r4, r0
 800c966:	2720      	movs	r7, #32
 800c968:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c96c:	429a      	cmp	r2, r3
 800c96e:	eb00 0e0c 	add.w	lr, r0, ip
 800c972:	db02      	blt.n	800c97a <__ieee754_sqrt+0xea>
 800c974:	d113      	bne.n	800c99e <__ieee754_sqrt+0x10e>
 800c976:	458e      	cmp	lr, r1
 800c978:	d811      	bhi.n	800c99e <__ieee754_sqrt+0x10e>
 800c97a:	f1be 0f00 	cmp.w	lr, #0
 800c97e:	eb0e 000c 	add.w	r0, lr, ip
 800c982:	da42      	bge.n	800ca0a <__ieee754_sqrt+0x17a>
 800c984:	2800      	cmp	r0, #0
 800c986:	db40      	blt.n	800ca0a <__ieee754_sqrt+0x17a>
 800c988:	f102 0801 	add.w	r8, r2, #1
 800c98c:	1a9b      	subs	r3, r3, r2
 800c98e:	458e      	cmp	lr, r1
 800c990:	bf88      	it	hi
 800c992:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c996:	eba1 010e 	sub.w	r1, r1, lr
 800c99a:	4464      	add	r4, ip
 800c99c:	4642      	mov	r2, r8
 800c99e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c9a2:	3f01      	subs	r7, #1
 800c9a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c9a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c9ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c9b0:	d1dc      	bne.n	800c96c <__ieee754_sqrt+0xdc>
 800c9b2:	4319      	orrs	r1, r3
 800c9b4:	d01b      	beq.n	800c9ee <__ieee754_sqrt+0x15e>
 800c9b6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ca3c <__ieee754_sqrt+0x1ac>
 800c9ba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ca40 <__ieee754_sqrt+0x1b0>
 800c9be:	e9da 0100 	ldrd	r0, r1, [sl]
 800c9c2:	e9db 2300 	ldrd	r2, r3, [fp]
 800c9c6:	f7f3 fc7f 	bl	80002c8 <__aeabi_dsub>
 800c9ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	f7f4 f8ab 	bl	8000b30 <__aeabi_dcmple>
 800c9da:	b140      	cbz	r0, 800c9ee <__ieee754_sqrt+0x15e>
 800c9dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c9e0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c9e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c9e8:	d111      	bne.n	800ca0e <__ieee754_sqrt+0x17e>
 800c9ea:	3601      	adds	r6, #1
 800c9ec:	463c      	mov	r4, r7
 800c9ee:	1072      	asrs	r2, r6, #1
 800c9f0:	0863      	lsrs	r3, r4, #1
 800c9f2:	07f1      	lsls	r1, r6, #31
 800c9f4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c9f8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c9fc:	bf48      	it	mi
 800c9fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ca02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ca06:	4618      	mov	r0, r3
 800ca08:	e756      	b.n	800c8b8 <__ieee754_sqrt+0x28>
 800ca0a:	4690      	mov	r8, r2
 800ca0c:	e7be      	b.n	800c98c <__ieee754_sqrt+0xfc>
 800ca0e:	f7f3 fc5d 	bl	80002cc <__adddf3>
 800ca12:	e9da 8900 	ldrd	r8, r9, [sl]
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f4 f87d 	bl	8000b1c <__aeabi_dcmplt>
 800ca22:	b120      	cbz	r0, 800ca2e <__ieee754_sqrt+0x19e>
 800ca24:	1ca0      	adds	r0, r4, #2
 800ca26:	bf08      	it	eq
 800ca28:	3601      	addeq	r6, #1
 800ca2a:	3402      	adds	r4, #2
 800ca2c:	e7df      	b.n	800c9ee <__ieee754_sqrt+0x15e>
 800ca2e:	1c63      	adds	r3, r4, #1
 800ca30:	f023 0401 	bic.w	r4, r3, #1
 800ca34:	e7db      	b.n	800c9ee <__ieee754_sqrt+0x15e>
 800ca36:	bf00      	nop
 800ca38:	7ff00000 	.word	0x7ff00000
 800ca3c:	20000280 	.word	0x20000280
 800ca40:	20000278 	.word	0x20000278
 800ca44:	00000000 	.word	0x00000000

0800ca48 <__ieee754_atan2>:
 800ca48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca4c:	ec57 6b11 	vmov	r6, r7, d1
 800ca50:	4273      	negs	r3, r6
 800ca52:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800cbd0 <__ieee754_atan2+0x188>
 800ca56:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ca5a:	4333      	orrs	r3, r6
 800ca5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ca60:	4543      	cmp	r3, r8
 800ca62:	ec51 0b10 	vmov	r0, r1, d0
 800ca66:	4635      	mov	r5, r6
 800ca68:	d809      	bhi.n	800ca7e <__ieee754_atan2+0x36>
 800ca6a:	4244      	negs	r4, r0
 800ca6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ca70:	4304      	orrs	r4, r0
 800ca72:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ca76:	4544      	cmp	r4, r8
 800ca78:	468e      	mov	lr, r1
 800ca7a:	4681      	mov	r9, r0
 800ca7c:	d907      	bls.n	800ca8e <__ieee754_atan2+0x46>
 800ca7e:	4632      	mov	r2, r6
 800ca80:	463b      	mov	r3, r7
 800ca82:	f7f3 fc23 	bl	80002cc <__adddf3>
 800ca86:	ec41 0b10 	vmov	d0, r0, r1
 800ca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca8e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ca92:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ca96:	4334      	orrs	r4, r6
 800ca98:	d103      	bne.n	800caa2 <__ieee754_atan2+0x5a>
 800ca9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca9e:	f7ff bd4b 	b.w	800c538 <atan>
 800caa2:	17bc      	asrs	r4, r7, #30
 800caa4:	f004 0402 	and.w	r4, r4, #2
 800caa8:	ea53 0909 	orrs.w	r9, r3, r9
 800caac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800cab0:	d107      	bne.n	800cac2 <__ieee754_atan2+0x7a>
 800cab2:	2c02      	cmp	r4, #2
 800cab4:	d05f      	beq.n	800cb76 <__ieee754_atan2+0x12e>
 800cab6:	2c03      	cmp	r4, #3
 800cab8:	d1e5      	bne.n	800ca86 <__ieee754_atan2+0x3e>
 800caba:	a141      	add	r1, pc, #260	@ (adr r1, 800cbc0 <__ieee754_atan2+0x178>)
 800cabc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac0:	e7e1      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cac2:	4315      	orrs	r5, r2
 800cac4:	d106      	bne.n	800cad4 <__ieee754_atan2+0x8c>
 800cac6:	f1be 0f00 	cmp.w	lr, #0
 800caca:	da5f      	bge.n	800cb8c <__ieee754_atan2+0x144>
 800cacc:	a13e      	add	r1, pc, #248	@ (adr r1, 800cbc8 <__ieee754_atan2+0x180>)
 800cace:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad2:	e7d8      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cad4:	4542      	cmp	r2, r8
 800cad6:	d10f      	bne.n	800caf8 <__ieee754_atan2+0xb0>
 800cad8:	4293      	cmp	r3, r2
 800cada:	f104 34ff 	add.w	r4, r4, #4294967295
 800cade:	d107      	bne.n	800caf0 <__ieee754_atan2+0xa8>
 800cae0:	2c02      	cmp	r4, #2
 800cae2:	d84c      	bhi.n	800cb7e <__ieee754_atan2+0x136>
 800cae4:	4b34      	ldr	r3, [pc, #208]	@ (800cbb8 <__ieee754_atan2+0x170>)
 800cae6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800caea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800caee:	e7ca      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800caf0:	2c02      	cmp	r4, #2
 800caf2:	d848      	bhi.n	800cb86 <__ieee754_atan2+0x13e>
 800caf4:	4b31      	ldr	r3, [pc, #196]	@ (800cbbc <__ieee754_atan2+0x174>)
 800caf6:	e7f6      	b.n	800cae6 <__ieee754_atan2+0x9e>
 800caf8:	4543      	cmp	r3, r8
 800cafa:	d0e4      	beq.n	800cac6 <__ieee754_atan2+0x7e>
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800cb02:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb06:	da1e      	bge.n	800cb46 <__ieee754_atan2+0xfe>
 800cb08:	2f00      	cmp	r7, #0
 800cb0a:	da01      	bge.n	800cb10 <__ieee754_atan2+0xc8>
 800cb0c:	323c      	adds	r2, #60	@ 0x3c
 800cb0e:	db1e      	blt.n	800cb4e <__ieee754_atan2+0x106>
 800cb10:	4632      	mov	r2, r6
 800cb12:	463b      	mov	r3, r7
 800cb14:	f7f3 feba 	bl	800088c <__aeabi_ddiv>
 800cb18:	ec41 0b10 	vmov	d0, r0, r1
 800cb1c:	f7ff fea4 	bl	800c868 <fabs>
 800cb20:	f7ff fd0a 	bl	800c538 <atan>
 800cb24:	ec51 0b10 	vmov	r0, r1, d0
 800cb28:	2c01      	cmp	r4, #1
 800cb2a:	d013      	beq.n	800cb54 <__ieee754_atan2+0x10c>
 800cb2c:	2c02      	cmp	r4, #2
 800cb2e:	d015      	beq.n	800cb5c <__ieee754_atan2+0x114>
 800cb30:	2c00      	cmp	r4, #0
 800cb32:	d0a8      	beq.n	800ca86 <__ieee754_atan2+0x3e>
 800cb34:	a318      	add	r3, pc, #96	@ (adr r3, 800cb98 <__ieee754_atan2+0x150>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	f7f3 fbc5 	bl	80002c8 <__aeabi_dsub>
 800cb3e:	a318      	add	r3, pc, #96	@ (adr r3, 800cba0 <__ieee754_atan2+0x158>)
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	e014      	b.n	800cb70 <__ieee754_atan2+0x128>
 800cb46:	a118      	add	r1, pc, #96	@ (adr r1, 800cba8 <__ieee754_atan2+0x160>)
 800cb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb4c:	e7ec      	b.n	800cb28 <__ieee754_atan2+0xe0>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	e7e9      	b.n	800cb28 <__ieee754_atan2+0xe0>
 800cb54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb58:	4619      	mov	r1, r3
 800cb5a:	e794      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cb5c:	a30e      	add	r3, pc, #56	@ (adr r3, 800cb98 <__ieee754_atan2+0x150>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	f7f3 fbb1 	bl	80002c8 <__aeabi_dsub>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	a10d      	add	r1, pc, #52	@ (adr r1, 800cba0 <__ieee754_atan2+0x158>)
 800cb6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb70:	f7f3 fbaa 	bl	80002c8 <__aeabi_dsub>
 800cb74:	e787      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cb76:	a10a      	add	r1, pc, #40	@ (adr r1, 800cba0 <__ieee754_atan2+0x158>)
 800cb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb7c:	e783      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cb7e:	a10c      	add	r1, pc, #48	@ (adr r1, 800cbb0 <__ieee754_atan2+0x168>)
 800cb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb84:	e77f      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cb86:	2000      	movs	r0, #0
 800cb88:	2100      	movs	r1, #0
 800cb8a:	e77c      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cb8c:	a106      	add	r1, pc, #24	@ (adr r1, 800cba8 <__ieee754_atan2+0x160>)
 800cb8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb92:	e778      	b.n	800ca86 <__ieee754_atan2+0x3e>
 800cb94:	f3af 8000 	nop.w
 800cb98:	33145c07 	.word	0x33145c07
 800cb9c:	3ca1a626 	.word	0x3ca1a626
 800cba0:	54442d18 	.word	0x54442d18
 800cba4:	400921fb 	.word	0x400921fb
 800cba8:	54442d18 	.word	0x54442d18
 800cbac:	3ff921fb 	.word	0x3ff921fb
 800cbb0:	54442d18 	.word	0x54442d18
 800cbb4:	3fe921fb 	.word	0x3fe921fb
 800cbb8:	0800e7c8 	.word	0x0800e7c8
 800cbbc:	0800e7b0 	.word	0x0800e7b0
 800cbc0:	54442d18 	.word	0x54442d18
 800cbc4:	c00921fb 	.word	0xc00921fb
 800cbc8:	54442d18 	.word	0x54442d18
 800cbcc:	bff921fb 	.word	0xbff921fb
 800cbd0:	7ff00000 	.word	0x7ff00000
 800cbd4:	00000000 	.word	0x00000000

0800cbd8 <__ieee754_pow>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	b091      	sub	sp, #68	@ 0x44
 800cbde:	ed8d 1b00 	vstr	d1, [sp]
 800cbe2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800cbe6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800cbea:	ea5a 0001 	orrs.w	r0, sl, r1
 800cbee:	ec57 6b10 	vmov	r6, r7, d0
 800cbf2:	d113      	bne.n	800cc1c <__ieee754_pow+0x44>
 800cbf4:	19b3      	adds	r3, r6, r6
 800cbf6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800cbfa:	4152      	adcs	r2, r2
 800cbfc:	4298      	cmp	r0, r3
 800cbfe:	4b98      	ldr	r3, [pc, #608]	@ (800ce60 <__ieee754_pow+0x288>)
 800cc00:	4193      	sbcs	r3, r2
 800cc02:	f080 84ea 	bcs.w	800d5da <__ieee754_pow+0xa02>
 800cc06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	f7f3 fb5d 	bl	80002cc <__adddf3>
 800cc12:	ec41 0b10 	vmov	d0, r0, r1
 800cc16:	b011      	add	sp, #68	@ 0x44
 800cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1c:	4a91      	ldr	r2, [pc, #580]	@ (800ce64 <__ieee754_pow+0x28c>)
 800cc1e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cc22:	4590      	cmp	r8, r2
 800cc24:	463d      	mov	r5, r7
 800cc26:	4633      	mov	r3, r6
 800cc28:	d806      	bhi.n	800cc38 <__ieee754_pow+0x60>
 800cc2a:	d101      	bne.n	800cc30 <__ieee754_pow+0x58>
 800cc2c:	2e00      	cmp	r6, #0
 800cc2e:	d1ea      	bne.n	800cc06 <__ieee754_pow+0x2e>
 800cc30:	4592      	cmp	sl, r2
 800cc32:	d801      	bhi.n	800cc38 <__ieee754_pow+0x60>
 800cc34:	d10e      	bne.n	800cc54 <__ieee754_pow+0x7c>
 800cc36:	b169      	cbz	r1, 800cc54 <__ieee754_pow+0x7c>
 800cc38:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800cc3c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800cc40:	431d      	orrs	r5, r3
 800cc42:	d1e0      	bne.n	800cc06 <__ieee754_pow+0x2e>
 800cc44:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cc48:	18db      	adds	r3, r3, r3
 800cc4a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800cc4e:	4152      	adcs	r2, r2
 800cc50:	429d      	cmp	r5, r3
 800cc52:	e7d4      	b.n	800cbfe <__ieee754_pow+0x26>
 800cc54:	2d00      	cmp	r5, #0
 800cc56:	46c3      	mov	fp, r8
 800cc58:	da3a      	bge.n	800ccd0 <__ieee754_pow+0xf8>
 800cc5a:	4a83      	ldr	r2, [pc, #524]	@ (800ce68 <__ieee754_pow+0x290>)
 800cc5c:	4592      	cmp	sl, r2
 800cc5e:	d84d      	bhi.n	800ccfc <__ieee754_pow+0x124>
 800cc60:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cc64:	4592      	cmp	sl, r2
 800cc66:	f240 84c7 	bls.w	800d5f8 <__ieee754_pow+0xa20>
 800cc6a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800cc6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cc72:	2a14      	cmp	r2, #20
 800cc74:	dd0f      	ble.n	800cc96 <__ieee754_pow+0xbe>
 800cc76:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cc7a:	fa21 f402 	lsr.w	r4, r1, r2
 800cc7e:	fa04 f202 	lsl.w	r2, r4, r2
 800cc82:	428a      	cmp	r2, r1
 800cc84:	f040 84b8 	bne.w	800d5f8 <__ieee754_pow+0xa20>
 800cc88:	f004 0401 	and.w	r4, r4, #1
 800cc8c:	f1c4 0402 	rsb	r4, r4, #2
 800cc90:	2900      	cmp	r1, #0
 800cc92:	d158      	bne.n	800cd46 <__ieee754_pow+0x16e>
 800cc94:	e00e      	b.n	800ccb4 <__ieee754_pow+0xdc>
 800cc96:	2900      	cmp	r1, #0
 800cc98:	d154      	bne.n	800cd44 <__ieee754_pow+0x16c>
 800cc9a:	f1c2 0214 	rsb	r2, r2, #20
 800cc9e:	fa4a f402 	asr.w	r4, sl, r2
 800cca2:	fa04 f202 	lsl.w	r2, r4, r2
 800cca6:	4552      	cmp	r2, sl
 800cca8:	f040 84a3 	bne.w	800d5f2 <__ieee754_pow+0xa1a>
 800ccac:	f004 0401 	and.w	r4, r4, #1
 800ccb0:	f1c4 0402 	rsb	r4, r4, #2
 800ccb4:	4a6d      	ldr	r2, [pc, #436]	@ (800ce6c <__ieee754_pow+0x294>)
 800ccb6:	4592      	cmp	sl, r2
 800ccb8:	d12e      	bne.n	800cd18 <__ieee754_pow+0x140>
 800ccba:	f1b9 0f00 	cmp.w	r9, #0
 800ccbe:	f280 8494 	bge.w	800d5ea <__ieee754_pow+0xa12>
 800ccc2:	496a      	ldr	r1, [pc, #424]	@ (800ce6c <__ieee754_pow+0x294>)
 800ccc4:	4632      	mov	r2, r6
 800ccc6:	463b      	mov	r3, r7
 800ccc8:	2000      	movs	r0, #0
 800ccca:	f7f3 fddf 	bl	800088c <__aeabi_ddiv>
 800ccce:	e7a0      	b.n	800cc12 <__ieee754_pow+0x3a>
 800ccd0:	2400      	movs	r4, #0
 800ccd2:	bbc1      	cbnz	r1, 800cd46 <__ieee754_pow+0x16e>
 800ccd4:	4a63      	ldr	r2, [pc, #396]	@ (800ce64 <__ieee754_pow+0x28c>)
 800ccd6:	4592      	cmp	sl, r2
 800ccd8:	d1ec      	bne.n	800ccb4 <__ieee754_pow+0xdc>
 800ccda:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ccde:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800cce2:	431a      	orrs	r2, r3
 800cce4:	f000 8479 	beq.w	800d5da <__ieee754_pow+0xa02>
 800cce8:	4b61      	ldr	r3, [pc, #388]	@ (800ce70 <__ieee754_pow+0x298>)
 800ccea:	4598      	cmp	r8, r3
 800ccec:	d908      	bls.n	800cd00 <__ieee754_pow+0x128>
 800ccee:	f1b9 0f00 	cmp.w	r9, #0
 800ccf2:	f2c0 8476 	blt.w	800d5e2 <__ieee754_pow+0xa0a>
 800ccf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccfa:	e78a      	b.n	800cc12 <__ieee754_pow+0x3a>
 800ccfc:	2402      	movs	r4, #2
 800ccfe:	e7e8      	b.n	800ccd2 <__ieee754_pow+0xfa>
 800cd00:	f1b9 0f00 	cmp.w	r9, #0
 800cd04:	f04f 0000 	mov.w	r0, #0
 800cd08:	f04f 0100 	mov.w	r1, #0
 800cd0c:	da81      	bge.n	800cc12 <__ieee754_pow+0x3a>
 800cd0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cd12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cd16:	e77c      	b.n	800cc12 <__ieee754_pow+0x3a>
 800cd18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800cd1c:	d106      	bne.n	800cd2c <__ieee754_pow+0x154>
 800cd1e:	4632      	mov	r2, r6
 800cd20:	463b      	mov	r3, r7
 800cd22:	4630      	mov	r0, r6
 800cd24:	4639      	mov	r1, r7
 800cd26:	f7f3 fc87 	bl	8000638 <__aeabi_dmul>
 800cd2a:	e772      	b.n	800cc12 <__ieee754_pow+0x3a>
 800cd2c:	4a51      	ldr	r2, [pc, #324]	@ (800ce74 <__ieee754_pow+0x29c>)
 800cd2e:	4591      	cmp	r9, r2
 800cd30:	d109      	bne.n	800cd46 <__ieee754_pow+0x16e>
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	db07      	blt.n	800cd46 <__ieee754_pow+0x16e>
 800cd36:	ec47 6b10 	vmov	d0, r6, r7
 800cd3a:	b011      	add	sp, #68	@ 0x44
 800cd3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	f7ff bda6 	b.w	800c890 <__ieee754_sqrt>
 800cd44:	2400      	movs	r4, #0
 800cd46:	ec47 6b10 	vmov	d0, r6, r7
 800cd4a:	9302      	str	r3, [sp, #8]
 800cd4c:	f7ff fd8c 	bl	800c868 <fabs>
 800cd50:	9b02      	ldr	r3, [sp, #8]
 800cd52:	ec51 0b10 	vmov	r0, r1, d0
 800cd56:	bb53      	cbnz	r3, 800cdae <__ieee754_pow+0x1d6>
 800cd58:	4b44      	ldr	r3, [pc, #272]	@ (800ce6c <__ieee754_pow+0x294>)
 800cd5a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d002      	beq.n	800cd68 <__ieee754_pow+0x190>
 800cd62:	f1b8 0f00 	cmp.w	r8, #0
 800cd66:	d122      	bne.n	800cdae <__ieee754_pow+0x1d6>
 800cd68:	f1b9 0f00 	cmp.w	r9, #0
 800cd6c:	da05      	bge.n	800cd7a <__ieee754_pow+0x1a2>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	2000      	movs	r0, #0
 800cd74:	493d      	ldr	r1, [pc, #244]	@ (800ce6c <__ieee754_pow+0x294>)
 800cd76:	f7f3 fd89 	bl	800088c <__aeabi_ddiv>
 800cd7a:	2d00      	cmp	r5, #0
 800cd7c:	f6bf af49 	bge.w	800cc12 <__ieee754_pow+0x3a>
 800cd80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800cd84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800cd88:	ea58 0804 	orrs.w	r8, r8, r4
 800cd8c:	d108      	bne.n	800cda0 <__ieee754_pow+0x1c8>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4610      	mov	r0, r2
 800cd94:	4619      	mov	r1, r3
 800cd96:	f7f3 fa97 	bl	80002c8 <__aeabi_dsub>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	e794      	b.n	800ccca <__ieee754_pow+0xf2>
 800cda0:	2c01      	cmp	r4, #1
 800cda2:	f47f af36 	bne.w	800cc12 <__ieee754_pow+0x3a>
 800cda6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdaa:	4619      	mov	r1, r3
 800cdac:	e731      	b.n	800cc12 <__ieee754_pow+0x3a>
 800cdae:	0feb      	lsrs	r3, r5, #31
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	ea53 0204 	orrs.w	r2, r3, r4
 800cdb6:	d102      	bne.n	800cdbe <__ieee754_pow+0x1e6>
 800cdb8:	4632      	mov	r2, r6
 800cdba:	463b      	mov	r3, r7
 800cdbc:	e7e9      	b.n	800cd92 <__ieee754_pow+0x1ba>
 800cdbe:	3c01      	subs	r4, #1
 800cdc0:	431c      	orrs	r4, r3
 800cdc2:	d016      	beq.n	800cdf2 <__ieee754_pow+0x21a>
 800cdc4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ce50 <__ieee754_pow+0x278>
 800cdc8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800cdcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdd0:	f240 8112 	bls.w	800cff8 <__ieee754_pow+0x420>
 800cdd4:	4b28      	ldr	r3, [pc, #160]	@ (800ce78 <__ieee754_pow+0x2a0>)
 800cdd6:	459a      	cmp	sl, r3
 800cdd8:	4b25      	ldr	r3, [pc, #148]	@ (800ce70 <__ieee754_pow+0x298>)
 800cdda:	d916      	bls.n	800ce0a <__ieee754_pow+0x232>
 800cddc:	4598      	cmp	r8, r3
 800cdde:	d80b      	bhi.n	800cdf8 <__ieee754_pow+0x220>
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	da0b      	bge.n	800cdfe <__ieee754_pow+0x226>
 800cde6:	2000      	movs	r0, #0
 800cde8:	b011      	add	sp, #68	@ 0x44
 800cdea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdee:	f000 bceb 	b.w	800d7c8 <__math_oflow>
 800cdf2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ce58 <__ieee754_pow+0x280>
 800cdf6:	e7e7      	b.n	800cdc8 <__ieee754_pow+0x1f0>
 800cdf8:	f1b9 0f00 	cmp.w	r9, #0
 800cdfc:	dcf3      	bgt.n	800cde6 <__ieee754_pow+0x20e>
 800cdfe:	2000      	movs	r0, #0
 800ce00:	b011      	add	sp, #68	@ 0x44
 800ce02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce06:	f000 bcd7 	b.w	800d7b8 <__math_uflow>
 800ce0a:	4598      	cmp	r8, r3
 800ce0c:	d20c      	bcs.n	800ce28 <__ieee754_pow+0x250>
 800ce0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce12:	2200      	movs	r2, #0
 800ce14:	2300      	movs	r3, #0
 800ce16:	f7f3 fe81 	bl	8000b1c <__aeabi_dcmplt>
 800ce1a:	3800      	subs	r0, #0
 800ce1c:	bf18      	it	ne
 800ce1e:	2001      	movne	r0, #1
 800ce20:	f1b9 0f00 	cmp.w	r9, #0
 800ce24:	daec      	bge.n	800ce00 <__ieee754_pow+0x228>
 800ce26:	e7df      	b.n	800cde8 <__ieee754_pow+0x210>
 800ce28:	4b10      	ldr	r3, [pc, #64]	@ (800ce6c <__ieee754_pow+0x294>)
 800ce2a:	4598      	cmp	r8, r3
 800ce2c:	f04f 0200 	mov.w	r2, #0
 800ce30:	d924      	bls.n	800ce7c <__ieee754_pow+0x2a4>
 800ce32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce36:	2300      	movs	r3, #0
 800ce38:	f7f3 fe70 	bl	8000b1c <__aeabi_dcmplt>
 800ce3c:	3800      	subs	r0, #0
 800ce3e:	bf18      	it	ne
 800ce40:	2001      	movne	r0, #1
 800ce42:	f1b9 0f00 	cmp.w	r9, #0
 800ce46:	dccf      	bgt.n	800cde8 <__ieee754_pow+0x210>
 800ce48:	e7da      	b.n	800ce00 <__ieee754_pow+0x228>
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w
 800ce50:	00000000 	.word	0x00000000
 800ce54:	3ff00000 	.word	0x3ff00000
 800ce58:	00000000 	.word	0x00000000
 800ce5c:	bff00000 	.word	0xbff00000
 800ce60:	fff00000 	.word	0xfff00000
 800ce64:	7ff00000 	.word	0x7ff00000
 800ce68:	433fffff 	.word	0x433fffff
 800ce6c:	3ff00000 	.word	0x3ff00000
 800ce70:	3fefffff 	.word	0x3fefffff
 800ce74:	3fe00000 	.word	0x3fe00000
 800ce78:	43f00000 	.word	0x43f00000
 800ce7c:	4b5a      	ldr	r3, [pc, #360]	@ (800cfe8 <__ieee754_pow+0x410>)
 800ce7e:	f7f3 fa23 	bl	80002c8 <__aeabi_dsub>
 800ce82:	a351      	add	r3, pc, #324	@ (adr r3, 800cfc8 <__ieee754_pow+0x3f0>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	4604      	mov	r4, r0
 800ce8a:	460d      	mov	r5, r1
 800ce8c:	f7f3 fbd4 	bl	8000638 <__aeabi_dmul>
 800ce90:	a34f      	add	r3, pc, #316	@ (adr r3, 800cfd0 <__ieee754_pow+0x3f8>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	4606      	mov	r6, r0
 800ce98:	460f      	mov	r7, r1
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7f3 fbcb 	bl	8000638 <__aeabi_dmul>
 800cea2:	4b52      	ldr	r3, [pc, #328]	@ (800cfec <__ieee754_pow+0x414>)
 800cea4:	4682      	mov	sl, r0
 800cea6:	468b      	mov	fp, r1
 800cea8:	2200      	movs	r2, #0
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4629      	mov	r1, r5
 800ceae:	f7f3 fbc3 	bl	8000638 <__aeabi_dmul>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	a148      	add	r1, pc, #288	@ (adr r1, 800cfd8 <__ieee754_pow+0x400>)
 800ceb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cebc:	f7f3 fa04 	bl	80002c8 <__aeabi_dsub>
 800cec0:	4622      	mov	r2, r4
 800cec2:	462b      	mov	r3, r5
 800cec4:	f7f3 fbb8 	bl	8000638 <__aeabi_dmul>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	2000      	movs	r0, #0
 800cece:	4948      	ldr	r1, [pc, #288]	@ (800cff0 <__ieee754_pow+0x418>)
 800ced0:	f7f3 f9fa 	bl	80002c8 <__aeabi_dsub>
 800ced4:	4622      	mov	r2, r4
 800ced6:	4680      	mov	r8, r0
 800ced8:	4689      	mov	r9, r1
 800ceda:	462b      	mov	r3, r5
 800cedc:	4620      	mov	r0, r4
 800cede:	4629      	mov	r1, r5
 800cee0:	f7f3 fbaa 	bl	8000638 <__aeabi_dmul>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4640      	mov	r0, r8
 800ceea:	4649      	mov	r1, r9
 800ceec:	f7f3 fba4 	bl	8000638 <__aeabi_dmul>
 800cef0:	a33b      	add	r3, pc, #236	@ (adr r3, 800cfe0 <__ieee754_pow+0x408>)
 800cef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef6:	f7f3 fb9f 	bl	8000638 <__aeabi_dmul>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	4650      	mov	r0, sl
 800cf00:	4659      	mov	r1, fp
 800cf02:	f7f3 f9e1 	bl	80002c8 <__aeabi_dsub>
 800cf06:	4602      	mov	r2, r0
 800cf08:	460b      	mov	r3, r1
 800cf0a:	4680      	mov	r8, r0
 800cf0c:	4689      	mov	r9, r1
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 f9db 	bl	80002cc <__adddf3>
 800cf16:	2400      	movs	r4, #0
 800cf18:	4632      	mov	r2, r6
 800cf1a:	463b      	mov	r3, r7
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	460d      	mov	r5, r1
 800cf20:	f7f3 f9d2 	bl	80002c8 <__aeabi_dsub>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	4640      	mov	r0, r8
 800cf2a:	4649      	mov	r1, r9
 800cf2c:	f7f3 f9cc 	bl	80002c8 <__aeabi_dsub>
 800cf30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cf40:	4606      	mov	r6, r0
 800cf42:	460f      	mov	r7, r1
 800cf44:	4652      	mov	r2, sl
 800cf46:	465b      	mov	r3, fp
 800cf48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf4c:	f7f3 f9bc 	bl	80002c8 <__aeabi_dsub>
 800cf50:	4622      	mov	r2, r4
 800cf52:	462b      	mov	r3, r5
 800cf54:	f7f3 fb70 	bl	8000638 <__aeabi_dmul>
 800cf58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf5c:	4680      	mov	r8, r0
 800cf5e:	4689      	mov	r9, r1
 800cf60:	4630      	mov	r0, r6
 800cf62:	4639      	mov	r1, r7
 800cf64:	f7f3 fb68 	bl	8000638 <__aeabi_dmul>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4640      	mov	r0, r8
 800cf6e:	4649      	mov	r1, r9
 800cf70:	f7f3 f9ac 	bl	80002cc <__adddf3>
 800cf74:	4652      	mov	r2, sl
 800cf76:	465b      	mov	r3, fp
 800cf78:	4606      	mov	r6, r0
 800cf7a:	460f      	mov	r7, r1
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	4629      	mov	r1, r5
 800cf80:	f7f3 fb5a 	bl	8000638 <__aeabi_dmul>
 800cf84:	460b      	mov	r3, r1
 800cf86:	4602      	mov	r2, r0
 800cf88:	4680      	mov	r8, r0
 800cf8a:	4689      	mov	r9, r1
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 f99c 	bl	80002cc <__adddf3>
 800cf94:	4b17      	ldr	r3, [pc, #92]	@ (800cff4 <__ieee754_pow+0x41c>)
 800cf96:	4299      	cmp	r1, r3
 800cf98:	4604      	mov	r4, r0
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	468a      	mov	sl, r1
 800cf9e:	468b      	mov	fp, r1
 800cfa0:	f340 82ef 	ble.w	800d582 <__ieee754_pow+0x9aa>
 800cfa4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800cfa8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800cfac:	4303      	orrs	r3, r0
 800cfae:	f000 81e8 	beq.w	800d382 <__ieee754_pow+0x7aa>
 800cfb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f7f3 fdaf 	bl	8000b1c <__aeabi_dcmplt>
 800cfbe:	3800      	subs	r0, #0
 800cfc0:	bf18      	it	ne
 800cfc2:	2001      	movne	r0, #1
 800cfc4:	e710      	b.n	800cde8 <__ieee754_pow+0x210>
 800cfc6:	bf00      	nop
 800cfc8:	60000000 	.word	0x60000000
 800cfcc:	3ff71547 	.word	0x3ff71547
 800cfd0:	f85ddf44 	.word	0xf85ddf44
 800cfd4:	3e54ae0b 	.word	0x3e54ae0b
 800cfd8:	55555555 	.word	0x55555555
 800cfdc:	3fd55555 	.word	0x3fd55555
 800cfe0:	652b82fe 	.word	0x652b82fe
 800cfe4:	3ff71547 	.word	0x3ff71547
 800cfe8:	3ff00000 	.word	0x3ff00000
 800cfec:	3fd00000 	.word	0x3fd00000
 800cff0:	3fe00000 	.word	0x3fe00000
 800cff4:	408fffff 	.word	0x408fffff
 800cff8:	4bd5      	ldr	r3, [pc, #852]	@ (800d350 <__ieee754_pow+0x778>)
 800cffa:	402b      	ands	r3, r5
 800cffc:	2200      	movs	r2, #0
 800cffe:	b92b      	cbnz	r3, 800d00c <__ieee754_pow+0x434>
 800d000:	4bd4      	ldr	r3, [pc, #848]	@ (800d354 <__ieee754_pow+0x77c>)
 800d002:	f7f3 fb19 	bl	8000638 <__aeabi_dmul>
 800d006:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d00a:	468b      	mov	fp, r1
 800d00c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d010:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d014:	4413      	add	r3, r2
 800d016:	930a      	str	r3, [sp, #40]	@ 0x28
 800d018:	4bcf      	ldr	r3, [pc, #828]	@ (800d358 <__ieee754_pow+0x780>)
 800d01a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d01e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d022:	459b      	cmp	fp, r3
 800d024:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d028:	dd08      	ble.n	800d03c <__ieee754_pow+0x464>
 800d02a:	4bcc      	ldr	r3, [pc, #816]	@ (800d35c <__ieee754_pow+0x784>)
 800d02c:	459b      	cmp	fp, r3
 800d02e:	f340 81a5 	ble.w	800d37c <__ieee754_pow+0x7a4>
 800d032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d034:	3301      	adds	r3, #1
 800d036:	930a      	str	r3, [sp, #40]	@ 0x28
 800d038:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d03c:	f04f 0a00 	mov.w	sl, #0
 800d040:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d046:	4bc6      	ldr	r3, [pc, #792]	@ (800d360 <__ieee754_pow+0x788>)
 800d048:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d04c:	ed93 7b00 	vldr	d7, [r3]
 800d050:	4629      	mov	r1, r5
 800d052:	ec53 2b17 	vmov	r2, r3, d7
 800d056:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d05a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d05e:	f7f3 f933 	bl	80002c8 <__aeabi_dsub>
 800d062:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d066:	4606      	mov	r6, r0
 800d068:	460f      	mov	r7, r1
 800d06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d06e:	f7f3 f92d 	bl	80002cc <__adddf3>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	2000      	movs	r0, #0
 800d078:	49ba      	ldr	r1, [pc, #744]	@ (800d364 <__ieee754_pow+0x78c>)
 800d07a:	f7f3 fc07 	bl	800088c <__aeabi_ddiv>
 800d07e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4630      	mov	r0, r6
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 fad5 	bl	8000638 <__aeabi_dmul>
 800d08e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d092:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d096:	106d      	asrs	r5, r5, #1
 800d098:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d09c:	f04f 0b00 	mov.w	fp, #0
 800d0a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d0a4:	4661      	mov	r1, ip
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d0ac:	4658      	mov	r0, fp
 800d0ae:	46e1      	mov	r9, ip
 800d0b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	f7f3 fabe 	bl	8000638 <__aeabi_dmul>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	f7f3 f900 	bl	80002c8 <__aeabi_dsub>
 800d0c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0cc:	4606      	mov	r6, r0
 800d0ce:	460f      	mov	r7, r1
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	f7f3 f8f8 	bl	80002c8 <__aeabi_dsub>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	460b      	mov	r3, r1
 800d0dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0e0:	f7f3 f8f2 	bl	80002c8 <__aeabi_dsub>
 800d0e4:	465a      	mov	r2, fp
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	f7f3 faa6 	bl	8000638 <__aeabi_dmul>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 f8e8 	bl	80002c8 <__aeabi_dsub>
 800d0f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d0fc:	f7f3 fa9c 	bl	8000638 <__aeabi_dmul>
 800d100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d104:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d108:	4610      	mov	r0, r2
 800d10a:	4619      	mov	r1, r3
 800d10c:	f7f3 fa94 	bl	8000638 <__aeabi_dmul>
 800d110:	a37d      	add	r3, pc, #500	@ (adr r3, 800d308 <__ieee754_pow+0x730>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	4604      	mov	r4, r0
 800d118:	460d      	mov	r5, r1
 800d11a:	f7f3 fa8d 	bl	8000638 <__aeabi_dmul>
 800d11e:	a37c      	add	r3, pc, #496	@ (adr r3, 800d310 <__ieee754_pow+0x738>)
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	f7f3 f8d2 	bl	80002cc <__adddf3>
 800d128:	4622      	mov	r2, r4
 800d12a:	462b      	mov	r3, r5
 800d12c:	f7f3 fa84 	bl	8000638 <__aeabi_dmul>
 800d130:	a379      	add	r3, pc, #484	@ (adr r3, 800d318 <__ieee754_pow+0x740>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 f8c9 	bl	80002cc <__adddf3>
 800d13a:	4622      	mov	r2, r4
 800d13c:	462b      	mov	r3, r5
 800d13e:	f7f3 fa7b 	bl	8000638 <__aeabi_dmul>
 800d142:	a377      	add	r3, pc, #476	@ (adr r3, 800d320 <__ieee754_pow+0x748>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 f8c0 	bl	80002cc <__adddf3>
 800d14c:	4622      	mov	r2, r4
 800d14e:	462b      	mov	r3, r5
 800d150:	f7f3 fa72 	bl	8000638 <__aeabi_dmul>
 800d154:	a374      	add	r3, pc, #464	@ (adr r3, 800d328 <__ieee754_pow+0x750>)
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	f7f3 f8b7 	bl	80002cc <__adddf3>
 800d15e:	4622      	mov	r2, r4
 800d160:	462b      	mov	r3, r5
 800d162:	f7f3 fa69 	bl	8000638 <__aeabi_dmul>
 800d166:	a372      	add	r3, pc, #456	@ (adr r3, 800d330 <__ieee754_pow+0x758>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f8ae 	bl	80002cc <__adddf3>
 800d170:	4622      	mov	r2, r4
 800d172:	4606      	mov	r6, r0
 800d174:	460f      	mov	r7, r1
 800d176:	462b      	mov	r3, r5
 800d178:	4620      	mov	r0, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	f7f3 fa5c 	bl	8000638 <__aeabi_dmul>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fa56 	bl	8000638 <__aeabi_dmul>
 800d18c:	465a      	mov	r2, fp
 800d18e:	4604      	mov	r4, r0
 800d190:	460d      	mov	r5, r1
 800d192:	464b      	mov	r3, r9
 800d194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d198:	f7f3 f898 	bl	80002cc <__adddf3>
 800d19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1a0:	f7f3 fa4a 	bl	8000638 <__aeabi_dmul>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	462b      	mov	r3, r5
 800d1a8:	f7f3 f890 	bl	80002cc <__adddf3>
 800d1ac:	465a      	mov	r2, fp
 800d1ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1b2:	464b      	mov	r3, r9
 800d1b4:	4658      	mov	r0, fp
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	f7f3 fa3e 	bl	8000638 <__aeabi_dmul>
 800d1bc:	4b6a      	ldr	r3, [pc, #424]	@ (800d368 <__ieee754_pow+0x790>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	460f      	mov	r7, r1
 800d1c4:	f7f3 f882 	bl	80002cc <__adddf3>
 800d1c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d1cc:	f7f3 f87e 	bl	80002cc <__adddf3>
 800d1d0:	46d8      	mov	r8, fp
 800d1d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d1d6:	460d      	mov	r5, r1
 800d1d8:	465a      	mov	r2, fp
 800d1da:	460b      	mov	r3, r1
 800d1dc:	4640      	mov	r0, r8
 800d1de:	4649      	mov	r1, r9
 800d1e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d1e4:	f7f3 fa28 	bl	8000638 <__aeabi_dmul>
 800d1e8:	465c      	mov	r4, fp
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4689      	mov	r9, r1
 800d1ee:	4b5e      	ldr	r3, [pc, #376]	@ (800d368 <__ieee754_pow+0x790>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	f7f3 f867 	bl	80002c8 <__aeabi_dsub>
 800d1fa:	4632      	mov	r2, r6
 800d1fc:	463b      	mov	r3, r7
 800d1fe:	f7f3 f863 	bl	80002c8 <__aeabi_dsub>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d20a:	f7f3 f85d 	bl	80002c8 <__aeabi_dsub>
 800d20e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d212:	f7f3 fa11 	bl	8000638 <__aeabi_dmul>
 800d216:	4622      	mov	r2, r4
 800d218:	4606      	mov	r6, r0
 800d21a:	460f      	mov	r7, r1
 800d21c:	462b      	mov	r3, r5
 800d21e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d222:	f7f3 fa09 	bl	8000638 <__aeabi_dmul>
 800d226:	4602      	mov	r2, r0
 800d228:	460b      	mov	r3, r1
 800d22a:	4630      	mov	r0, r6
 800d22c:	4639      	mov	r1, r7
 800d22e:	f7f3 f84d 	bl	80002cc <__adddf3>
 800d232:	4606      	mov	r6, r0
 800d234:	460f      	mov	r7, r1
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	4640      	mov	r0, r8
 800d23c:	4649      	mov	r1, r9
 800d23e:	f7f3 f845 	bl	80002cc <__adddf3>
 800d242:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d246:	a33c      	add	r3, pc, #240	@ (adr r3, 800d338 <__ieee754_pow+0x760>)
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	4658      	mov	r0, fp
 800d24e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d252:	460d      	mov	r5, r1
 800d254:	f7f3 f9f0 	bl	8000638 <__aeabi_dmul>
 800d258:	465c      	mov	r4, fp
 800d25a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d25e:	4642      	mov	r2, r8
 800d260:	464b      	mov	r3, r9
 800d262:	4620      	mov	r0, r4
 800d264:	4629      	mov	r1, r5
 800d266:	f7f3 f82f 	bl	80002c8 <__aeabi_dsub>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	4630      	mov	r0, r6
 800d270:	4639      	mov	r1, r7
 800d272:	f7f3 f829 	bl	80002c8 <__aeabi_dsub>
 800d276:	a332      	add	r3, pc, #200	@ (adr r3, 800d340 <__ieee754_pow+0x768>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	f7f3 f9dc 	bl	8000638 <__aeabi_dmul>
 800d280:	a331      	add	r3, pc, #196	@ (adr r3, 800d348 <__ieee754_pow+0x770>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	4606      	mov	r6, r0
 800d288:	460f      	mov	r7, r1
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f3 f9d3 	bl	8000638 <__aeabi_dmul>
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	4630      	mov	r0, r6
 800d298:	4639      	mov	r1, r7
 800d29a:	f7f3 f817 	bl	80002cc <__adddf3>
 800d29e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d2a0:	4b32      	ldr	r3, [pc, #200]	@ (800d36c <__ieee754_pow+0x794>)
 800d2a2:	4413      	add	r3, r2
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	f7f3 f810 	bl	80002cc <__adddf3>
 800d2ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d2b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d2b2:	f7f3 f957 	bl	8000564 <__aeabi_i2d>
 800d2b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d2b8:	4b2d      	ldr	r3, [pc, #180]	@ (800d370 <__ieee754_pow+0x798>)
 800d2ba:	4413      	add	r3, r2
 800d2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2c6:	460f      	mov	r7, r1
 800d2c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d2cc:	f7f2 fffe 	bl	80002cc <__adddf3>
 800d2d0:	4642      	mov	r2, r8
 800d2d2:	464b      	mov	r3, r9
 800d2d4:	f7f2 fffa 	bl	80002cc <__adddf3>
 800d2d8:	4632      	mov	r2, r6
 800d2da:	463b      	mov	r3, r7
 800d2dc:	f7f2 fff6 	bl	80002cc <__adddf3>
 800d2e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	463b      	mov	r3, r7
 800d2e8:	4658      	mov	r0, fp
 800d2ea:	460d      	mov	r5, r1
 800d2ec:	f7f2 ffec 	bl	80002c8 <__aeabi_dsub>
 800d2f0:	4642      	mov	r2, r8
 800d2f2:	464b      	mov	r3, r9
 800d2f4:	f7f2 ffe8 	bl	80002c8 <__aeabi_dsub>
 800d2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2fc:	f7f2 ffe4 	bl	80002c8 <__aeabi_dsub>
 800d300:	465c      	mov	r4, fp
 800d302:	4602      	mov	r2, r0
 800d304:	e036      	b.n	800d374 <__ieee754_pow+0x79c>
 800d306:	bf00      	nop
 800d308:	4a454eef 	.word	0x4a454eef
 800d30c:	3fca7e28 	.word	0x3fca7e28
 800d310:	93c9db65 	.word	0x93c9db65
 800d314:	3fcd864a 	.word	0x3fcd864a
 800d318:	a91d4101 	.word	0xa91d4101
 800d31c:	3fd17460 	.word	0x3fd17460
 800d320:	518f264d 	.word	0x518f264d
 800d324:	3fd55555 	.word	0x3fd55555
 800d328:	db6fabff 	.word	0xdb6fabff
 800d32c:	3fdb6db6 	.word	0x3fdb6db6
 800d330:	33333303 	.word	0x33333303
 800d334:	3fe33333 	.word	0x3fe33333
 800d338:	e0000000 	.word	0xe0000000
 800d33c:	3feec709 	.word	0x3feec709
 800d340:	dc3a03fd 	.word	0xdc3a03fd
 800d344:	3feec709 	.word	0x3feec709
 800d348:	145b01f5 	.word	0x145b01f5
 800d34c:	be3e2fe0 	.word	0xbe3e2fe0
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	43400000 	.word	0x43400000
 800d358:	0003988e 	.word	0x0003988e
 800d35c:	000bb679 	.word	0x000bb679
 800d360:	0800e800 	.word	0x0800e800
 800d364:	3ff00000 	.word	0x3ff00000
 800d368:	40080000 	.word	0x40080000
 800d36c:	0800e7e0 	.word	0x0800e7e0
 800d370:	0800e7f0 	.word	0x0800e7f0
 800d374:	460b      	mov	r3, r1
 800d376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d37a:	e5d7      	b.n	800cf2c <__ieee754_pow+0x354>
 800d37c:	f04f 0a01 	mov.w	sl, #1
 800d380:	e65e      	b.n	800d040 <__ieee754_pow+0x468>
 800d382:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d654 <__ieee754_pow+0xa7c>)
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	4630      	mov	r0, r6
 800d38a:	4639      	mov	r1, r7
 800d38c:	f7f2 ff9e 	bl	80002cc <__adddf3>
 800d390:	4642      	mov	r2, r8
 800d392:	e9cd 0100 	strd	r0, r1, [sp]
 800d396:	464b      	mov	r3, r9
 800d398:	4620      	mov	r0, r4
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7f2 ff94 	bl	80002c8 <__aeabi_dsub>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3a8:	f7f3 fbd6 	bl	8000b58 <__aeabi_dcmpgt>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	f47f ae00 	bne.w	800cfb2 <__ieee754_pow+0x3da>
 800d3b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d3b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d3ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d3be:	fa43 fa0a 	asr.w	sl, r3, sl
 800d3c2:	44da      	add	sl, fp
 800d3c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d3c8:	489d      	ldr	r0, [pc, #628]	@ (800d640 <__ieee754_pow+0xa68>)
 800d3ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d3ce:	4108      	asrs	r0, r1
 800d3d0:	ea00 030a 	and.w	r3, r0, sl
 800d3d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d3d8:	f1c1 0114 	rsb	r1, r1, #20
 800d3dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d3e0:	fa4a fa01 	asr.w	sl, sl, r1
 800d3e4:	f1bb 0f00 	cmp.w	fp, #0
 800d3e8:	4640      	mov	r0, r8
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	f04f 0200 	mov.w	r2, #0
 800d3f0:	bfb8      	it	lt
 800d3f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800d3f6:	f7f2 ff67 	bl	80002c8 <__aeabi_dsub>
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	4689      	mov	r9, r1
 800d3fe:	4632      	mov	r2, r6
 800d400:	463b      	mov	r3, r7
 800d402:	4640      	mov	r0, r8
 800d404:	4649      	mov	r1, r9
 800d406:	f7f2 ff61 	bl	80002cc <__adddf3>
 800d40a:	2400      	movs	r4, #0
 800d40c:	a37c      	add	r3, pc, #496	@ (adr r3, 800d600 <__ieee754_pow+0xa28>)
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	4620      	mov	r0, r4
 800d414:	460d      	mov	r5, r1
 800d416:	f7f3 f90f 	bl	8000638 <__aeabi_dmul>
 800d41a:	4642      	mov	r2, r8
 800d41c:	e9cd 0100 	strd	r0, r1, [sp]
 800d420:	464b      	mov	r3, r9
 800d422:	4620      	mov	r0, r4
 800d424:	4629      	mov	r1, r5
 800d426:	f7f2 ff4f 	bl	80002c8 <__aeabi_dsub>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4630      	mov	r0, r6
 800d430:	4639      	mov	r1, r7
 800d432:	f7f2 ff49 	bl	80002c8 <__aeabi_dsub>
 800d436:	a374      	add	r3, pc, #464	@ (adr r3, 800d608 <__ieee754_pow+0xa30>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f3 f8fc 	bl	8000638 <__aeabi_dmul>
 800d440:	a373      	add	r3, pc, #460	@ (adr r3, 800d610 <__ieee754_pow+0xa38>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	4680      	mov	r8, r0
 800d448:	4689      	mov	r9, r1
 800d44a:	4620      	mov	r0, r4
 800d44c:	4629      	mov	r1, r5
 800d44e:	f7f3 f8f3 	bl	8000638 <__aeabi_dmul>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4640      	mov	r0, r8
 800d458:	4649      	mov	r1, r9
 800d45a:	f7f2 ff37 	bl	80002cc <__adddf3>
 800d45e:	4604      	mov	r4, r0
 800d460:	460d      	mov	r5, r1
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d46a:	f7f2 ff2f 	bl	80002cc <__adddf3>
 800d46e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d472:	4680      	mov	r8, r0
 800d474:	4689      	mov	r9, r1
 800d476:	f7f2 ff27 	bl	80002c8 <__aeabi_dsub>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	4620      	mov	r0, r4
 800d480:	4629      	mov	r1, r5
 800d482:	f7f2 ff21 	bl	80002c8 <__aeabi_dsub>
 800d486:	4642      	mov	r2, r8
 800d488:	4606      	mov	r6, r0
 800d48a:	460f      	mov	r7, r1
 800d48c:	464b      	mov	r3, r9
 800d48e:	4640      	mov	r0, r8
 800d490:	4649      	mov	r1, r9
 800d492:	f7f3 f8d1 	bl	8000638 <__aeabi_dmul>
 800d496:	a360      	add	r3, pc, #384	@ (adr r3, 800d618 <__ieee754_pow+0xa40>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	4604      	mov	r4, r0
 800d49e:	460d      	mov	r5, r1
 800d4a0:	f7f3 f8ca 	bl	8000638 <__aeabi_dmul>
 800d4a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800d620 <__ieee754_pow+0xa48>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f2 ff0d 	bl	80002c8 <__aeabi_dsub>
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	f7f3 f8c1 	bl	8000638 <__aeabi_dmul>
 800d4b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800d628 <__ieee754_pow+0xa50>)
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	f7f2 ff06 	bl	80002cc <__adddf3>
 800d4c0:	4622      	mov	r2, r4
 800d4c2:	462b      	mov	r3, r5
 800d4c4:	f7f3 f8b8 	bl	8000638 <__aeabi_dmul>
 800d4c8:	a359      	add	r3, pc, #356	@ (adr r3, 800d630 <__ieee754_pow+0xa58>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	f7f2 fefb 	bl	80002c8 <__aeabi_dsub>
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	462b      	mov	r3, r5
 800d4d6:	f7f3 f8af 	bl	8000638 <__aeabi_dmul>
 800d4da:	a357      	add	r3, pc, #348	@ (adr r3, 800d638 <__ieee754_pow+0xa60>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	f7f2 fef4 	bl	80002cc <__adddf3>
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	462b      	mov	r3, r5
 800d4e8:	f7f3 f8a6 	bl	8000638 <__aeabi_dmul>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f7f2 fee8 	bl	80002c8 <__aeabi_dsub>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	460d      	mov	r5, r1
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	4640      	mov	r0, r8
 800d502:	4649      	mov	r1, r9
 800d504:	f7f3 f898 	bl	8000638 <__aeabi_dmul>
 800d508:	2200      	movs	r2, #0
 800d50a:	e9cd 0100 	strd	r0, r1, [sp]
 800d50e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d512:	4620      	mov	r0, r4
 800d514:	4629      	mov	r1, r5
 800d516:	f7f2 fed7 	bl	80002c8 <__aeabi_dsub>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d522:	f7f3 f9b3 	bl	800088c <__aeabi_ddiv>
 800d526:	4632      	mov	r2, r6
 800d528:	4604      	mov	r4, r0
 800d52a:	460d      	mov	r5, r1
 800d52c:	463b      	mov	r3, r7
 800d52e:	4640      	mov	r0, r8
 800d530:	4649      	mov	r1, r9
 800d532:	f7f3 f881 	bl	8000638 <__aeabi_dmul>
 800d536:	4632      	mov	r2, r6
 800d538:	463b      	mov	r3, r7
 800d53a:	f7f2 fec7 	bl	80002cc <__adddf3>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	4620      	mov	r0, r4
 800d544:	4629      	mov	r1, r5
 800d546:	f7f2 febf 	bl	80002c8 <__aeabi_dsub>
 800d54a:	4642      	mov	r2, r8
 800d54c:	464b      	mov	r3, r9
 800d54e:	f7f2 febb 	bl	80002c8 <__aeabi_dsub>
 800d552:	460b      	mov	r3, r1
 800d554:	4602      	mov	r2, r0
 800d556:	493b      	ldr	r1, [pc, #236]	@ (800d644 <__ieee754_pow+0xa6c>)
 800d558:	2000      	movs	r0, #0
 800d55a:	f7f2 feb5 	bl	80002c8 <__aeabi_dsub>
 800d55e:	ec41 0b10 	vmov	d0, r0, r1
 800d562:	ee10 3a90 	vmov	r3, s1
 800d566:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d56a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d56e:	da30      	bge.n	800d5d2 <__ieee754_pow+0x9fa>
 800d570:	4650      	mov	r0, sl
 800d572:	f000 f875 	bl	800d660 <scalbn>
 800d576:	ec51 0b10 	vmov	r0, r1, d0
 800d57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d57e:	f7ff bbd2 	b.w	800cd26 <__ieee754_pow+0x14e>
 800d582:	4c31      	ldr	r4, [pc, #196]	@ (800d648 <__ieee754_pow+0xa70>)
 800d584:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d588:	42a3      	cmp	r3, r4
 800d58a:	d91a      	bls.n	800d5c2 <__ieee754_pow+0x9ea>
 800d58c:	4b2f      	ldr	r3, [pc, #188]	@ (800d64c <__ieee754_pow+0xa74>)
 800d58e:	440b      	add	r3, r1
 800d590:	4303      	orrs	r3, r0
 800d592:	d009      	beq.n	800d5a8 <__ieee754_pow+0x9d0>
 800d594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d598:	2200      	movs	r2, #0
 800d59a:	2300      	movs	r3, #0
 800d59c:	f7f3 fabe 	bl	8000b1c <__aeabi_dcmplt>
 800d5a0:	3800      	subs	r0, #0
 800d5a2:	bf18      	it	ne
 800d5a4:	2001      	movne	r0, #1
 800d5a6:	e42b      	b.n	800ce00 <__ieee754_pow+0x228>
 800d5a8:	4642      	mov	r2, r8
 800d5aa:	464b      	mov	r3, r9
 800d5ac:	f7f2 fe8c 	bl	80002c8 <__aeabi_dsub>
 800d5b0:	4632      	mov	r2, r6
 800d5b2:	463b      	mov	r3, r7
 800d5b4:	f7f3 fac6 	bl	8000b44 <__aeabi_dcmpge>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d1eb      	bne.n	800d594 <__ieee754_pow+0x9bc>
 800d5bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d65c <__ieee754_pow+0xa84>
 800d5c0:	e6f7      	b.n	800d3b2 <__ieee754_pow+0x7da>
 800d5c2:	469a      	mov	sl, r3
 800d5c4:	4b22      	ldr	r3, [pc, #136]	@ (800d650 <__ieee754_pow+0xa78>)
 800d5c6:	459a      	cmp	sl, r3
 800d5c8:	f63f aef3 	bhi.w	800d3b2 <__ieee754_pow+0x7da>
 800d5cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d5d0:	e715      	b.n	800d3fe <__ieee754_pow+0x826>
 800d5d2:	ec51 0b10 	vmov	r0, r1, d0
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	e7cf      	b.n	800d57a <__ieee754_pow+0x9a2>
 800d5da:	491a      	ldr	r1, [pc, #104]	@ (800d644 <__ieee754_pow+0xa6c>)
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f7ff bb18 	b.w	800cc12 <__ieee754_pow+0x3a>
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	f7ff bb14 	b.w	800cc12 <__ieee754_pow+0x3a>
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	f7ff bb10 	b.w	800cc12 <__ieee754_pow+0x3a>
 800d5f2:	460c      	mov	r4, r1
 800d5f4:	f7ff bb5e 	b.w	800ccb4 <__ieee754_pow+0xdc>
 800d5f8:	2400      	movs	r4, #0
 800d5fa:	f7ff bb49 	b.w	800cc90 <__ieee754_pow+0xb8>
 800d5fe:	bf00      	nop
 800d600:	00000000 	.word	0x00000000
 800d604:	3fe62e43 	.word	0x3fe62e43
 800d608:	fefa39ef 	.word	0xfefa39ef
 800d60c:	3fe62e42 	.word	0x3fe62e42
 800d610:	0ca86c39 	.word	0x0ca86c39
 800d614:	be205c61 	.word	0xbe205c61
 800d618:	72bea4d0 	.word	0x72bea4d0
 800d61c:	3e663769 	.word	0x3e663769
 800d620:	c5d26bf1 	.word	0xc5d26bf1
 800d624:	3ebbbd41 	.word	0x3ebbbd41
 800d628:	af25de2c 	.word	0xaf25de2c
 800d62c:	3f11566a 	.word	0x3f11566a
 800d630:	16bebd93 	.word	0x16bebd93
 800d634:	3f66c16c 	.word	0x3f66c16c
 800d638:	5555553e 	.word	0x5555553e
 800d63c:	3fc55555 	.word	0x3fc55555
 800d640:	fff00000 	.word	0xfff00000
 800d644:	3ff00000 	.word	0x3ff00000
 800d648:	4090cbff 	.word	0x4090cbff
 800d64c:	3f6f3400 	.word	0x3f6f3400
 800d650:	3fe00000 	.word	0x3fe00000
 800d654:	652b82fe 	.word	0x652b82fe
 800d658:	3c971547 	.word	0x3c971547
 800d65c:	4090cc00 	.word	0x4090cc00

0800d660 <scalbn>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	ec55 4b10 	vmov	r4, r5, d0
 800d666:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d66a:	4606      	mov	r6, r0
 800d66c:	462b      	mov	r3, r5
 800d66e:	b991      	cbnz	r1, 800d696 <scalbn+0x36>
 800d670:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d674:	4323      	orrs	r3, r4
 800d676:	d03d      	beq.n	800d6f4 <scalbn+0x94>
 800d678:	4b35      	ldr	r3, [pc, #212]	@ (800d750 <scalbn+0xf0>)
 800d67a:	4620      	mov	r0, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	2200      	movs	r2, #0
 800d680:	f7f2 ffda 	bl	8000638 <__aeabi_dmul>
 800d684:	4b33      	ldr	r3, [pc, #204]	@ (800d754 <scalbn+0xf4>)
 800d686:	429e      	cmp	r6, r3
 800d688:	4604      	mov	r4, r0
 800d68a:	460d      	mov	r5, r1
 800d68c:	da0f      	bge.n	800d6ae <scalbn+0x4e>
 800d68e:	a328      	add	r3, pc, #160	@ (adr r3, 800d730 <scalbn+0xd0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	e01e      	b.n	800d6d4 <scalbn+0x74>
 800d696:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d69a:	4291      	cmp	r1, r2
 800d69c:	d10b      	bne.n	800d6b6 <scalbn+0x56>
 800d69e:	4622      	mov	r2, r4
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	f7f2 fe12 	bl	80002cc <__adddf3>
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	e022      	b.n	800d6f4 <scalbn+0x94>
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6b4:	3936      	subs	r1, #54	@ 0x36
 800d6b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d6ba:	4296      	cmp	r6, r2
 800d6bc:	dd0d      	ble.n	800d6da <scalbn+0x7a>
 800d6be:	2d00      	cmp	r5, #0
 800d6c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800d738 <scalbn+0xd8>)
 800d6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c6:	da02      	bge.n	800d6ce <scalbn+0x6e>
 800d6c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800d740 <scalbn+0xe0>)
 800d6ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800d738 <scalbn+0xd8>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f7f2 ffb0 	bl	8000638 <__aeabi_dmul>
 800d6d8:	e7e6      	b.n	800d6a8 <scalbn+0x48>
 800d6da:	1872      	adds	r2, r6, r1
 800d6dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d6e0:	428a      	cmp	r2, r1
 800d6e2:	dcec      	bgt.n	800d6be <scalbn+0x5e>
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	dd08      	ble.n	800d6fa <scalbn+0x9a>
 800d6e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d6ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d6f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d6f4:	ec45 4b10 	vmov	d0, r4, r5
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d6fe:	da08      	bge.n	800d712 <scalbn+0xb2>
 800d700:	2d00      	cmp	r5, #0
 800d702:	a10b      	add	r1, pc, #44	@ (adr r1, 800d730 <scalbn+0xd0>)
 800d704:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d708:	dac1      	bge.n	800d68e <scalbn+0x2e>
 800d70a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d748 <scalbn+0xe8>)
 800d70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d710:	e7bd      	b.n	800d68e <scalbn+0x2e>
 800d712:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d716:	3236      	adds	r2, #54	@ 0x36
 800d718:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d71c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d720:	4620      	mov	r0, r4
 800d722:	4b0d      	ldr	r3, [pc, #52]	@ (800d758 <scalbn+0xf8>)
 800d724:	4629      	mov	r1, r5
 800d726:	2200      	movs	r2, #0
 800d728:	e7d4      	b.n	800d6d4 <scalbn+0x74>
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
 800d730:	c2f8f359 	.word	0xc2f8f359
 800d734:	01a56e1f 	.word	0x01a56e1f
 800d738:	8800759c 	.word	0x8800759c
 800d73c:	7e37e43c 	.word	0x7e37e43c
 800d740:	8800759c 	.word	0x8800759c
 800d744:	fe37e43c 	.word	0xfe37e43c
 800d748:	c2f8f359 	.word	0xc2f8f359
 800d74c:	81a56e1f 	.word	0x81a56e1f
 800d750:	43500000 	.word	0x43500000
 800d754:	ffff3cb0 	.word	0xffff3cb0
 800d758:	3c900000 	.word	0x3c900000

0800d75c <with_errno>:
 800d75c:	b510      	push	{r4, lr}
 800d75e:	ed2d 8b02 	vpush	{d8}
 800d762:	eeb0 8a40 	vmov.f32	s16, s0
 800d766:	eef0 8a60 	vmov.f32	s17, s1
 800d76a:	4604      	mov	r4, r0
 800d76c:	f7fc fdcc 	bl	800a308 <__errno>
 800d770:	eeb0 0a48 	vmov.f32	s0, s16
 800d774:	eef0 0a68 	vmov.f32	s1, s17
 800d778:	ecbd 8b02 	vpop	{d8}
 800d77c:	6004      	str	r4, [r0, #0]
 800d77e:	bd10      	pop	{r4, pc}

0800d780 <xflow>:
 800d780:	4603      	mov	r3, r0
 800d782:	b507      	push	{r0, r1, r2, lr}
 800d784:	ec51 0b10 	vmov	r0, r1, d0
 800d788:	b183      	cbz	r3, 800d7ac <xflow+0x2c>
 800d78a:	4602      	mov	r2, r0
 800d78c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d790:	e9cd 2300 	strd	r2, r3, [sp]
 800d794:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d798:	f7f2 ff4e 	bl	8000638 <__aeabi_dmul>
 800d79c:	ec41 0b10 	vmov	d0, r0, r1
 800d7a0:	2022      	movs	r0, #34	@ 0x22
 800d7a2:	b003      	add	sp, #12
 800d7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7a8:	f7ff bfd8 	b.w	800d75c <with_errno>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	e7ee      	b.n	800d790 <xflow+0x10>
 800d7b2:	0000      	movs	r0, r0
 800d7b4:	0000      	movs	r0, r0
	...

0800d7b8 <__math_uflow>:
 800d7b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7c0 <__math_uflow+0x8>
 800d7bc:	f7ff bfe0 	b.w	800d780 <xflow>
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	10000000 	.word	0x10000000

0800d7c8 <__math_oflow>:
 800d7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7d0 <__math_oflow+0x8>
 800d7cc:	f7ff bfd8 	b.w	800d780 <xflow>
 800d7d0:	00000000 	.word	0x00000000
 800d7d4:	70000000 	.word	0x70000000

0800d7d8 <_init>:
 800d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7da:	bf00      	nop
 800d7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7de:	bc08      	pop	{r3}
 800d7e0:	469e      	mov	lr, r3
 800d7e2:	4770      	bx	lr

0800d7e4 <_fini>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	bf00      	nop
 800d7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ea:	bc08      	pop	{r3}
 800d7ec:	469e      	mov	lr, r3
 800d7ee:	4770      	bx	lr
