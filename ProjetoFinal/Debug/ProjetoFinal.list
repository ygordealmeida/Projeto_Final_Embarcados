
ProjetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  0800b590  0800b590  0000c590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c558  0800c558  0000e280  2**0
                  CONTENTS
  4 .ARM          00000008  0800c558  0800c558  0000d558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c560  0800c560  0000e280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c560  0800c560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c564  0800c564  0000d564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800c568  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000280  0800c7e8  0000e280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a9c  0800c7e8  0000ea9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b28  00000000  00000000  0000e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c5  00000000  00000000  00023dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  000273a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f29  00000000  00000000  00028720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260ba  00000000  00000000  00029649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0d1  00000000  00000000  0004f703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ff2  00000000  00000000  0006a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d7c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000634c  00000000  00000000  0014d80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00153b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b574 	.word	0x0800b574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	0800b574 	.word	0x0800b574

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <MX_ADC1_Init+0x9c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f5a:	4a17      	ldr	r2, [pc, #92]	@ (8000fb8 <MX_ADC1_Init+0xa0>)
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f78:	480d      	ldr	r0, [pc, #52]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f7a:	f002 f8a5 	bl	80030c8 <HAL_ADC_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f84:	f000 fd06 	bl	8001994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <MX_ADC1_Init+0x98>)
 8000f9a:	f002 f9b9 	bl	8003310 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fa4:	f000 fcf6 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000029c 	.word	0x2000029c
 8000fb4:	40012000 	.word	0x40012000
 8000fb8:	0f000001 	.word	0x0f000001

08000fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <HAL_ADC_MspInit+0x7c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d127      	bne.n	800102e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <HAL_ADC_MspInit+0x80>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	4a15      	ldr	r2, [pc, #84]	@ (800103c <HAL_ADC_MspInit+0x80>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fee:	4b13      	ldr	r3, [pc, #76]	@ (800103c <HAL_ADC_MspInit+0x80>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_ADC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <HAL_ADC_MspInit+0x80>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_ADC_MspInit+0x80>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_ADC_MspInit+0x84>)
 800102a:	f003 f84f 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012000 	.word	0x40012000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_DMA_Init+0x3c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <MX_DMA_Init+0x3c>)
 8001054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_DMA_Init+0x3c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	200b      	movs	r0, #11
 800106c:	f002 fc59 	bl	8003922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001070:	200b      	movs	r0, #11
 8001072:	f002 fc72 	bl	800395a <HAL_NVIC_EnableIRQ>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a30      	ldr	r2, [pc, #192]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a29      	ldr	r2, [pc, #164]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a22      	ldr	r2, [pc, #136]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_GPIO_Init+0xe0>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_GPIO_Init+0xe0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	4816      	ldr	r0, [pc, #88]	@ (8001168 <MX_GPIO_Init+0xe4>)
 8001110:	f003 f970 	bl	80043f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4810      	ldr	r0, [pc, #64]	@ (800116c <MX_GPIO_Init+0xe8>)
 800112c:	f002 ffce 	bl	80040cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4808      	ldr	r0, [pc, #32]	@ (8001168 <MX_GPIO_Init+0xe4>)
 8001148:	f002 ffc0 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2028      	movs	r0, #40	@ 0x28
 8001152:	f002 fbe6 	bl	8003922 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	f002 fbff 	bl	800395a <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020800 	.word	0x40020800

08001170 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 2 */
void EXTI15_10_IRQHandler(void){
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001174:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001178:	f003 f956 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_I2C1_Init+0x50>)
 8001186:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <MX_I2C1_Init+0x54>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_I2C1_Init+0x50>)
 800118c:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <MX_I2C1_Init+0x58>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_I2C1_Init+0x50>)
 800119e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011be:	f003 f94b 	bl	8004458 <HAL_I2C_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c8:	f000 fbe4 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200002e4 	.word	0x200002e4
 80011d4:	40005400 	.word	0x40005400
 80011d8:	00061a80 	.word	0x00061a80

080011dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <HAL_I2C_MspInit+0xe0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d15a      	bne.n	80012b4 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <HAL_I2C_MspInit+0xe4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a2e      	ldr	r2, [pc, #184]	@ (80012c0 <HAL_I2C_MspInit+0xe4>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <HAL_I2C_MspInit+0xe4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122c:	2304      	movs	r3, #4
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4823      	ldr	r0, [pc, #140]	@ (80012c4 <HAL_I2C_MspInit+0xe8>)
 8001238:	f002 ff48 	bl	80040cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <HAL_I2C_MspInit+0xe4>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <HAL_I2C_MspInit+0xe4>)
 8001246:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <HAL_I2C_MspInit+0xe4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <HAL_I2C_MspInit+0xf0>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 8001260:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 8001274:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 800129a:	f002 fb79 	bl	8003990 <HAL_DMA_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80012a4:	f000 fb76 	bl	8001994 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 80012ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ae:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_I2C_MspInit+0xec>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	20000338 	.word	0x20000338
 80012cc:	40026010 	.word	0x40026010

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d4:	f001 fe62 	bl	8002f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d8:	f000 f83a 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012dc:	f7ff fed2 	bl	8001084 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e0:	f7ff feb0 	bl	8001044 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012e4:	f001 f9bc 	bl	8002660 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012e8:	f7ff ff4a 	bl	8001180 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012ec:	f001 f8f4 	bl	80024d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012f0:	f7ff fe12 	bl	8000f18 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012f4:	f001 f850 	bl	8002398 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init ();
 80012f8:	f001 fa4e 	bl	8002798 <SSD1306_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012fc:	2100      	movs	r1, #0
 80012fe:	480f      	ldr	r0, [pc, #60]	@ (800133c <main+0x6c>)
 8001300:	f005 fd52 	bl	8006da8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8001304:	480e      	ldr	r0, [pc, #56]	@ (8001340 <main+0x70>)
 8001306:	f001 ff23 	bl	8003150 <HAL_ADC_Start>
  while (MPU6050_Init(&hi2c1) == 1);
 800130a:	bf00      	nop
 800130c:	480d      	ldr	r0, [pc, #52]	@ (8001344 <main+0x74>)
 800130e:	f000 fb47 	bl	80019a0 <MPU6050_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d0f9      	beq.n	800130c <main+0x3c>
  System_Start();
 8001318:	f000 f9d0 	bl	80016bc <System_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800131c:	480a      	ldr	r0, [pc, #40]	@ (8001348 <main+0x78>)
 800131e:	f005 fc79 	bl	8006c14 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flagit==1){
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <main+0x7c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <main+0x5e>
		  Update_Screen();
 800132a:	f000 fa31 	bl	8001790 <Update_Screen>
	  }
	  Pos_Servo();
 800132e:	f000 fae3 	bl	80018f8 <Pos_Servo>
	  HAL_Delay(10);
 8001332:	200a      	movs	r0, #10
 8001334:	f001 fea4 	bl	8003080 <HAL_Delay>
	  if(flagit==1){
 8001338:	e7f3      	b.n	8001322 <main+0x52>
 800133a:	bf00      	nop
 800133c:	2000046c 	.word	0x2000046c
 8001340:	2000029c 	.word	0x2000029c
 8001344:	200002e4 	.word	0x200002e4
 8001348:	200004b4 	.word	0x200004b4
 800134c:	20000451 	.word	0x20000451

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	@ 0x50
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2234      	movs	r2, #52	@ 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fccb 	bl	8008cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <SystemClock_Config+0xd4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a29      	ldr	r2, [pc, #164]	@ (8001424 <SystemClock_Config+0xd4>)
 800137e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <SystemClock_Config+0xd4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001390:	2300      	movs	r3, #0
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <SystemClock_Config+0xd8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800139c:	4a22      	ldr	r2, [pc, #136]	@ (8001428 <SystemClock_Config+0xd8>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <SystemClock_Config+0xd8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013c4:	2310      	movs	r3, #16
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ce:	2304      	movs	r3, #4
 80013d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 f92a 	bl	8006638 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013ea:	f000 fad3 	bl	8001994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fdca 	bl	8005fa4 <HAL_RCC_ClockConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001416:	f000 fabd 	bl	8001994 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	@ 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <Screens>:

/* USER CODE BEGIN 4 */


void Screens(){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	if(tela ==0){
 8001430:	4b94      	ldr	r3, [pc, #592]	@ (8001684 <Screens+0x258>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d17e      	bne.n	8001536 <Screens+0x10a>

		SSD1306_Clear();
 8001438:	f001 fd0d 	bl	8002e56 <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f001 fb14 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("Giroscopio:",&Font_7x10, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	4990      	ldr	r1, [pc, #576]	@ (8001688 <Screens+0x25c>)
 8001448:	4890      	ldr	r0, [pc, #576]	@ (800168c <Screens+0x260>)
 800144a:	f001 fba3 	bl	8002b94 <SSD1306_Puts>

		SSD1306_GotoXY (0,17);
 800144e:	2111      	movs	r1, #17
 8001450:	2000      	movs	r0, #0
 8001452:	f001 fb0b 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	498b      	ldr	r1, [pc, #556]	@ (8001688 <Screens+0x25c>)
 800145a:	488d      	ldr	r0, [pc, #564]	@ (8001690 <Screens+0x264>)
 800145c:	f001 fb9a 	bl	8002b94 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 18, 2, SSD1306_COLOR_WHITE);
 8001460:	2301      	movs	r3, #1
 8001462:	2202      	movs	r2, #2
 8001464:	2112      	movs	r1, #18
 8001466:	204a      	movs	r0, #74	@ 0x4a
 8001468:	f001 fbb9 	bl	8002bde <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,17);
 800146c:	2111      	movs	r1, #17
 800146e:	204d      	movs	r0, #77	@ 0x4d
 8001470:	f001 fafc 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 8001474:	2201      	movs	r2, #1
 8001476:	4984      	ldr	r1, [pc, #528]	@ (8001688 <Screens+0x25c>)
 8001478:	4886      	ldr	r0, [pc, #536]	@ (8001694 <Screens+0x268>)
 800147a:	f001 fb8b 	bl	8002b94 <SSD1306_Puts>


		SSD1306_GotoXY (0,29);
 800147e:	211d      	movs	r1, #29
 8001480:	2000      	movs	r0, #0
 8001482:	f001 faf3 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	497f      	ldr	r1, [pc, #508]	@ (8001688 <Screens+0x25c>)
 800148a:	4883      	ldr	r0, [pc, #524]	@ (8001698 <Screens+0x26c>)
 800148c:	f001 fb82 	bl	8002b94 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 30, 2, SSD1306_COLOR_WHITE);
 8001490:	2301      	movs	r3, #1
 8001492:	2202      	movs	r2, #2
 8001494:	211e      	movs	r1, #30
 8001496:	204a      	movs	r0, #74	@ 0x4a
 8001498:	f001 fba1 	bl	8002bde <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,29);
 800149c:	211d      	movs	r1, #29
 800149e:	204d      	movs	r0, #77	@ 0x4d
 80014a0:	f001 fae4 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 80014a4:	2201      	movs	r2, #1
 80014a6:	4978      	ldr	r1, [pc, #480]	@ (8001688 <Screens+0x25c>)
 80014a8:	487a      	ldr	r0, [pc, #488]	@ (8001694 <Screens+0x268>)
 80014aa:	f001 fb73 	bl	8002b94 <SSD1306_Puts>

		SSD1306_GotoXY (0,41);
 80014ae:	2129      	movs	r1, #41	@ 0x29
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fadb 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("Z:",&Font_7x10, 1);
 80014b6:	2201      	movs	r2, #1
 80014b8:	4973      	ldr	r1, [pc, #460]	@ (8001688 <Screens+0x25c>)
 80014ba:	4878      	ldr	r0, [pc, #480]	@ (800169c <Screens+0x270>)
 80014bc:	f001 fb6a 	bl	8002b94 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 42, 2, SSD1306_COLOR_WHITE);
 80014c0:	2301      	movs	r3, #1
 80014c2:	2202      	movs	r2, #2
 80014c4:	212a      	movs	r1, #42	@ 0x2a
 80014c6:	204a      	movs	r0, #74	@ 0x4a
 80014c8:	f001 fb89 	bl	8002bde <SSD1306_DrawCircle>
		SSD1306_GotoXY (77,41);
 80014cc:	2129      	movs	r1, #41	@ 0x29
 80014ce:	204d      	movs	r0, #77	@ 0x4d
 80014d0:	f001 facc 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("/s",&Font_7x10, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	496c      	ldr	r1, [pc, #432]	@ (8001688 <Screens+0x25c>)
 80014d8:	486e      	ldr	r0, [pc, #440]	@ (8001694 <Screens+0x268>)
 80014da:	f001 fb5b 	bl	8002b94 <SSD1306_Puts>

		SSD1306_GotoXY (0,53);
 80014de:	2135      	movs	r1, #53	@ 0x35
 80014e0:	2000      	movs	r0, #0
 80014e2:	f001 fac3 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("Tmp:22",&Font_7x10, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	4967      	ldr	r1, [pc, #412]	@ (8001688 <Screens+0x25c>)
 80014ea:	486d      	ldr	r0, [pc, #436]	@ (80016a0 <Screens+0x274>)
 80014ec:	f001 fb52 	bl	8002b94 <SSD1306_Puts>
		SSD1306_DrawCircle(53-7, 53, 2, SSD1306_COLOR_WHITE);
 80014f0:	2301      	movs	r3, #1
 80014f2:	2202      	movs	r2, #2
 80014f4:	2135      	movs	r1, #53	@ 0x35
 80014f6:	202e      	movs	r0, #46	@ 0x2e
 80014f8:	f001 fb71 	bl	8002bde <SSD1306_DrawCircle>
		SSD1306_GotoXY (56-7,53);
 80014fc:	2135      	movs	r1, #53	@ 0x35
 80014fe:	2031      	movs	r0, #49	@ 0x31
 8001500:	f001 fab4 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("C",&Font_7x10, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	4960      	ldr	r1, [pc, #384]	@ (8001688 <Screens+0x25c>)
 8001508:	4866      	ldr	r0, [pc, #408]	@ (80016a4 <Screens+0x278>)
 800150a:	f001 fb43 	bl	8002b94 <SSD1306_Puts>

		SSD1306_GotoXY (64,53);
 800150e:	2135      	movs	r1, #53	@ 0x35
 8001510:	2040      	movs	r0, #64	@ 0x40
 8001512:	f001 faab 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("P:103",&Font_7x10, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	495b      	ldr	r1, [pc, #364]	@ (8001688 <Screens+0x25c>)
 800151a:	4863      	ldr	r0, [pc, #396]	@ (80016a8 <Screens+0x27c>)
 800151c:	f001 fb3a 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (99,53);
 8001520:	2135      	movs	r1, #53	@ 0x35
 8001522:	2063      	movs	r0, #99	@ 0x63
 8001524:	f001 faa2 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("kPa",&Font_7x10, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	4957      	ldr	r1, [pc, #348]	@ (8001688 <Screens+0x25c>)
 800152c:	485f      	ldr	r0, [pc, #380]	@ (80016ac <Screens+0x280>)
 800152e:	f001 fb31 	bl	8002b94 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001532:	f001 f9f5 	bl	8002920 <SSD1306_UpdateScreen>
	}

	if(tela ==1){
 8001536:	4b53      	ldr	r3, [pc, #332]	@ (8001684 <Screens+0x258>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d16c      	bne.n	8001618 <Screens+0x1ec>
			SSD1306_Clear();
 800153e:	f001 fc8a 	bl	8002e56 <SSD1306_Clear>
			SSD1306_GotoXY (0,0);
 8001542:	2100      	movs	r1, #0
 8001544:	2000      	movs	r0, #0
 8001546:	f001 fa91 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("Acelerometro:",&Font_7x10, 1);
 800154a:	2201      	movs	r2, #1
 800154c:	494e      	ldr	r1, [pc, #312]	@ (8001688 <Screens+0x25c>)
 800154e:	4858      	ldr	r0, [pc, #352]	@ (80016b0 <Screens+0x284>)
 8001550:	f001 fb20 	bl	8002b94 <SSD1306_Puts>

			SSD1306_GotoXY (0,17);
 8001554:	2111      	movs	r1, #17
 8001556:	2000      	movs	r0, #0
 8001558:	f001 fa88 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("X:",&Font_7x10, 1);
 800155c:	2201      	movs	r2, #1
 800155e:	494a      	ldr	r1, [pc, #296]	@ (8001688 <Screens+0x25c>)
 8001560:	484b      	ldr	r0, [pc, #300]	@ (8001690 <Screens+0x264>)
 8001562:	f001 fb17 	bl	8002b94 <SSD1306_Puts>
			SSD1306_GotoXY (65,17);
 8001566:	2111      	movs	r1, #17
 8001568:	2041      	movs	r0, #65	@ 0x41
 800156a:	f001 fa7f 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("g",&Font_7x10, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	4945      	ldr	r1, [pc, #276]	@ (8001688 <Screens+0x25c>)
 8001572:	4850      	ldr	r0, [pc, #320]	@ (80016b4 <Screens+0x288>)
 8001574:	f001 fb0e 	bl	8002b94 <SSD1306_Puts>


			SSD1306_GotoXY (0,29);
 8001578:	211d      	movs	r1, #29
 800157a:	2000      	movs	r0, #0
 800157c:	f001 fa76 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("Y:",&Font_7x10, 1);
 8001580:	2201      	movs	r2, #1
 8001582:	4941      	ldr	r1, [pc, #260]	@ (8001688 <Screens+0x25c>)
 8001584:	4844      	ldr	r0, [pc, #272]	@ (8001698 <Screens+0x26c>)
 8001586:	f001 fb05 	bl	8002b94 <SSD1306_Puts>
			SSD1306_GotoXY (65,29);
 800158a:	211d      	movs	r1, #29
 800158c:	2041      	movs	r0, #65	@ 0x41
 800158e:	f001 fa6d 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("g",&Font_7x10, 1);
 8001592:	2201      	movs	r2, #1
 8001594:	493c      	ldr	r1, [pc, #240]	@ (8001688 <Screens+0x25c>)
 8001596:	4847      	ldr	r0, [pc, #284]	@ (80016b4 <Screens+0x288>)
 8001598:	f001 fafc 	bl	8002b94 <SSD1306_Puts>

			SSD1306_GotoXY (0,41);
 800159c:	2129      	movs	r1, #41	@ 0x29
 800159e:	2000      	movs	r0, #0
 80015a0:	f001 fa64 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("Z:",&Font_7x10, 1);
 80015a4:	2201      	movs	r2, #1
 80015a6:	4938      	ldr	r1, [pc, #224]	@ (8001688 <Screens+0x25c>)
 80015a8:	483c      	ldr	r0, [pc, #240]	@ (800169c <Screens+0x270>)
 80015aa:	f001 faf3 	bl	8002b94 <SSD1306_Puts>
			SSD1306_GotoXY (65,41);
 80015ae:	2129      	movs	r1, #41	@ 0x29
 80015b0:	2041      	movs	r0, #65	@ 0x41
 80015b2:	f001 fa5b 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("g",&Font_7x10, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	4933      	ldr	r1, [pc, #204]	@ (8001688 <Screens+0x25c>)
 80015ba:	483e      	ldr	r0, [pc, #248]	@ (80016b4 <Screens+0x288>)
 80015bc:	f001 faea 	bl	8002b94 <SSD1306_Puts>

			SSD1306_GotoXY (0,53);
 80015c0:	2135      	movs	r1, #53	@ 0x35
 80015c2:	2000      	movs	r0, #0
 80015c4:	f001 fa52 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("Tmp:22",&Font_7x10, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	492f      	ldr	r1, [pc, #188]	@ (8001688 <Screens+0x25c>)
 80015cc:	4834      	ldr	r0, [pc, #208]	@ (80016a0 <Screens+0x274>)
 80015ce:	f001 fae1 	bl	8002b94 <SSD1306_Puts>
			SSD1306_DrawCircle(46, 54, 2, SSD1306_COLOR_WHITE);
 80015d2:	2301      	movs	r3, #1
 80015d4:	2202      	movs	r2, #2
 80015d6:	2136      	movs	r1, #54	@ 0x36
 80015d8:	202e      	movs	r0, #46	@ 0x2e
 80015da:	f001 fb00 	bl	8002bde <SSD1306_DrawCircle>
			SSD1306_GotoXY (49,53);
 80015de:	2135      	movs	r1, #53	@ 0x35
 80015e0:	2031      	movs	r0, #49	@ 0x31
 80015e2:	f001 fa43 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("C",&Font_7x10, 1);
 80015e6:	2201      	movs	r2, #1
 80015e8:	4927      	ldr	r1, [pc, #156]	@ (8001688 <Screens+0x25c>)
 80015ea:	482e      	ldr	r0, [pc, #184]	@ (80016a4 <Screens+0x278>)
 80015ec:	f001 fad2 	bl	8002b94 <SSD1306_Puts>

			SSD1306_GotoXY (64,53);
 80015f0:	2135      	movs	r1, #53	@ 0x35
 80015f2:	2040      	movs	r0, #64	@ 0x40
 80015f4:	f001 fa3a 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("P:103",&Font_7x10, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	4923      	ldr	r1, [pc, #140]	@ (8001688 <Screens+0x25c>)
 80015fc:	482a      	ldr	r0, [pc, #168]	@ (80016a8 <Screens+0x27c>)
 80015fe:	f001 fac9 	bl	8002b94 <SSD1306_Puts>
			SSD1306_GotoXY (99,53);
 8001602:	2135      	movs	r1, #53	@ 0x35
 8001604:	2063      	movs	r0, #99	@ 0x63
 8001606:	f001 fa31 	bl	8002a6c <SSD1306_GotoXY>
			SSD1306_Puts ("kPa",&Font_7x10, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	491e      	ldr	r1, [pc, #120]	@ (8001688 <Screens+0x25c>)
 800160e:	4827      	ldr	r0, [pc, #156]	@ (80016ac <Screens+0x280>)
 8001610:	f001 fac0 	bl	8002b94 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001614:	f001 f984 	bl	8002920 <SSD1306_UpdateScreen>
		}

	if(tela ==2){
 8001618:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <Screens+0x258>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d12e      	bne.n	800167e <Screens+0x252>
		SSD1306_Clear();
 8001620:	f001 fc19 	bl	8002e56 <SSD1306_Clear>
		SSD1306_GotoXY (0,0);
 8001624:	2100      	movs	r1, #0
 8001626:	2000      	movs	r0, #0
 8001628:	f001 fa20 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("Inclinacao:",&Font_7x10, 1);
 800162c:	2201      	movs	r2, #1
 800162e:	4916      	ldr	r1, [pc, #88]	@ (8001688 <Screens+0x25c>)
 8001630:	4821      	ldr	r0, [pc, #132]	@ (80016b8 <Screens+0x28c>)
 8001632:	f001 faaf 	bl	8002b94 <SSD1306_Puts>


		SSD1306_GotoXY (0,17);
 8001636:	2111      	movs	r1, #17
 8001638:	2000      	movs	r0, #0
 800163a:	f001 fa17 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("X:",&Font_7x10, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	4911      	ldr	r1, [pc, #68]	@ (8001688 <Screens+0x25c>)
 8001642:	4813      	ldr	r0, [pc, #76]	@ (8001690 <Screens+0x264>)
 8001644:	f001 faa6 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (65,17);
 8001648:	2111      	movs	r1, #17
 800164a:	2041      	movs	r0, #65	@ 0x41
 800164c:	f001 fa0e 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_DrawCircle(74, 18, 2, SSD1306_COLOR_WHITE);
 8001650:	2301      	movs	r3, #1
 8001652:	2202      	movs	r2, #2
 8001654:	2112      	movs	r1, #18
 8001656:	204a      	movs	r0, #74	@ 0x4a
 8001658:	f001 fac1 	bl	8002bde <SSD1306_DrawCircle>

		SSD1306_GotoXY (0,29);
 800165c:	211d      	movs	r1, #29
 800165e:	2000      	movs	r0, #0
 8001660:	f001 fa04 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts ("Y:",&Font_7x10, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	4908      	ldr	r1, [pc, #32]	@ (8001688 <Screens+0x25c>)
 8001668:	480b      	ldr	r0, [pc, #44]	@ (8001698 <Screens+0x26c>)
 800166a:	f001 fa93 	bl	8002b94 <SSD1306_Puts>
		SSD1306_DrawCircle(74, 30, 2, SSD1306_COLOR_WHITE);
 800166e:	2301      	movs	r3, #1
 8001670:	2202      	movs	r2, #2
 8001672:	211e      	movs	r1, #30
 8001674:	204a      	movs	r0, #74	@ 0x4a
 8001676:	f001 fab2 	bl	8002bde <SSD1306_DrawCircle>
		SSD1306_UpdateScreen();
 800167a:	f001 f951 	bl	8002920 <SSD1306_UpdateScreen>
	}


}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000450 	.word	0x20000450
 8001688:	20000094 	.word	0x20000094
 800168c:	0800b590 	.word	0x0800b590
 8001690:	0800b59c 	.word	0x0800b59c
 8001694:	0800b5a0 	.word	0x0800b5a0
 8001698:	0800b5a4 	.word	0x0800b5a4
 800169c:	0800b5a8 	.word	0x0800b5a8
 80016a0:	0800b5ac 	.word	0x0800b5ac
 80016a4:	0800b5b4 	.word	0x0800b5b4
 80016a8:	0800b5b8 	.word	0x0800b5b8
 80016ac:	0800b5c0 	.word	0x0800b5c0
 80016b0:	0800b5c4 	.word	0x0800b5c4
 80016b4:	0800b5d4 	.word	0x0800b5d4
 80016b8:	0800b5d8 	.word	0x0800b5d8

080016bc <System_Start>:

void System_Start(void){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af02      	add	r7, sp, #8
	SSD1306_Init ();
 80016c2:	f001 f869 	bl	8002798 <SSD1306_Init>
	SSD1306_Clear();
 80016c6:	f001 fbc6 	bl	8002e56 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, aviao, 128, 64, SSD1306_COLOR_WHITE);
 80016ca:	2301      	movs	r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	2340      	movs	r3, #64	@ 0x40
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <System_Start+0x40>)
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f001 fb54 	bl	8002d86 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 80016de:	f001 f91f 	bl	8002920 <SSD1306_UpdateScreen>
	HAL_Delay(2000);
 80016e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016e6:	f001 fccb 	bl	8003080 <HAL_Delay>
	tela=0;
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <System_Start+0x44>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	Screens();
 80016f0:	f7ff fe9c 	bl	800142c <Screens>

}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	0800b5ec 	.word	0x0800b5ec
 8001700:	20000450 	.word	0x20000450

08001704 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001714:	d110      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0x34>
		tela = (tela+1)%3;
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_GPIO_EXTI_Callback+0x40>)
 800171e:	fb83 3102 	smull	r3, r1, r3, r2
 8001722:	17d3      	asrs	r3, r2, #31
 8001724:	1ac9      	subs	r1, r1, r3
 8001726:	460b      	mov	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	440b      	add	r3, r1
 800172c:	1ad1      	subs	r1, r2, r3
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001732:	701a      	strb	r2, [r3, #0]
		Screens();
 8001734:	f7ff fe7a 	bl	800142c <Screens>
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000450 	.word	0x20000450
 8001744:	55555556 	.word	0x55555556

08001748 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

	if (hi2c->Instance == I2C1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d102      	bne.n	8001760 <HAL_I2C_MemRxCpltCallback+0x18>
	    {

	        MPU6050_Process_Data(&MPU6050);
 800175a:	4804      	ldr	r0, [pc, #16]	@ (800176c <HAL_I2C_MemRxCpltCallback+0x24>)
 800175c:	f000 f98c 	bl	8001a78 <MPU6050_Process_Data>
	    }
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40005400 	.word	0x40005400
 800176c:	20000398 	.word	0x20000398

08001770 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

	flagit=1;
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]

}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000451 	.word	0x20000451

08001790 <Update_Screen>:


void Update_Screen(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c1);
 8001794:	484f      	ldr	r0, [pc, #316]	@ (80018d4 <Update_Screen+0x144>)
 8001796:	f000 f95b 	bl	8001a50 <MPU6050_Read_All>

	if(tela ==0){
 800179a:	4b4f      	ldr	r3, [pc, #316]	@ (80018d8 <Update_Screen+0x148>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d134      	bne.n	800180c <Update_Screen+0x7c>
		flagit=0;
 80017a2:	4b4e      	ldr	r3, [pc, #312]	@ (80018dc <Update_Screen+0x14c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.Gx);
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <Update_Screen+0x150>)
 80017aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80017ae:	494d      	ldr	r1, [pc, #308]	@ (80018e4 <Update_Screen+0x154>)
 80017b0:	484d      	ldr	r0, [pc, #308]	@ (80018e8 <Update_Screen+0x158>)
 80017b2:	f007 fa3f 	bl	8008c34 <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.Gy);
 80017b6:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <Update_Screen+0x150>)
 80017b8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017bc:	4949      	ldr	r1, [pc, #292]	@ (80018e4 <Update_Screen+0x154>)
 80017be:	484b      	ldr	r0, [pc, #300]	@ (80018ec <Update_Screen+0x15c>)
 80017c0:	f007 fa38 	bl	8008c34 <siprintf>
		sprintf(Buffer3, "%.2f", MPU6050.Gz);
 80017c4:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <Update_Screen+0x150>)
 80017c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017ca:	4946      	ldr	r1, [pc, #280]	@ (80018e4 <Update_Screen+0x154>)
 80017cc:	4848      	ldr	r0, [pc, #288]	@ (80018f0 <Update_Screen+0x160>)
 80017ce:	f007 fa31 	bl	8008c34 <siprintf>
		SSD1306_GotoXY (21,17);
 80017d2:	2111      	movs	r1, #17
 80017d4:	2015      	movs	r0, #21
 80017d6:	f001 f949 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	4945      	ldr	r1, [pc, #276]	@ (80018f4 <Update_Screen+0x164>)
 80017de:	4842      	ldr	r0, [pc, #264]	@ (80018e8 <Update_Screen+0x158>)
 80017e0:	f001 f9d8 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 80017e4:	211d      	movs	r1, #29
 80017e6:	2015      	movs	r0, #21
 80017e8:	f001 f940 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 80017ec:	2201      	movs	r2, #1
 80017ee:	4941      	ldr	r1, [pc, #260]	@ (80018f4 <Update_Screen+0x164>)
 80017f0:	483e      	ldr	r0, [pc, #248]	@ (80018ec <Update_Screen+0x15c>)
 80017f2:	f001 f9cf 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (21,41);
 80017f6:	2129      	movs	r1, #41	@ 0x29
 80017f8:	2015      	movs	r0, #21
 80017fa:	f001 f937 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	493c      	ldr	r1, [pc, #240]	@ (80018f4 <Update_Screen+0x164>)
 8001802:	483b      	ldr	r0, [pc, #236]	@ (80018f0 <Update_Screen+0x160>)
 8001804:	f001 f9c6 	bl	8002b94 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001808:	f001 f88a 	bl	8002920 <SSD1306_UpdateScreen>
	}

	if(tela ==1){
 800180c:	4b32      	ldr	r3, [pc, #200]	@ (80018d8 <Update_Screen+0x148>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d134      	bne.n	800187e <Update_Screen+0xee>
		flagit=0;
 8001814:	4b31      	ldr	r3, [pc, #196]	@ (80018dc <Update_Screen+0x14c>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.Ax);
 800181a:	4b31      	ldr	r3, [pc, #196]	@ (80018e0 <Update_Screen+0x150>)
 800181c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001820:	4930      	ldr	r1, [pc, #192]	@ (80018e4 <Update_Screen+0x154>)
 8001822:	4831      	ldr	r0, [pc, #196]	@ (80018e8 <Update_Screen+0x158>)
 8001824:	f007 fa06 	bl	8008c34 <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.Ay);
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <Update_Screen+0x150>)
 800182a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800182e:	492d      	ldr	r1, [pc, #180]	@ (80018e4 <Update_Screen+0x154>)
 8001830:	482e      	ldr	r0, [pc, #184]	@ (80018ec <Update_Screen+0x15c>)
 8001832:	f007 f9ff 	bl	8008c34 <siprintf>
		sprintf(Buffer3, "%.2f", MPU6050.Az);
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Update_Screen+0x150>)
 8001838:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800183c:	4929      	ldr	r1, [pc, #164]	@ (80018e4 <Update_Screen+0x154>)
 800183e:	482c      	ldr	r0, [pc, #176]	@ (80018f0 <Update_Screen+0x160>)
 8001840:	f007 f9f8 	bl	8008c34 <siprintf>
		SSD1306_GotoXY (21,17);
 8001844:	2111      	movs	r1, #17
 8001846:	2015      	movs	r0, #21
 8001848:	f001 f910 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 800184c:	2201      	movs	r2, #1
 800184e:	4929      	ldr	r1, [pc, #164]	@ (80018f4 <Update_Screen+0x164>)
 8001850:	4825      	ldr	r0, [pc, #148]	@ (80018e8 <Update_Screen+0x158>)
 8001852:	f001 f99f 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 8001856:	211d      	movs	r1, #29
 8001858:	2015      	movs	r0, #21
 800185a:	f001 f907 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 800185e:	2201      	movs	r2, #1
 8001860:	4924      	ldr	r1, [pc, #144]	@ (80018f4 <Update_Screen+0x164>)
 8001862:	4822      	ldr	r0, [pc, #136]	@ (80018ec <Update_Screen+0x15c>)
 8001864:	f001 f996 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (21,41);
 8001868:	2129      	movs	r1, #41	@ 0x29
 800186a:	2015      	movs	r0, #21
 800186c:	f001 f8fe 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer3,&Font_7x10, 1);
 8001870:	2201      	movs	r2, #1
 8001872:	4920      	ldr	r1, [pc, #128]	@ (80018f4 <Update_Screen+0x164>)
 8001874:	481e      	ldr	r0, [pc, #120]	@ (80018f0 <Update_Screen+0x160>)
 8001876:	f001 f98d 	bl	8002b94 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800187a:	f001 f851 	bl	8002920 <SSD1306_UpdateScreen>
			}

	if(tela ==2){
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <Update_Screen+0x148>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d124      	bne.n	80018d0 <Update_Screen+0x140>
		flagit=0;
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <Update_Screen+0x14c>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
		sprintf(Buffer1, "%.2f", MPU6050.KalmanAngleX);
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <Update_Screen+0x150>)
 800188e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001892:	4914      	ldr	r1, [pc, #80]	@ (80018e4 <Update_Screen+0x154>)
 8001894:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <Update_Screen+0x158>)
 8001896:	f007 f9cd 	bl	8008c34 <siprintf>
		sprintf(Buffer2, "%.2f", MPU6050.KalmanAngleY);
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <Update_Screen+0x150>)
 800189c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80018a0:	4910      	ldr	r1, [pc, #64]	@ (80018e4 <Update_Screen+0x154>)
 80018a2:	4812      	ldr	r0, [pc, #72]	@ (80018ec <Update_Screen+0x15c>)
 80018a4:	f007 f9c6 	bl	8008c34 <siprintf>
		SSD1306_GotoXY (21,17);
 80018a8:	2111      	movs	r1, #17
 80018aa:	2015      	movs	r0, #21
 80018ac:	f001 f8de 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer1,&Font_7x10, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	4910      	ldr	r1, [pc, #64]	@ (80018f4 <Update_Screen+0x164>)
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <Update_Screen+0x158>)
 80018b6:	f001 f96d 	bl	8002b94 <SSD1306_Puts>
		SSD1306_GotoXY (21,29);
 80018ba:	211d      	movs	r1, #29
 80018bc:	2015      	movs	r0, #21
 80018be:	f001 f8d5 	bl	8002a6c <SSD1306_GotoXY>
		SSD1306_Puts (Buffer2,&Font_7x10, 1);
 80018c2:	2201      	movs	r2, #1
 80018c4:	490b      	ldr	r1, [pc, #44]	@ (80018f4 <Update_Screen+0x164>)
 80018c6:	4809      	ldr	r0, [pc, #36]	@ (80018ec <Update_Screen+0x15c>)
 80018c8:	f001 f964 	bl	8002b94 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80018cc:	f001 f828 	bl	8002920 <SSD1306_UpdateScreen>
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200002e4 	.word	0x200002e4
 80018d8:	20000450 	.word	0x20000450
 80018dc:	20000451 	.word	0x20000451
 80018e0:	20000398 	.word	0x20000398
 80018e4:	0800b5e4 	.word	0x0800b5e4
 80018e8:	200003f0 	.word	0x200003f0
 80018ec:	20000410 	.word	0x20000410
 80018f0:	20000430 	.word	0x20000430
 80018f4:	20000094 	.word	0x20000094

080018f8 <Pos_Servo>:


static void Pos_Servo(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	uint32_t leitura = HAL_ADC_GetValue(&hadc1);
 80018fe:	4822      	ldr	r0, [pc, #136]	@ (8001988 <Pos_Servo+0x90>)
 8001900:	f001 fcf8 	bl	80032f4 <HAL_ADC_GetValue>
 8001904:	6078      	str	r0, [r7, #4]

	//uint32_t cast = leitura*3.3/4095;
	//uint16_t arr = 2000*cast/3.3;

	uint16_t arr = (1900/3.3)*(leitura*3.3/4095) + 700;
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fe1c 	bl	8000544 <__aeabi_ui2d>
 800190c:	a318      	add	r3, pc, #96	@ (adr r3, 8001970 <Pos_Servo+0x78>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fe91 	bl	8000638 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	a316      	add	r3, pc, #88	@ (adr r3, 8001978 <Pos_Servo+0x80>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ffb2 	bl	800088c <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	a313      	add	r3, pc, #76	@ (adr r3, 8001980 <Pos_Servo+0x88>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fe7f 	bl	8000638 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b11      	ldr	r3, [pc, #68]	@ (800198c <Pos_Servo+0x94>)
 8001948:	f7fe fcc0 	bl	80002cc <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f948 	bl	8000be8 <__aeabi_d2uiz>
 8001958:	4603      	mov	r3, r0
 800195a:	807b      	strh	r3, [r7, #2]
			//2000*leitura/4095;
	//static uint16_t arr = 100;

	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,arr);
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <Pos_Servo+0x98>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	f3af 8000 	nop.w
 8001970:	66666666 	.word	0x66666666
 8001974:	400a6666 	.word	0x400a6666
 8001978:	00000000 	.word	0x00000000
 800197c:	40affe00 	.word	0x40affe00
 8001980:	83e0f83e 	.word	0x83e0f83e
 8001984:	4081fe0f 	.word	0x4081fe0f
 8001988:	2000029c 	.word	0x2000029c
 800198c:	4085e000 	.word	0x4085e000
 8001990:	2000046c 	.word	0x2000046c

08001994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001998:	b672      	cpsid	i
}
 800199a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <Error_Handler+0x8>

080019a0 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af04      	add	r7, sp, #16
 80019a6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80019a8:	2364      	movs	r3, #100	@ 0x64
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 030f 	add.w	r3, r7, #15
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	2275      	movs	r2, #117	@ 0x75
 80019ba:	21d0      	movs	r1, #208	@ 0xd0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f003 f887 	bl	8004ad0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b68      	cmp	r3, #104	@ 0x68
 80019c6:	d13d      	bne.n	8001a44 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80019cc:	2364      	movs	r3, #100	@ 0x64
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2301      	movs	r3, #1
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	f107 030e 	add.w	r3, r7, #14
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2301      	movs	r3, #1
 80019dc:	226b      	movs	r2, #107	@ 0x6b
 80019de:	21d0      	movs	r1, #208	@ 0xd0
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f002 ff7b 	bl	80048dc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80019e6:	2307      	movs	r3, #7
 80019e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80019ea:	2364      	movs	r3, #100	@ 0x64
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	f107 030e 	add.w	r3, r7, #14
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2219      	movs	r2, #25
 80019fc:	21d0      	movs	r1, #208	@ 0xd0
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f002 ff6c 	bl	80048dc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a08:	2364      	movs	r3, #100	@ 0x64
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f107 030e 	add.w	r3, r7, #14
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2301      	movs	r3, #1
 8001a18:	221c      	movs	r2, #28
 8001a1a:	21d0      	movs	r1, #208	@ 0xd0
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f002 ff5d 	bl	80048dc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a26:	2364      	movs	r3, #100	@ 0x64
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	f107 030e 	add.w	r3, r7, #14
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	221b      	movs	r2, #27
 8001a38:	21d0      	movs	r1, #208	@ 0xd0
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f002 ff4e 	bl	80048dc <HAL_I2C_Mem_Write>
        return 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <MPU6050_Init+0xa6>
    }
    return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]


    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14);
 8001a58:	230e      	movs	r3, #14
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <MPU6050_Read_All+0x24>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	223b      	movs	r2, #59	@ 0x3b
 8001a64:	21d0      	movs	r1, #208	@ 0xd0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f003 fa64 	bl	8004f34 <HAL_I2C_Mem_Read_DMA>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000458 	.word	0x20000458

08001a78 <MPU6050_Process_Data>:

    //HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);

void MPU6050_Process_Data(MPU6050_t *DataStruct)  {
 8001a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a7c:	b08c      	sub	sp, #48	@ 0x30
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]

    int16_t temp;
    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001a82:	4b95      	ldr	r3, [pc, #596]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	4b93      	ldr	r3, [pc, #588]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001a98:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001a9a:	789b      	ldrb	r3, [r3, #2]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001aa2:	78db      	ldrb	r3, [r3, #3]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001aae:	4b8a      	ldr	r3, [pc, #552]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001ab0:	791b      	ldrb	r3, [r3, #4]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	4b88      	ldr	r3, [pc, #544]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001ab8:	795b      	ldrb	r3, [r3, #5]
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001ac4:	4b84      	ldr	r3, [pc, #528]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001ac6:	799b      	ldrb	r3, [r3, #6]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	4b82      	ldr	r3, [pc, #520]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001ace:	79db      	ldrb	r3, [r3, #7]
 8001ad0:	b21b      	sxth	r3, r3
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001ad6:	4b80      	ldr	r3, [pc, #512]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001ad8:	7a1b      	ldrb	r3, [r3, #8]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	4b7e      	ldr	r3, [pc, #504]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001ae0:	7a5b      	ldrb	r3, [r3, #9]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b21a      	sxth	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001aec:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001aee:	7a9b      	ldrb	r3, [r3, #10]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	4b78      	ldr	r3, [pc, #480]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001af6:	7adb      	ldrb	r3, [r3, #11]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001b02:	4b75      	ldr	r3, [pc, #468]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001b04:	7b1b      	ldrb	r3, [r3, #12]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	4b73      	ldr	r3, [pc, #460]	@ (8001cd8 <MPU6050_Process_Data+0x260>)
 8001b0c:	7b5b      	ldrb	r3, [r3, #13]
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd20 	bl	8000564 <__aeabi_i2d>
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b6c      	ldr	r3, [pc, #432]	@ (8001cdc <MPU6050_Process_Data+0x264>)
 8001b2a:	f7fe feaf 	bl	800088c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd10 	bl	8000564 <__aeabi_i2d>
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	4b64      	ldr	r3, [pc, #400]	@ (8001cdc <MPU6050_Process_Data+0x264>)
 8001b4a:	f7fe fe9f 	bl	800088c <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd00 	bl	8000564 <__aeabi_i2d>
 8001b64:	a356      	add	r3, pc, #344	@ (adr r3, 8001cc0 <MPU6050_Process_Data+0x248>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fe8f 	bl	800088c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001b78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b84:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001ce0 <MPU6050_Process_Data+0x268>
 8001b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001ce4 <MPU6050_Process_Data+0x26c>
 8001b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcdf 	bl	8000564 <__aeabi_i2d>
 8001ba6:	a348      	add	r3, pc, #288	@ (adr r3, 8001cc8 <MPU6050_Process_Data+0x250>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fe6e 	bl	800088c <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fccf 	bl	8000564 <__aeabi_i2d>
 8001bc6:	a340      	add	r3, pc, #256	@ (adr r3, 8001cc8 <MPU6050_Process_Data+0x250>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fe5e 	bl	800088c <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcbf 	bl	8000564 <__aeabi_i2d>
 8001be6:	a338      	add	r3, pc, #224	@ (adr r3, 8001cc8 <MPU6050_Process_Data+0x250>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fe4e 	bl	800088c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001bfa:	f001 fa35 	bl	8003068 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b39      	ldr	r3, [pc, #228]	@ (8001ce8 <MPU6050_Process_Data+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc9c 	bl	8000544 <__aeabi_ui2d>
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <MPU6050_Process_Data+0x274>)
 8001c12:	f7fe fe3b 	bl	800088c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 8001c1e:	f001 fa23 	bl	8003068 <HAL_GetTick>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4a30      	ldr	r2, [pc, #192]	@ (8001ce8 <MPU6050_Process_Data+0x270>)
 8001c26:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	fb03 f202 	mul.w	r2, r3, r2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c40:	4619      	mov	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc88 	bl	8000564 <__aeabi_i2d>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	ec43 2b10 	vmov	d0, r2, r3
 8001c5c:	f009 f91a 	bl	800ae94 <sqrt>
 8001c60:	ed87 0b04 	vstr	d0, [r7, #16]
    if (roll_sqrt != 0.0)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c70:	f7fe ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d13a      	bne.n	8001cf0 <MPU6050_Process_Data+0x278>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc6f 	bl	8000564 <__aeabi_i2d>
 8001c86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c8a:	f7fe fdff 	bl	800088c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	ec43 2b17 	vmov	d7, r2, r3
 8001c96:	eeb0 0a47 	vmov.f32	s0, s14
 8001c9a:	eef0 0a67 	vmov.f32	s1, s15
 8001c9e:	f009 f927 	bl	800aef0 <atan>
 8001ca2:	ec51 0b10 	vmov	r0, r1, d0
 8001ca6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001cd0 <MPU6050_Process_Data+0x258>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	f7fe fcc4 	bl	8000638 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001cb8:	e020      	b.n	8001cfc <MPU6050_Process_Data+0x284>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40cc2900 	.word	0x40cc2900
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40606000 	.word	0x40606000
 8001cd0:	1a63c1f8 	.word	0x1a63c1f8
 8001cd4:	404ca5dc 	.word	0x404ca5dc
 8001cd8:	20000458 	.word	0x20000458
 8001cdc:	40d00000 	.word	0x40d00000
 8001ce0:	43aa0000 	.word	0x43aa0000
 8001ce4:	42121eb8 	.word	0x42121eb8
 8001ce8:	20000454 	.word	0x20000454
 8001cec:	408f4000 	.word	0x408f4000
    }
    else
    {
        roll = 0.0;
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d02:	425b      	negs	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc2d 	bl	8000564 <__aeabi_i2d>
 8001d0a:	4682      	mov	sl, r0
 8001d0c:	468b      	mov	fp, r1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc25 	bl	8000564 <__aeabi_i2d>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	ec43 2b11 	vmov	d1, r2, r3
 8001d22:	ec4b ab10 	vmov	d0, sl, fp
 8001d26:	f009 f8b3 	bl	800ae90 <atan2>
 8001d2a:	ec51 0b10 	vmov	r0, r1, d0
 8001d2e:	a348      	add	r3, pc, #288	@ (adr r3, 8001e50 <MPU6050_Process_Data+0x3d8>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc80 	bl	8000638 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <MPU6050_Process_Data+0x3c8>)
 8001d46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d4a:	f7fe fee7 	bl	8000b1c <__aeabi_dcmplt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00a      	beq.n	8001d6a <MPU6050_Process_Data+0x2f2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <MPU6050_Process_Data+0x3cc>)
 8001d60:	f7fe fefa 	bl	8000b58 <__aeabi_dcmpgt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d114      	bne.n	8001d94 <MPU6050_Process_Data+0x31c>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b35      	ldr	r3, [pc, #212]	@ (8001e44 <MPU6050_Process_Data+0x3cc>)
 8001d70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d74:	f7fe fef0 	bl	8000b58 <__aeabi_dcmpgt>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d015      	beq.n	8001daa <MPU6050_Process_Data+0x332>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <MPU6050_Process_Data+0x3c8>)
 8001d8a:	f7fe fec7 	bl	8000b1c <__aeabi_dcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <MPU6050_Process_Data+0x332>
    {
        KalmanY.angle = pitch;
 8001d94:	492c      	ldr	r1, [pc, #176]	@ (8001e48 <MPU6050_Process_Data+0x3d0>)
 8001d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001da8:	e014      	b.n	8001dd4 <MPU6050_Process_Data+0x35c>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001db0:	ed97 2b06 	vldr	d2, [r7, #24]
 8001db4:	eeb0 1a47 	vmov.f32	s2, s14
 8001db8:	eef0 1a67 	vmov.f32	s3, s15
 8001dbc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001dc0:	4821      	ldr	r0, [pc, #132]	@ (8001e48 <MPU6050_Process_Data+0x3d0>)
 8001dc2:	f000 f849 	bl	8001e58 <Kalman_getAngle>
 8001dc6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dca:	eef0 7a60 	vmov.f32	s15, s1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001dda:	4690      	mov	r8, r2
 8001ddc:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <MPU6050_Process_Data+0x3cc>)
 8001de6:	4640      	mov	r0, r8
 8001de8:	4649      	mov	r1, r9
 8001dea:	f7fe feb5 	bl	8000b58 <__aeabi_dcmpgt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <MPU6050_Process_Data+0x38e>
        DataStruct->Gx = -DataStruct->Gx;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001e0c:	ed97 2b06 	vldr	d2, [r7, #24]
 8001e10:	eeb0 1a47 	vmov.f32	s2, s14
 8001e14:	eef0 1a67 	vmov.f32	s3, s15
 8001e18:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001e1c:	480b      	ldr	r0, [pc, #44]	@ (8001e4c <MPU6050_Process_Data+0x3d4>)
 8001e1e:	f000 f81b 	bl	8001e58 <Kalman_getAngle>
 8001e22:	eeb0 7a40 	vmov.f32	s14, s0
 8001e26:	eef0 7a60 	vmov.f32	s15, s1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8001e30:	bf00      	nop
 8001e32:	3730      	adds	r7, #48	@ 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	c0568000 	.word	0xc0568000
 8001e44:	40568000 	.word	0x40568000
 8001e48:	20000048 	.word	0x20000048
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	1a63c1f8 	.word	0x1a63c1f8
 8001e54:	404ca5dc 	.word	0x404ca5dc

08001e58 <Kalman_getAngle>:




double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b096      	sub	sp, #88	@ 0x58
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	61f8      	str	r0, [r7, #28]
 8001e60:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e64:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e68:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e76:	f7fe fa27 	bl	80002c8 <__aeabi_dsub>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e90:	f7fe fbd2 	bl	8000638 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fa16 	bl	80002cc <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	69f9      	ldr	r1, [r7, #28]
 8001ea6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eba:	f7fe fbbd 	bl	8000638 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ecc:	f7fe f9fc 	bl	80002c8 <__aeabi_dsub>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ede:	f7fe f9f3 	bl	80002c8 <__aeabi_dsub>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe f9ec 	bl	80002cc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f00:	f7fe fb9a 	bl	8000638 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f9de 	bl	80002cc <__adddf3>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	69f9      	ldr	r1, [r7, #28]
 8001f16:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001f26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2a:	f7fe fb85 	bl	8000638 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f9c7 	bl	80002c8 <__aeabi_dsub>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	69f9      	ldr	r1, [r7, #28]
 8001f40:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f54:	f7fe fb70 	bl	8000638 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe f9b2 	bl	80002c8 <__aeabi_dsub>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	69f9      	ldr	r1, [r7, #28]
 8001f6a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f7e:	f7fe fb5b 	bl	8000638 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4620      	mov	r0, r4
 8001f88:	4629      	mov	r1, r5
 8001f8a:	f7fe f99f 	bl	80002cc <__adddf3>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	69f9      	ldr	r1, [r7, #28]
 8001f94:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fa4:	f7fe f992 	bl	80002cc <__adddf3>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001fb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fba:	f7fe fc67 	bl	800088c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fd0:	f7fe fc5c 	bl	800088c <__aeabi_ddiv>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fe2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fe6:	f7fe f96f 	bl	80002c8 <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001ff8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ffc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002000:	f7fe fb1a 	bl	8000638 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f95e 	bl	80002cc <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	69f9      	ldr	r1, [r7, #28]
 8002016:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002020:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002024:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002028:	f7fe fb06 	bl	8000638 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe f94a 	bl	80002cc <__adddf3>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	69f9      	ldr	r1, [r7, #28]
 800203e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002048:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002052:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800205c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002064:	f7fe fae8 	bl	8000638 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe f92a 	bl	80002c8 <__aeabi_dsub>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	69f9      	ldr	r1, [r7, #28]
 800207a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002084:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002088:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800208c:	f7fe fad4 	bl	8000638 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f916 	bl	80002c8 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	69f9      	ldr	r1, [r7, #28]
 80020a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80020ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020b4:	f7fe fac0 	bl	8000638 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe f902 	bl	80002c8 <__aeabi_dsub>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	69f9      	ldr	r1, [r7, #28]
 80020ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80020d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020dc:	f7fe faac 	bl	8000638 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4620      	mov	r0, r4
 80020e6:	4629      	mov	r1, r5
 80020e8:	f7fe f8ee 	bl	80002c8 <__aeabi_dsub>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	69f9      	ldr	r1, [r7, #28]
 80020f2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020fc:	ec43 2b17 	vmov	d7, r2, r3
};
 8002100:	eeb0 0a47 	vmov.f32	s0, s14
 8002104:	eef0 0a67 	vmov.f32	s1, s15
 8002108:	3758      	adds	r7, #88	@ 0x58
 800210a:	46bd      	mov	sp, r7
 800210c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	4a0f      	ldr	r2, [pc, #60]	@ (800215c <HAL_MspInit+0x4c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002124:	6453      	str	r3, [r2, #68]	@ 0x44
 8002126:	4b0d      	ldr	r3, [pc, #52]	@ (800215c <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	@ (800215c <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	@ 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800214e:	2007      	movs	r0, #7
 8002150:	f001 fbdc 	bl	800390c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800

08002160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <NMI_Handler+0x4>

08002168 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <MemManage_Handler+0x4>

08002178 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <UsageFault_Handler+0x4>

08002188 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b6:	f000 ff43 	bl	8003040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA1_Stream0_IRQHandler+0x10>)
 80021c6:	f001 fd0b 	bl	8003be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000338 	.word	0x20000338

080021d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <TIM2_IRQHandler+0x10>)
 80021da:	f004 fead 	bl	8006f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200004b4 	.word	0x200004b4

080021e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return 1;
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_kill>:

int _kill(int pid, int sig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002202:	f006 fdcd 	bl	8008da0 <__errno>
 8002206:	4603      	mov	r3, r0
 8002208:	2216      	movs	r2, #22
 800220a:	601a      	str	r2, [r3, #0]
  return -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_exit>:

void _exit (int status)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ffe7 	bl	80021f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <_exit+0x12>

0800222e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e00a      	b.n	8002256 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002240:	f3af 8000 	nop.w
 8002244:	4601      	mov	r1, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	b2ca      	uxtb	r2, r1
 800224e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	dbf0      	blt.n	8002240 <_read+0x12>
  }

  return len;
 800225e:	687b      	ldr	r3, [r7, #4]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e009      	b.n	800228e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	60ba      	str	r2, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	dbf1      	blt.n	800227a <_write+0x12>
  }
  return len;
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <_close>:

int _close(int file)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c8:	605a      	str	r2, [r3, #4]
  return 0;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_isatty>:

int _isatty(int file)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	@ (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	@ (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f006 fd32 	bl	8008da0 <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	@ (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20020000 	.word	0x20020000
 8002368:	00000400 	.word	0x00000400
 800236c:	20000468 	.word	0x20000468
 8002370:	20000aa0 	.word	0x20000aa0

08002374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <SystemInit+0x20>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <SystemInit+0x20>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b096      	sub	sp, #88	@ 0x58
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	615a      	str	r2, [r3, #20]
 80023c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2220      	movs	r2, #32
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f006 fc92 	bl	8008cfa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023d6:	4b3e      	ldr	r3, [pc, #248]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023d8:	4a3e      	ldr	r2, [pc, #248]	@ (80024d4 <MX_TIM1_Init+0x13c>)
 80023da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80023dc:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023de:	2253      	movs	r2, #83	@ 0x53
 80023e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80023e8:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023ea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80023ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023f6:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fc:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002402:	4833      	ldr	r0, [pc, #204]	@ (80024d0 <MX_TIM1_Init+0x138>)
 8002404:	f004 fbb6 	bl	8006b74 <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800240e:	f7ff fac1 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002416:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002418:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800241c:	4619      	mov	r1, r3
 800241e:	482c      	ldr	r0, [pc, #176]	@ (80024d0 <MX_TIM1_Init+0x138>)
 8002420:	f004 ff3c 	bl	800729c <HAL_TIM_ConfigClockSource>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800242a:	f7ff fab3 	bl	8001994 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800242e:	4828      	ldr	r0, [pc, #160]	@ (80024d0 <MX_TIM1_Init+0x138>)
 8002430:	f004 fc60 	bl	8006cf4 <HAL_TIM_PWM_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800243a:	f7ff faab 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002446:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800244a:	4619      	mov	r1, r3
 800244c:	4820      	ldr	r0, [pc, #128]	@ (80024d0 <MX_TIM1_Init+0x138>)
 800244e:	f005 fb31 	bl	8007ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002458:	f7ff fa9c 	bl	8001994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800245c:	2360      	movs	r3, #96	@ 0x60
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002468:	2300      	movs	r3, #0
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800247c:	2200      	movs	r2, #0
 800247e:	4619      	mov	r1, r3
 8002480:	4813      	ldr	r0, [pc, #76]	@ (80024d0 <MX_TIM1_Init+0x138>)
 8002482:	f004 fe49 	bl	8007118 <HAL_TIM_PWM_ConfigChannel>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800248c:	f7ff fa82 	bl	8001994 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4807      	ldr	r0, [pc, #28]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80024b4:	f005 fb7a 	bl	8007bac <HAL_TIMEx_ConfigBreakDeadTime>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024be:	f7ff fa69 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024c2:	4803      	ldr	r0, [pc, #12]	@ (80024d0 <MX_TIM1_Init+0x138>)
 80024c4:	f000 f892 	bl	80025ec <HAL_TIM_MspPostInit>

}
 80024c8:	bf00      	nop
 80024ca:	3758      	adds	r7, #88	@ 0x58
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000046c 	.word	0x2000046c
 80024d4:	40010000 	.word	0x40010000

080024d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <MX_TIM2_Init+0x98>)
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80024fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <MX_TIM2_Init+0x98>)
 80024fe:	f240 3247 	movw	r2, #839	@ 0x347
 8002502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <MX_TIM2_Init+0x98>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400-1;
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <MX_TIM2_Init+0x98>)
 800250c:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8002510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <MX_TIM2_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002518:	4b15      	ldr	r3, [pc, #84]	@ (8002570 <MX_TIM2_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800251e:	4814      	ldr	r0, [pc, #80]	@ (8002570 <MX_TIM2_Init+0x98>)
 8002520:	f004 fb28 	bl	8006b74 <HAL_TIM_Base_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800252a:	f7ff fa33 	bl	8001994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002534:	f107 0308 	add.w	r3, r7, #8
 8002538:	4619      	mov	r1, r3
 800253a:	480d      	ldr	r0, [pc, #52]	@ (8002570 <MX_TIM2_Init+0x98>)
 800253c:	f004 feae 	bl	800729c <HAL_TIM_ConfigClockSource>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002546:	f7ff fa25 	bl	8001994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002552:	463b      	mov	r3, r7
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	@ (8002570 <MX_TIM2_Init+0x98>)
 8002558:	f005 faac 	bl	8007ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002562:	f7ff fa17 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200004b4 	.word	0x200004b4

08002574 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a18      	ldr	r2, [pc, #96]	@ (80025e4 <HAL_TIM_Base_MspInit+0x70>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_TIM_Base_MspInit+0x74>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_TIM_Base_MspInit+0x74>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6453      	str	r3, [r2, #68]	@ 0x44
 8002596:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_TIM_Base_MspInit+0x74>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025a2:	e01a      	b.n	80025da <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ac:	d115      	bne.n	80025da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HAL_TIM_Base_MspInit+0x74>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <HAL_TIM_Base_MspInit+0x74>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_TIM_Base_MspInit+0x74>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	201c      	movs	r0, #28
 80025d0:	f001 f9a7 	bl	8003922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025d4:	201c      	movs	r0, #28
 80025d6:	f001 f9c0 	bl	800395a <HAL_NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 030c 	add.w	r3, r7, #12
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <HAL_TIM_MspPostInit+0x68>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11e      	bne.n	800264c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_TIM_MspPostInit+0x6c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <HAL_TIM_MspPostInit+0x6c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_TIM_MspPostInit+0x6c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800262e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800263c:	2301      	movs	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	4805      	ldr	r0, [pc, #20]	@ (800265c <HAL_TIM_MspPostInit+0x70>)
 8002648:	f001 fd40 	bl	80040cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40010000 	.word	0x40010000
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000

08002660 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002666:	4a12      	ldr	r2, [pc, #72]	@ (80026b0 <MX_USART2_UART_Init+0x50>)
 8002668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002698:	f005 faee 	bl	8007c78 <HAL_UART_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026a2:	f7ff f977 	bl	8001994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200004fc 	.word	0x200004fc
 80026b0:	40004400 	.word	0x40004400

080026b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_UART_MspInit+0x84>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d12b      	bne.n	800272e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_UART_MspInit+0x88>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	4a17      	ldr	r2, [pc, #92]	@ (800273c <HAL_UART_MspInit+0x88>)
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_UART_MspInit+0x88>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_UART_MspInit+0x88>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a10      	ldr	r2, [pc, #64]	@ (800273c <HAL_UART_MspInit+0x88>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_UART_MspInit+0x88>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800270e:	230c      	movs	r3, #12
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800271e:	2307      	movs	r3, #7
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	@ (8002740 <HAL_UART_MspInit+0x8c>)
 800272a:	f001 fccf 	bl	80040cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	@ 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40004400 	.word	0x40004400
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000

08002744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800277c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002748:	f7ff fe14 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800274c:	480c      	ldr	r0, [pc, #48]	@ (8002780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800274e:	490d      	ldr	r1, [pc, #52]	@ (8002784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002750:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002754:	e002      	b.n	800275c <LoopCopyDataInit>

08002756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800275a:	3304      	adds	r3, #4

0800275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002760:	d3f9      	bcc.n	8002756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002762:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002764:	4c0a      	ldr	r4, [pc, #40]	@ (8002790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002768:	e001      	b.n	800276e <LoopFillZerobss>

0800276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800276c:	3204      	adds	r2, #4

0800276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002770:	d3fb      	bcc.n	800276a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002772:	f006 fb1b 	bl	8008dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002776:	f7fe fdab 	bl	80012d0 <main>
  bx  lr    
 800277a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800277c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002784:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002788:	0800c568 	.word	0x0800c568
  ldr r2, =_sbss
 800278c:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002790:	20000a9c 	.word	0x20000a9c

08002794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002794:	e7fe      	b.n	8002794 <ADC_IRQHandler>
	...

08002798 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800279e:	f000 fb63 	bl	8002e68 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80027a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80027a6:	2201      	movs	r2, #1
 80027a8:	2178      	movs	r1, #120	@ 0x78
 80027aa:	485b      	ldr	r0, [pc, #364]	@ (8002918 <SSD1306_Init+0x180>)
 80027ac:	f002 fd52 	bl	8005254 <HAL_I2C_IsDeviceReady>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e0a9      	b.n	800290e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80027ba:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80027be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027c0:	e002      	b.n	80027c8 <SSD1306_Init+0x30>
		p--;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80027ce:	22ae      	movs	r2, #174	@ 0xae
 80027d0:	2100      	movs	r1, #0
 80027d2:	2078      	movs	r0, #120	@ 0x78
 80027d4:	f000 fbc4 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80027d8:	2220      	movs	r2, #32
 80027da:	2100      	movs	r1, #0
 80027dc:	2078      	movs	r0, #120	@ 0x78
 80027de:	f000 fbbf 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80027e2:	2210      	movs	r2, #16
 80027e4:	2100      	movs	r1, #0
 80027e6:	2078      	movs	r0, #120	@ 0x78
 80027e8:	f000 fbba 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80027ec:	22b0      	movs	r2, #176	@ 0xb0
 80027ee:	2100      	movs	r1, #0
 80027f0:	2078      	movs	r0, #120	@ 0x78
 80027f2:	f000 fbb5 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80027f6:	22c8      	movs	r2, #200	@ 0xc8
 80027f8:	2100      	movs	r1, #0
 80027fa:	2078      	movs	r0, #120	@ 0x78
 80027fc:	f000 fbb0 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	2078      	movs	r0, #120	@ 0x78
 8002806:	f000 fbab 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800280a:	2210      	movs	r2, #16
 800280c:	2100      	movs	r1, #0
 800280e:	2078      	movs	r0, #120	@ 0x78
 8002810:	f000 fba6 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002814:	2240      	movs	r2, #64	@ 0x40
 8002816:	2100      	movs	r1, #0
 8002818:	2078      	movs	r0, #120	@ 0x78
 800281a:	f000 fba1 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800281e:	2281      	movs	r2, #129	@ 0x81
 8002820:	2100      	movs	r1, #0
 8002822:	2078      	movs	r0, #120	@ 0x78
 8002824:	f000 fb9c 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002828:	22ff      	movs	r2, #255	@ 0xff
 800282a:	2100      	movs	r1, #0
 800282c:	2078      	movs	r0, #120	@ 0x78
 800282e:	f000 fb97 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002832:	22a1      	movs	r2, #161	@ 0xa1
 8002834:	2100      	movs	r1, #0
 8002836:	2078      	movs	r0, #120	@ 0x78
 8002838:	f000 fb92 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800283c:	22a6      	movs	r2, #166	@ 0xa6
 800283e:	2100      	movs	r1, #0
 8002840:	2078      	movs	r0, #120	@ 0x78
 8002842:	f000 fb8d 	bl	8002f60 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002846:	22a8      	movs	r2, #168	@ 0xa8
 8002848:	2100      	movs	r1, #0
 800284a:	2078      	movs	r0, #120	@ 0x78
 800284c:	f000 fb88 	bl	8002f60 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8002850:	223f      	movs	r2, #63	@ 0x3f
 8002852:	2100      	movs	r1, #0
 8002854:	2078      	movs	r0, #120	@ 0x78
 8002856:	f000 fb83 	bl	8002f60 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800285a:	22a4      	movs	r2, #164	@ 0xa4
 800285c:	2100      	movs	r1, #0
 800285e:	2078      	movs	r0, #120	@ 0x78
 8002860:	f000 fb7e 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002864:	22d3      	movs	r2, #211	@ 0xd3
 8002866:	2100      	movs	r1, #0
 8002868:	2078      	movs	r0, #120	@ 0x78
 800286a:	f000 fb79 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2078      	movs	r0, #120	@ 0x78
 8002874:	f000 fb74 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002878:	22d5      	movs	r2, #213	@ 0xd5
 800287a:	2100      	movs	r1, #0
 800287c:	2078      	movs	r0, #120	@ 0x78
 800287e:	f000 fb6f 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002882:	22f0      	movs	r2, #240	@ 0xf0
 8002884:	2100      	movs	r1, #0
 8002886:	2078      	movs	r0, #120	@ 0x78
 8002888:	f000 fb6a 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800288c:	22d9      	movs	r2, #217	@ 0xd9
 800288e:	2100      	movs	r1, #0
 8002890:	2078      	movs	r0, #120	@ 0x78
 8002892:	f000 fb65 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002896:	2222      	movs	r2, #34	@ 0x22
 8002898:	2100      	movs	r1, #0
 800289a:	2078      	movs	r0, #120	@ 0x78
 800289c:	f000 fb60 	bl	8002f60 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80028a0:	22da      	movs	r2, #218	@ 0xda
 80028a2:	2100      	movs	r1, #0
 80028a4:	2078      	movs	r0, #120	@ 0x78
 80028a6:	f000 fb5b 	bl	8002f60 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80028aa:	2212      	movs	r2, #18
 80028ac:	2100      	movs	r1, #0
 80028ae:	2078      	movs	r0, #120	@ 0x78
 80028b0:	f000 fb56 	bl	8002f60 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80028b4:	22db      	movs	r2, #219	@ 0xdb
 80028b6:	2100      	movs	r1, #0
 80028b8:	2078      	movs	r0, #120	@ 0x78
 80028ba:	f000 fb51 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80028be:	2220      	movs	r2, #32
 80028c0:	2100      	movs	r1, #0
 80028c2:	2078      	movs	r0, #120	@ 0x78
 80028c4:	f000 fb4c 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80028c8:	228d      	movs	r2, #141	@ 0x8d
 80028ca:	2100      	movs	r1, #0
 80028cc:	2078      	movs	r0, #120	@ 0x78
 80028ce:	f000 fb47 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80028d2:	2214      	movs	r2, #20
 80028d4:	2100      	movs	r1, #0
 80028d6:	2078      	movs	r0, #120	@ 0x78
 80028d8:	f000 fb42 	bl	8002f60 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80028dc:	22af      	movs	r2, #175	@ 0xaf
 80028de:	2100      	movs	r1, #0
 80028e0:	2078      	movs	r0, #120	@ 0x78
 80028e2:	f000 fb3d 	bl	8002f60 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80028e6:	222e      	movs	r2, #46	@ 0x2e
 80028e8:	2100      	movs	r1, #0
 80028ea:	2078      	movs	r0, #120	@ 0x78
 80028ec:	f000 fb38 	bl	8002f60 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f000 f843 	bl	800297c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80028f6:	f000 f813 	bl	8002920 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <SSD1306_Init+0x184>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <SSD1306_Init+0x184>)
 8002902:	2200      	movs	r2, #0
 8002904:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <SSD1306_Init+0x184>)
 8002908:	2201      	movs	r2, #1
 800290a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200002e4 	.word	0x200002e4
 800291c:	20000944 	.word	0x20000944

08002920 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002926:	2300      	movs	r3, #0
 8002928:	71fb      	strb	r3, [r7, #7]
 800292a:	e01d      	b.n	8002968 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	3b50      	subs	r3, #80	@ 0x50
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	2078      	movs	r0, #120	@ 0x78
 8002938:	f000 fb12 	bl	8002f60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2078      	movs	r0, #120	@ 0x78
 8002942:	f000 fb0d 	bl	8002f60 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002946:	2210      	movs	r2, #16
 8002948:	2100      	movs	r1, #0
 800294a:	2078      	movs	r0, #120	@ 0x78
 800294c:	f000 fb08 	bl	8002f60 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	01db      	lsls	r3, r3, #7
 8002954:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <SSD1306_UpdateScreen+0x58>)
 8002956:	441a      	add	r2, r3
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	2140      	movs	r1, #64	@ 0x40
 800295c:	2078      	movs	r0, #120	@ 0x78
 800295e:	f000 fa99 	bl	8002e94 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	3301      	adds	r3, #1
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	2b07      	cmp	r3, #7
 800296c:	d9de      	bls.n	800292c <SSD1306_UpdateScreen+0xc>
	}
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000544 	.word	0x20000544

0800297c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <SSD1306_Fill+0x14>
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <SSD1306_Fill+0x16>
 8002990:	23ff      	movs	r3, #255	@ 0xff
 8002992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002996:	4619      	mov	r1, r3
 8002998:	4803      	ldr	r0, [pc, #12]	@ (80029a8 <SSD1306_Fill+0x2c>)
 800299a:	f006 f9ae 	bl	8008cfa <memset>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000544 	.word	0x20000544

080029ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
 80029b6:	460b      	mov	r3, r1
 80029b8:	80bb      	strh	r3, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	70fb      	strb	r3, [r7, #3]
	if (
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80029c2:	d848      	bhi.n	8002a56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80029c8:	d845      	bhi.n	8002a56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <SSD1306_DrawPixel+0xb8>)
 80029cc:	791b      	ldrb	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d11a      	bne.n	8002a1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	88bb      	ldrh	r3, [r7, #4]
 80029ea:	08db      	lsrs	r3, r3, #3
 80029ec:	b298      	uxth	r0, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	01db      	lsls	r3, r3, #7
 80029f2:	4413      	add	r3, r2
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <SSD1306_DrawPixel+0xbc>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	b25a      	sxtb	r2, r3
 80029fa:	88bb      	ldrh	r3, [r7, #4]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b259      	sxtb	r1, r3
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	4413      	add	r3, r2
 8002a14:	b2c9      	uxtb	r1, r1
 8002a16:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <SSD1306_DrawPixel+0xbc>)
 8002a18:	54d1      	strb	r1, [r2, r3]
 8002a1a:	e01d      	b.n	8002a58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	88bb      	ldrh	r3, [r7, #4]
 8002a20:	08db      	lsrs	r3, r3, #3
 8002a22:	b298      	uxth	r0, r3
 8002a24:	4603      	mov	r3, r0
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <SSD1306_DrawPixel+0xbc>)
 8002a2c:	5cd3      	ldrb	r3, [r2, r3]
 8002a2e:	b25a      	sxtb	r2, r3
 8002a30:	88bb      	ldrh	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	4013      	ands	r3, r2
 8002a44:	b259      	sxtb	r1, r3
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	4603      	mov	r3, r0
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b2c9      	uxtb	r1, r1
 8002a50:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <SSD1306_DrawPixel+0xbc>)
 8002a52:	54d1      	strb	r1, [r2, r3]
 8002a54:	e000      	b.n	8002a58 <SSD1306_DrawPixel+0xac>
		return;
 8002a56:	bf00      	nop
	}
}
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000944 	.word	0x20000944
 8002a68:	20000544 	.word	0x20000544

08002a6c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	460a      	mov	r2, r1
 8002a76:	80fb      	strh	r3, [r7, #6]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002a7c:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <SSD1306_GotoXY+0x28>)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002a82:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <SSD1306_GotoXY+0x28>)
 8002a84:	88bb      	ldrh	r3, [r7, #4]
 8002a86:	8053      	strh	r3, [r2, #2]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	20000944 	.word	0x20000944

08002a98 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4413      	add	r3, r2
	if (
 8002ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ab6:	dc07      	bgt.n	8002ac8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002ab8:	4b35      	ldr	r3, [pc, #212]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002aba:	885b      	ldrh	r3, [r3, #2]
 8002abc:	461a      	mov	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	785b      	ldrb	r3, [r3, #1]
 8002ac2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002ac4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac6:	dd01      	ble.n	8002acc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e05d      	b.n	8002b88 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e04b      	b.n	8002b6a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	3b20      	subs	r3, #32
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	7849      	ldrb	r1, [r1, #1]
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	440b      	add	r3, r1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e030      	b.n	8002b58 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002b06:	4b22      	ldr	r3, [pc, #136]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	b298      	uxth	r0, r3
 8002b12:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002b14:	885a      	ldrh	r2, [r3, #2]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	79ba      	ldrb	r2, [r7, #6]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7ff ff43 	bl	80029ac <SSD1306_DrawPixel>
 8002b26:	e014      	b.n	8002b52 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	b298      	uxth	r0, r3
 8002b34:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002b36:	885a      	ldrh	r2, [r3, #2]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b299      	uxth	r1, r3
 8002b40:	79bb      	ldrb	r3, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f7ff ff2d 	bl	80029ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	3301      	adds	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d3c8      	bcc.n	8002af6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3301      	adds	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	785b      	ldrb	r3, [r3, #1]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d3ad      	bcc.n	8002ad2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <SSD1306_Putc+0xf8>)
 8002b84:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002b86:	79fb      	ldrb	r3, [r7, #7]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000944 	.word	0x20000944

08002b94 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002ba2:	e012      	b.n	8002bca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff73 	bl	8002a98 <SSD1306_Putc>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d002      	beq.n	8002bc4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	e008      	b.n	8002bd6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e8      	bne.n	8002ba4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002bde:	b590      	push	{r4, r7, lr}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4604      	mov	r4, r0
 8002be6:	4608      	mov	r0, r1
 8002be8:	4611      	mov	r1, r2
 8002bea:	461a      	mov	r2, r3
 8002bec:	4623      	mov	r3, r4
 8002bee:	80fb      	strh	r3, [r7, #6]
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	80bb      	strh	r3, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	f1c3 0301 	rsb	r3, r3, #1
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	03d2      	lsls	r2, r2, #15
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002c20:	88f8      	ldrh	r0, [r7, #6]
 8002c22:	88ba      	ldrh	r2, [r7, #4]
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	4413      	add	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	787a      	ldrb	r2, [r7, #1]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f7ff febd 	bl	80029ac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002c32:	88f8      	ldrh	r0, [r7, #6]
 8002c34:	88ba      	ldrh	r2, [r7, #4]
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	787a      	ldrb	r2, [r7, #1]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7ff feb4 	bl	80029ac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002c44:	88fa      	ldrh	r2, [r7, #6]
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	88b9      	ldrh	r1, [r7, #4]
 8002c4e:	787a      	ldrb	r2, [r7, #1]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff feab 	bl	80029ac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	88b9      	ldrh	r1, [r7, #4]
 8002c60:	787a      	ldrb	r2, [r7, #1]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fea2 	bl	80029ac <SSD1306_DrawPixel>

    while (x < y) {
 8002c68:	e081      	b.n	8002d6e <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8002c6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db0e      	blt.n	8002c90 <SSD1306_DrawCircle+0xb2>
            y--;
 8002c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002c7e:	8a7b      	ldrh	r3, [r7, #18]
 8002c80:	3302      	adds	r3, #2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002c86:	8afa      	ldrh	r2, [r7, #22]
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002c90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3301      	adds	r3, #1
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002c9c:	8abb      	ldrh	r3, [r7, #20]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002ca4:	8afa      	ldrh	r2, [r7, #22]
 8002ca6:	8abb      	ldrh	r3, [r7, #20]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	8a3b      	ldrh	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	b298      	uxth	r0, r3
 8002cb6:	88ba      	ldrh	r2, [r7, #4]
 8002cb8:	89fb      	ldrh	r3, [r7, #14]
 8002cba:	4413      	add	r3, r2
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	787a      	ldrb	r2, [r7, #1]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7ff fe73 	bl	80029ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002cc6:	88fa      	ldrh	r2, [r7, #6]
 8002cc8:	8a3b      	ldrh	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	b298      	uxth	r0, r3
 8002cce:	88ba      	ldrh	r2, [r7, #4]
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	787a      	ldrb	r2, [r7, #1]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7ff fe67 	bl	80029ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	8a3b      	ldrh	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b298      	uxth	r0, r3
 8002ce6:	88ba      	ldrh	r2, [r7, #4]
 8002ce8:	89fb      	ldrh	r3, [r7, #14]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	787a      	ldrb	r2, [r7, #1]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7ff fe5b 	bl	80029ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	8a3b      	ldrh	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	b298      	uxth	r0, r3
 8002cfe:	88ba      	ldrh	r2, [r7, #4]
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	787a      	ldrb	r2, [r7, #1]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7ff fe4f 	bl	80029ac <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	89fb      	ldrh	r3, [r7, #14]
 8002d12:	4413      	add	r3, r2
 8002d14:	b298      	uxth	r0, r3
 8002d16:	88ba      	ldrh	r2, [r7, #4]
 8002d18:	8a3b      	ldrh	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	787a      	ldrb	r2, [r7, #1]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f7ff fe43 	bl	80029ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	89fb      	ldrh	r3, [r7, #14]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	b298      	uxth	r0, r3
 8002d2e:	88ba      	ldrh	r2, [r7, #4]
 8002d30:	8a3b      	ldrh	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	787a      	ldrb	r2, [r7, #1]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7ff fe37 	bl	80029ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002d3e:	88fa      	ldrh	r2, [r7, #6]
 8002d40:	89fb      	ldrh	r3, [r7, #14]
 8002d42:	4413      	add	r3, r2
 8002d44:	b298      	uxth	r0, r3
 8002d46:	88ba      	ldrh	r2, [r7, #4]
 8002d48:	8a3b      	ldrh	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	787a      	ldrb	r2, [r7, #1]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7ff fe2b 	bl	80029ac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	89fb      	ldrh	r3, [r7, #14]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	b298      	uxth	r0, r3
 8002d5e:	88ba      	ldrh	r2, [r7, #4]
 8002d60:	8a3b      	ldrh	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	787a      	ldrb	r2, [r7, #1]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7ff fe1f 	bl	80029ac <SSD1306_DrawPixel>
    while (x < y) {
 8002d6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f6ff af77 	blt.w	8002c6a <SSD1306_DrawCircle+0x8c>
    }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}

08002d86 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4603      	mov	r3, r0
 8002d92:	81fb      	strh	r3, [r7, #14]
 8002d94:	460b      	mov	r3, r1
 8002d96:	81bb      	strh	r3, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da0:	3307      	adds	r3, #7
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	da00      	bge.n	8002da8 <SSD1306_DrawBitmap+0x22>
 8002da6:	3307      	adds	r3, #7
 8002da8:	10db      	asrs	r3, r3, #3
 8002daa:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	82bb      	strh	r3, [r7, #20]
 8002db4:	e044      	b.n	8002e40 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	827b      	strh	r3, [r7, #18]
 8002dba:	e02f      	b.n	8002e1c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002dbc:	8a7b      	ldrh	r3, [r7, #18]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
 8002dcc:	e012      	b.n	8002df4 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002dce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002dd6:	fb03 f202 	mul.w	r2, r3, r2
 8002dda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	da00      	bge.n	8002de4 <SSD1306_DrawBitmap+0x5e>
 8002de2:	3307      	adds	r3, #7
 8002de4:	10db      	asrs	r3, r3, #3
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da09      	bge.n	8002e10 <SSD1306_DrawBitmap+0x8a>
 8002dfc:	89fa      	ldrh	r2, [r7, #14]
 8002dfe:	8a7b      	ldrh	r3, [r7, #18]
 8002e00:	4413      	add	r3, r2
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	89b9      	ldrh	r1, [r7, #12]
 8002e06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fdce 	bl	80029ac <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	827b      	strh	r3, [r7, #18]
 8002e1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbc9      	blt.n	8002dbc <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002e28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	82bb      	strh	r3, [r7, #20]
 8002e34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	81bb      	strh	r3, [r7, #12]
 8002e40:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbb4      	blt.n	8002db6 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <SSD1306_Clear>:

void SSD1306_Clear (void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff fd8e 	bl	800297c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002e60:	f7ff fd5e 	bl	8002920 <SSD1306_UpdateScreen>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <ssd1306_I2C_Init+0x28>)
 8002e70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e72:	e002      	b.n	8002e7a <ssd1306_I2C_Init+0x12>
		p--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	0003d090 	.word	0x0003d090

08002e94 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b0c7      	sub	sp, #284	@ 0x11c
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002ea2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002ea6:	600a      	str	r2, [r1, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002eae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002eba:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	701a      	strb	r2, [r3, #0]
 8002ec2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ec6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002eca:	460a      	mov	r2, r1
 8002ecc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002ece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ed6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002eda:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002ee8:	e015      	b.n	8002f16 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002eea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002eee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002ef2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	441a      	add	r2, r3
 8002efa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002efe:	3301      	adds	r3, #1
 8002f00:	7811      	ldrb	r1, [r2, #0]
 8002f02:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002f06:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002f0a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002f0c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002f10:	3301      	adds	r3, #1
 8002f12:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002f16:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002f20:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002f24:	8812      	ldrh	r2, [r2, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d8df      	bhi.n	8002eea <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002f2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f2e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	b299      	uxth	r1, r3
 8002f36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002f3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	3301      	adds	r3, #1
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	f107 020c 	add.w	r2, r7, #12
 8002f48:	200a      	movs	r0, #10
 8002f4a:	9000      	str	r0, [sp, #0]
 8002f4c:	4803      	ldr	r0, [pc, #12]	@ (8002f5c <ssd1306_I2C_WriteMulti+0xc8>)
 8002f4e:	f001 fbc7 	bl	80046e0 <HAL_I2C_Master_Transmit>
}
 8002f52:	bf00      	nop
 8002f54:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	200002e4 	.word	0x200002e4

08002f60 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	71bb      	strb	r3, [r7, #6]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002f76:	797b      	ldrb	r3, [r7, #5]
 8002f78:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	b299      	uxth	r1, r3
 8002f7e:	f107 020c 	add.w	r2, r7, #12
 8002f82:	230a      	movs	r3, #10
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2302      	movs	r3, #2
 8002f88:	4803      	ldr	r0, [pc, #12]	@ (8002f98 <ssd1306_I2C_Write+0x38>)
 8002f8a:	f001 fba9 	bl	80046e0 <HAL_I2C_Master_Transmit>
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200002e4 	.word	0x200002e4

08002f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fdc <HAL_Init+0x40>)
 8002fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <HAL_Init+0x40>)
 8002fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb8:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <HAL_Init+0x40>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a07      	ldr	r2, [pc, #28]	@ (8002fdc <HAL_Init+0x40>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc4:	2003      	movs	r0, #3
 8002fc6:	f000 fca1 	bl	800390c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f000 f808 	bl	8002fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd0:	f7ff f89e 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00

08002fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe8:	4b12      	ldr	r3, [pc, #72]	@ (8003034 <HAL_InitTick+0x54>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <HAL_InitTick+0x58>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fcb9 	bl	8003976 <HAL_SYSTICK_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e00e      	b.n	800302c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	d80a      	bhi.n	800302a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003014:	2200      	movs	r2, #0
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	f000 fc81 	bl	8003922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003020:	4a06      	ldr	r2, [pc, #24]	@ (800303c <HAL_InitTick+0x5c>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000090 	.word	0x20000090
 8003038:	200000a0 	.word	0x200000a0
 800303c:	2000009c 	.word	0x2000009c

08003040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_IncTick+0x20>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_IncTick+0x24>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4413      	add	r3, r2
 8003050:	4a04      	ldr	r2, [pc, #16]	@ (8003064 <HAL_IncTick+0x24>)
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	200000a0 	.word	0x200000a0
 8003064:	2000094c 	.word	0x2000094c

08003068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return uwTick;
 800306c:	4b03      	ldr	r3, [pc, #12]	@ (800307c <HAL_GetTick+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	2000094c 	.word	0x2000094c

08003080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff ffee 	bl	8003068 <HAL_GetTick>
 800308c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d005      	beq.n	80030a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_Delay+0x44>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a6:	bf00      	nop
 80030a8:	f7ff ffde 	bl	8003068 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d8f7      	bhi.n	80030a8 <HAL_Delay+0x28>
  {
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200000a0 	.word	0x200000a0

080030c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e033      	b.n	8003146 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd ff68 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800310e:	f023 0302 	bic.w	r3, r3, #2
 8003112:	f043 0202 	orr.w	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa2a 	bl	8003574 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	f043 0201 	orr.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
 8003136:	e001      	b.n	800313c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_ADC_Start+0x1a>
 8003166:	2302      	movs	r3, #2
 8003168:	e0b2      	b.n	80032d0 <HAL_ADC_Start+0x180>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d018      	beq.n	80031b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003190:	4b52      	ldr	r3, [pc, #328]	@ (80032dc <HAL_ADC_Start+0x18c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a52      	ldr	r2, [pc, #328]	@ (80032e0 <HAL_ADC_Start+0x190>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0c9a      	lsrs	r2, r3, #18
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031a4:	e002      	b.n	80031ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d17a      	bne.n	80032b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fe:	d106      	bne.n	800320e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003204:	f023 0206 	bic.w	r2, r3, #6
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44
 800320c:	e002      	b.n	8003214 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800321c:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <HAL_ADC_Start+0x194>)
 800321e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003228:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2b00      	cmp	r3, #0
 8003234:	d12a      	bne.n	800328c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2b      	ldr	r2, [pc, #172]	@ (80032e8 <HAL_ADC_Start+0x198>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d015      	beq.n	800326c <HAL_ADC_Start+0x11c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a29      	ldr	r2, [pc, #164]	@ (80032ec <HAL_ADC_Start+0x19c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d105      	bne.n	8003256 <HAL_ADC_Start+0x106>
 800324a:	4b26      	ldr	r3, [pc, #152]	@ (80032e4 <HAL_ADC_Start+0x194>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a25      	ldr	r2, [pc, #148]	@ (80032f0 <HAL_ADC_Start+0x1a0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d136      	bne.n	80032ce <HAL_ADC_Start+0x17e>
 8003260:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_ADC_Start+0x194>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d130      	bne.n	80032ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d129      	bne.n	80032ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	e020      	b.n	80032ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a15      	ldr	r2, [pc, #84]	@ (80032e8 <HAL_ADC_Start+0x198>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11b      	bne.n	80032ce <HAL_ADC_Start+0x17e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d114      	bne.n	80032ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e00b      	b.n	80032ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	20000090 	.word	0x20000090
 80032e0:	431bde83 	.word	0x431bde83
 80032e4:	40012300 	.word	0x40012300
 80032e8:	40012000 	.word	0x40012000
 80032ec:	40012100 	.word	0x40012100
 80032f0:	40012200 	.word	0x40012200

080032f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1c>
 8003328:	2302      	movs	r3, #2
 800332a:	e113      	b.n	8003554 <HAL_ADC_ConfigChannel+0x244>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b09      	cmp	r3, #9
 800333a:	d925      	bls.n	8003388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	2207      	movs	r2, #7
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43da      	mvns	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	400a      	ands	r2, r1
 8003360:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68d9      	ldr	r1, [r3, #12]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	4618      	mov	r0, r3
 8003374:	4603      	mov	r3, r0
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4403      	add	r3, r0
 800337a:	3b1e      	subs	r3, #30
 800337c:	409a      	lsls	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	e022      	b.n	80033ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	2207      	movs	r2, #7
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43da      	mvns	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	400a      	ands	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4403      	add	r3, r0
 80033c4:	409a      	lsls	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d824      	bhi.n	8003420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b05      	subs	r3, #5
 80033e8:	221f      	movs	r2, #31
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	400a      	ands	r2, r1
 80033f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	4618      	mov	r0, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b05      	subs	r3, #5
 8003412:	fa00 f203 	lsl.w	r2, r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	635a      	str	r2, [r3, #52]	@ 0x34
 800341e:	e04c      	b.n	80034ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d824      	bhi.n	8003472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b23      	subs	r3, #35	@ 0x23
 800343a:	221f      	movs	r2, #31
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43da      	mvns	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	400a      	ands	r2, r1
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b23      	subs	r3, #35	@ 0x23
 8003464:	fa00 f203 	lsl.w	r2, r0, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003470:	e023      	b.n	80034ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	3b41      	subs	r3, #65	@ 0x41
 8003484:	221f      	movs	r2, #31
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	400a      	ands	r2, r1
 8003492:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	3b41      	subs	r3, #65	@ 0x41
 80034ae:	fa00 f203 	lsl.w	r2, r0, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ba:	4b29      	ldr	r3, [pc, #164]	@ (8003560 <HAL_ADC_ConfigChannel+0x250>)
 80034bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a28      	ldr	r2, [pc, #160]	@ (8003564 <HAL_ADC_ConfigChannel+0x254>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10f      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d8>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b12      	cmp	r3, #18
 80034ce:	d10b      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_ADC_ConfigChannel+0x254>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d12b      	bne.n	800354a <HAL_ADC_ConfigChannel+0x23a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_ADC_ConfigChannel+0x258>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <HAL_ADC_ConfigChannel+0x1f4>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b11      	cmp	r3, #17
 8003502:	d122      	bne.n	800354a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a11      	ldr	r2, [pc, #68]	@ (8003568 <HAL_ADC_ConfigChannel+0x258>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d111      	bne.n	800354a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003526:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_ADC_ConfigChannel+0x25c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a11      	ldr	r2, [pc, #68]	@ (8003570 <HAL_ADC_ConfigChannel+0x260>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0c9a      	lsrs	r2, r3, #18
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800353c:	e002      	b.n	8003544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3b01      	subs	r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f9      	bne.n	800353e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40012300 	.word	0x40012300
 8003564:	40012000 	.word	0x40012000
 8003568:	10000012 	.word	0x10000012
 800356c:	20000090 	.word	0x20000090
 8003570:	431bde83 	.word	0x431bde83

08003574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800357c:	4b79      	ldr	r3, [pc, #484]	@ (8003764 <ADC_Init+0x1f0>)
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	021a      	lsls	r2, r3, #8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	4a58      	ldr	r2, [pc, #352]	@ (8003768 <ADC_Init+0x1f4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800361a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e00f      	b.n	8003672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003670:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0202 	bic.w	r2, r2, #2
 8003680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6899      	ldr	r1, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7e1b      	ldrb	r3, [r3, #24]
 800368c:	005a      	lsls	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	3b01      	subs	r3, #1
 80036cc:	035a      	lsls	r2, r3, #13
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e007      	b.n	80036e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	3b01      	subs	r3, #1
 8003704:	051a      	lsls	r2, r3, #20
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800371c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6899      	ldr	r1, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800372a:	025a      	lsls	r2, r3, #9
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6899      	ldr	r1, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	029a      	lsls	r2, r3, #10
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40012300 	.word	0x40012300
 8003768:	0f000001 	.word	0x0f000001

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4907      	ldr	r1, [pc, #28]	@ (8003808 <__NVIC_EnableIRQ+0x38>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000e100 	.word	0xe000e100

0800380c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db0a      	blt.n	8003836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	490c      	ldr	r1, [pc, #48]	@ (8003858 <__NVIC_SetPriority+0x4c>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	440b      	add	r3, r1
 8003830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003834:	e00a      	b.n	800384c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4908      	ldr	r1, [pc, #32]	@ (800385c <__NVIC_SetPriority+0x50>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	3b04      	subs	r3, #4
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	440b      	add	r3, r1
 800384a:	761a      	strb	r2, [r3, #24]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000e100 	.word	0xe000e100
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f1c3 0307 	rsb	r3, r3, #7
 800387a:	2b04      	cmp	r3, #4
 800387c:	bf28      	it	cs
 800387e:	2304      	movcs	r3, #4
 8003880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3304      	adds	r3, #4
 8003886:	2b06      	cmp	r3, #6
 8003888:	d902      	bls.n	8003890 <NVIC_EncodePriority+0x30>
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3b03      	subs	r3, #3
 800388e:	e000      	b.n	8003892 <NVIC_EncodePriority+0x32>
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	f04f 32ff 	mov.w	r2, #4294967295
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	401a      	ands	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	43d9      	mvns	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	4313      	orrs	r3, r2
         );
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d8:	d301      	bcc.n	80038de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038da:	2301      	movs	r3, #1
 80038dc:	e00f      	b.n	80038fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <SysTick_Config+0x40>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e6:	210f      	movs	r1, #15
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	f7ff ff8e 	bl	800380c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <SysTick_Config+0x40>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f6:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <SysTick_Config+0x40>)
 80038f8:	2207      	movs	r2, #7
 80038fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	e000e010 	.word	0xe000e010

0800390c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff29 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003934:	f7ff ff3e 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 8003938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	6978      	ldr	r0, [r7, #20]
 8003940:	f7ff ff8e 	bl	8003860 <NVIC_EncodePriority>
 8003944:	4602      	mov	r2, r0
 8003946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff5d 	bl	800380c <__NVIC_SetPriority>
}
 8003952:	bf00      	nop
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff31 	bl	80037d0 <__NVIC_EnableIRQ>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffa2 	bl	80038c8 <SysTick_Config>
 8003984:	4603      	mov	r3, r0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff fb64 	bl	8003068 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e099      	b.n	8003ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039cc:	e00f      	b.n	80039ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ce:	f7ff fb4b 	bl	8003068 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d908      	bls.n	80039ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e078      	b.n	8003ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e8      	bne.n	80039ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <HAL_DMA_Init+0x158>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d107      	bne.n	8003a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	4313      	orrs	r3, r2
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d117      	bne.n	8003ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa9d 	bl	8003fd4 <DMA_CheckFifoParam>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	@ 0x40
 8003aa4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa54 	bl	8003f68 <DMA_CalcBaseAndBitshift>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	223f      	movs	r2, #63	@ 0x3f
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	f010803f 	.word	0xf010803f

08003aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_DMA_Start_IT+0x26>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e040      	b.n	8003b94 <HAL_DMA_Start_IT+0xa8>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d12f      	bne.n	8003b86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f9e6 	bl	8003f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b44:	223f      	movs	r2, #63	@ 0x3f
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0216 	orr.w	r2, r2, #22
 8003b5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e005      	b.n	8003b92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d004      	beq.n	8003bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2280      	movs	r2, #128	@ 0x80
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00c      	b.n	8003bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2205      	movs	r2, #5
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bec:	4b8e      	ldr	r3, [pc, #568]	@ (8003e28 <HAL_DMA_IRQHandler+0x248>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a8e      	ldr	r2, [pc, #568]	@ (8003e2c <HAL_DMA_IRQHandler+0x24c>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0204 	bic.w	r2, r2, #4
 8003c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c38:	2208      	movs	r2, #8
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c44:	f043 0201 	orr.w	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d012      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6e:	2201      	movs	r2, #1
 8003c70:	409a      	lsls	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7a:	f043 0202 	orr.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	2204      	movs	r2, #4
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f043 0204 	orr.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d043      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d03c      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	2210      	movs	r2, #16
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d018      	beq.n	8003d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d024      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
 8003d0e:	e01f      	b.n	8003d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
 8003d20:	e016      	b.n	8003d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d107      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0208 	bic.w	r2, r2, #8
 8003d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	2220      	movs	r2, #32
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 808f 	beq.w	8003e80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8087 	beq.w	8003e80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	2220      	movs	r2, #32
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d136      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0216 	bic.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_DMA_IRQHandler+0x1da>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0208 	bic.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	223f      	movs	r2, #63	@ 0x3f
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d07e      	beq.n	8003eec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
        }
        return;
 8003df6:	e079      	b.n	8003eec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01d      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d031      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
 8003e24:	e02c      	b.n	8003e80 <HAL_DMA_IRQHandler+0x2a0>
 8003e26:	bf00      	nop
 8003e28:	20000090 	.word	0x20000090
 8003e2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d023      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
 8003e40:	e01e      	b.n	8003e80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10f      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0210 	bic.w	r2, r2, #16
 8003e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d032      	beq.n	8003eee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2205      	movs	r2, #5
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d307      	bcc.n	8003ec8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f2      	bne.n	8003eac <HAL_DMA_IRQHandler+0x2cc>
 8003ec6:	e000      	b.n	8003eca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ec8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
 8003eea:	e000      	b.n	8003eee <HAL_DMA_IRQHandler+0x30e>
        return;
 8003eec:	bf00      	nop
    }
  }
}
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b40      	cmp	r3, #64	@ 0x40
 8003f38:	d108      	bne.n	8003f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f4a:	e007      	b.n	8003f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3b10      	subs	r3, #16
 8003f78:	4a14      	ldr	r2, [pc, #80]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x64>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f82:	4a13      	ldr	r2, [pc, #76]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d909      	bls.n	8003faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	1d1a      	adds	r2, r3, #4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fa8:	e007      	b.n	8003fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab
 8003fd0:	0800c170 	.word	0x0800c170

08003fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11f      	bne.n	800402e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d856      	bhi.n	80040a2 <DMA_CheckFifoParam+0xce>
 8003ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <DMA_CheckFifoParam+0x28>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800401f 	.word	0x0800401f
 8004004:	0800400d 	.word	0x0800400d
 8004008:	080040a3 	.word	0x080040a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d046      	beq.n	80040a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401c:	e043      	b.n	80040a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004026:	d140      	bne.n	80040aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800402c:	e03d      	b.n	80040aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004036:	d121      	bne.n	800407c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b03      	cmp	r3, #3
 800403c:	d837      	bhi.n	80040ae <DMA_CheckFifoParam+0xda>
 800403e:	a201      	add	r2, pc, #4	@ (adr r2, 8004044 <DMA_CheckFifoParam+0x70>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004055 	.word	0x08004055
 8004048:	0800405b 	.word	0x0800405b
 800404c:	08004055 	.word	0x08004055
 8004050:	0800406d 	.word	0x0800406d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e030      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d025      	beq.n	80040b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406a:	e022      	b.n	80040b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004074:	d11f      	bne.n	80040b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800407a:	e01c      	b.n	80040b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d903      	bls.n	800408a <DMA_CheckFifoParam+0xb6>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d003      	beq.n	8004090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004088:	e018      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
      break;
 800408e:	e015      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e00b      	b.n	80040ba <DMA_CheckFifoParam+0xe6>
      break;
 80040a2:	bf00      	nop
 80040a4:	e00a      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e008      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e006      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;   
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
    }
  } 
  
  return status; 
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop

080040cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e165      	b.n	80043b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e8:	2201      	movs	r2, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	f040 8154 	bne.w	80043ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d005      	beq.n	800411e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800411a:	2b02      	cmp	r3, #2
 800411c:	d130      	bne.n	8004180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004154:	2201      	movs	r2, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 0201 	and.w	r2, r3, #1
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	2b03      	cmp	r3, #3
 800418a:	d017      	beq.n	80041bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	2203      	movs	r2, #3
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d123      	bne.n	8004210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	220f      	movs	r2, #15
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	08da      	lsrs	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3208      	adds	r2, #8
 800420a:	69b9      	ldr	r1, [r7, #24]
 800420c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2203      	movs	r2, #3
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80ae 	beq.w	80043ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b5d      	ldr	r3, [pc, #372]	@ (80043cc <HAL_GPIO_Init+0x300>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	4a5c      	ldr	r2, [pc, #368]	@ (80043cc <HAL_GPIO_Init+0x300>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004260:	6453      	str	r3, [r2, #68]	@ 0x44
 8004262:	4b5a      	ldr	r3, [pc, #360]	@ (80043cc <HAL_GPIO_Init+0x300>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426e:	4a58      	ldr	r2, [pc, #352]	@ (80043d0 <HAL_GPIO_Init+0x304>)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4f      	ldr	r2, [pc, #316]	@ (80043d4 <HAL_GPIO_Init+0x308>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d025      	beq.n	80042e6 <HAL_GPIO_Init+0x21a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4e      	ldr	r2, [pc, #312]	@ (80043d8 <HAL_GPIO_Init+0x30c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <HAL_GPIO_Init+0x216>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4d      	ldr	r2, [pc, #308]	@ (80043dc <HAL_GPIO_Init+0x310>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_GPIO_Init+0x212>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4c      	ldr	r2, [pc, #304]	@ (80043e0 <HAL_GPIO_Init+0x314>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_GPIO_Init+0x20e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	@ (80043e4 <HAL_GPIO_Init+0x318>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <HAL_GPIO_Init+0x20a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4a      	ldr	r2, [pc, #296]	@ (80043e8 <HAL_GPIO_Init+0x31c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x206>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a49      	ldr	r2, [pc, #292]	@ (80043ec <HAL_GPIO_Init+0x320>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_GPIO_Init+0x202>
 80042ca:	2306      	movs	r3, #6
 80042cc:	e00c      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042ce:	2307      	movs	r3, #7
 80042d0:	e00a      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042d2:	2305      	movs	r3, #5
 80042d4:	e008      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e006      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042da:	2303      	movs	r3, #3
 80042dc:	e004      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042de:	2302      	movs	r3, #2
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x21c>
 80042e6:	2300      	movs	r3, #0
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f002 0203 	and.w	r2, r2, #3
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	4093      	lsls	r3, r2
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f8:	4935      	ldr	r1, [pc, #212]	@ (80043d0 <HAL_GPIO_Init+0x304>)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004306:	4b3a      	ldr	r3, [pc, #232]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800432a:	4a31      	ldr	r2, [pc, #196]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004330:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800435a:	4b25      	ldr	r3, [pc, #148]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800437e:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004384:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043a8:	4a11      	ldr	r2, [pc, #68]	@ (80043f0 <HAL_GPIO_Init+0x324>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	f67f ae96 	bls.w	80040e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3724      	adds	r7, #36	@ 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800
 80043d0:	40013800 	.word	0x40013800
 80043d4:	40020000 	.word	0x40020000
 80043d8:	40020400 	.word	0x40020400
 80043dc:	40020800 	.word	0x40020800
 80043e0:	40020c00 	.word	0x40020c00
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40021400 	.word	0x40021400
 80043ec:	40021800 	.word	0x40021800
 80043f0:	40013c00 	.word	0x40013c00

080043f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	807b      	strh	r3, [r7, #2]
 8004400:	4613      	mov	r3, r2
 8004402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004404:	787b      	ldrb	r3, [r7, #1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800440a:	887a      	ldrh	r2, [r7, #2]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004410:	e003      	b.n	800441a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	041a      	lsls	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	619a      	str	r2, [r3, #24]
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004432:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd f95c 	bl	8001704 <HAL_GPIO_EXTI_Callback>
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40013c00 	.word	0x40013c00

08004458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e12b      	b.n	80046c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc feac 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	@ 0x24
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044bc:	f001 fe64 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 80044c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4a81      	ldr	r2, [pc, #516]	@ (80046cc <HAL_I2C_Init+0x274>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d807      	bhi.n	80044dc <HAL_I2C_Init+0x84>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4a80      	ldr	r2, [pc, #512]	@ (80046d0 <HAL_I2C_Init+0x278>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bf94      	ite	ls
 80044d4:	2301      	movls	r3, #1
 80044d6:	2300      	movhi	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e006      	b.n	80044ea <HAL_I2C_Init+0x92>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a7d      	ldr	r2, [pc, #500]	@ (80046d4 <HAL_I2C_Init+0x27c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf94      	ite	ls
 80044e4:	2301      	movls	r3, #1
 80044e6:	2300      	movhi	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0e7      	b.n	80046c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a78      	ldr	r2, [pc, #480]	@ (80046d8 <HAL_I2C_Init+0x280>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	0c9b      	lsrs	r3, r3, #18
 80044fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4a6a      	ldr	r2, [pc, #424]	@ (80046cc <HAL_I2C_Init+0x274>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d802      	bhi.n	800452c <HAL_I2C_Init+0xd4>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3301      	adds	r3, #1
 800452a:	e009      	b.n	8004540 <HAL_I2C_Init+0xe8>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004532:	fb02 f303 	mul.w	r3, r2, r3
 8004536:	4a69      	ldr	r2, [pc, #420]	@ (80046dc <HAL_I2C_Init+0x284>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	3301      	adds	r3, #1
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004552:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	495c      	ldr	r1, [pc, #368]	@ (80046cc <HAL_I2C_Init+0x274>)
 800455c:	428b      	cmp	r3, r1
 800455e:	d819      	bhi.n	8004594 <HAL_I2C_Init+0x13c>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1e59      	subs	r1, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fbb1 f3f3 	udiv	r3, r1, r3
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004574:	400b      	ands	r3, r1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_I2C_Init+0x138>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1e59      	subs	r1, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fbb1 f3f3 	udiv	r3, r1, r3
 8004588:	3301      	adds	r3, #1
 800458a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458e:	e051      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 8004590:	2304      	movs	r3, #4
 8004592:	e04f      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d111      	bne.n	80045c0 <HAL_I2C_Init+0x168>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1e58      	subs	r0, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	440b      	add	r3, r1
 80045aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e012      	b.n	80045e6 <HAL_I2C_Init+0x18e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e58      	subs	r0, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	0099      	lsls	r1, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_I2C_Init+0x196>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e022      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10e      	bne.n	8004614 <HAL_I2C_Init+0x1bc>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1e58      	subs	r0, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	440b      	add	r3, r1
 8004604:	fbb0 f3f3 	udiv	r3, r0, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004612:	e00f      	b.n	8004634 <HAL_I2C_Init+0x1dc>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	0099      	lsls	r1, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	3301      	adds	r3, #1
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	4313      	orrs	r3, r2
 800463a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004662:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6911      	ldr	r1, [r2, #16]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	430b      	orrs	r3, r1
 8004676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	000186a0 	.word	0x000186a0
 80046d0:	001e847f 	.word	0x001e847f
 80046d4:	003d08ff 	.word	0x003d08ff
 80046d8:	431bde83 	.word	0x431bde83
 80046dc:	10624dd3 	.word	0x10624dd3

080046e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	461a      	mov	r2, r3
 80046ec:	460b      	mov	r3, r1
 80046ee:	817b      	strh	r3, [r7, #10]
 80046f0:	4613      	mov	r3, r2
 80046f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7fe fcb8 	bl	8003068 <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	f040 80e0 	bne.w	80048c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2319      	movs	r3, #25
 800470e:	2201      	movs	r2, #1
 8004710:	4970      	ldr	r1, [pc, #448]	@ (80048d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f001 fa10 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
 8004720:	e0d3      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_I2C_Master_Transmit+0x50>
 800472c:	2302      	movs	r3, #2
 800472e:	e0cc      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b01      	cmp	r3, #1
 8004744:	d007      	beq.n	8004756 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2221      	movs	r2, #33	@ 0x21
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2210      	movs	r2, #16
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a50      	ldr	r2, [pc, #320]	@ (80048d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004796:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004798:	8979      	ldrh	r1, [r7, #10]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 feae 	bl	8005500 <I2C_MasterRequestWrite>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e08d      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047c4:	e066      	b.n	8004894 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	6a39      	ldr	r1, [r7, #32]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f001 face 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00d      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d107      	bne.n	80047ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06b      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d11b      	bne.n	8004868 <HAL_I2C_Master_Transmit+0x188>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d017      	beq.n	8004868 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	6a39      	ldr	r1, [r7, #32]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f001 fac5 	bl	8005dfc <I2C_WaitOnBTFFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	2b04      	cmp	r3, #4
 800487e:	d107      	bne.n	8004890 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e01a      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d194      	bne.n	80047c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	00100002 	.word	0x00100002
 80048d8:	ffff0000 	.word	0xffff0000

080048dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f6:	f7fe fbb7 	bl	8003068 <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b20      	cmp	r3, #32
 8004906:	f040 80d9 	bne.w	8004abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	2319      	movs	r3, #25
 8004910:	2201      	movs	r2, #1
 8004912:	496d      	ldr	r1, [pc, #436]	@ (8004ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f001 f90f 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
 8004922:	e0cc      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_I2C_Mem_Write+0x56>
 800492e:	2302      	movs	r3, #2
 8004930:	e0c5      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d007      	beq.n	8004958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2221      	movs	r2, #33	@ 0x21
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2240      	movs	r2, #64	@ 0x40
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a4d      	ldr	r2, [pc, #308]	@ (8004acc <HAL_I2C_Mem_Write+0x1f0>)
 8004998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800499a:	88f8      	ldrh	r0, [r7, #6]
 800499c:	893a      	ldrh	r2, [r7, #8]
 800499e:	8979      	ldrh	r1, [r7, #10]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fe2a 	bl	8005604 <I2C_RequestMemoryWrite>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d052      	beq.n	8004a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e081      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f001 f9d4 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00d      	beq.n	80049e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d107      	bne.n	80049e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e06b      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	781a      	ldrb	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d11b      	bne.n	8004a5c <HAL_I2C_Mem_Write+0x180>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d017      	beq.n	8004a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1aa      	bne.n	80049ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f001 f9c7 	bl	8005dfc <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00d      	beq.n	8004a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d107      	bne.n	8004a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e016      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	00100002 	.word	0x00100002
 8004acc:	ffff0000 	.word	0xffff0000

08004ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	@ 0x30
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	817b      	strh	r3, [r7, #10]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	813b      	strh	r3, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aea:	f7fe fabd 	bl	8003068 <HAL_GetTick>
 8004aee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	f040 8214 	bne.w	8004f26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2319      	movs	r3, #25
 8004b04:	2201      	movs	r2, #1
 8004b06:	497b      	ldr	r1, [pc, #492]	@ (8004cf4 <HAL_I2C_Mem_Read+0x224>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f001 f815 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	e207      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_I2C_Mem_Read+0x56>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e200      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d007      	beq.n	8004b4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2222      	movs	r2, #34	@ 0x22
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2240      	movs	r2, #64	@ 0x40
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004cf8 <HAL_I2C_Mem_Read+0x228>)
 8004b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8e:	88f8      	ldrh	r0, [r7, #6]
 8004b90:	893a      	ldrh	r2, [r7, #8]
 8004b92:	8979      	ldrh	r1, [r7, #10]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fdc6 	bl	8005730 <I2C_RequestMemoryRead>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e1bc      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d113      	bne.n	8004bde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e190      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d11b      	bne.n	8004c1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e170      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d11b      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	e150      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c74:	e144      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	f200 80f1 	bhi.w	8004e62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d123      	bne.n	8004cd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f001 f8fd 	bl	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e145      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cce:	e117      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d14e      	bne.n	8004d76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4906      	ldr	r1, [pc, #24]	@ (8004cfc <HAL_I2C_Mem_Read+0x22c>)
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 ff28 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e11a      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
 8004cf2:	bf00      	nop
 8004cf4:	00100002 	.word	0x00100002
 8004cf8:	ffff0000 	.word	0xffff0000
 8004cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d74:	e0c4      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	496c      	ldr	r1, [pc, #432]	@ (8004f30 <HAL_I2C_Mem_Read+0x460>)
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fed9 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cb      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4955      	ldr	r1, [pc, #340]	@ (8004f30 <HAL_I2C_Mem_Read+0x460>)
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 feab 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e09d      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e60:	e04e      	b.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 f810 	bl	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e058      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d124      	bne.n	8004f00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d107      	bne.n	8004ece <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ecc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f aeb6 	bne.w	8004c76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
  }
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	@ 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	00010004 	.word	0x00010004

08004f34 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	@ 0x30
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	817b      	strh	r3, [r7, #10]
 8004f46:	460b      	mov	r3, r1
 8004f48:	813b      	strh	r3, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f4e:	f7fe f88b 	bl	8003068 <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	f040 8172 	bne.w	800524a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f66:	4b93      	ldr	r3, [pc, #588]	@ (80051b4 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	4a92      	ldr	r2, [pc, #584]	@ (80051b8 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	0a1a      	lsrs	r2, r3, #8
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009a      	lsls	r2, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d112      	bne.n	8004fb2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e14c      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d0df      	beq.n	8004f80 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_I2C_Mem_Read_DMA+0x9a>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e13e      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d007      	beq.n	8004ff4 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2222      	movs	r2, #34	@ 0x22
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a62      	ldr	r2, [pc, #392]	@ (80051bc <HAL_I2C_Mem_Read_DMA+0x288>)
 8005034:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005036:	897a      	ldrh	r2, [r7, #10]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800503c:	893a      	ldrh	r2, [r7, #8]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80cc 	beq.w	80051f0 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02d      	beq.n	80050bc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	4a56      	ldr	r2, [pc, #344]	@ (80051c0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005066:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	4a55      	ldr	r2, [pc, #340]	@ (80051c4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800506e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	2200      	movs	r2, #0
 8005086:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508c:	2200      	movs	r2, #0
 800508e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3310      	adds	r3, #16
 800509a:	4619      	mov	r1, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	461a      	mov	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	f7fe fd21 	bl	8003aec <HAL_DMA_Start_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80050b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 8087 	bne.w	80051c8 <HAL_I2C_Mem_Read_DMA+0x294>
 80050ba:	e013      	b.n	80050e4 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0b3      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80050e4:	88f8      	ldrh	r0, [r7, #6]
 80050e6:	893a      	ldrh	r2, [r7, #8]
 80050e8:	8979      	ldrh	r1, [r7, #10]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2323      	movs	r3, #35	@ 0x23
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4603      	mov	r3, r0
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fb1b 	bl	8005730 <I2C_RequestMemoryRead>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d023      	beq.n	8005148 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fd49 	bl	8003b9c <HAL_DMA_Abort_IT>
 800510a:	4603      	mov	r3, r0
 800510c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	2200      	movs	r2, #0
 8005116:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005126:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e081      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514c:	2b01      	cmp	r3, #1
 800514e:	d108      	bne.n	8005162 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e007      	b.n	8005172 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005170:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800519e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	e049      	b.n	8005246 <HAL_I2C_Mem_Read_DMA+0x312>
 80051b2:	bf00      	nop
 80051b4:	20000090 	.word	0x20000090
 80051b8:	14f8b589 	.word	0x14f8b589
 80051bc:	ffff0000 	.word	0xffff0000
 80051c0:	08005901 	.word	0x08005901
 80051c4:	08005abf 	.word	0x08005abf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e02d      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80051f0:	88f8      	ldrh	r0, [r7, #6]
 80051f2:	893a      	ldrh	r2, [r7, #8]
 80051f4:	8979      	ldrh	r1, [r7, #10]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2323      	movs	r3, #35	@ 0x23
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	4603      	mov	r3, r0
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fa95 	bl	8005730 <I2C_RequestMemoryRead>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e01d      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005234:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3728      	adds	r7, #40	@ 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	@ 0x28
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	460b      	mov	r3, r1
 8005262:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005264:	f7fd ff00 	bl	8003068 <HAL_GetTick>
 8005268:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 8111 	bne.w	800549e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2319      	movs	r3, #25
 8005282:	2201      	movs	r2, #1
 8005284:	4988      	ldr	r1, [pc, #544]	@ (80054a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fc56 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	e104      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_I2C_IsDeviceReady+0x50>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e0fd      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d007      	beq.n	80052ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2224      	movs	r2, #36	@ 0x24
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a70      	ldr	r2, [pc, #448]	@ (80054ac <HAL_I2C_IsDeviceReady+0x258>)
 80052ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fc14 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005324:	d103      	bne.n	800532e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800532c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0b6      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005340:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005342:	f7fd fe91 	bl	8003068 <HAL_GetTick>
 8005346:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005376:	e025      	b.n	80053c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005378:	f7fd fe76 	bl	8003068 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d302      	bcc.n	800538e <HAL_I2C_IsDeviceReady+0x13a>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	22a0      	movs	r2, #160	@ 0xa0
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80053ce:	d005      	beq.n	80053dc <HAL_I2C_IsDeviceReady+0x188>
 80053d0:	7dfb      	ldrb	r3, [r7, #23]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <HAL_I2C_IsDeviceReady+0x188>
 80053d6:	7dbb      	ldrb	r3, [r7, #22]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0cd      	beq.n	8005378 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d129      	bne.n	8005446 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005400:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2319      	movs	r3, #25
 800541e:	2201      	movs	r2, #1
 8005420:	4921      	ldr	r1, [pc, #132]	@ (80054a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fb88 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e036      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e02c      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005454:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800545e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2319      	movs	r3, #25
 8005466:	2201      	movs	r2, #1
 8005468:	490f      	ldr	r1, [pc, #60]	@ (80054a8 <HAL_I2C_IsDeviceReady+0x254>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fb64 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e012      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3301      	adds	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	f4ff af32 	bcc.w	80052ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
  }
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	00100002 	.word	0x00100002
 80054ac:	ffff0000 	.word	0xffff0000

080054b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	460b      	mov	r3, r1
 800550e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d006      	beq.n	800552a <I2C_MasterRequestWrite+0x2a>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d003      	beq.n	800552a <I2C_MasterRequestWrite+0x2a>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005528:	d108      	bne.n	800553c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e00b      	b.n	8005554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	2b12      	cmp	r3, #18
 8005542:	d107      	bne.n	8005554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fae9 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00d      	beq.n	8005588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800557a:	d103      	bne.n	8005584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005582:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e035      	b.n	80055f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005590:	d108      	bne.n	80055a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005592:	897b      	ldrh	r3, [r7, #10]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055a0:	611a      	str	r2, [r3, #16]
 80055a2:	e01b      	b.n	80055dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	11db      	asrs	r3, r3, #7
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0306 	and.w	r3, r3, #6
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f063 030f 	orn	r3, r3, #15
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	490e      	ldr	r1, [pc, #56]	@ (80055fc <I2C_MasterRequestWrite+0xfc>)
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fb32 	bl	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e010      	b.n	80055f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4907      	ldr	r1, [pc, #28]	@ (8005600 <I2C_MasterRequestWrite+0x100>)
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fb22 	bl	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	00010008 	.word	0x00010008
 8005600:	00010002 	.word	0x00010002

08005604 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	461a      	mov	r2, r3
 8005612:	4603      	mov	r3, r0
 8005614:	817b      	strh	r3, [r7, #10]
 8005616:	460b      	mov	r3, r1
 8005618:	813b      	strh	r3, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800562c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	2200      	movs	r2, #0
 8005636:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fa7c 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005654:	d103      	bne.n	800565e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800565c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e05f      	b.n	8005722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	6a3a      	ldr	r2, [r7, #32]
 8005676:	492d      	ldr	r1, [pc, #180]	@ (800572c <I2C_RequestMemoryWrite+0x128>)
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fad7 	bl	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e04c      	b.n	8005722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a0:	6a39      	ldr	r1, [r7, #32]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 fb62 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00d      	beq.n	80056ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d107      	bne.n	80056c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e02b      	b.n	8005722 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d105      	bne.n	80056dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056d0:	893b      	ldrh	r3, [r7, #8]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]
 80056da:	e021      	b.n	8005720 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056dc:	893b      	ldrh	r3, [r7, #8]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	6a39      	ldr	r1, [r7, #32]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fb3c 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d107      	bne.n	8005712 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e005      	b.n	8005722 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005716:	893b      	ldrh	r3, [r7, #8]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	00010002 	.word	0x00010002

08005730 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	461a      	mov	r2, r3
 800573e:	4603      	mov	r3, r0
 8005740:	817b      	strh	r3, [r7, #10]
 8005742:	460b      	mov	r3, r1
 8005744:	813b      	strh	r3, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005758:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2200      	movs	r2, #0
 8005772:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f9de 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005790:	d103      	bne.n	800579a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005798:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e0aa      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	4952      	ldr	r1, [pc, #328]	@ (80058fc <I2C_RequestMemoryRead+0x1cc>)
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fa39 	bl	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e097      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	6a39      	ldr	r1, [r7, #32]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fac4 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d107      	bne.n	8005802 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e076      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d105      	bne.n	8005818 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800580c:	893b      	ldrh	r3, [r7, #8]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	e021      	b.n	800585c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005818:	893b      	ldrh	r3, [r7, #8]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	b29b      	uxth	r3, r3
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	6a39      	ldr	r1, [r7, #32]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa9e 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583a:	2b04      	cmp	r3, #4
 800583c:	d107      	bne.n	800584e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e050      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005852:	893b      	ldrh	r3, [r7, #8]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585e:	6a39      	ldr	r1, [r7, #32]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fa83 	bl	8005d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005870:	2b04      	cmp	r3, #4
 8005872:	d107      	bne.n	8005884 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005882:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e035      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005896:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2200      	movs	r2, #0
 80058a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f947 	bl	8005b38 <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00d      	beq.n	80058cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058be:	d103      	bne.n	80058c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e013      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058cc:	897b      	ldrh	r3, [r7, #10]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	4906      	ldr	r1, [pc, #24]	@ (80058fc <I2C_RequestMemoryRead+0x1cc>)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f9a2 	bl	8005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	00010002 	.word	0x00010002

08005900 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800591c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005932:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005940:	2200      	movs	r2, #0
 8005942:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	2200      	movs	r2, #0
 8005952:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800595a:	2b21      	cmp	r3, #33	@ 0x21
 800595c:	d007      	beq.n	800596e <I2C_DMAXferCplt+0x6e>
 800595e:	7cfb      	ldrb	r3, [r7, #19]
 8005960:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005964:	2b22      	cmp	r3, #34	@ 0x22
 8005966:	d131      	bne.n	80059cc <I2C_DMAXferCplt+0xcc>
 8005968:	7cbb      	ldrb	r3, [r7, #18]
 800596a:	2b20      	cmp	r3, #32
 800596c:	d12e      	bne.n	80059cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800597c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2200      	movs	r2, #0
 8005982:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	2b29      	cmp	r3, #41	@ 0x29
 8005988:	d10a      	bne.n	80059a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2221      	movs	r2, #33	@ 0x21
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2228      	movs	r2, #40	@ 0x28
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005998:	6978      	ldr	r0, [r7, #20]
 800599a:	f7ff fd93 	bl	80054c4 <HAL_I2C_SlaveTxCpltCallback>
 800599e:	e00c      	b.n	80059ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a4:	d109      	bne.n	80059ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2222      	movs	r2, #34	@ 0x22
 80059aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2228      	movs	r2, #40	@ 0x28
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f7ff fd8f 	bl	80054d8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80059c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80059ca:	e074      	b.n	8005ab6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d06e      	beq.n	8005ab6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d107      	bne.n	80059f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a08:	d009      	beq.n	8005a1e <I2C_DMAXferCplt+0x11e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d006      	beq.n	8005a1e <I2C_DMAXferCplt+0x11e>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005a16:	d002      	beq.n	8005a1e <I2C_DMAXferCplt+0x11e>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d107      	bne.n	8005a2e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a2c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a3c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a4c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2200      	movs	r2, #0
 8005a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005a5c:	6978      	ldr	r0, [r7, #20]
 8005a5e:	f7ff fd45 	bl	80054ec <HAL_I2C_ErrorCallback>
}
 8005a62:	e028      	b.n	8005ab6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b40      	cmp	r3, #64	@ 0x40
 8005a76:	d10a      	bne.n	8005a8e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f7fb fe5e 	bl	8001748 <HAL_I2C_MemRxCpltCallback>
}
 8005a8c:	e013      	b.n	8005ab6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d002      	beq.n	8005aa2 <I2C_DMAXferCplt+0x1a2>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d103      	bne.n	8005aaa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aa8:	e002      	b.n	8005ab0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2212      	movs	r2, #18
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	f7ff fcfd 	bl	80054b0 <HAL_I2C_MasterRxCpltCallback>
}
 8005ab6:	bf00      	nop
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad8:	2200      	movs	r2, #0
 8005ada:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	2200      	movs	r2, #0
 8005aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fe fa01 	bl	8003ef4 <HAL_DMA_GetError>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d01b      	beq.n	8005b30 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b06:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f043 0210 	orr.w	r2, r3, #16
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fcde 	bl	80054ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b48:	e048      	b.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d044      	beq.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fd fa89 	bl	8003068 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d139      	bne.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10d      	bne.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	43da      	mvns	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf0c      	ite	eq
 8005b84:	2301      	moveq	r3, #1
 8005b86:	2300      	movne	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	e00c      	b.n	8005ba8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	43da      	mvns	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d116      	bne.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	f043 0220 	orr.w	r2, r3, #32
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e023      	b.n	8005c24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10d      	bne.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	43da      	mvns	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	e00c      	b.n	8005c1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	43da      	mvns	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d093      	beq.n	8005b4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c3a:	e071      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4a:	d123      	bne.n	8005c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	f043 0204 	orr.w	r2, r3, #4
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e067      	b.n	8005d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d041      	beq.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9c:	f7fd f9e4 	bl	8003068 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d302      	bcc.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d136      	bne.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d10c      	bne.n	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bf14      	ite	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	2300      	moveq	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	e00b      	b.n	8005cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	43da      	mvns	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d016      	beq.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e021      	b.n	8005d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d10c      	bne.n	8005d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	43da      	mvns	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e00b      	b.n	8005d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf14      	ite	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	2300      	moveq	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f47f af6d 	bne.w	8005c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d78:	e034      	b.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f8e3 	bl	8005f46 <I2C_IsAcknowledgeFailed>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e034      	b.n	8005df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d028      	beq.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d92:	f7fd f969 	bl	8003068 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d302      	bcc.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11d      	bne.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db2:	2b80      	cmp	r3, #128	@ 0x80
 8005db4:	d016      	beq.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e007      	b.n	8005df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b80      	cmp	r3, #128	@ 0x80
 8005df0:	d1c3      	bne.n	8005d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e08:	e034      	b.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f89b 	bl	8005f46 <I2C_IsAcknowledgeFailed>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e034      	b.n	8005e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d028      	beq.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fd f921 	bl	8003068 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11d      	bne.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d016      	beq.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e007      	b.n	8005e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d1c3      	bne.n	8005e0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e98:	e049      	b.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d119      	bne.n	8005edc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0210 	mvn.w	r2, #16
 8005eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e030      	b.n	8005f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005edc:	f7fd f8c4 	bl	8003068 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d11d      	bne.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efc:	2b40      	cmp	r3, #64	@ 0x40
 8005efe:	d016      	beq.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e007      	b.n	8005f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d1ae      	bne.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5c:	d11b      	bne.n	8005f96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	f043 0204 	orr.w	r2, r3, #4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0cc      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b68      	ldr	r3, [pc, #416]	@ (800615c <HAL_RCC_ClockConfig+0x1b8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d90c      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b65      	ldr	r3, [pc, #404]	@ (800615c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fce:	4b63      	ldr	r3, [pc, #396]	@ (800615c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0b8      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d020      	beq.n	800602e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ff8:	4b59      	ldr	r3, [pc, #356]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	4a58      	ldr	r2, [pc, #352]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006010:	4b53      	ldr	r3, [pc, #332]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a52      	ldr	r2, [pc, #328]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800601a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800601c:	4b50      	ldr	r3, [pc, #320]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	494d      	ldr	r1, [pc, #308]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d044      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d107      	bne.n	8006052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006042:	4b47      	ldr	r3, [pc, #284]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d119      	bne.n	8006082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e07f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d003      	beq.n	8006062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800605e:	2b03      	cmp	r3, #3
 8006060:	d107      	bne.n	8006072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006062:	4b3f      	ldr	r3, [pc, #252]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e06f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006072:	4b3b      	ldr	r3, [pc, #236]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e067      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006082:	4b37      	ldr	r3, [pc, #220]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f023 0203 	bic.w	r2, r3, #3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4934      	ldr	r1, [pc, #208]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	4313      	orrs	r3, r2
 8006092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006094:	f7fc ffe8 	bl	8003068 <HAL_GetTick>
 8006098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609c:	f7fc ffe4 	bl	8003068 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e04f      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 020c 	and.w	r2, r3, #12
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d1eb      	bne.n	800609c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060c4:	4b25      	ldr	r3, [pc, #148]	@ (800615c <HAL_RCC_ClockConfig+0x1b8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d20c      	bcs.n	80060ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d2:	4b22      	ldr	r3, [pc, #136]	@ (800615c <HAL_RCC_ClockConfig+0x1b8>)
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b20      	ldr	r3, [pc, #128]	@ (800615c <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d001      	beq.n	80060ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e032      	b.n	8006152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060f8:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4916      	ldr	r1, [pc, #88]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006116:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	490e      	ldr	r1, [pc, #56]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	4313      	orrs	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800612a:	f000 f855 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 800612e:	4602      	mov	r2, r0
 8006130:	4b0b      	ldr	r3, [pc, #44]	@ (8006160 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	490a      	ldr	r1, [pc, #40]	@ (8006164 <HAL_RCC_ClockConfig+0x1c0>)
 800613c:	5ccb      	ldrb	r3, [r1, r3]
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	4a09      	ldr	r2, [pc, #36]	@ (8006168 <HAL_RCC_ClockConfig+0x1c4>)
 8006144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006146:	4b09      	ldr	r3, [pc, #36]	@ (800616c <HAL_RCC_ClockConfig+0x1c8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fc ff48 	bl	8002fe0 <HAL_InitTick>

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40023c00 	.word	0x40023c00
 8006160:	40023800 	.word	0x40023800
 8006164:	0800b9ec 	.word	0x0800b9ec
 8006168:	20000090 	.word	0x20000090
 800616c:	2000009c 	.word	0x2000009c

08006170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006174:	4b03      	ldr	r3, [pc, #12]	@ (8006184 <HAL_RCC_GetHCLKFreq+0x14>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000090 	.word	0x20000090

08006188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800618c:	f7ff fff0 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	0a9b      	lsrs	r3, r3, #10
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4903      	ldr	r1, [pc, #12]	@ (80061ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	0800b9fc 	.word	0x0800b9fc

080061b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061b4:	f7ff ffdc 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	0b5b      	lsrs	r3, r3, #13
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4903      	ldr	r1, [pc, #12]	@ (80061d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40023800 	.word	0x40023800
 80061d4:	0800b9fc 	.word	0x0800b9fc

080061d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061dc:	b0ae      	sub	sp, #184	@ 0xb8
 80061de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061fe:	4bcb      	ldr	r3, [pc, #812]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b0c      	cmp	r3, #12
 8006208:	f200 8206 	bhi.w	8006618 <HAL_RCC_GetSysClockFreq+0x440>
 800620c:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <HAL_RCC_GetSysClockFreq+0x3c>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006249 	.word	0x08006249
 8006218:	08006619 	.word	0x08006619
 800621c:	08006619 	.word	0x08006619
 8006220:	08006619 	.word	0x08006619
 8006224:	08006251 	.word	0x08006251
 8006228:	08006619 	.word	0x08006619
 800622c:	08006619 	.word	0x08006619
 8006230:	08006619 	.word	0x08006619
 8006234:	08006259 	.word	0x08006259
 8006238:	08006619 	.word	0x08006619
 800623c:	08006619 	.word	0x08006619
 8006240:	08006619 	.word	0x08006619
 8006244:	08006449 	.word	0x08006449
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4bb9      	ldr	r3, [pc, #740]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x358>)
 800624a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800624e:	e1e7      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006250:	4bb8      	ldr	r3, [pc, #736]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006256:	e1e3      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006258:	4bb4      	ldr	r3, [pc, #720]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006264:	4bb1      	ldr	r3, [pc, #708]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d071      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006270:	4bae      	ldr	r3, [pc, #696]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	099b      	lsrs	r3, r3, #6
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800627c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006296:	4622      	mov	r2, r4
 8006298:	462b      	mov	r3, r5
 800629a:	f04f 0000 	mov.w	r0, #0
 800629e:	f04f 0100 	mov.w	r1, #0
 80062a2:	0159      	lsls	r1, r3, #5
 80062a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a8:	0150      	lsls	r0, r2, #5
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4621      	mov	r1, r4
 80062b0:	1a51      	subs	r1, r2, r1
 80062b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80062b4:	4629      	mov	r1, r5
 80062b6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80062c8:	4649      	mov	r1, r9
 80062ca:	018b      	lsls	r3, r1, #6
 80062cc:	4641      	mov	r1, r8
 80062ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062d2:	4641      	mov	r1, r8
 80062d4:	018a      	lsls	r2, r1, #6
 80062d6:	4641      	mov	r1, r8
 80062d8:	1a51      	subs	r1, r2, r1
 80062da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062dc:	4649      	mov	r1, r9
 80062de:	eb63 0301 	sbc.w	r3, r3, r1
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80062f0:	4649      	mov	r1, r9
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4641      	mov	r1, r8
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4641      	mov	r1, r8
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4622      	mov	r2, r4
 8006306:	189b      	adds	r3, r3, r2
 8006308:	633b      	str	r3, [r7, #48]	@ 0x30
 800630a:	462b      	mov	r3, r5
 800630c:	460a      	mov	r2, r1
 800630e:	eb42 0303 	adc.w	r3, r2, r3
 8006312:	637b      	str	r3, [r7, #52]	@ 0x34
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006320:	4629      	mov	r1, r5
 8006322:	024b      	lsls	r3, r1, #9
 8006324:	4621      	mov	r1, r4
 8006326:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800632a:	4621      	mov	r1, r4
 800632c:	024a      	lsls	r2, r1, #9
 800632e:	4610      	mov	r0, r2
 8006330:	4619      	mov	r1, r3
 8006332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006336:	2200      	movs	r2, #0
 8006338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800633c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006340:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006344:	f7fa fc70 	bl	8000c28 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4613      	mov	r3, r2
 800634e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006352:	e067      	b.n	8006424 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006354:	4b75      	ldr	r3, [pc, #468]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	099b      	lsrs	r3, r3, #6
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006360:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006364:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800636e:	2300      	movs	r3, #0
 8006370:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006372:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	f04f 0000 	mov.w	r0, #0
 800637e:	f04f 0100 	mov.w	r1, #0
 8006382:	0159      	lsls	r1, r3, #5
 8006384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006388:	0150      	lsls	r0, r2, #5
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4621      	mov	r1, r4
 8006390:	1a51      	subs	r1, r2, r1
 8006392:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006394:	4629      	mov	r1, r5
 8006396:	eb63 0301 	sbc.w	r3, r3, r1
 800639a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80063a8:	4649      	mov	r1, r9
 80063aa:	018b      	lsls	r3, r1, #6
 80063ac:	4641      	mov	r1, r8
 80063ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063b2:	4641      	mov	r1, r8
 80063b4:	018a      	lsls	r2, r1, #6
 80063b6:	4641      	mov	r1, r8
 80063b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80063bc:	4649      	mov	r1, r9
 80063be:	eb63 0b01 	sbc.w	fp, r3, r1
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d6:	4692      	mov	sl, r2
 80063d8:	469b      	mov	fp, r3
 80063da:	4623      	mov	r3, r4
 80063dc:	eb1a 0303 	adds.w	r3, sl, r3
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	462b      	mov	r3, r5
 80063e4:	eb4b 0303 	adc.w	r3, fp, r3
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80063f6:	4629      	mov	r1, r5
 80063f8:	028b      	lsls	r3, r1, #10
 80063fa:	4621      	mov	r1, r4
 80063fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006400:	4621      	mov	r1, r4
 8006402:	028a      	lsls	r2, r1, #10
 8006404:	4610      	mov	r0, r2
 8006406:	4619      	mov	r1, r3
 8006408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800640c:	2200      	movs	r2, #0
 800640e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006410:	677a      	str	r2, [r7, #116]	@ 0x74
 8006412:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006416:	f7fa fc07 	bl	8000c28 <__aeabi_uldivmod>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4613      	mov	r3, r2
 8006420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006424:	4b41      	ldr	r3, [pc, #260]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	0c1b      	lsrs	r3, r3, #16
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	3301      	adds	r3, #1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800643a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800643e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006446:	e0eb      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006448:	4b38      	ldr	r3, [pc, #224]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006454:	4b35      	ldr	r3, [pc, #212]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d06b      	beq.n	8006538 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006460:	4b32      	ldr	r3, [pc, #200]	@ (800652c <HAL_RCC_GetSysClockFreq+0x354>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	099b      	lsrs	r3, r3, #6
 8006466:	2200      	movs	r2, #0
 8006468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800646a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800646c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	663b      	str	r3, [r7, #96]	@ 0x60
 8006474:	2300      	movs	r3, #0
 8006476:	667b      	str	r3, [r7, #100]	@ 0x64
 8006478:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800647c:	4622      	mov	r2, r4
 800647e:	462b      	mov	r3, r5
 8006480:	f04f 0000 	mov.w	r0, #0
 8006484:	f04f 0100 	mov.w	r1, #0
 8006488:	0159      	lsls	r1, r3, #5
 800648a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800648e:	0150      	lsls	r0, r2, #5
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4621      	mov	r1, r4
 8006496:	1a51      	subs	r1, r2, r1
 8006498:	61b9      	str	r1, [r7, #24]
 800649a:	4629      	mov	r1, r5
 800649c:	eb63 0301 	sbc.w	r3, r3, r1
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80064ae:	4659      	mov	r1, fp
 80064b0:	018b      	lsls	r3, r1, #6
 80064b2:	4651      	mov	r1, sl
 80064b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064b8:	4651      	mov	r1, sl
 80064ba:	018a      	lsls	r2, r1, #6
 80064bc:	4651      	mov	r1, sl
 80064be:	ebb2 0801 	subs.w	r8, r2, r1
 80064c2:	4659      	mov	r1, fp
 80064c4:	eb63 0901 	sbc.w	r9, r3, r1
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064dc:	4690      	mov	r8, r2
 80064de:	4699      	mov	r9, r3
 80064e0:	4623      	mov	r3, r4
 80064e2:	eb18 0303 	adds.w	r3, r8, r3
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	462b      	mov	r3, r5
 80064ea:	eb49 0303 	adc.w	r3, r9, r3
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80064fc:	4629      	mov	r1, r5
 80064fe:	024b      	lsls	r3, r1, #9
 8006500:	4621      	mov	r1, r4
 8006502:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006506:	4621      	mov	r1, r4
 8006508:	024a      	lsls	r2, r1, #9
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006512:	2200      	movs	r2, #0
 8006514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006516:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006518:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800651c:	f7fa fb84 	bl	8000c28 <__aeabi_uldivmod>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4613      	mov	r3, r2
 8006526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800652a:	e065      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x420>
 800652c:	40023800 	.word	0x40023800
 8006530:	00f42400 	.word	0x00f42400
 8006534:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006538:	4b3d      	ldr	r3, [pc, #244]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x458>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	2200      	movs	r2, #0
 8006540:	4618      	mov	r0, r3
 8006542:	4611      	mov	r1, r2
 8006544:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006548:	653b      	str	r3, [r7, #80]	@ 0x50
 800654a:	2300      	movs	r3, #0
 800654c:	657b      	str	r3, [r7, #84]	@ 0x54
 800654e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006552:	4642      	mov	r2, r8
 8006554:	464b      	mov	r3, r9
 8006556:	f04f 0000 	mov.w	r0, #0
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	0159      	lsls	r1, r3, #5
 8006560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006564:	0150      	lsls	r0, r2, #5
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4641      	mov	r1, r8
 800656c:	1a51      	subs	r1, r2, r1
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	4649      	mov	r1, r9
 8006572:	eb63 0301 	sbc.w	r3, r3, r1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006584:	4659      	mov	r1, fp
 8006586:	018b      	lsls	r3, r1, #6
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800658e:	4651      	mov	r1, sl
 8006590:	018a      	lsls	r2, r1, #6
 8006592:	4651      	mov	r1, sl
 8006594:	1a54      	subs	r4, r2, r1
 8006596:	4659      	mov	r1, fp
 8006598:	eb63 0501 	sbc.w	r5, r3, r1
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	00eb      	lsls	r3, r5, #3
 80065a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065aa:	00e2      	lsls	r2, r4, #3
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	4643      	mov	r3, r8
 80065b2:	18e3      	adds	r3, r4, r3
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	464b      	mov	r3, r9
 80065b8:	eb45 0303 	adc.w	r3, r5, r3
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065e0:	2200      	movs	r2, #0
 80065e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80065e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065ea:	f7fa fb1d 	bl	8000c28 <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4613      	mov	r3, r2
 80065f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80065f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x458>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	0f1b      	lsrs	r3, r3, #28
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800660a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006616:	e003      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006618:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x45c>)
 800661a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800661e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006624:	4618      	mov	r0, r3
 8006626:	37b8      	adds	r7, #184	@ 0xb8
 8006628:	46bd      	mov	sp, r7
 800662a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	00f42400 	.word	0x00f42400

08006638 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e28d      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 8083 	beq.w	800675e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006658:	4b94      	ldr	r3, [pc, #592]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b04      	cmp	r3, #4
 8006662:	d019      	beq.n	8006698 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006664:	4b91      	ldr	r3, [pc, #580]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 030c 	and.w	r3, r3, #12
        || \
 800666c:	2b08      	cmp	r3, #8
 800666e:	d106      	bne.n	800667e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006670:	4b8e      	ldr	r3, [pc, #568]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800667c:	d00c      	beq.n	8006698 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800667e:	4b8b      	ldr	r3, [pc, #556]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006686:	2b0c      	cmp	r3, #12
 8006688:	d112      	bne.n	80066b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668a:	4b88      	ldr	r3, [pc, #544]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006696:	d10b      	bne.n	80066b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006698:	4b84      	ldr	r3, [pc, #528]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d05b      	beq.n	800675c <HAL_RCC_OscConfig+0x124>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d157      	bne.n	800675c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e25a      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x90>
 80066ba:	4b7c      	ldr	r3, [pc, #496]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7b      	ldr	r2, [pc, #492]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e01d      	b.n	8006704 <HAL_RCC_OscConfig+0xcc>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0xb4>
 80066d2:	4b76      	ldr	r3, [pc, #472]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a75      	ldr	r2, [pc, #468]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b73      	ldr	r3, [pc, #460]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a72      	ldr	r2, [pc, #456]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e00b      	b.n	8006704 <HAL_RCC_OscConfig+0xcc>
 80066ec:	4b6f      	ldr	r3, [pc, #444]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a6e      	ldr	r2, [pc, #440]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b6c      	ldr	r3, [pc, #432]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6b      	ldr	r2, [pc, #428]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80066fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d013      	beq.n	8006734 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fc fcac 	bl	8003068 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006714:	f7fc fca8 	bl	8003068 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	@ 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e21f      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	4b61      	ldr	r3, [pc, #388]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0xdc>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fc fc98 	bl	8003068 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800673c:	f7fc fc94 	bl	8003068 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b64      	cmp	r3, #100	@ 0x64
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e20b      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674e:	4b57      	ldr	r3, [pc, #348]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x104>
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800675c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d06f      	beq.n	800684a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800676a:	4b50      	ldr	r3, [pc, #320]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	2b00      	cmp	r3, #0
 8006774:	d017      	beq.n	80067a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006776:	4b4d      	ldr	r3, [pc, #308]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
        || \
 800677e:	2b08      	cmp	r3, #8
 8006780:	d105      	bne.n	800678e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006782:	4b4a      	ldr	r3, [pc, #296]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678e:	4b47      	ldr	r3, [pc, #284]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006796:	2b0c      	cmp	r3, #12
 8006798:	d11c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b44      	ldr	r3, [pc, #272]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d116      	bne.n	80067d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a6:	4b41      	ldr	r3, [pc, #260]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_RCC_OscConfig+0x186>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e1d3      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067be:	4b3b      	ldr	r3, [pc, #236]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4937      	ldr	r1, [pc, #220]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067d2:	e03a      	b.n	800684a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067dc:	4b34      	ldr	r3, [pc, #208]	@ (80068b0 <HAL_RCC_OscConfig+0x278>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fc fc41 	bl	8003068 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ea:	f7fc fc3d 	bl	8003068 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e1b4      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	4b2b      	ldr	r3, [pc, #172]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4925      	ldr	r1, [pc, #148]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
 800681c:	e015      	b.n	800684a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681e:	4b24      	ldr	r3, [pc, #144]	@ (80068b0 <HAL_RCC_OscConfig+0x278>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fc fc20 	bl	8003068 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800682c:	f7fc fc1c 	bl	8003068 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e193      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	4b1b      	ldr	r3, [pc, #108]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d036      	beq.n	80068c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685e:	4b15      	ldr	r3, [pc, #84]	@ (80068b4 <HAL_RCC_OscConfig+0x27c>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fc fc00 	bl	8003068 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686c:	f7fc fbfc 	bl	8003068 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e173      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <HAL_RCC_OscConfig+0x274>)
 8006880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x234>
 800688a:	e01b      	b.n	80068c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <HAL_RCC_OscConfig+0x27c>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006892:	f7fc fbe9 	bl	8003068 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	e00e      	b.n	80068b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689a:	f7fc fbe5 	bl	8003068 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d907      	bls.n	80068b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e15c      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
 80068ac:	40023800 	.word	0x40023800
 80068b0:	42470000 	.word	0x42470000
 80068b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80068ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1ea      	bne.n	800689a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8097 	beq.w	8006a00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d6:	4b83      	ldr	r3, [pc, #524]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068f2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b79      	ldr	r3, [pc, #484]	@ (8006ae8 <HAL_RCC_OscConfig+0x4b0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d118      	bne.n	8006940 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690e:	4b76      	ldr	r3, [pc, #472]	@ (8006ae8 <HAL_RCC_OscConfig+0x4b0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a75      	ldr	r2, [pc, #468]	@ (8006ae8 <HAL_RCC_OscConfig+0x4b0>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691a:	f7fc fba5 	bl	8003068 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006922:	f7fc fba1 	bl	8003068 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e118      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006934:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae8 <HAL_RCC_OscConfig+0x4b0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <HAL_RCC_OscConfig+0x31e>
 8006948:	4b66      	ldr	r3, [pc, #408]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	4a65      	ldr	r2, [pc, #404]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	6713      	str	r3, [r2, #112]	@ 0x70
 8006954:	e01c      	b.n	8006990 <HAL_RCC_OscConfig+0x358>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b05      	cmp	r3, #5
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x340>
 800695e:	4b61      	ldr	r3, [pc, #388]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006962:	4a60      	ldr	r2, [pc, #384]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006964:	f043 0304 	orr.w	r3, r3, #4
 8006968:	6713      	str	r3, [r2, #112]	@ 0x70
 800696a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	6713      	str	r3, [r2, #112]	@ 0x70
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0x358>
 8006978:	4b5a      	ldr	r3, [pc, #360]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	4a59      	ldr	r2, [pc, #356]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	6713      	str	r3, [r2, #112]	@ 0x70
 8006984:	4b57      	ldr	r3, [pc, #348]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	4a56      	ldr	r2, [pc, #344]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 800698a:	f023 0304 	bic.w	r3, r3, #4
 800698e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d015      	beq.n	80069c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fc fb66 	bl	8003068 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a0:	f7fc fb62 	bl	8003068 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0d7      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0ee      	beq.n	80069a0 <HAL_RCC_OscConfig+0x368>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c4:	f7fc fb50 	bl	8003068 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ca:	e00a      	b.n	80069e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069cc:	f7fc fb4c 	bl	8003068 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e0c1      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e2:	4b40      	ldr	r3, [pc, #256]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ee      	bne.n	80069cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80ad 	beq.w	8006b64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a0a:	4b36      	ldr	r3, [pc, #216]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d060      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d145      	bne.n	8006aaa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1e:	4b33      	ldr	r3, [pc, #204]	@ (8006aec <HAL_RCC_OscConfig+0x4b4>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fc fb20 	bl	8003068 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fc fb1c 	bl	8003068 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e093      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	3b01      	subs	r3, #1
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	071b      	lsls	r3, r3, #28
 8006a76:	491b      	ldr	r1, [pc, #108]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006aec <HAL_RCC_OscConfig+0x4b4>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a82:	f7fc faf1 	bl	8003068 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8a:	f7fc faed 	bl	8003068 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e064      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x452>
 8006aa8:	e05c      	b.n	8006b64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aaa:	4b10      	ldr	r3, [pc, #64]	@ (8006aec <HAL_RCC_OscConfig+0x4b4>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fc fada 	bl	8003068 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab8:	f7fc fad6 	bl	8003068 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e04d      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aca:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <HAL_RCC_OscConfig+0x4ac>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x480>
 8006ad6:	e045      	b.n	8006b64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d107      	bne.n	8006af0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e040      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	40007000 	.word	0x40007000
 8006aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006af0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <HAL_RCC_OscConfig+0x538>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d030      	beq.n	8006b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d129      	bne.n	8006b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d122      	bne.n	8006b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b20:	4013      	ands	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d119      	bne.n	8006b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d10f      	bne.n	8006b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d001      	beq.n	8006b64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800

08006b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e041      	b.n	8006c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fb fcea 	bl	8002574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f000 fc62 	bl	800747c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e04e      	b.n	8006cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a23      	ldr	r2, [pc, #140]	@ (8006cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d022      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c56:	d01d      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d018      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a19      	ldr	r2, [pc, #100]	@ (8006cec <HAL_TIM_Base_Start_IT+0xd8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a18      	ldr	r2, [pc, #96]	@ (8006cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d111      	bne.n	8006cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b06      	cmp	r3, #6
 8006ca4:	d010      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0201 	orr.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb6:	e007      	b.n	8006cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800
 8006ce4:	40000c00 	.word	0x40000c00
 8006ce8:	40010400 	.word	0x40010400
 8006cec:	40014000 	.word	0x40014000
 8006cf0:	40001800 	.word	0x40001800

08006cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e041      	b.n	8006d8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f839 	bl	8006d92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 fba2 	bl	800747c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <HAL_TIM_PWM_Start+0x24>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	bf14      	ite	ne
 8006dc4:	2301      	movne	r3, #1
 8006dc6:	2300      	moveq	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	e022      	b.n	8006e12 <HAL_TIM_PWM_Start+0x6a>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d109      	bne.n	8006de6 <HAL_TIM_PWM_Start+0x3e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	bf14      	ite	ne
 8006dde:	2301      	movne	r3, #1
 8006de0:	2300      	moveq	r3, #0
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	e015      	b.n	8006e12 <HAL_TIM_PWM_Start+0x6a>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d109      	bne.n	8006e00 <HAL_TIM_PWM_Start+0x58>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	bf14      	ite	ne
 8006df8:	2301      	movne	r3, #1
 8006dfa:	2300      	moveq	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	e008      	b.n	8006e12 <HAL_TIM_PWM_Start+0x6a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	bf14      	ite	ne
 8006e0c:	2301      	movne	r3, #1
 8006e0e:	2300      	moveq	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e07c      	b.n	8006f14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <HAL_TIM_PWM_Start+0x82>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e28:	e013      	b.n	8006e52 <HAL_TIM_PWM_Start+0xaa>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d104      	bne.n	8006e3a <HAL_TIM_PWM_Start+0x92>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e38:	e00b      	b.n	8006e52 <HAL_TIM_PWM_Start+0xaa>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d104      	bne.n	8006e4a <HAL_TIM_PWM_Start+0xa2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e48:	e003      	b.n	8006e52 <HAL_TIM_PWM_Start+0xaa>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2201      	movs	r2, #1
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fe04 	bl	8007a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2d      	ldr	r2, [pc, #180]	@ (8006f1c <HAL_TIM_PWM_Start+0x174>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d004      	beq.n	8006e74 <HAL_TIM_PWM_Start+0xcc>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8006f20 <HAL_TIM_PWM_Start+0x178>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d101      	bne.n	8006e78 <HAL_TIM_PWM_Start+0xd0>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e000      	b.n	8006e7a <HAL_TIM_PWM_Start+0xd2>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a22      	ldr	r2, [pc, #136]	@ (8006f1c <HAL_TIM_PWM_Start+0x174>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d022      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea0:	d01d      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f24 <HAL_TIM_PWM_Start+0x17c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d018      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f28 <HAL_TIM_PWM_Start+0x180>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d013      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1c      	ldr	r2, [pc, #112]	@ (8006f2c <HAL_TIM_PWM_Start+0x184>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00e      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a16      	ldr	r2, [pc, #88]	@ (8006f20 <HAL_TIM_PWM_Start+0x178>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d009      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a18      	ldr	r2, [pc, #96]	@ (8006f30 <HAL_TIM_PWM_Start+0x188>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <HAL_TIM_PWM_Start+0x136>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a16      	ldr	r2, [pc, #88]	@ (8006f34 <HAL_TIM_PWM_Start+0x18c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d111      	bne.n	8006f02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b06      	cmp	r3, #6
 8006eee:	d010      	beq.n	8006f12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	e007      	b.n	8006f12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40010000 	.word	0x40010000
 8006f20:	40010400 	.word	0x40010400
 8006f24:	40000400 	.word	0x40000400
 8006f28:	40000800 	.word	0x40000800
 8006f2c:	40000c00 	.word	0x40000c00
 8006f30:	40014000 	.word	0x40014000
 8006f34:	40001800 	.word	0x40001800

08006f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d020      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01b      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0202 	mvn.w	r2, #2
 8006f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fa5b 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa4d 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fa5e 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d020      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01b      	beq.n	8006fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0204 	mvn.w	r2, #4
 8006fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa35 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa27 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa38 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d020      	beq.n	8007034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01b      	beq.n	8007034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0208 	mvn.w	r2, #8
 8007004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa0f 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 8007020:	e005      	b.n	800702e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa01 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa12 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 0310 	and.w	r3, r3, #16
 800703a:	2b00      	cmp	r3, #0
 800703c:	d020      	beq.n	8007080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0210 	mvn.w	r2, #16
 8007050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2208      	movs	r2, #8
 8007056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9e9 	bl	800743e <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9db 	bl	800742a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9ec 	bl	8007452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00c      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0201 	mvn.w	r2, #1
 800709c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fa fb66 	bl	8001770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00c      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fdce 	bl	8007c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9bd 	bl	8007466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0220 	mvn.w	r2, #32
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fda0 	bl	8007c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007132:	2302      	movs	r3, #2
 8007134:	e0ae      	b.n	8007294 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b0c      	cmp	r3, #12
 8007142:	f200 809f 	bhi.w	8007284 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007181 	.word	0x08007181
 8007150:	08007285 	.word	0x08007285
 8007154:	08007285 	.word	0x08007285
 8007158:	08007285 	.word	0x08007285
 800715c:	080071c1 	.word	0x080071c1
 8007160:	08007285 	.word	0x08007285
 8007164:	08007285 	.word	0x08007285
 8007168:	08007285 	.word	0x08007285
 800716c:	08007203 	.word	0x08007203
 8007170:	08007285 	.word	0x08007285
 8007174:	08007285 	.word	0x08007285
 8007178:	08007285 	.word	0x08007285
 800717c:	08007243 	.word	0x08007243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fa24 	bl	80075d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0208 	orr.w	r2, r2, #8
 800719a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0204 	bic.w	r2, r2, #4
 80071aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6999      	ldr	r1, [r3, #24]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	619a      	str	r2, [r3, #24]
      break;
 80071be:	e064      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fa74 	bl	80076b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6999      	ldr	r1, [r3, #24]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	021a      	lsls	r2, r3, #8
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	619a      	str	r2, [r3, #24]
      break;
 8007200:	e043      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fac9 	bl	80077a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0208 	orr.w	r2, r2, #8
 800721c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0204 	bic.w	r2, r2, #4
 800722c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69d9      	ldr	r1, [r3, #28]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	61da      	str	r2, [r3, #28]
      break;
 8007240:	e023      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fb1d 	bl	8007888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800725c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800726c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69d9      	ldr	r1, [r3, #28]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	021a      	lsls	r2, r3, #8
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	61da      	str	r2, [r3, #28]
      break;
 8007282:	e002      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_ConfigClockSource+0x1c>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e0b4      	b.n	8007422 <HAL_TIM_ConfigClockSource+0x186>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f0:	d03e      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0xd4>
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f6:	f200 8087 	bhi.w	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 80072fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072fe:	f000 8086 	beq.w	800740e <HAL_TIM_ConfigClockSource+0x172>
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007306:	d87f      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b70      	cmp	r3, #112	@ 0x70
 800730a:	d01a      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0xa6>
 800730c:	2b70      	cmp	r3, #112	@ 0x70
 800730e:	d87b      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b60      	cmp	r3, #96	@ 0x60
 8007312:	d050      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x11a>
 8007314:	2b60      	cmp	r3, #96	@ 0x60
 8007316:	d877      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007318:	2b50      	cmp	r3, #80	@ 0x50
 800731a:	d03c      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0xfa>
 800731c:	2b50      	cmp	r3, #80	@ 0x50
 800731e:	d873      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007320:	2b40      	cmp	r3, #64	@ 0x40
 8007322:	d058      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x13a>
 8007324:	2b40      	cmp	r3, #64	@ 0x40
 8007326:	d86f      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b30      	cmp	r3, #48	@ 0x30
 800732a:	d064      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	2b30      	cmp	r3, #48	@ 0x30
 800732e:	d86b      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b20      	cmp	r3, #32
 8007332:	d060      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007334:	2b20      	cmp	r3, #32
 8007336:	d867      	bhi.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d05c      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x15a>
 800733c:	2b10      	cmp	r3, #16
 800733e:	d05a      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x15a>
 8007340:	e062      	b.n	8007408 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007352:	f000 fb69 	bl	8007a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007364:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	609a      	str	r2, [r3, #8]
      break;
 800736e:	e04f      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007380:	f000 fb52 	bl	8007a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007392:	609a      	str	r2, [r3, #8]
      break;
 8007394:	e03c      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a2:	461a      	mov	r2, r3
 80073a4:	f000 fac6 	bl	8007934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2150      	movs	r1, #80	@ 0x50
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fb1f 	bl	80079f2 <TIM_ITRx_SetConfig>
      break;
 80073b4:	e02c      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073c2:	461a      	mov	r2, r3
 80073c4:	f000 fae5 	bl	8007992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2160      	movs	r1, #96	@ 0x60
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fb0f 	bl	80079f2 <TIM_ITRx_SetConfig>
      break;
 80073d4:	e01c      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e2:	461a      	mov	r2, r3
 80073e4:	f000 faa6 	bl	8007934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2140      	movs	r1, #64	@ 0x40
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 faff 	bl	80079f2 <TIM_ITRx_SetConfig>
      break;
 80073f4:	e00c      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f000 faf6 	bl	80079f2 <TIM_ITRx_SetConfig>
      break;
 8007406:	e003      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	e000      	b.n	8007410 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800740e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a46      	ldr	r2, [pc, #280]	@ (80075a8 <TIM_Base_SetConfig+0x12c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749a:	d00f      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a43      	ldr	r2, [pc, #268]	@ (80075ac <TIM_Base_SetConfig+0x130>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00b      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a42      	ldr	r2, [pc, #264]	@ (80075b0 <TIM_Base_SetConfig+0x134>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a41      	ldr	r2, [pc, #260]	@ (80075b4 <TIM_Base_SetConfig+0x138>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a40      	ldr	r2, [pc, #256]	@ (80075b8 <TIM_Base_SetConfig+0x13c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d108      	bne.n	80074ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a35      	ldr	r2, [pc, #212]	@ (80075a8 <TIM_Base_SetConfig+0x12c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d02b      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074dc:	d027      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a32      	ldr	r2, [pc, #200]	@ (80075ac <TIM_Base_SetConfig+0x130>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d023      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a31      	ldr	r2, [pc, #196]	@ (80075b0 <TIM_Base_SetConfig+0x134>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d01f      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a30      	ldr	r2, [pc, #192]	@ (80075b4 <TIM_Base_SetConfig+0x138>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01b      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2f      	ldr	r2, [pc, #188]	@ (80075b8 <TIM_Base_SetConfig+0x13c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d017      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <TIM_Base_SetConfig+0x140>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2d      	ldr	r2, [pc, #180]	@ (80075c0 <TIM_Base_SetConfig+0x144>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00f      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2c      	ldr	r2, [pc, #176]	@ (80075c4 <TIM_Base_SetConfig+0x148>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a2b      	ldr	r2, [pc, #172]	@ (80075c8 <TIM_Base_SetConfig+0x14c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <TIM_Base_SetConfig+0x150>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a29      	ldr	r2, [pc, #164]	@ (80075d0 <TIM_Base_SetConfig+0x154>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d108      	bne.n	8007540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a10      	ldr	r2, [pc, #64]	@ (80075a8 <TIM_Base_SetConfig+0x12c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_Base_SetConfig+0xf8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a12      	ldr	r2, [pc, #72]	@ (80075b8 <TIM_Base_SetConfig+0x13c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d103      	bne.n	800757c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b01      	cmp	r3, #1
 800758c:	d105      	bne.n	800759a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f023 0201 	bic.w	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	611a      	str	r2, [r3, #16]
  }
}
 800759a:	bf00      	nop
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40010000 	.word	0x40010000
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40000c00 	.word	0x40000c00
 80075b8:	40010400 	.word	0x40010400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800
 80075c8:	40001800 	.word	0x40001800
 80075cc:	40001c00 	.word	0x40001c00
 80075d0:	40002000 	.word	0x40002000

080075d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f023 0201 	bic.w	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0303 	bic.w	r3, r3, #3
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 0302 	bic.w	r3, r3, #2
 800761c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a20      	ldr	r2, [pc, #128]	@ (80076ac <TIM_OC1_SetConfig+0xd8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_OC1_SetConfig+0x64>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <TIM_OC1_SetConfig+0xdc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10c      	bne.n	8007652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0308 	bic.w	r3, r3, #8
 800763e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0304 	bic.w	r3, r3, #4
 8007650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a15      	ldr	r2, [pc, #84]	@ (80076ac <TIM_OC1_SetConfig+0xd8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC1_SetConfig+0x8e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a14      	ldr	r2, [pc, #80]	@ (80076b0 <TIM_OC1_SetConfig+0xdc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d111      	bne.n	8007686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	621a      	str	r2, [r3, #32]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40010400 	.word	0x40010400

080076b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f023 0210 	bic.w	r2, r3, #16
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	021b      	lsls	r3, r3, #8
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f023 0320 	bic.w	r3, r3, #32
 80076fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a22      	ldr	r2, [pc, #136]	@ (8007798 <TIM_OC2_SetConfig+0xe4>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC2_SetConfig+0x68>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a21      	ldr	r2, [pc, #132]	@ (800779c <TIM_OC2_SetConfig+0xe8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d10d      	bne.n	8007738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007736:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a17      	ldr	r2, [pc, #92]	@ (8007798 <TIM_OC2_SetConfig+0xe4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_OC2_SetConfig+0x94>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a16      	ldr	r2, [pc, #88]	@ (800779c <TIM_OC2_SetConfig+0xe8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d113      	bne.n	8007770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800774e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4313      	orrs	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40010000 	.word	0x40010000
 800779c:	40010400 	.word	0x40010400

080077a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a21      	ldr	r2, [pc, #132]	@ (8007880 <TIM_OC3_SetConfig+0xe0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <TIM_OC3_SetConfig+0x66>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a20      	ldr	r2, [pc, #128]	@ (8007884 <TIM_OC3_SetConfig+0xe4>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d10d      	bne.n	8007822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800780c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <TIM_OC3_SetConfig+0xe0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_OC3_SetConfig+0x92>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a15      	ldr	r2, [pc, #84]	@ (8007884 <TIM_OC3_SetConfig+0xe4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d113      	bne.n	800785a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	40010000 	.word	0x40010000
 8007884:	40010400 	.word	0x40010400

08007888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	031b      	lsls	r3, r3, #12
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a12      	ldr	r2, [pc, #72]	@ (800792c <TIM_OC4_SetConfig+0xa4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_OC4_SetConfig+0x68>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a11      	ldr	r2, [pc, #68]	@ (8007930 <TIM_OC4_SetConfig+0xa8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d109      	bne.n	8007904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40010400 	.word	0x40010400

08007934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f023 0201 	bic.w	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800795e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f023 030a 	bic.w	r3, r3, #10
 8007970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007992:	b480      	push	{r7}
 8007994:	b087      	sub	sp, #28
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	f023 0210 	bic.w	r2, r3, #16
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	031b      	lsls	r3, r3, #12
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f043 0307 	orr.w	r3, r3, #7
 8007a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	609a      	str	r2, [r3, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	021a      	lsls	r2, r3, #8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	609a      	str	r2, [r3, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	401a      	ands	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
	...

08007ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e05a      	b.n	8007b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a21      	ldr	r2, [pc, #132]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d022      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b18:	d01d      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d018      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a1b      	ldr	r2, [pc, #108]	@ (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1a      	ldr	r2, [pc, #104]	@ (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00e      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a17      	ldr	r2, [pc, #92]	@ (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a15      	ldr	r2, [pc, #84]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d10c      	bne.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40010000 	.word	0x40010000
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40010400 	.word	0x40010400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40001800 	.word	0x40001800

08007bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e03d      	b.n	8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e042      	b.n	8007d10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d106      	bne.n	8007ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fa fd08 	bl	80026b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2224      	movs	r2, #36	@ 0x24
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f82b 	bl	8007d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695a      	ldr	r2, [r3, #20]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d1c:	b0c0      	sub	sp, #256	@ 0x100
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d34:	68d9      	ldr	r1, [r3, #12]
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	ea40 0301 	orr.w	r3, r0, r1
 8007d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d70:	f021 010c 	bic.w	r1, r1, #12
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d92:	6999      	ldr	r1, [r3, #24]
 8007d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	ea40 0301 	orr.w	r3, r0, r1
 8007d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b8f      	ldr	r3, [pc, #572]	@ (8007fe4 <UART_SetConfig+0x2cc>)
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d005      	beq.n	8007db8 <UART_SetConfig+0xa0>
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b8d      	ldr	r3, [pc, #564]	@ (8007fe8 <UART_SetConfig+0x2d0>)
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d104      	bne.n	8007dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007db8:	f7fe f9fa 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 8007dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007dc0:	e003      	b.n	8007dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dc2:	f7fe f9e1 	bl	8006188 <HAL_RCC_GetPCLK1Freq>
 8007dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dd4:	f040 810c 	bne.w	8007ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007de2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007dea:	4622      	mov	r2, r4
 8007dec:	462b      	mov	r3, r5
 8007dee:	1891      	adds	r1, r2, r2
 8007df0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007df2:	415b      	adcs	r3, r3
 8007df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	eb12 0801 	adds.w	r8, r2, r1
 8007e00:	4629      	mov	r1, r5
 8007e02:	eb43 0901 	adc.w	r9, r3, r1
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e1a:	4690      	mov	r8, r2
 8007e1c:	4699      	mov	r9, r3
 8007e1e:	4623      	mov	r3, r4
 8007e20:	eb18 0303 	adds.w	r3, r8, r3
 8007e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e28:	462b      	mov	r3, r5
 8007e2a:	eb49 0303 	adc.w	r3, r9, r3
 8007e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e46:	460b      	mov	r3, r1
 8007e48:	18db      	adds	r3, r3, r3
 8007e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	eb42 0303 	adc.w	r3, r2, r3
 8007e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e5c:	f7f8 fee4 	bl	8000c28 <__aeabi_uldivmod>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4b61      	ldr	r3, [pc, #388]	@ (8007fec <UART_SetConfig+0x2d4>)
 8007e66:	fba3 2302 	umull	r2, r3, r3, r2
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	011c      	lsls	r4, r3, #4
 8007e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	1891      	adds	r1, r2, r2
 8007e86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e88:	415b      	adcs	r3, r3
 8007e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e90:	4641      	mov	r1, r8
 8007e92:	eb12 0a01 	adds.w	sl, r2, r1
 8007e96:	4649      	mov	r1, r9
 8007e98:	eb43 0b01 	adc.w	fp, r3, r1
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eb0:	4692      	mov	sl, r2
 8007eb2:	469b      	mov	fp, r3
 8007eb4:	4643      	mov	r3, r8
 8007eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8007eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007edc:	460b      	mov	r3, r1
 8007ede:	18db      	adds	r3, r3, r3
 8007ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	eb42 0303 	adc.w	r3, r2, r3
 8007ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ef2:	f7f8 fe99 	bl	8000c28 <__aeabi_uldivmod>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4611      	mov	r1, r2
 8007efc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fec <UART_SetConfig+0x2d4>)
 8007efe:	fba3 2301 	umull	r2, r3, r3, r1
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	2264      	movs	r2, #100	@ 0x64
 8007f06:	fb02 f303 	mul.w	r3, r2, r3
 8007f0a:	1acb      	subs	r3, r1, r3
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f12:	4b36      	ldr	r3, [pc, #216]	@ (8007fec <UART_SetConfig+0x2d4>)
 8007f14:	fba3 2302 	umull	r2, r3, r3, r2
 8007f18:	095b      	lsrs	r3, r3, #5
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f20:	441c      	add	r4, r3
 8007f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	1891      	adds	r1, r2, r2
 8007f3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f3c:	415b      	adcs	r3, r3
 8007f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f44:	4641      	mov	r1, r8
 8007f46:	1851      	adds	r1, r2, r1
 8007f48:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	414b      	adcs	r3, r1
 8007f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	00cb      	lsls	r3, r1, #3
 8007f60:	4651      	mov	r1, sl
 8007f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f66:	4651      	mov	r1, sl
 8007f68:	00ca      	lsls	r2, r1, #3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4642      	mov	r2, r8
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f78:	464b      	mov	r3, r9
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	eb42 0303 	adc.w	r3, r2, r3
 8007f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f98:	460b      	mov	r3, r1
 8007f9a:	18db      	adds	r3, r3, r3
 8007f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	eb42 0303 	adc.w	r3, r2, r3
 8007fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007fae:	f7f8 fe3b 	bl	8000c28 <__aeabi_uldivmod>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <UART_SetConfig+0x2d4>)
 8007fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	2164      	movs	r1, #100	@ 0x64
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	3332      	adds	r3, #50	@ 0x32
 8007fca:	4a08      	ldr	r2, [pc, #32]	@ (8007fec <UART_SetConfig+0x2d4>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	095b      	lsrs	r3, r3, #5
 8007fd2:	f003 0207 	and.w	r2, r3, #7
 8007fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4422      	add	r2, r4
 8007fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fe0:	e106      	b.n	80081f0 <UART_SetConfig+0x4d8>
 8007fe2:	bf00      	nop
 8007fe4:	40011000 	.word	0x40011000
 8007fe8:	40011400 	.word	0x40011400
 8007fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008002:	4642      	mov	r2, r8
 8008004:	464b      	mov	r3, r9
 8008006:	1891      	adds	r1, r2, r2
 8008008:	6239      	str	r1, [r7, #32]
 800800a:	415b      	adcs	r3, r3
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
 800800e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008012:	4641      	mov	r1, r8
 8008014:	1854      	adds	r4, r2, r1
 8008016:	4649      	mov	r1, r9
 8008018:	eb43 0501 	adc.w	r5, r3, r1
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	f04f 0300 	mov.w	r3, #0
 8008024:	00eb      	lsls	r3, r5, #3
 8008026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800802a:	00e2      	lsls	r2, r4, #3
 800802c:	4614      	mov	r4, r2
 800802e:	461d      	mov	r5, r3
 8008030:	4643      	mov	r3, r8
 8008032:	18e3      	adds	r3, r4, r3
 8008034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008038:	464b      	mov	r3, r9
 800803a:	eb45 0303 	adc.w	r3, r5, r3
 800803e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800804e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008052:	f04f 0200 	mov.w	r2, #0
 8008056:	f04f 0300 	mov.w	r3, #0
 800805a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800805e:	4629      	mov	r1, r5
 8008060:	008b      	lsls	r3, r1, #2
 8008062:	4621      	mov	r1, r4
 8008064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008068:	4621      	mov	r1, r4
 800806a:	008a      	lsls	r2, r1, #2
 800806c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008070:	f7f8 fdda 	bl	8000c28 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4b60      	ldr	r3, [pc, #384]	@ (80081fc <UART_SetConfig+0x4e4>)
 800807a:	fba3 2302 	umull	r2, r3, r3, r2
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	011c      	lsls	r4, r3, #4
 8008082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008086:	2200      	movs	r2, #0
 8008088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800808c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008094:	4642      	mov	r2, r8
 8008096:	464b      	mov	r3, r9
 8008098:	1891      	adds	r1, r2, r2
 800809a:	61b9      	str	r1, [r7, #24]
 800809c:	415b      	adcs	r3, r3
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080a4:	4641      	mov	r1, r8
 80080a6:	1851      	adds	r1, r2, r1
 80080a8:	6139      	str	r1, [r7, #16]
 80080aa:	4649      	mov	r1, r9
 80080ac:	414b      	adcs	r3, r1
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080bc:	4659      	mov	r1, fp
 80080be:	00cb      	lsls	r3, r1, #3
 80080c0:	4651      	mov	r1, sl
 80080c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080c6:	4651      	mov	r1, sl
 80080c8:	00ca      	lsls	r2, r1, #3
 80080ca:	4610      	mov	r0, r2
 80080cc:	4619      	mov	r1, r3
 80080ce:	4603      	mov	r3, r0
 80080d0:	4642      	mov	r2, r8
 80080d2:	189b      	adds	r3, r3, r2
 80080d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080d8:	464b      	mov	r3, r9
 80080da:	460a      	mov	r2, r1
 80080dc:	eb42 0303 	adc.w	r3, r2, r3
 80080e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	f04f 0300 	mov.w	r3, #0
 80080f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080fc:	4649      	mov	r1, r9
 80080fe:	008b      	lsls	r3, r1, #2
 8008100:	4641      	mov	r1, r8
 8008102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008106:	4641      	mov	r1, r8
 8008108:	008a      	lsls	r2, r1, #2
 800810a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800810e:	f7f8 fd8b 	bl	8000c28 <__aeabi_uldivmod>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4611      	mov	r1, r2
 8008118:	4b38      	ldr	r3, [pc, #224]	@ (80081fc <UART_SetConfig+0x4e4>)
 800811a:	fba3 2301 	umull	r2, r3, r3, r1
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	2264      	movs	r2, #100	@ 0x64
 8008122:	fb02 f303 	mul.w	r3, r2, r3
 8008126:	1acb      	subs	r3, r1, r3
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	3332      	adds	r3, #50	@ 0x32
 800812c:	4a33      	ldr	r2, [pc, #204]	@ (80081fc <UART_SetConfig+0x4e4>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008138:	441c      	add	r4, r3
 800813a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800813e:	2200      	movs	r2, #0
 8008140:	673b      	str	r3, [r7, #112]	@ 0x70
 8008142:	677a      	str	r2, [r7, #116]	@ 0x74
 8008144:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008148:	4642      	mov	r2, r8
 800814a:	464b      	mov	r3, r9
 800814c:	1891      	adds	r1, r2, r2
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	415b      	adcs	r3, r3
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008158:	4641      	mov	r1, r8
 800815a:	1851      	adds	r1, r2, r1
 800815c:	6039      	str	r1, [r7, #0]
 800815e:	4649      	mov	r1, r9
 8008160:	414b      	adcs	r3, r1
 8008162:	607b      	str	r3, [r7, #4]
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008170:	4659      	mov	r1, fp
 8008172:	00cb      	lsls	r3, r1, #3
 8008174:	4651      	mov	r1, sl
 8008176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800817a:	4651      	mov	r1, sl
 800817c:	00ca      	lsls	r2, r1, #3
 800817e:	4610      	mov	r0, r2
 8008180:	4619      	mov	r1, r3
 8008182:	4603      	mov	r3, r0
 8008184:	4642      	mov	r2, r8
 8008186:	189b      	adds	r3, r3, r2
 8008188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800818a:	464b      	mov	r3, r9
 800818c:	460a      	mov	r2, r1
 800818e:	eb42 0303 	adc.w	r3, r2, r3
 8008192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	663b      	str	r3, [r7, #96]	@ 0x60
 800819e:	667a      	str	r2, [r7, #100]	@ 0x64
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	f04f 0300 	mov.w	r3, #0
 80081a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80081ac:	4649      	mov	r1, r9
 80081ae:	008b      	lsls	r3, r1, #2
 80081b0:	4641      	mov	r1, r8
 80081b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081b6:	4641      	mov	r1, r8
 80081b8:	008a      	lsls	r2, r1, #2
 80081ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80081be:	f7f8 fd33 	bl	8000c28 <__aeabi_uldivmod>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <UART_SetConfig+0x4e4>)
 80081c8:	fba3 1302 	umull	r1, r3, r3, r2
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	2164      	movs	r1, #100	@ 0x64
 80081d0:	fb01 f303 	mul.w	r3, r1, r3
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	3332      	adds	r3, #50	@ 0x32
 80081da:	4a08      	ldr	r2, [pc, #32]	@ (80081fc <UART_SetConfig+0x4e4>)
 80081dc:	fba2 2303 	umull	r2, r3, r2, r3
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	f003 020f 	and.w	r2, r3, #15
 80081e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4422      	add	r2, r4
 80081ee:	609a      	str	r2, [r3, #8]
}
 80081f0:	bf00      	nop
 80081f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081f6:	46bd      	mov	sp, r7
 80081f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081fc:	51eb851f 	.word	0x51eb851f

08008200 <__cvt>:
 8008200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008204:	ec57 6b10 	vmov	r6, r7, d0
 8008208:	2f00      	cmp	r7, #0
 800820a:	460c      	mov	r4, r1
 800820c:	4619      	mov	r1, r3
 800820e:	463b      	mov	r3, r7
 8008210:	bfbb      	ittet	lt
 8008212:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008216:	461f      	movlt	r7, r3
 8008218:	2300      	movge	r3, #0
 800821a:	232d      	movlt	r3, #45	@ 0x2d
 800821c:	700b      	strb	r3, [r1, #0]
 800821e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008220:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008224:	4691      	mov	r9, r2
 8008226:	f023 0820 	bic.w	r8, r3, #32
 800822a:	bfbc      	itt	lt
 800822c:	4632      	movlt	r2, r6
 800822e:	4616      	movlt	r6, r2
 8008230:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008234:	d005      	beq.n	8008242 <__cvt+0x42>
 8008236:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800823a:	d100      	bne.n	800823e <__cvt+0x3e>
 800823c:	3401      	adds	r4, #1
 800823e:	2102      	movs	r1, #2
 8008240:	e000      	b.n	8008244 <__cvt+0x44>
 8008242:	2103      	movs	r1, #3
 8008244:	ab03      	add	r3, sp, #12
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	ab02      	add	r3, sp, #8
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	ec47 6b10 	vmov	d0, r6, r7
 8008250:	4653      	mov	r3, sl
 8008252:	4622      	mov	r2, r4
 8008254:	f000 fe5c 	bl	8008f10 <_dtoa_r>
 8008258:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800825c:	4605      	mov	r5, r0
 800825e:	d119      	bne.n	8008294 <__cvt+0x94>
 8008260:	f019 0f01 	tst.w	r9, #1
 8008264:	d00e      	beq.n	8008284 <__cvt+0x84>
 8008266:	eb00 0904 	add.w	r9, r0, r4
 800826a:	2200      	movs	r2, #0
 800826c:	2300      	movs	r3, #0
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8008276:	b108      	cbz	r0, 800827c <__cvt+0x7c>
 8008278:	f8cd 900c 	str.w	r9, [sp, #12]
 800827c:	2230      	movs	r2, #48	@ 0x30
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	454b      	cmp	r3, r9
 8008282:	d31e      	bcc.n	80082c2 <__cvt+0xc2>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008288:	1b5b      	subs	r3, r3, r5
 800828a:	4628      	mov	r0, r5
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	b004      	add	sp, #16
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008298:	eb00 0904 	add.w	r9, r0, r4
 800829c:	d1e5      	bne.n	800826a <__cvt+0x6a>
 800829e:	7803      	ldrb	r3, [r0, #0]
 80082a0:	2b30      	cmp	r3, #48	@ 0x30
 80082a2:	d10a      	bne.n	80082ba <__cvt+0xba>
 80082a4:	2200      	movs	r2, #0
 80082a6:	2300      	movs	r3, #0
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 fc2c 	bl	8000b08 <__aeabi_dcmpeq>
 80082b0:	b918      	cbnz	r0, 80082ba <__cvt+0xba>
 80082b2:	f1c4 0401 	rsb	r4, r4, #1
 80082b6:	f8ca 4000 	str.w	r4, [sl]
 80082ba:	f8da 3000 	ldr.w	r3, [sl]
 80082be:	4499      	add	r9, r3
 80082c0:	e7d3      	b.n	800826a <__cvt+0x6a>
 80082c2:	1c59      	adds	r1, r3, #1
 80082c4:	9103      	str	r1, [sp, #12]
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e7d9      	b.n	800827e <__cvt+0x7e>

080082ca <__exponent>:
 80082ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082cc:	2900      	cmp	r1, #0
 80082ce:	bfba      	itte	lt
 80082d0:	4249      	neglt	r1, r1
 80082d2:	232d      	movlt	r3, #45	@ 0x2d
 80082d4:	232b      	movge	r3, #43	@ 0x2b
 80082d6:	2909      	cmp	r1, #9
 80082d8:	7002      	strb	r2, [r0, #0]
 80082da:	7043      	strb	r3, [r0, #1]
 80082dc:	dd29      	ble.n	8008332 <__exponent+0x68>
 80082de:	f10d 0307 	add.w	r3, sp, #7
 80082e2:	461d      	mov	r5, r3
 80082e4:	270a      	movs	r7, #10
 80082e6:	461a      	mov	r2, r3
 80082e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80082ec:	fb07 1416 	mls	r4, r7, r6, r1
 80082f0:	3430      	adds	r4, #48	@ 0x30
 80082f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082f6:	460c      	mov	r4, r1
 80082f8:	2c63      	cmp	r4, #99	@ 0x63
 80082fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80082fe:	4631      	mov	r1, r6
 8008300:	dcf1      	bgt.n	80082e6 <__exponent+0x1c>
 8008302:	3130      	adds	r1, #48	@ 0x30
 8008304:	1e94      	subs	r4, r2, #2
 8008306:	f803 1c01 	strb.w	r1, [r3, #-1]
 800830a:	1c41      	adds	r1, r0, #1
 800830c:	4623      	mov	r3, r4
 800830e:	42ab      	cmp	r3, r5
 8008310:	d30a      	bcc.n	8008328 <__exponent+0x5e>
 8008312:	f10d 0309 	add.w	r3, sp, #9
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	42ac      	cmp	r4, r5
 800831a:	bf88      	it	hi
 800831c:	2300      	movhi	r3, #0
 800831e:	3302      	adds	r3, #2
 8008320:	4403      	add	r3, r0
 8008322:	1a18      	subs	r0, r3, r0
 8008324:	b003      	add	sp, #12
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008328:	f813 6b01 	ldrb.w	r6, [r3], #1
 800832c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008330:	e7ed      	b.n	800830e <__exponent+0x44>
 8008332:	2330      	movs	r3, #48	@ 0x30
 8008334:	3130      	adds	r1, #48	@ 0x30
 8008336:	7083      	strb	r3, [r0, #2]
 8008338:	70c1      	strb	r1, [r0, #3]
 800833a:	1d03      	adds	r3, r0, #4
 800833c:	e7f1      	b.n	8008322 <__exponent+0x58>
	...

08008340 <_printf_float>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	b08d      	sub	sp, #52	@ 0x34
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800834c:	4616      	mov	r6, r2
 800834e:	461f      	mov	r7, r3
 8008350:	4605      	mov	r5, r0
 8008352:	f000 fcdb 	bl	8008d0c <_localeconv_r>
 8008356:	6803      	ldr	r3, [r0, #0]
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	4618      	mov	r0, r3
 800835c:	f7f7 ffa8 	bl	80002b0 <strlen>
 8008360:	2300      	movs	r3, #0
 8008362:	930a      	str	r3, [sp, #40]	@ 0x28
 8008364:	f8d8 3000 	ldr.w	r3, [r8]
 8008368:	9005      	str	r0, [sp, #20]
 800836a:	3307      	adds	r3, #7
 800836c:	f023 0307 	bic.w	r3, r3, #7
 8008370:	f103 0208 	add.w	r2, r3, #8
 8008374:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008378:	f8d4 b000 	ldr.w	fp, [r4]
 800837c:	f8c8 2000 	str.w	r2, [r8]
 8008380:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008384:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	f8cd 8018 	str.w	r8, [sp, #24]
 800838e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008396:	4b9c      	ldr	r3, [pc, #624]	@ (8008608 <_printf_float+0x2c8>)
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	f7f8 fbe6 	bl	8000b6c <__aeabi_dcmpun>
 80083a0:	bb70      	cbnz	r0, 8008400 <_printf_float+0xc0>
 80083a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083a6:	4b98      	ldr	r3, [pc, #608]	@ (8008608 <_printf_float+0x2c8>)
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	f7f8 fbc0 	bl	8000b30 <__aeabi_dcmple>
 80083b0:	bb30      	cbnz	r0, 8008400 <_printf_float+0xc0>
 80083b2:	2200      	movs	r2, #0
 80083b4:	2300      	movs	r3, #0
 80083b6:	4640      	mov	r0, r8
 80083b8:	4649      	mov	r1, r9
 80083ba:	f7f8 fbaf 	bl	8000b1c <__aeabi_dcmplt>
 80083be:	b110      	cbz	r0, 80083c6 <_printf_float+0x86>
 80083c0:	232d      	movs	r3, #45	@ 0x2d
 80083c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c6:	4a91      	ldr	r2, [pc, #580]	@ (800860c <_printf_float+0x2cc>)
 80083c8:	4b91      	ldr	r3, [pc, #580]	@ (8008610 <_printf_float+0x2d0>)
 80083ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083ce:	bf94      	ite	ls
 80083d0:	4690      	movls	r8, r2
 80083d2:	4698      	movhi	r8, r3
 80083d4:	2303      	movs	r3, #3
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	f02b 0304 	bic.w	r3, fp, #4
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	9700      	str	r7, [sp, #0]
 80083e4:	4633      	mov	r3, r6
 80083e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083e8:	4621      	mov	r1, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 f9d2 	bl	8008794 <_printf_common>
 80083f0:	3001      	adds	r0, #1
 80083f2:	f040 808d 	bne.w	8008510 <_printf_float+0x1d0>
 80083f6:	f04f 30ff 	mov.w	r0, #4294967295
 80083fa:	b00d      	add	sp, #52	@ 0x34
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008400:	4642      	mov	r2, r8
 8008402:	464b      	mov	r3, r9
 8008404:	4640      	mov	r0, r8
 8008406:	4649      	mov	r1, r9
 8008408:	f7f8 fbb0 	bl	8000b6c <__aeabi_dcmpun>
 800840c:	b140      	cbz	r0, 8008420 <_printf_float+0xe0>
 800840e:	464b      	mov	r3, r9
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfbc      	itt	lt
 8008414:	232d      	movlt	r3, #45	@ 0x2d
 8008416:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800841a:	4a7e      	ldr	r2, [pc, #504]	@ (8008614 <_printf_float+0x2d4>)
 800841c:	4b7e      	ldr	r3, [pc, #504]	@ (8008618 <_printf_float+0x2d8>)
 800841e:	e7d4      	b.n	80083ca <_printf_float+0x8a>
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008426:	9206      	str	r2, [sp, #24]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	d13b      	bne.n	80084a4 <_printf_float+0x164>
 800842c:	2306      	movs	r3, #6
 800842e:	6063      	str	r3, [r4, #4]
 8008430:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008434:	2300      	movs	r3, #0
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	ab0a      	add	r3, sp, #40	@ 0x28
 800843c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008440:	ab09      	add	r3, sp, #36	@ 0x24
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	6861      	ldr	r1, [r4, #4]
 8008446:	ec49 8b10 	vmov	d0, r8, r9
 800844a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800844e:	4628      	mov	r0, r5
 8008450:	f7ff fed6 	bl	8008200 <__cvt>
 8008454:	9b06      	ldr	r3, [sp, #24]
 8008456:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008458:	2b47      	cmp	r3, #71	@ 0x47
 800845a:	4680      	mov	r8, r0
 800845c:	d129      	bne.n	80084b2 <_printf_float+0x172>
 800845e:	1cc8      	adds	r0, r1, #3
 8008460:	db02      	blt.n	8008468 <_printf_float+0x128>
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	4299      	cmp	r1, r3
 8008466:	dd41      	ble.n	80084ec <_printf_float+0x1ac>
 8008468:	f1aa 0a02 	sub.w	sl, sl, #2
 800846c:	fa5f fa8a 	uxtb.w	sl, sl
 8008470:	3901      	subs	r1, #1
 8008472:	4652      	mov	r2, sl
 8008474:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008478:	9109      	str	r1, [sp, #36]	@ 0x24
 800847a:	f7ff ff26 	bl	80082ca <__exponent>
 800847e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008480:	1813      	adds	r3, r2, r0
 8008482:	2a01      	cmp	r2, #1
 8008484:	4681      	mov	r9, r0
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	dc02      	bgt.n	8008490 <_printf_float+0x150>
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	07d2      	lsls	r2, r2, #31
 800848e:	d501      	bpl.n	8008494 <_printf_float+0x154>
 8008490:	3301      	adds	r3, #1
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0a2      	beq.n	80083e2 <_printf_float+0xa2>
 800849c:	232d      	movs	r3, #45	@ 0x2d
 800849e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a2:	e79e      	b.n	80083e2 <_printf_float+0xa2>
 80084a4:	9a06      	ldr	r2, [sp, #24]
 80084a6:	2a47      	cmp	r2, #71	@ 0x47
 80084a8:	d1c2      	bne.n	8008430 <_printf_float+0xf0>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1c0      	bne.n	8008430 <_printf_float+0xf0>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e7bd      	b.n	800842e <_printf_float+0xee>
 80084b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084b6:	d9db      	bls.n	8008470 <_printf_float+0x130>
 80084b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084bc:	d118      	bne.n	80084f0 <_printf_float+0x1b0>
 80084be:	2900      	cmp	r1, #0
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	dd0b      	ble.n	80084dc <_printf_float+0x19c>
 80084c4:	6121      	str	r1, [r4, #16]
 80084c6:	b913      	cbnz	r3, 80084ce <_printf_float+0x18e>
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	07d0      	lsls	r0, r2, #31
 80084cc:	d502      	bpl.n	80084d4 <_printf_float+0x194>
 80084ce:	3301      	adds	r3, #1
 80084d0:	440b      	add	r3, r1
 80084d2:	6123      	str	r3, [r4, #16]
 80084d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084d6:	f04f 0900 	mov.w	r9, #0
 80084da:	e7db      	b.n	8008494 <_printf_float+0x154>
 80084dc:	b913      	cbnz	r3, 80084e4 <_printf_float+0x1a4>
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	07d2      	lsls	r2, r2, #31
 80084e2:	d501      	bpl.n	80084e8 <_printf_float+0x1a8>
 80084e4:	3302      	adds	r3, #2
 80084e6:	e7f4      	b.n	80084d2 <_printf_float+0x192>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e7f2      	b.n	80084d2 <_printf_float+0x192>
 80084ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f2:	4299      	cmp	r1, r3
 80084f4:	db05      	blt.n	8008502 <_printf_float+0x1c2>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	6121      	str	r1, [r4, #16]
 80084fa:	07d8      	lsls	r0, r3, #31
 80084fc:	d5ea      	bpl.n	80084d4 <_printf_float+0x194>
 80084fe:	1c4b      	adds	r3, r1, #1
 8008500:	e7e7      	b.n	80084d2 <_printf_float+0x192>
 8008502:	2900      	cmp	r1, #0
 8008504:	bfd4      	ite	le
 8008506:	f1c1 0202 	rsble	r2, r1, #2
 800850a:	2201      	movgt	r2, #1
 800850c:	4413      	add	r3, r2
 800850e:	e7e0      	b.n	80084d2 <_printf_float+0x192>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	055a      	lsls	r2, r3, #21
 8008514:	d407      	bmi.n	8008526 <_printf_float+0x1e6>
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	4642      	mov	r2, r8
 800851a:	4631      	mov	r1, r6
 800851c:	4628      	mov	r0, r5
 800851e:	47b8      	blx	r7
 8008520:	3001      	adds	r0, #1
 8008522:	d12b      	bne.n	800857c <_printf_float+0x23c>
 8008524:	e767      	b.n	80083f6 <_printf_float+0xb6>
 8008526:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800852a:	f240 80dd 	bls.w	80086e8 <_printf_float+0x3a8>
 800852e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008532:	2200      	movs	r2, #0
 8008534:	2300      	movs	r3, #0
 8008536:	f7f8 fae7 	bl	8000b08 <__aeabi_dcmpeq>
 800853a:	2800      	cmp	r0, #0
 800853c:	d033      	beq.n	80085a6 <_printf_float+0x266>
 800853e:	4a37      	ldr	r2, [pc, #220]	@ (800861c <_printf_float+0x2dc>)
 8008540:	2301      	movs	r3, #1
 8008542:	4631      	mov	r1, r6
 8008544:	4628      	mov	r0, r5
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	f43f af54 	beq.w	80083f6 <_printf_float+0xb6>
 800854e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008552:	4543      	cmp	r3, r8
 8008554:	db02      	blt.n	800855c <_printf_float+0x21c>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	07d8      	lsls	r0, r3, #31
 800855a:	d50f      	bpl.n	800857c <_printf_float+0x23c>
 800855c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	f43f af45 	beq.w	80083f6 <_printf_float+0xb6>
 800856c:	f04f 0900 	mov.w	r9, #0
 8008570:	f108 38ff 	add.w	r8, r8, #4294967295
 8008574:	f104 0a1a 	add.w	sl, r4, #26
 8008578:	45c8      	cmp	r8, r9
 800857a:	dc09      	bgt.n	8008590 <_printf_float+0x250>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	079b      	lsls	r3, r3, #30
 8008580:	f100 8103 	bmi.w	800878a <_printf_float+0x44a>
 8008584:	68e0      	ldr	r0, [r4, #12]
 8008586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008588:	4298      	cmp	r0, r3
 800858a:	bfb8      	it	lt
 800858c:	4618      	movlt	r0, r3
 800858e:	e734      	b.n	80083fa <_printf_float+0xba>
 8008590:	2301      	movs	r3, #1
 8008592:	4652      	mov	r2, sl
 8008594:	4631      	mov	r1, r6
 8008596:	4628      	mov	r0, r5
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f af2b 	beq.w	80083f6 <_printf_float+0xb6>
 80085a0:	f109 0901 	add.w	r9, r9, #1
 80085a4:	e7e8      	b.n	8008578 <_printf_float+0x238>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dc39      	bgt.n	8008620 <_printf_float+0x2e0>
 80085ac:	4a1b      	ldr	r2, [pc, #108]	@ (800861c <_printf_float+0x2dc>)
 80085ae:	2301      	movs	r3, #1
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	f43f af1d 	beq.w	80083f6 <_printf_float+0xb6>
 80085bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085c0:	ea59 0303 	orrs.w	r3, r9, r3
 80085c4:	d102      	bne.n	80085cc <_printf_float+0x28c>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	07d9      	lsls	r1, r3, #31
 80085ca:	d5d7      	bpl.n	800857c <_printf_float+0x23c>
 80085cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085d0:	4631      	mov	r1, r6
 80085d2:	4628      	mov	r0, r5
 80085d4:	47b8      	blx	r7
 80085d6:	3001      	adds	r0, #1
 80085d8:	f43f af0d 	beq.w	80083f6 <_printf_float+0xb6>
 80085dc:	f04f 0a00 	mov.w	sl, #0
 80085e0:	f104 0b1a 	add.w	fp, r4, #26
 80085e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e6:	425b      	negs	r3, r3
 80085e8:	4553      	cmp	r3, sl
 80085ea:	dc01      	bgt.n	80085f0 <_printf_float+0x2b0>
 80085ec:	464b      	mov	r3, r9
 80085ee:	e793      	b.n	8008518 <_printf_float+0x1d8>
 80085f0:	2301      	movs	r3, #1
 80085f2:	465a      	mov	r2, fp
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b8      	blx	r7
 80085fa:	3001      	adds	r0, #1
 80085fc:	f43f aefb 	beq.w	80083f6 <_printf_float+0xb6>
 8008600:	f10a 0a01 	add.w	sl, sl, #1
 8008604:	e7ee      	b.n	80085e4 <_printf_float+0x2a4>
 8008606:	bf00      	nop
 8008608:	7fefffff 	.word	0x7fefffff
 800860c:	0800c178 	.word	0x0800c178
 8008610:	0800c17c 	.word	0x0800c17c
 8008614:	0800c180 	.word	0x0800c180
 8008618:	0800c184 	.word	0x0800c184
 800861c:	0800c188 	.word	0x0800c188
 8008620:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008622:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008626:	4553      	cmp	r3, sl
 8008628:	bfa8      	it	ge
 800862a:	4653      	movge	r3, sl
 800862c:	2b00      	cmp	r3, #0
 800862e:	4699      	mov	r9, r3
 8008630:	dc36      	bgt.n	80086a0 <_printf_float+0x360>
 8008632:	f04f 0b00 	mov.w	fp, #0
 8008636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800863a:	f104 021a 	add.w	r2, r4, #26
 800863e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008640:	9306      	str	r3, [sp, #24]
 8008642:	eba3 0309 	sub.w	r3, r3, r9
 8008646:	455b      	cmp	r3, fp
 8008648:	dc31      	bgt.n	80086ae <_printf_float+0x36e>
 800864a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864c:	459a      	cmp	sl, r3
 800864e:	dc3a      	bgt.n	80086c6 <_printf_float+0x386>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	07da      	lsls	r2, r3, #31
 8008654:	d437      	bmi.n	80086c6 <_printf_float+0x386>
 8008656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008658:	ebaa 0903 	sub.w	r9, sl, r3
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	ebaa 0303 	sub.w	r3, sl, r3
 8008662:	4599      	cmp	r9, r3
 8008664:	bfa8      	it	ge
 8008666:	4699      	movge	r9, r3
 8008668:	f1b9 0f00 	cmp.w	r9, #0
 800866c:	dc33      	bgt.n	80086d6 <_printf_float+0x396>
 800866e:	f04f 0800 	mov.w	r8, #0
 8008672:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008676:	f104 0b1a 	add.w	fp, r4, #26
 800867a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800867c:	ebaa 0303 	sub.w	r3, sl, r3
 8008680:	eba3 0309 	sub.w	r3, r3, r9
 8008684:	4543      	cmp	r3, r8
 8008686:	f77f af79 	ble.w	800857c <_printf_float+0x23c>
 800868a:	2301      	movs	r3, #1
 800868c:	465a      	mov	r2, fp
 800868e:	4631      	mov	r1, r6
 8008690:	4628      	mov	r0, r5
 8008692:	47b8      	blx	r7
 8008694:	3001      	adds	r0, #1
 8008696:	f43f aeae 	beq.w	80083f6 <_printf_float+0xb6>
 800869a:	f108 0801 	add.w	r8, r8, #1
 800869e:	e7ec      	b.n	800867a <_printf_float+0x33a>
 80086a0:	4642      	mov	r2, r8
 80086a2:	4631      	mov	r1, r6
 80086a4:	4628      	mov	r0, r5
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	d1c2      	bne.n	8008632 <_printf_float+0x2f2>
 80086ac:	e6a3      	b.n	80083f6 <_printf_float+0xb6>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4631      	mov	r1, r6
 80086b2:	4628      	mov	r0, r5
 80086b4:	9206      	str	r2, [sp, #24]
 80086b6:	47b8      	blx	r7
 80086b8:	3001      	adds	r0, #1
 80086ba:	f43f ae9c 	beq.w	80083f6 <_printf_float+0xb6>
 80086be:	9a06      	ldr	r2, [sp, #24]
 80086c0:	f10b 0b01 	add.w	fp, fp, #1
 80086c4:	e7bb      	b.n	800863e <_printf_float+0x2fe>
 80086c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ca:	4631      	mov	r1, r6
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b8      	blx	r7
 80086d0:	3001      	adds	r0, #1
 80086d2:	d1c0      	bne.n	8008656 <_printf_float+0x316>
 80086d4:	e68f      	b.n	80083f6 <_printf_float+0xb6>
 80086d6:	9a06      	ldr	r2, [sp, #24]
 80086d8:	464b      	mov	r3, r9
 80086da:	4442      	add	r2, r8
 80086dc:	4631      	mov	r1, r6
 80086de:	4628      	mov	r0, r5
 80086e0:	47b8      	blx	r7
 80086e2:	3001      	adds	r0, #1
 80086e4:	d1c3      	bne.n	800866e <_printf_float+0x32e>
 80086e6:	e686      	b.n	80083f6 <_printf_float+0xb6>
 80086e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086ec:	f1ba 0f01 	cmp.w	sl, #1
 80086f0:	dc01      	bgt.n	80086f6 <_printf_float+0x3b6>
 80086f2:	07db      	lsls	r3, r3, #31
 80086f4:	d536      	bpl.n	8008764 <_printf_float+0x424>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4642      	mov	r2, r8
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	f43f ae78 	beq.w	80083f6 <_printf_float+0xb6>
 8008706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae70 	beq.w	80083f6 <_printf_float+0xb6>
 8008716:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008722:	f7f8 f9f1 	bl	8000b08 <__aeabi_dcmpeq>
 8008726:	b9c0      	cbnz	r0, 800875a <_printf_float+0x41a>
 8008728:	4653      	mov	r3, sl
 800872a:	f108 0201 	add.w	r2, r8, #1
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	47b8      	blx	r7
 8008734:	3001      	adds	r0, #1
 8008736:	d10c      	bne.n	8008752 <_printf_float+0x412>
 8008738:	e65d      	b.n	80083f6 <_printf_float+0xb6>
 800873a:	2301      	movs	r3, #1
 800873c:	465a      	mov	r2, fp
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f ae56 	beq.w	80083f6 <_printf_float+0xb6>
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	45d0      	cmp	r8, sl
 8008750:	dbf3      	blt.n	800873a <_printf_float+0x3fa>
 8008752:	464b      	mov	r3, r9
 8008754:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008758:	e6df      	b.n	800851a <_printf_float+0x1da>
 800875a:	f04f 0800 	mov.w	r8, #0
 800875e:	f104 0b1a 	add.w	fp, r4, #26
 8008762:	e7f4      	b.n	800874e <_printf_float+0x40e>
 8008764:	2301      	movs	r3, #1
 8008766:	4642      	mov	r2, r8
 8008768:	e7e1      	b.n	800872e <_printf_float+0x3ee>
 800876a:	2301      	movs	r3, #1
 800876c:	464a      	mov	r2, r9
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f ae3e 	beq.w	80083f6 <_printf_float+0xb6>
 800877a:	f108 0801 	add.w	r8, r8, #1
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008782:	1a5b      	subs	r3, r3, r1
 8008784:	4543      	cmp	r3, r8
 8008786:	dcf0      	bgt.n	800876a <_printf_float+0x42a>
 8008788:	e6fc      	b.n	8008584 <_printf_float+0x244>
 800878a:	f04f 0800 	mov.w	r8, #0
 800878e:	f104 0919 	add.w	r9, r4, #25
 8008792:	e7f4      	b.n	800877e <_printf_float+0x43e>

08008794 <_printf_common>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	4616      	mov	r6, r2
 800879a:	4698      	mov	r8, r3
 800879c:	688a      	ldr	r2, [r1, #8]
 800879e:	690b      	ldr	r3, [r1, #16]
 80087a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a4:	4293      	cmp	r3, r2
 80087a6:	bfb8      	it	lt
 80087a8:	4613      	movlt	r3, r2
 80087aa:	6033      	str	r3, [r6, #0]
 80087ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087b0:	4607      	mov	r7, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	b10a      	cbz	r2, 80087ba <_printf_common+0x26>
 80087b6:	3301      	adds	r3, #1
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	0699      	lsls	r1, r3, #26
 80087be:	bf42      	ittt	mi
 80087c0:	6833      	ldrmi	r3, [r6, #0]
 80087c2:	3302      	addmi	r3, #2
 80087c4:	6033      	strmi	r3, [r6, #0]
 80087c6:	6825      	ldr	r5, [r4, #0]
 80087c8:	f015 0506 	ands.w	r5, r5, #6
 80087cc:	d106      	bne.n	80087dc <_printf_common+0x48>
 80087ce:	f104 0a19 	add.w	sl, r4, #25
 80087d2:	68e3      	ldr	r3, [r4, #12]
 80087d4:	6832      	ldr	r2, [r6, #0]
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	42ab      	cmp	r3, r5
 80087da:	dc26      	bgt.n	800882a <_printf_common+0x96>
 80087dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087e0:	6822      	ldr	r2, [r4, #0]
 80087e2:	3b00      	subs	r3, #0
 80087e4:	bf18      	it	ne
 80087e6:	2301      	movne	r3, #1
 80087e8:	0692      	lsls	r2, r2, #26
 80087ea:	d42b      	bmi.n	8008844 <_printf_common+0xb0>
 80087ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087f0:	4641      	mov	r1, r8
 80087f2:	4638      	mov	r0, r7
 80087f4:	47c8      	blx	r9
 80087f6:	3001      	adds	r0, #1
 80087f8:	d01e      	beq.n	8008838 <_printf_common+0xa4>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	f003 0306 	and.w	r3, r3, #6
 8008802:	2b04      	cmp	r3, #4
 8008804:	bf02      	ittt	eq
 8008806:	68e5      	ldreq	r5, [r4, #12]
 8008808:	6833      	ldreq	r3, [r6, #0]
 800880a:	1aed      	subeq	r5, r5, r3
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	bf0c      	ite	eq
 8008810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008814:	2500      	movne	r5, #0
 8008816:	4293      	cmp	r3, r2
 8008818:	bfc4      	itt	gt
 800881a:	1a9b      	subgt	r3, r3, r2
 800881c:	18ed      	addgt	r5, r5, r3
 800881e:	2600      	movs	r6, #0
 8008820:	341a      	adds	r4, #26
 8008822:	42b5      	cmp	r5, r6
 8008824:	d11a      	bne.n	800885c <_printf_common+0xc8>
 8008826:	2000      	movs	r0, #0
 8008828:	e008      	b.n	800883c <_printf_common+0xa8>
 800882a:	2301      	movs	r3, #1
 800882c:	4652      	mov	r2, sl
 800882e:	4641      	mov	r1, r8
 8008830:	4638      	mov	r0, r7
 8008832:	47c8      	blx	r9
 8008834:	3001      	adds	r0, #1
 8008836:	d103      	bne.n	8008840 <_printf_common+0xac>
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008840:	3501      	adds	r5, #1
 8008842:	e7c6      	b.n	80087d2 <_printf_common+0x3e>
 8008844:	18e1      	adds	r1, r4, r3
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	2030      	movs	r0, #48	@ 0x30
 800884a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800884e:	4422      	add	r2, r4
 8008850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008858:	3302      	adds	r3, #2
 800885a:	e7c7      	b.n	80087ec <_printf_common+0x58>
 800885c:	2301      	movs	r3, #1
 800885e:	4622      	mov	r2, r4
 8008860:	4641      	mov	r1, r8
 8008862:	4638      	mov	r0, r7
 8008864:	47c8      	blx	r9
 8008866:	3001      	adds	r0, #1
 8008868:	d0e6      	beq.n	8008838 <_printf_common+0xa4>
 800886a:	3601      	adds	r6, #1
 800886c:	e7d9      	b.n	8008822 <_printf_common+0x8e>
	...

08008870 <_printf_i>:
 8008870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008874:	7e0f      	ldrb	r7, [r1, #24]
 8008876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008878:	2f78      	cmp	r7, #120	@ 0x78
 800887a:	4691      	mov	r9, r2
 800887c:	4680      	mov	r8, r0
 800887e:	460c      	mov	r4, r1
 8008880:	469a      	mov	sl, r3
 8008882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008886:	d807      	bhi.n	8008898 <_printf_i+0x28>
 8008888:	2f62      	cmp	r7, #98	@ 0x62
 800888a:	d80a      	bhi.n	80088a2 <_printf_i+0x32>
 800888c:	2f00      	cmp	r7, #0
 800888e:	f000 80d2 	beq.w	8008a36 <_printf_i+0x1c6>
 8008892:	2f58      	cmp	r7, #88	@ 0x58
 8008894:	f000 80b9 	beq.w	8008a0a <_printf_i+0x19a>
 8008898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800889c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088a0:	e03a      	b.n	8008918 <_printf_i+0xa8>
 80088a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088a6:	2b15      	cmp	r3, #21
 80088a8:	d8f6      	bhi.n	8008898 <_printf_i+0x28>
 80088aa:	a101      	add	r1, pc, #4	@ (adr r1, 80088b0 <_printf_i+0x40>)
 80088ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b0:	08008909 	.word	0x08008909
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	08008899 	.word	0x08008899
 80088bc:	08008899 	.word	0x08008899
 80088c0:	08008899 	.word	0x08008899
 80088c4:	08008899 	.word	0x08008899
 80088c8:	0800891d 	.word	0x0800891d
 80088cc:	08008899 	.word	0x08008899
 80088d0:	08008899 	.word	0x08008899
 80088d4:	08008899 	.word	0x08008899
 80088d8:	08008899 	.word	0x08008899
 80088dc:	08008a1d 	.word	0x08008a1d
 80088e0:	08008947 	.word	0x08008947
 80088e4:	080089d7 	.word	0x080089d7
 80088e8:	08008899 	.word	0x08008899
 80088ec:	08008899 	.word	0x08008899
 80088f0:	08008a3f 	.word	0x08008a3f
 80088f4:	08008899 	.word	0x08008899
 80088f8:	08008947 	.word	0x08008947
 80088fc:	08008899 	.word	0x08008899
 8008900:	08008899 	.word	0x08008899
 8008904:	080089df 	.word	0x080089df
 8008908:	6833      	ldr	r3, [r6, #0]
 800890a:	1d1a      	adds	r2, r3, #4
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6032      	str	r2, [r6, #0]
 8008910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008918:	2301      	movs	r3, #1
 800891a:	e09d      	b.n	8008a58 <_printf_i+0x1e8>
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	1d19      	adds	r1, r3, #4
 8008922:	6031      	str	r1, [r6, #0]
 8008924:	0606      	lsls	r6, r0, #24
 8008926:	d501      	bpl.n	800892c <_printf_i+0xbc>
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	e003      	b.n	8008934 <_printf_i+0xc4>
 800892c:	0645      	lsls	r5, r0, #25
 800892e:	d5fb      	bpl.n	8008928 <_printf_i+0xb8>
 8008930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008934:	2d00      	cmp	r5, #0
 8008936:	da03      	bge.n	8008940 <_printf_i+0xd0>
 8008938:	232d      	movs	r3, #45	@ 0x2d
 800893a:	426d      	negs	r5, r5
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008940:	4859      	ldr	r0, [pc, #356]	@ (8008aa8 <_printf_i+0x238>)
 8008942:	230a      	movs	r3, #10
 8008944:	e011      	b.n	800896a <_printf_i+0xfa>
 8008946:	6821      	ldr	r1, [r4, #0]
 8008948:	6833      	ldr	r3, [r6, #0]
 800894a:	0608      	lsls	r0, r1, #24
 800894c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008950:	d402      	bmi.n	8008958 <_printf_i+0xe8>
 8008952:	0649      	lsls	r1, r1, #25
 8008954:	bf48      	it	mi
 8008956:	b2ad      	uxthmi	r5, r5
 8008958:	2f6f      	cmp	r7, #111	@ 0x6f
 800895a:	4853      	ldr	r0, [pc, #332]	@ (8008aa8 <_printf_i+0x238>)
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	bf14      	ite	ne
 8008960:	230a      	movne	r3, #10
 8008962:	2308      	moveq	r3, #8
 8008964:	2100      	movs	r1, #0
 8008966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800896a:	6866      	ldr	r6, [r4, #4]
 800896c:	60a6      	str	r6, [r4, #8]
 800896e:	2e00      	cmp	r6, #0
 8008970:	bfa2      	ittt	ge
 8008972:	6821      	ldrge	r1, [r4, #0]
 8008974:	f021 0104 	bicge.w	r1, r1, #4
 8008978:	6021      	strge	r1, [r4, #0]
 800897a:	b90d      	cbnz	r5, 8008980 <_printf_i+0x110>
 800897c:	2e00      	cmp	r6, #0
 800897e:	d04b      	beq.n	8008a18 <_printf_i+0x1a8>
 8008980:	4616      	mov	r6, r2
 8008982:	fbb5 f1f3 	udiv	r1, r5, r3
 8008986:	fb03 5711 	mls	r7, r3, r1, r5
 800898a:	5dc7      	ldrb	r7, [r0, r7]
 800898c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008990:	462f      	mov	r7, r5
 8008992:	42bb      	cmp	r3, r7
 8008994:	460d      	mov	r5, r1
 8008996:	d9f4      	bls.n	8008982 <_printf_i+0x112>
 8008998:	2b08      	cmp	r3, #8
 800899a:	d10b      	bne.n	80089b4 <_printf_i+0x144>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	07df      	lsls	r7, r3, #31
 80089a0:	d508      	bpl.n	80089b4 <_printf_i+0x144>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	6861      	ldr	r1, [r4, #4]
 80089a6:	4299      	cmp	r1, r3
 80089a8:	bfde      	ittt	le
 80089aa:	2330      	movle	r3, #48	@ 0x30
 80089ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089b4:	1b92      	subs	r2, r2, r6
 80089b6:	6122      	str	r2, [r4, #16]
 80089b8:	f8cd a000 	str.w	sl, [sp]
 80089bc:	464b      	mov	r3, r9
 80089be:	aa03      	add	r2, sp, #12
 80089c0:	4621      	mov	r1, r4
 80089c2:	4640      	mov	r0, r8
 80089c4:	f7ff fee6 	bl	8008794 <_printf_common>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d14a      	bne.n	8008a62 <_printf_i+0x1f2>
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	b004      	add	sp, #16
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f043 0320 	orr.w	r3, r3, #32
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	4833      	ldr	r0, [pc, #204]	@ (8008aac <_printf_i+0x23c>)
 80089e0:	2778      	movs	r7, #120	@ 0x78
 80089e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	6831      	ldr	r1, [r6, #0]
 80089ea:	061f      	lsls	r7, r3, #24
 80089ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80089f0:	d402      	bmi.n	80089f8 <_printf_i+0x188>
 80089f2:	065f      	lsls	r7, r3, #25
 80089f4:	bf48      	it	mi
 80089f6:	b2ad      	uxthmi	r5, r5
 80089f8:	6031      	str	r1, [r6, #0]
 80089fa:	07d9      	lsls	r1, r3, #31
 80089fc:	bf44      	itt	mi
 80089fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008a02:	6023      	strmi	r3, [r4, #0]
 8008a04:	b11d      	cbz	r5, 8008a0e <_printf_i+0x19e>
 8008a06:	2310      	movs	r3, #16
 8008a08:	e7ac      	b.n	8008964 <_printf_i+0xf4>
 8008a0a:	4827      	ldr	r0, [pc, #156]	@ (8008aa8 <_printf_i+0x238>)
 8008a0c:	e7e9      	b.n	80089e2 <_printf_i+0x172>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	f023 0320 	bic.w	r3, r3, #32
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	e7f6      	b.n	8008a06 <_printf_i+0x196>
 8008a18:	4616      	mov	r6, r2
 8008a1a:	e7bd      	b.n	8008998 <_printf_i+0x128>
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	6825      	ldr	r5, [r4, #0]
 8008a20:	6961      	ldr	r1, [r4, #20]
 8008a22:	1d18      	adds	r0, r3, #4
 8008a24:	6030      	str	r0, [r6, #0]
 8008a26:	062e      	lsls	r6, r5, #24
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0x1c0>
 8008a2c:	6019      	str	r1, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0x1c6>
 8008a30:	0668      	lsls	r0, r5, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0x1bc>
 8008a34:	8019      	strh	r1, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6123      	str	r3, [r4, #16]
 8008a3a:	4616      	mov	r6, r2
 8008a3c:	e7bc      	b.n	80089b8 <_printf_i+0x148>
 8008a3e:	6833      	ldr	r3, [r6, #0]
 8008a40:	1d1a      	adds	r2, r3, #4
 8008a42:	6032      	str	r2, [r6, #0]
 8008a44:	681e      	ldr	r6, [r3, #0]
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7f7 fbe0 	bl	8000210 <memchr>
 8008a50:	b108      	cbz	r0, 8008a56 <_printf_i+0x1e6>
 8008a52:	1b80      	subs	r0, r0, r6
 8008a54:	6060      	str	r0, [r4, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a60:	e7aa      	b.n	80089b8 <_printf_i+0x148>
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	4632      	mov	r2, r6
 8008a66:	4649      	mov	r1, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	47d0      	blx	sl
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d0ad      	beq.n	80089cc <_printf_i+0x15c>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	079b      	lsls	r3, r3, #30
 8008a74:	d413      	bmi.n	8008a9e <_printf_i+0x22e>
 8008a76:	68e0      	ldr	r0, [r4, #12]
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	bfb8      	it	lt
 8008a7e:	4618      	movlt	r0, r3
 8008a80:	e7a6      	b.n	80089d0 <_printf_i+0x160>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d09d      	beq.n	80089cc <_printf_i+0x15c>
 8008a90:	3501      	adds	r5, #1
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	9903      	ldr	r1, [sp, #12]
 8008a96:	1a5b      	subs	r3, r3, r1
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dcf2      	bgt.n	8008a82 <_printf_i+0x212>
 8008a9c:	e7eb      	b.n	8008a76 <_printf_i+0x206>
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	f104 0619 	add.w	r6, r4, #25
 8008aa4:	e7f5      	b.n	8008a92 <_printf_i+0x222>
 8008aa6:	bf00      	nop
 8008aa8:	0800c18a 	.word	0x0800c18a
 8008aac:	0800c19b 	.word	0x0800c19b

08008ab0 <std>:
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	b510      	push	{r4, lr}
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8008aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008abe:	6083      	str	r3, [r0, #8]
 8008ac0:	8181      	strh	r1, [r0, #12]
 8008ac2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ac4:	81c2      	strh	r2, [r0, #14]
 8008ac6:	6183      	str	r3, [r0, #24]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	2208      	movs	r2, #8
 8008acc:	305c      	adds	r0, #92	@ 0x5c
 8008ace:	f000 f914 	bl	8008cfa <memset>
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <std+0x58>)
 8008ad4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b0c <std+0x5c>)
 8008ad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ada:	4b0d      	ldr	r3, [pc, #52]	@ (8008b10 <std+0x60>)
 8008adc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ade:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <std+0x64>)
 8008ae0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <std+0x68>)
 8008ae4:	6224      	str	r4, [r4, #32]
 8008ae6:	429c      	cmp	r4, r3
 8008ae8:	d006      	beq.n	8008af8 <std+0x48>
 8008aea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008aee:	4294      	cmp	r4, r2
 8008af0:	d002      	beq.n	8008af8 <std+0x48>
 8008af2:	33d0      	adds	r3, #208	@ 0xd0
 8008af4:	429c      	cmp	r4, r3
 8008af6:	d105      	bne.n	8008b04 <std+0x54>
 8008af8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b00:	f000 b978 	b.w	8008df4 <__retarget_lock_init_recursive>
 8008b04:	bd10      	pop	{r4, pc}
 8008b06:	bf00      	nop
 8008b08:	08008c75 	.word	0x08008c75
 8008b0c:	08008c97 	.word	0x08008c97
 8008b10:	08008ccf 	.word	0x08008ccf
 8008b14:	08008cf3 	.word	0x08008cf3
 8008b18:	20000950 	.word	0x20000950

08008b1c <stdio_exit_handler>:
 8008b1c:	4a02      	ldr	r2, [pc, #8]	@ (8008b28 <stdio_exit_handler+0xc>)
 8008b1e:	4903      	ldr	r1, [pc, #12]	@ (8008b2c <stdio_exit_handler+0x10>)
 8008b20:	4803      	ldr	r0, [pc, #12]	@ (8008b30 <stdio_exit_handler+0x14>)
 8008b22:	f000 b869 	b.w	8008bf8 <_fwalk_sglue>
 8008b26:	bf00      	nop
 8008b28:	200000a4 	.word	0x200000a4
 8008b2c:	0800a755 	.word	0x0800a755
 8008b30:	200000b4 	.word	0x200000b4

08008b34 <cleanup_stdio>:
 8008b34:	6841      	ldr	r1, [r0, #4]
 8008b36:	4b0c      	ldr	r3, [pc, #48]	@ (8008b68 <cleanup_stdio+0x34>)
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	b510      	push	{r4, lr}
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	d001      	beq.n	8008b44 <cleanup_stdio+0x10>
 8008b40:	f001 fe08 	bl	800a754 <_fflush_r>
 8008b44:	68a1      	ldr	r1, [r4, #8]
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <cleanup_stdio+0x38>)
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	d002      	beq.n	8008b52 <cleanup_stdio+0x1e>
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f001 fe01 	bl	800a754 <_fflush_r>
 8008b52:	68e1      	ldr	r1, [r4, #12]
 8008b54:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <cleanup_stdio+0x3c>)
 8008b56:	4299      	cmp	r1, r3
 8008b58:	d004      	beq.n	8008b64 <cleanup_stdio+0x30>
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b60:	f001 bdf8 	b.w	800a754 <_fflush_r>
 8008b64:	bd10      	pop	{r4, pc}
 8008b66:	bf00      	nop
 8008b68:	20000950 	.word	0x20000950
 8008b6c:	200009b8 	.word	0x200009b8
 8008b70:	20000a20 	.word	0x20000a20

08008b74 <global_stdio_init.part.0>:
 8008b74:	b510      	push	{r4, lr}
 8008b76:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <global_stdio_init.part.0+0x30>)
 8008b78:	4c0b      	ldr	r4, [pc, #44]	@ (8008ba8 <global_stdio_init.part.0+0x34>)
 8008b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8008bac <global_stdio_init.part.0+0x38>)
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	2200      	movs	r2, #0
 8008b82:	2104      	movs	r1, #4
 8008b84:	f7ff ff94 	bl	8008ab0 <std>
 8008b88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	2109      	movs	r1, #9
 8008b90:	f7ff ff8e 	bl	8008ab0 <std>
 8008b94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b98:	2202      	movs	r2, #2
 8008b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9e:	2112      	movs	r1, #18
 8008ba0:	f7ff bf86 	b.w	8008ab0 <std>
 8008ba4:	20000a88 	.word	0x20000a88
 8008ba8:	20000950 	.word	0x20000950
 8008bac:	08008b1d 	.word	0x08008b1d

08008bb0 <__sfp_lock_acquire>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	@ (8008bb8 <__sfp_lock_acquire+0x8>)
 8008bb2:	f000 b920 	b.w	8008df6 <__retarget_lock_acquire_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	20000a91 	.word	0x20000a91

08008bbc <__sfp_lock_release>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	@ (8008bc4 <__sfp_lock_release+0x8>)
 8008bbe:	f000 b91b 	b.w	8008df8 <__retarget_lock_release_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	20000a91 	.word	0x20000a91

08008bc8 <__sinit>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	4604      	mov	r4, r0
 8008bcc:	f7ff fff0 	bl	8008bb0 <__sfp_lock_acquire>
 8008bd0:	6a23      	ldr	r3, [r4, #32]
 8008bd2:	b11b      	cbz	r3, 8008bdc <__sinit+0x14>
 8008bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd8:	f7ff bff0 	b.w	8008bbc <__sfp_lock_release>
 8008bdc:	4b04      	ldr	r3, [pc, #16]	@ (8008bf0 <__sinit+0x28>)
 8008bde:	6223      	str	r3, [r4, #32]
 8008be0:	4b04      	ldr	r3, [pc, #16]	@ (8008bf4 <__sinit+0x2c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1f5      	bne.n	8008bd4 <__sinit+0xc>
 8008be8:	f7ff ffc4 	bl	8008b74 <global_stdio_init.part.0>
 8008bec:	e7f2      	b.n	8008bd4 <__sinit+0xc>
 8008bee:	bf00      	nop
 8008bf0:	08008b35 	.word	0x08008b35
 8008bf4:	20000a88 	.word	0x20000a88

08008bf8 <_fwalk_sglue>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	4688      	mov	r8, r1
 8008c00:	4614      	mov	r4, r2
 8008c02:	2600      	movs	r6, #0
 8008c04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c08:	f1b9 0901 	subs.w	r9, r9, #1
 8008c0c:	d505      	bpl.n	8008c1a <_fwalk_sglue+0x22>
 8008c0e:	6824      	ldr	r4, [r4, #0]
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	d1f7      	bne.n	8008c04 <_fwalk_sglue+0xc>
 8008c14:	4630      	mov	r0, r6
 8008c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d907      	bls.n	8008c30 <_fwalk_sglue+0x38>
 8008c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c24:	3301      	adds	r3, #1
 8008c26:	d003      	beq.n	8008c30 <_fwalk_sglue+0x38>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	47c0      	blx	r8
 8008c2e:	4306      	orrs	r6, r0
 8008c30:	3568      	adds	r5, #104	@ 0x68
 8008c32:	e7e9      	b.n	8008c08 <_fwalk_sglue+0x10>

08008c34 <siprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	b500      	push	{lr}
 8008c38:	b09c      	sub	sp, #112	@ 0x70
 8008c3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c3c:	9002      	str	r0, [sp, #8]
 8008c3e:	9006      	str	r0, [sp, #24]
 8008c40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c44:	4809      	ldr	r0, [pc, #36]	@ (8008c6c <siprintf+0x38>)
 8008c46:	9107      	str	r1, [sp, #28]
 8008c48:	9104      	str	r1, [sp, #16]
 8008c4a:	4909      	ldr	r1, [pc, #36]	@ (8008c70 <siprintf+0x3c>)
 8008c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	6800      	ldr	r0, [r0, #0]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	a902      	add	r1, sp, #8
 8008c58:	f001 fbfc 	bl	800a454 <_svfiprintf_r>
 8008c5c:	9b02      	ldr	r3, [sp, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	b01c      	add	sp, #112	@ 0x70
 8008c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c68:	b003      	add	sp, #12
 8008c6a:	4770      	bx	lr
 8008c6c:	200000b0 	.word	0x200000b0
 8008c70:	ffff0208 	.word	0xffff0208

08008c74 <__sread>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	460c      	mov	r4, r1
 8008c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7c:	f000 f86c 	bl	8008d58 <_read_r>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	bfab      	itete	ge
 8008c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c86:	89a3      	ldrhlt	r3, [r4, #12]
 8008c88:	181b      	addge	r3, r3, r0
 8008c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c8e:	bfac      	ite	ge
 8008c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c92:	81a3      	strhlt	r3, [r4, #12]
 8008c94:	bd10      	pop	{r4, pc}

08008c96 <__swrite>:
 8008c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9a:	461f      	mov	r7, r3
 8008c9c:	898b      	ldrh	r3, [r1, #12]
 8008c9e:	05db      	lsls	r3, r3, #23
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	d505      	bpl.n	8008cb4 <__swrite+0x1e>
 8008ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cac:	2302      	movs	r3, #2
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f000 f840 	bl	8008d34 <_lseek_r>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cca:	f000 b857 	b.w	8008d7c <_write_r>

08008cce <__sseek>:
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	460c      	mov	r4, r1
 8008cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd6:	f000 f82d 	bl	8008d34 <_lseek_r>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	bf15      	itete	ne
 8008ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cea:	81a3      	strheq	r3, [r4, #12]
 8008cec:	bf18      	it	ne
 8008cee:	81a3      	strhne	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__sclose>:
 8008cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf6:	f000 b80d 	b.w	8008d14 <_close_r>

08008cfa <memset>:
 8008cfa:	4402      	add	r2, r0
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d100      	bne.n	8008d04 <memset+0xa>
 8008d02:	4770      	bx	lr
 8008d04:	f803 1b01 	strb.w	r1, [r3], #1
 8008d08:	e7f9      	b.n	8008cfe <memset+0x4>
	...

08008d0c <_localeconv_r>:
 8008d0c:	4800      	ldr	r0, [pc, #0]	@ (8008d10 <_localeconv_r+0x4>)
 8008d0e:	4770      	bx	lr
 8008d10:	200001f0 	.word	0x200001f0

08008d14 <_close_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d06      	ldr	r5, [pc, #24]	@ (8008d30 <_close_r+0x1c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7f9 fabe 	bl	80022a0 <_close>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_close_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_close_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20000a8c 	.word	0x20000a8c

08008d34 <_lseek_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d07      	ldr	r5, [pc, #28]	@ (8008d54 <_lseek_r+0x20>)
 8008d38:	4604      	mov	r4, r0
 8008d3a:	4608      	mov	r0, r1
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	602a      	str	r2, [r5, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f7f9 fad3 	bl	80022ee <_lseek>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_lseek_r+0x1e>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_lseek_r+0x1e>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000a8c 	.word	0x20000a8c

08008d58 <_read_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	@ (8008d78 <_read_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7f9 fa61 	bl	800222e <_read>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_read_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_read_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000a8c 	.word	0x20000a8c

08008d7c <_write_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	@ (8008d9c <_write_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f9 fa6c 	bl	8002268 <_write>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_write_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_write_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000a8c 	.word	0x20000a8c

08008da0 <__errno>:
 8008da0:	4b01      	ldr	r3, [pc, #4]	@ (8008da8 <__errno+0x8>)
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	200000b0 	.word	0x200000b0

08008dac <__libc_init_array>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	4d0d      	ldr	r5, [pc, #52]	@ (8008de4 <__libc_init_array+0x38>)
 8008db0:	4c0d      	ldr	r4, [pc, #52]	@ (8008de8 <__libc_init_array+0x3c>)
 8008db2:	1b64      	subs	r4, r4, r5
 8008db4:	10a4      	asrs	r4, r4, #2
 8008db6:	2600      	movs	r6, #0
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	d109      	bne.n	8008dd0 <__libc_init_array+0x24>
 8008dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8008dec <__libc_init_array+0x40>)
 8008dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8008df0 <__libc_init_array+0x44>)
 8008dc0:	f002 fbd8 	bl	800b574 <_init>
 8008dc4:	1b64      	subs	r4, r4, r5
 8008dc6:	10a4      	asrs	r4, r4, #2
 8008dc8:	2600      	movs	r6, #0
 8008dca:	42a6      	cmp	r6, r4
 8008dcc:	d105      	bne.n	8008dda <__libc_init_array+0x2e>
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
 8008dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd4:	4798      	blx	r3
 8008dd6:	3601      	adds	r6, #1
 8008dd8:	e7ee      	b.n	8008db8 <__libc_init_array+0xc>
 8008dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dde:	4798      	blx	r3
 8008de0:	3601      	adds	r6, #1
 8008de2:	e7f2      	b.n	8008dca <__libc_init_array+0x1e>
 8008de4:	0800c560 	.word	0x0800c560
 8008de8:	0800c560 	.word	0x0800c560
 8008dec:	0800c560 	.word	0x0800c560
 8008df0:	0800c564 	.word	0x0800c564

08008df4 <__retarget_lock_init_recursive>:
 8008df4:	4770      	bx	lr

08008df6 <__retarget_lock_acquire_recursive>:
 8008df6:	4770      	bx	lr

08008df8 <__retarget_lock_release_recursive>:
 8008df8:	4770      	bx	lr

08008dfa <quorem>:
 8008dfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfe:	6903      	ldr	r3, [r0, #16]
 8008e00:	690c      	ldr	r4, [r1, #16]
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	4607      	mov	r7, r0
 8008e06:	db7e      	blt.n	8008f06 <quorem+0x10c>
 8008e08:	3c01      	subs	r4, #1
 8008e0a:	f101 0814 	add.w	r8, r1, #20
 8008e0e:	00a3      	lsls	r3, r4, #2
 8008e10:	f100 0514 	add.w	r5, r0, #20
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e24:	3301      	adds	r3, #1
 8008e26:	429a      	cmp	r2, r3
 8008e28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e30:	d32e      	bcc.n	8008e90 <quorem+0x96>
 8008e32:	f04f 0a00 	mov.w	sl, #0
 8008e36:	46c4      	mov	ip, r8
 8008e38:	46ae      	mov	lr, r5
 8008e3a:	46d3      	mov	fp, sl
 8008e3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e40:	b298      	uxth	r0, r3
 8008e42:	fb06 a000 	mla	r0, r6, r0, sl
 8008e46:	0c02      	lsrs	r2, r0, #16
 8008e48:	0c1b      	lsrs	r3, r3, #16
 8008e4a:	fb06 2303 	mla	r3, r6, r3, r2
 8008e4e:	f8de 2000 	ldr.w	r2, [lr]
 8008e52:	b280      	uxth	r0, r0
 8008e54:	b292      	uxth	r2, r2
 8008e56:	1a12      	subs	r2, r2, r0
 8008e58:	445a      	add	r2, fp
 8008e5a:	f8de 0000 	ldr.w	r0, [lr]
 8008e5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e6c:	b292      	uxth	r2, r2
 8008e6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e72:	45e1      	cmp	r9, ip
 8008e74:	f84e 2b04 	str.w	r2, [lr], #4
 8008e78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e7c:	d2de      	bcs.n	8008e3c <quorem+0x42>
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	58eb      	ldr	r3, [r5, r3]
 8008e82:	b92b      	cbnz	r3, 8008e90 <quorem+0x96>
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	3b04      	subs	r3, #4
 8008e88:	429d      	cmp	r5, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	d32f      	bcc.n	8008eee <quorem+0xf4>
 8008e8e:	613c      	str	r4, [r7, #16]
 8008e90:	4638      	mov	r0, r7
 8008e92:	f001 f97b 	bl	800a18c <__mcmp>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	db25      	blt.n	8008ee6 <quorem+0xec>
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ea2:	f8d1 c000 	ldr.w	ip, [r1]
 8008ea6:	fa1f fe82 	uxth.w	lr, r2
 8008eaa:	fa1f f38c 	uxth.w	r3, ip
 8008eae:	eba3 030e 	sub.w	r3, r3, lr
 8008eb2:	4403      	add	r3, r0
 8008eb4:	0c12      	lsrs	r2, r2, #16
 8008eb6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008eba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ec4:	45c1      	cmp	r9, r8
 8008ec6:	f841 3b04 	str.w	r3, [r1], #4
 8008eca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ece:	d2e6      	bcs.n	8008e9e <quorem+0xa4>
 8008ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed8:	b922      	cbnz	r2, 8008ee4 <quorem+0xea>
 8008eda:	3b04      	subs	r3, #4
 8008edc:	429d      	cmp	r5, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	d30b      	bcc.n	8008efa <quorem+0x100>
 8008ee2:	613c      	str	r4, [r7, #16]
 8008ee4:	3601      	adds	r6, #1
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	b003      	add	sp, #12
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	3b04      	subs	r3, #4
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	d1cb      	bne.n	8008e8e <quorem+0x94>
 8008ef6:	3c01      	subs	r4, #1
 8008ef8:	e7c6      	b.n	8008e88 <quorem+0x8e>
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d1ef      	bne.n	8008ee2 <quorem+0xe8>
 8008f02:	3c01      	subs	r4, #1
 8008f04:	e7ea      	b.n	8008edc <quorem+0xe2>
 8008f06:	2000      	movs	r0, #0
 8008f08:	e7ee      	b.n	8008ee8 <quorem+0xee>
 8008f0a:	0000      	movs	r0, r0
 8008f0c:	0000      	movs	r0, r0
	...

08008f10 <_dtoa_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	69c7      	ldr	r7, [r0, #28]
 8008f16:	b099      	sub	sp, #100	@ 0x64
 8008f18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f1c:	ec55 4b10 	vmov	r4, r5, d0
 8008f20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f22:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f24:	4683      	mov	fp, r0
 8008f26:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f2a:	b97f      	cbnz	r7, 8008f4c <_dtoa_r+0x3c>
 8008f2c:	2010      	movs	r0, #16
 8008f2e:	f000 fdfd 	bl	8009b2c <malloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f38:	b920      	cbnz	r0, 8008f44 <_dtoa_r+0x34>
 8008f3a:	4ba7      	ldr	r3, [pc, #668]	@ (80091d8 <_dtoa_r+0x2c8>)
 8008f3c:	21ef      	movs	r1, #239	@ 0xef
 8008f3e:	48a7      	ldr	r0, [pc, #668]	@ (80091dc <_dtoa_r+0x2cc>)
 8008f40:	f001 fc68 	bl	800a814 <__assert_func>
 8008f44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f48:	6007      	str	r7, [r0, #0]
 8008f4a:	60c7      	str	r7, [r0, #12]
 8008f4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	b159      	cbz	r1, 8008f6c <_dtoa_r+0x5c>
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	604a      	str	r2, [r1, #4]
 8008f58:	2301      	movs	r3, #1
 8008f5a:	4093      	lsls	r3, r2
 8008f5c:	608b      	str	r3, [r1, #8]
 8008f5e:	4658      	mov	r0, fp
 8008f60:	f000 feda 	bl	8009d18 <_Bfree>
 8008f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	1e2b      	subs	r3, r5, #0
 8008f6e:	bfb9      	ittee	lt
 8008f70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f74:	9303      	strlt	r3, [sp, #12]
 8008f76:	2300      	movge	r3, #0
 8008f78:	6033      	strge	r3, [r6, #0]
 8008f7a:	9f03      	ldr	r7, [sp, #12]
 8008f7c:	4b98      	ldr	r3, [pc, #608]	@ (80091e0 <_dtoa_r+0x2d0>)
 8008f7e:	bfbc      	itt	lt
 8008f80:	2201      	movlt	r2, #1
 8008f82:	6032      	strlt	r2, [r6, #0]
 8008f84:	43bb      	bics	r3, r7
 8008f86:	d112      	bne.n	8008fae <_dtoa_r+0x9e>
 8008f88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f94:	4323      	orrs	r3, r4
 8008f96:	f000 854d 	beq.w	8009a34 <_dtoa_r+0xb24>
 8008f9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80091f4 <_dtoa_r+0x2e4>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 854f 	beq.w	8009a44 <_dtoa_r+0xb34>
 8008fa6:	f10a 0303 	add.w	r3, sl, #3
 8008faa:	f000 bd49 	b.w	8009a40 <_dtoa_r+0xb30>
 8008fae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	ec51 0b17 	vmov	r0, r1, d7
 8008fb8:	2300      	movs	r3, #0
 8008fba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008fbe:	f7f7 fda3 	bl	8000b08 <__aeabi_dcmpeq>
 8008fc2:	4680      	mov	r8, r0
 8008fc4:	b158      	cbz	r0, 8008fde <_dtoa_r+0xce>
 8008fc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fc8:	2301      	movs	r3, #1
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008fce:	b113      	cbz	r3, 8008fd6 <_dtoa_r+0xc6>
 8008fd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008fd2:	4b84      	ldr	r3, [pc, #528]	@ (80091e4 <_dtoa_r+0x2d4>)
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80091f8 <_dtoa_r+0x2e8>
 8008fda:	f000 bd33 	b.w	8009a44 <_dtoa_r+0xb34>
 8008fde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008fe2:	aa16      	add	r2, sp, #88	@ 0x58
 8008fe4:	a917      	add	r1, sp, #92	@ 0x5c
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	f001 f980 	bl	800a2ec <__d2b>
 8008fec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ff0:	4681      	mov	r9, r0
 8008ff2:	2e00      	cmp	r6, #0
 8008ff4:	d077      	beq.n	80090e6 <_dtoa_r+0x1d6>
 8008ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009004:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009008:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800900c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009010:	4619      	mov	r1, r3
 8009012:	2200      	movs	r2, #0
 8009014:	4b74      	ldr	r3, [pc, #464]	@ (80091e8 <_dtoa_r+0x2d8>)
 8009016:	f7f7 f957 	bl	80002c8 <__aeabi_dsub>
 800901a:	a369      	add	r3, pc, #420	@ (adr r3, 80091c0 <_dtoa_r+0x2b0>)
 800901c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009020:	f7f7 fb0a 	bl	8000638 <__aeabi_dmul>
 8009024:	a368      	add	r3, pc, #416	@ (adr r3, 80091c8 <_dtoa_r+0x2b8>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 f94f 	bl	80002cc <__adddf3>
 800902e:	4604      	mov	r4, r0
 8009030:	4630      	mov	r0, r6
 8009032:	460d      	mov	r5, r1
 8009034:	f7f7 fa96 	bl	8000564 <__aeabi_i2d>
 8009038:	a365      	add	r3, pc, #404	@ (adr r3, 80091d0 <_dtoa_r+0x2c0>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 fafb 	bl	8000638 <__aeabi_dmul>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4620      	mov	r0, r4
 8009048:	4629      	mov	r1, r5
 800904a:	f7f7 f93f 	bl	80002cc <__adddf3>
 800904e:	4604      	mov	r4, r0
 8009050:	460d      	mov	r5, r1
 8009052:	f7f7 fda1 	bl	8000b98 <__aeabi_d2iz>
 8009056:	2200      	movs	r2, #0
 8009058:	4607      	mov	r7, r0
 800905a:	2300      	movs	r3, #0
 800905c:	4620      	mov	r0, r4
 800905e:	4629      	mov	r1, r5
 8009060:	f7f7 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8009064:	b140      	cbz	r0, 8009078 <_dtoa_r+0x168>
 8009066:	4638      	mov	r0, r7
 8009068:	f7f7 fa7c 	bl	8000564 <__aeabi_i2d>
 800906c:	4622      	mov	r2, r4
 800906e:	462b      	mov	r3, r5
 8009070:	f7f7 fd4a 	bl	8000b08 <__aeabi_dcmpeq>
 8009074:	b900      	cbnz	r0, 8009078 <_dtoa_r+0x168>
 8009076:	3f01      	subs	r7, #1
 8009078:	2f16      	cmp	r7, #22
 800907a:	d851      	bhi.n	8009120 <_dtoa_r+0x210>
 800907c:	4b5b      	ldr	r3, [pc, #364]	@ (80091ec <_dtoa_r+0x2dc>)
 800907e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800908a:	f7f7 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800908e:	2800      	cmp	r0, #0
 8009090:	d048      	beq.n	8009124 <_dtoa_r+0x214>
 8009092:	3f01      	subs	r7, #1
 8009094:	2300      	movs	r3, #0
 8009096:	9312      	str	r3, [sp, #72]	@ 0x48
 8009098:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800909a:	1b9b      	subs	r3, r3, r6
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	bf44      	itt	mi
 80090a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80090a4:	2300      	movmi	r3, #0
 80090a6:	9208      	str	r2, [sp, #32]
 80090a8:	bf54      	ite	pl
 80090aa:	f04f 0800 	movpl.w	r8, #0
 80090ae:	9308      	strmi	r3, [sp, #32]
 80090b0:	2f00      	cmp	r7, #0
 80090b2:	db39      	blt.n	8009128 <_dtoa_r+0x218>
 80090b4:	9b08      	ldr	r3, [sp, #32]
 80090b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80090b8:	443b      	add	r3, r7
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	2300      	movs	r3, #0
 80090be:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c2:	2b09      	cmp	r3, #9
 80090c4:	d864      	bhi.n	8009190 <_dtoa_r+0x280>
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	bfc4      	itt	gt
 80090ca:	3b04      	subgt	r3, #4
 80090cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80090ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d0:	f1a3 0302 	sub.w	r3, r3, #2
 80090d4:	bfcc      	ite	gt
 80090d6:	2400      	movgt	r4, #0
 80090d8:	2401      	movle	r4, #1
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d863      	bhi.n	80091a6 <_dtoa_r+0x296>
 80090de:	e8df f003 	tbb	[pc, r3]
 80090e2:	372a      	.short	0x372a
 80090e4:	5535      	.short	0x5535
 80090e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80090ea:	441e      	add	r6, r3
 80090ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80090f0:	2b20      	cmp	r3, #32
 80090f2:	bfc1      	itttt	gt
 80090f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80090f8:	409f      	lslgt	r7, r3
 80090fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80090fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009102:	bfd6      	itet	le
 8009104:	f1c3 0320 	rsble	r3, r3, #32
 8009108:	ea47 0003 	orrgt.w	r0, r7, r3
 800910c:	fa04 f003 	lslle.w	r0, r4, r3
 8009110:	f7f7 fa18 	bl	8000544 <__aeabi_ui2d>
 8009114:	2201      	movs	r2, #1
 8009116:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800911a:	3e01      	subs	r6, #1
 800911c:	9214      	str	r2, [sp, #80]	@ 0x50
 800911e:	e777      	b.n	8009010 <_dtoa_r+0x100>
 8009120:	2301      	movs	r3, #1
 8009122:	e7b8      	b.n	8009096 <_dtoa_r+0x186>
 8009124:	9012      	str	r0, [sp, #72]	@ 0x48
 8009126:	e7b7      	b.n	8009098 <_dtoa_r+0x188>
 8009128:	427b      	negs	r3, r7
 800912a:	930a      	str	r3, [sp, #40]	@ 0x28
 800912c:	2300      	movs	r3, #0
 800912e:	eba8 0807 	sub.w	r8, r8, r7
 8009132:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009134:	e7c4      	b.n	80090c0 <_dtoa_r+0x1b0>
 8009136:	2300      	movs	r3, #0
 8009138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800913a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800913c:	2b00      	cmp	r3, #0
 800913e:	dc35      	bgt.n	80091ac <_dtoa_r+0x29c>
 8009140:	2301      	movs	r3, #1
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	9307      	str	r3, [sp, #28]
 8009146:	461a      	mov	r2, r3
 8009148:	920e      	str	r2, [sp, #56]	@ 0x38
 800914a:	e00b      	b.n	8009164 <_dtoa_r+0x254>
 800914c:	2301      	movs	r3, #1
 800914e:	e7f3      	b.n	8009138 <_dtoa_r+0x228>
 8009150:	2300      	movs	r3, #0
 8009152:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	3301      	adds	r3, #1
 800915c:	2b01      	cmp	r3, #1
 800915e:	9307      	str	r3, [sp, #28]
 8009160:	bfb8      	it	lt
 8009162:	2301      	movlt	r3, #1
 8009164:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009168:	2100      	movs	r1, #0
 800916a:	2204      	movs	r2, #4
 800916c:	f102 0514 	add.w	r5, r2, #20
 8009170:	429d      	cmp	r5, r3
 8009172:	d91f      	bls.n	80091b4 <_dtoa_r+0x2a4>
 8009174:	6041      	str	r1, [r0, #4]
 8009176:	4658      	mov	r0, fp
 8009178:	f000 fd8e 	bl	8009c98 <_Balloc>
 800917c:	4682      	mov	sl, r0
 800917e:	2800      	cmp	r0, #0
 8009180:	d13c      	bne.n	80091fc <_dtoa_r+0x2ec>
 8009182:	4b1b      	ldr	r3, [pc, #108]	@ (80091f0 <_dtoa_r+0x2e0>)
 8009184:	4602      	mov	r2, r0
 8009186:	f240 11af 	movw	r1, #431	@ 0x1af
 800918a:	e6d8      	b.n	8008f3e <_dtoa_r+0x2e>
 800918c:	2301      	movs	r3, #1
 800918e:	e7e0      	b.n	8009152 <_dtoa_r+0x242>
 8009190:	2401      	movs	r4, #1
 8009192:	2300      	movs	r3, #0
 8009194:	9309      	str	r3, [sp, #36]	@ 0x24
 8009196:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009198:	f04f 33ff 	mov.w	r3, #4294967295
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	9307      	str	r3, [sp, #28]
 80091a0:	2200      	movs	r2, #0
 80091a2:	2312      	movs	r3, #18
 80091a4:	e7d0      	b.n	8009148 <_dtoa_r+0x238>
 80091a6:	2301      	movs	r3, #1
 80091a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091aa:	e7f5      	b.n	8009198 <_dtoa_r+0x288>
 80091ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	9307      	str	r3, [sp, #28]
 80091b2:	e7d7      	b.n	8009164 <_dtoa_r+0x254>
 80091b4:	3101      	adds	r1, #1
 80091b6:	0052      	lsls	r2, r2, #1
 80091b8:	e7d8      	b.n	800916c <_dtoa_r+0x25c>
 80091ba:	bf00      	nop
 80091bc:	f3af 8000 	nop.w
 80091c0:	636f4361 	.word	0x636f4361
 80091c4:	3fd287a7 	.word	0x3fd287a7
 80091c8:	8b60c8b3 	.word	0x8b60c8b3
 80091cc:	3fc68a28 	.word	0x3fc68a28
 80091d0:	509f79fb 	.word	0x509f79fb
 80091d4:	3fd34413 	.word	0x3fd34413
 80091d8:	0800c1b9 	.word	0x0800c1b9
 80091dc:	0800c1d0 	.word	0x0800c1d0
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	0800c189 	.word	0x0800c189
 80091e8:	3ff80000 	.word	0x3ff80000
 80091ec:	0800c2c8 	.word	0x0800c2c8
 80091f0:	0800c228 	.word	0x0800c228
 80091f4:	0800c1b5 	.word	0x0800c1b5
 80091f8:	0800c188 	.word	0x0800c188
 80091fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009200:	6018      	str	r0, [r3, #0]
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	2b0e      	cmp	r3, #14
 8009206:	f200 80a4 	bhi.w	8009352 <_dtoa_r+0x442>
 800920a:	2c00      	cmp	r4, #0
 800920c:	f000 80a1 	beq.w	8009352 <_dtoa_r+0x442>
 8009210:	2f00      	cmp	r7, #0
 8009212:	dd33      	ble.n	800927c <_dtoa_r+0x36c>
 8009214:	4bad      	ldr	r3, [pc, #692]	@ (80094cc <_dtoa_r+0x5bc>)
 8009216:	f007 020f 	and.w	r2, r7, #15
 800921a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921e:	ed93 7b00 	vldr	d7, [r3]
 8009222:	05f8      	lsls	r0, r7, #23
 8009224:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009228:	ea4f 1427 	mov.w	r4, r7, asr #4
 800922c:	d516      	bpl.n	800925c <_dtoa_r+0x34c>
 800922e:	4ba8      	ldr	r3, [pc, #672]	@ (80094d0 <_dtoa_r+0x5c0>)
 8009230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009238:	f7f7 fb28 	bl	800088c <__aeabi_ddiv>
 800923c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009240:	f004 040f 	and.w	r4, r4, #15
 8009244:	2603      	movs	r6, #3
 8009246:	4da2      	ldr	r5, [pc, #648]	@ (80094d0 <_dtoa_r+0x5c0>)
 8009248:	b954      	cbnz	r4, 8009260 <_dtoa_r+0x350>
 800924a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800924e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009252:	f7f7 fb1b 	bl	800088c <__aeabi_ddiv>
 8009256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800925a:	e028      	b.n	80092ae <_dtoa_r+0x39e>
 800925c:	2602      	movs	r6, #2
 800925e:	e7f2      	b.n	8009246 <_dtoa_r+0x336>
 8009260:	07e1      	lsls	r1, r4, #31
 8009262:	d508      	bpl.n	8009276 <_dtoa_r+0x366>
 8009264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009268:	e9d5 2300 	ldrd	r2, r3, [r5]
 800926c:	f7f7 f9e4 	bl	8000638 <__aeabi_dmul>
 8009270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009274:	3601      	adds	r6, #1
 8009276:	1064      	asrs	r4, r4, #1
 8009278:	3508      	adds	r5, #8
 800927a:	e7e5      	b.n	8009248 <_dtoa_r+0x338>
 800927c:	f000 80d2 	beq.w	8009424 <_dtoa_r+0x514>
 8009280:	427c      	negs	r4, r7
 8009282:	4b92      	ldr	r3, [pc, #584]	@ (80094cc <_dtoa_r+0x5bc>)
 8009284:	4d92      	ldr	r5, [pc, #584]	@ (80094d0 <_dtoa_r+0x5c0>)
 8009286:	f004 020f 	and.w	r2, r4, #15
 800928a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009296:	f7f7 f9cf 	bl	8000638 <__aeabi_dmul>
 800929a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800929e:	1124      	asrs	r4, r4, #4
 80092a0:	2300      	movs	r3, #0
 80092a2:	2602      	movs	r6, #2
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	f040 80b2 	bne.w	800940e <_dtoa_r+0x4fe>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1d3      	bne.n	8009256 <_dtoa_r+0x346>
 80092ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 80b7 	beq.w	8009428 <_dtoa_r+0x518>
 80092ba:	4b86      	ldr	r3, [pc, #536]	@ (80094d4 <_dtoa_r+0x5c4>)
 80092bc:	2200      	movs	r2, #0
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fc2b 	bl	8000b1c <__aeabi_dcmplt>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f000 80ae 	beq.w	8009428 <_dtoa_r+0x518>
 80092cc:	9b07      	ldr	r3, [sp, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 80aa 	beq.w	8009428 <_dtoa_r+0x518>
 80092d4:	9b00      	ldr	r3, [sp, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd37      	ble.n	800934a <_dtoa_r+0x43a>
 80092da:	1e7b      	subs	r3, r7, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	4620      	mov	r0, r4
 80092e0:	4b7d      	ldr	r3, [pc, #500]	@ (80094d8 <_dtoa_r+0x5c8>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 f9a7 	bl	8000638 <__aeabi_dmul>
 80092ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ee:	9c00      	ldr	r4, [sp, #0]
 80092f0:	3601      	adds	r6, #1
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7f7 f936 	bl	8000564 <__aeabi_i2d>
 80092f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	4b76      	ldr	r3, [pc, #472]	@ (80094dc <_dtoa_r+0x5cc>)
 8009302:	2200      	movs	r2, #0
 8009304:	f7f6 ffe2 	bl	80002cc <__adddf3>
 8009308:	4605      	mov	r5, r0
 800930a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800930e:	2c00      	cmp	r4, #0
 8009310:	f040 808d 	bne.w	800942e <_dtoa_r+0x51e>
 8009314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009318:	4b71      	ldr	r3, [pc, #452]	@ (80094e0 <_dtoa_r+0x5d0>)
 800931a:	2200      	movs	r2, #0
 800931c:	f7f6 ffd4 	bl	80002c8 <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009328:	462a      	mov	r2, r5
 800932a:	4633      	mov	r3, r6
 800932c:	f7f7 fc14 	bl	8000b58 <__aeabi_dcmpgt>
 8009330:	2800      	cmp	r0, #0
 8009332:	f040 828b 	bne.w	800984c <_dtoa_r+0x93c>
 8009336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800933a:	462a      	mov	r2, r5
 800933c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009340:	f7f7 fbec 	bl	8000b1c <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	f040 8128 	bne.w	800959a <_dtoa_r+0x68a>
 800934a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800934e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009354:	2b00      	cmp	r3, #0
 8009356:	f2c0 815a 	blt.w	800960e <_dtoa_r+0x6fe>
 800935a:	2f0e      	cmp	r7, #14
 800935c:	f300 8157 	bgt.w	800960e <_dtoa_r+0x6fe>
 8009360:	4b5a      	ldr	r3, [pc, #360]	@ (80094cc <_dtoa_r+0x5bc>)
 8009362:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009366:	ed93 7b00 	vldr	d7, [r3]
 800936a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	ed8d 7b00 	vstr	d7, [sp]
 8009372:	da03      	bge.n	800937c <_dtoa_r+0x46c>
 8009374:	9b07      	ldr	r3, [sp, #28]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f340 8101 	ble.w	800957e <_dtoa_r+0x66e>
 800937c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009380:	4656      	mov	r6, sl
 8009382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f7 fa7f 	bl	800088c <__aeabi_ddiv>
 800938e:	f7f7 fc03 	bl	8000b98 <__aeabi_d2iz>
 8009392:	4680      	mov	r8, r0
 8009394:	f7f7 f8e6 	bl	8000564 <__aeabi_i2d>
 8009398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800939c:	f7f7 f94c 	bl	8000638 <__aeabi_dmul>
 80093a0:	4602      	mov	r2, r0
 80093a2:	460b      	mov	r3, r1
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80093ac:	f7f6 ff8c 	bl	80002c8 <__aeabi_dsub>
 80093b0:	f806 4b01 	strb.w	r4, [r6], #1
 80093b4:	9d07      	ldr	r5, [sp, #28]
 80093b6:	eba6 040a 	sub.w	r4, r6, sl
 80093ba:	42a5      	cmp	r5, r4
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	f040 8117 	bne.w	80095f2 <_dtoa_r+0x6e2>
 80093c4:	f7f6 ff82 	bl	80002cc <__adddf3>
 80093c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	f7f7 fbc2 	bl	8000b58 <__aeabi_dcmpgt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f040 80f9 	bne.w	80095cc <_dtoa_r+0x6bc>
 80093da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f7 fb91 	bl	8000b08 <__aeabi_dcmpeq>
 80093e6:	b118      	cbz	r0, 80093f0 <_dtoa_r+0x4e0>
 80093e8:	f018 0f01 	tst.w	r8, #1
 80093ec:	f040 80ee 	bne.w	80095cc <_dtoa_r+0x6bc>
 80093f0:	4649      	mov	r1, r9
 80093f2:	4658      	mov	r0, fp
 80093f4:	f000 fc90 	bl	8009d18 <_Bfree>
 80093f8:	2300      	movs	r3, #0
 80093fa:	7033      	strb	r3, [r6, #0]
 80093fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093fe:	3701      	adds	r7, #1
 8009400:	601f      	str	r7, [r3, #0]
 8009402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 831d 	beq.w	8009a44 <_dtoa_r+0xb34>
 800940a:	601e      	str	r6, [r3, #0]
 800940c:	e31a      	b.n	8009a44 <_dtoa_r+0xb34>
 800940e:	07e2      	lsls	r2, r4, #31
 8009410:	d505      	bpl.n	800941e <_dtoa_r+0x50e>
 8009412:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009416:	f7f7 f90f 	bl	8000638 <__aeabi_dmul>
 800941a:	3601      	adds	r6, #1
 800941c:	2301      	movs	r3, #1
 800941e:	1064      	asrs	r4, r4, #1
 8009420:	3508      	adds	r5, #8
 8009422:	e73f      	b.n	80092a4 <_dtoa_r+0x394>
 8009424:	2602      	movs	r6, #2
 8009426:	e742      	b.n	80092ae <_dtoa_r+0x39e>
 8009428:	9c07      	ldr	r4, [sp, #28]
 800942a:	9704      	str	r7, [sp, #16]
 800942c:	e761      	b.n	80092f2 <_dtoa_r+0x3e2>
 800942e:	4b27      	ldr	r3, [pc, #156]	@ (80094cc <_dtoa_r+0x5bc>)
 8009430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009432:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009436:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800943a:	4454      	add	r4, sl
 800943c:	2900      	cmp	r1, #0
 800943e:	d053      	beq.n	80094e8 <_dtoa_r+0x5d8>
 8009440:	4928      	ldr	r1, [pc, #160]	@ (80094e4 <_dtoa_r+0x5d4>)
 8009442:	2000      	movs	r0, #0
 8009444:	f7f7 fa22 	bl	800088c <__aeabi_ddiv>
 8009448:	4633      	mov	r3, r6
 800944a:	462a      	mov	r2, r5
 800944c:	f7f6 ff3c 	bl	80002c8 <__aeabi_dsub>
 8009450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009454:	4656      	mov	r6, sl
 8009456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800945a:	f7f7 fb9d 	bl	8000b98 <__aeabi_d2iz>
 800945e:	4605      	mov	r5, r0
 8009460:	f7f7 f880 	bl	8000564 <__aeabi_i2d>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946c:	f7f6 ff2c 	bl	80002c8 <__aeabi_dsub>
 8009470:	3530      	adds	r5, #48	@ 0x30
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800947a:	f806 5b01 	strb.w	r5, [r6], #1
 800947e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009482:	f7f7 fb4b 	bl	8000b1c <__aeabi_dcmplt>
 8009486:	2800      	cmp	r0, #0
 8009488:	d171      	bne.n	800956e <_dtoa_r+0x65e>
 800948a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948e:	4911      	ldr	r1, [pc, #68]	@ (80094d4 <_dtoa_r+0x5c4>)
 8009490:	2000      	movs	r0, #0
 8009492:	f7f6 ff19 	bl	80002c8 <__aeabi_dsub>
 8009496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800949a:	f7f7 fb3f 	bl	8000b1c <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f040 8095 	bne.w	80095ce <_dtoa_r+0x6be>
 80094a4:	42a6      	cmp	r6, r4
 80094a6:	f43f af50 	beq.w	800934a <_dtoa_r+0x43a>
 80094aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094ae:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <_dtoa_r+0x5c8>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	f7f7 f8c1 	bl	8000638 <__aeabi_dmul>
 80094b6:	4b08      	ldr	r3, [pc, #32]	@ (80094d8 <_dtoa_r+0x5c8>)
 80094b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094bc:	2200      	movs	r2, #0
 80094be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c2:	f7f7 f8b9 	bl	8000638 <__aeabi_dmul>
 80094c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ca:	e7c4      	b.n	8009456 <_dtoa_r+0x546>
 80094cc:	0800c2c8 	.word	0x0800c2c8
 80094d0:	0800c2a0 	.word	0x0800c2a0
 80094d4:	3ff00000 	.word	0x3ff00000
 80094d8:	40240000 	.word	0x40240000
 80094dc:	401c0000 	.word	0x401c0000
 80094e0:	40140000 	.word	0x40140000
 80094e4:	3fe00000 	.word	0x3fe00000
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	f7f7 f8a4 	bl	8000638 <__aeabi_dmul>
 80094f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80094f6:	4656      	mov	r6, sl
 80094f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094fc:	f7f7 fb4c 	bl	8000b98 <__aeabi_d2iz>
 8009500:	4605      	mov	r5, r0
 8009502:	f7f7 f82f 	bl	8000564 <__aeabi_i2d>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950e:	f7f6 fedb 	bl	80002c8 <__aeabi_dsub>
 8009512:	3530      	adds	r5, #48	@ 0x30
 8009514:	f806 5b01 	strb.w	r5, [r6], #1
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	42a6      	cmp	r6, r4
 800951e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	d124      	bne.n	8009572 <_dtoa_r+0x662>
 8009528:	4bac      	ldr	r3, [pc, #688]	@ (80097dc <_dtoa_r+0x8cc>)
 800952a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800952e:	f7f6 fecd 	bl	80002cc <__adddf3>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800953a:	f7f7 fb0d 	bl	8000b58 <__aeabi_dcmpgt>
 800953e:	2800      	cmp	r0, #0
 8009540:	d145      	bne.n	80095ce <_dtoa_r+0x6be>
 8009542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009546:	49a5      	ldr	r1, [pc, #660]	@ (80097dc <_dtoa_r+0x8cc>)
 8009548:	2000      	movs	r0, #0
 800954a:	f7f6 febd 	bl	80002c8 <__aeabi_dsub>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009556:	f7f7 fae1 	bl	8000b1c <__aeabi_dcmplt>
 800955a:	2800      	cmp	r0, #0
 800955c:	f43f aef5 	beq.w	800934a <_dtoa_r+0x43a>
 8009560:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009562:	1e73      	subs	r3, r6, #1
 8009564:	9315      	str	r3, [sp, #84]	@ 0x54
 8009566:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800956a:	2b30      	cmp	r3, #48	@ 0x30
 800956c:	d0f8      	beq.n	8009560 <_dtoa_r+0x650>
 800956e:	9f04      	ldr	r7, [sp, #16]
 8009570:	e73e      	b.n	80093f0 <_dtoa_r+0x4e0>
 8009572:	4b9b      	ldr	r3, [pc, #620]	@ (80097e0 <_dtoa_r+0x8d0>)
 8009574:	f7f7 f860 	bl	8000638 <__aeabi_dmul>
 8009578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800957c:	e7bc      	b.n	80094f8 <_dtoa_r+0x5e8>
 800957e:	d10c      	bne.n	800959a <_dtoa_r+0x68a>
 8009580:	4b98      	ldr	r3, [pc, #608]	@ (80097e4 <_dtoa_r+0x8d4>)
 8009582:	2200      	movs	r2, #0
 8009584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009588:	f7f7 f856 	bl	8000638 <__aeabi_dmul>
 800958c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009590:	f7f7 fad8 	bl	8000b44 <__aeabi_dcmpge>
 8009594:	2800      	cmp	r0, #0
 8009596:	f000 8157 	beq.w	8009848 <_dtoa_r+0x938>
 800959a:	2400      	movs	r4, #0
 800959c:	4625      	mov	r5, r4
 800959e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095a0:	43db      	mvns	r3, r3
 80095a2:	9304      	str	r3, [sp, #16]
 80095a4:	4656      	mov	r6, sl
 80095a6:	2700      	movs	r7, #0
 80095a8:	4621      	mov	r1, r4
 80095aa:	4658      	mov	r0, fp
 80095ac:	f000 fbb4 	bl	8009d18 <_Bfree>
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	d0dc      	beq.n	800956e <_dtoa_r+0x65e>
 80095b4:	b12f      	cbz	r7, 80095c2 <_dtoa_r+0x6b2>
 80095b6:	42af      	cmp	r7, r5
 80095b8:	d003      	beq.n	80095c2 <_dtoa_r+0x6b2>
 80095ba:	4639      	mov	r1, r7
 80095bc:	4658      	mov	r0, fp
 80095be:	f000 fbab 	bl	8009d18 <_Bfree>
 80095c2:	4629      	mov	r1, r5
 80095c4:	4658      	mov	r0, fp
 80095c6:	f000 fba7 	bl	8009d18 <_Bfree>
 80095ca:	e7d0      	b.n	800956e <_dtoa_r+0x65e>
 80095cc:	9704      	str	r7, [sp, #16]
 80095ce:	4633      	mov	r3, r6
 80095d0:	461e      	mov	r6, r3
 80095d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d6:	2a39      	cmp	r2, #57	@ 0x39
 80095d8:	d107      	bne.n	80095ea <_dtoa_r+0x6da>
 80095da:	459a      	cmp	sl, r3
 80095dc:	d1f8      	bne.n	80095d0 <_dtoa_r+0x6c0>
 80095de:	9a04      	ldr	r2, [sp, #16]
 80095e0:	3201      	adds	r2, #1
 80095e2:	9204      	str	r2, [sp, #16]
 80095e4:	2230      	movs	r2, #48	@ 0x30
 80095e6:	f88a 2000 	strb.w	r2, [sl]
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	3201      	adds	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
 80095f0:	e7bd      	b.n	800956e <_dtoa_r+0x65e>
 80095f2:	4b7b      	ldr	r3, [pc, #492]	@ (80097e0 <_dtoa_r+0x8d0>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	f7f7 f81f 	bl	8000638 <__aeabi_dmul>
 80095fa:	2200      	movs	r2, #0
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	f7f7 fa81 	bl	8000b08 <__aeabi_dcmpeq>
 8009606:	2800      	cmp	r0, #0
 8009608:	f43f aebb 	beq.w	8009382 <_dtoa_r+0x472>
 800960c:	e6f0      	b.n	80093f0 <_dtoa_r+0x4e0>
 800960e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009610:	2a00      	cmp	r2, #0
 8009612:	f000 80db 	beq.w	80097cc <_dtoa_r+0x8bc>
 8009616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009618:	2a01      	cmp	r2, #1
 800961a:	f300 80bf 	bgt.w	800979c <_dtoa_r+0x88c>
 800961e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009620:	2a00      	cmp	r2, #0
 8009622:	f000 80b7 	beq.w	8009794 <_dtoa_r+0x884>
 8009626:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800962a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800962c:	4646      	mov	r6, r8
 800962e:	9a08      	ldr	r2, [sp, #32]
 8009630:	2101      	movs	r1, #1
 8009632:	441a      	add	r2, r3
 8009634:	4658      	mov	r0, fp
 8009636:	4498      	add	r8, r3
 8009638:	9208      	str	r2, [sp, #32]
 800963a:	f000 fc21 	bl	8009e80 <__i2b>
 800963e:	4605      	mov	r5, r0
 8009640:	b15e      	cbz	r6, 800965a <_dtoa_r+0x74a>
 8009642:	9b08      	ldr	r3, [sp, #32]
 8009644:	2b00      	cmp	r3, #0
 8009646:	dd08      	ble.n	800965a <_dtoa_r+0x74a>
 8009648:	42b3      	cmp	r3, r6
 800964a:	9a08      	ldr	r2, [sp, #32]
 800964c:	bfa8      	it	ge
 800964e:	4633      	movge	r3, r6
 8009650:	eba8 0803 	sub.w	r8, r8, r3
 8009654:	1af6      	subs	r6, r6, r3
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800965c:	b1f3      	cbz	r3, 800969c <_dtoa_r+0x78c>
 800965e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 80b7 	beq.w	80097d4 <_dtoa_r+0x8c4>
 8009666:	b18c      	cbz	r4, 800968c <_dtoa_r+0x77c>
 8009668:	4629      	mov	r1, r5
 800966a:	4622      	mov	r2, r4
 800966c:	4658      	mov	r0, fp
 800966e:	f000 fcc7 	bl	800a000 <__pow5mult>
 8009672:	464a      	mov	r2, r9
 8009674:	4601      	mov	r1, r0
 8009676:	4605      	mov	r5, r0
 8009678:	4658      	mov	r0, fp
 800967a:	f000 fc17 	bl	8009eac <__multiply>
 800967e:	4649      	mov	r1, r9
 8009680:	9004      	str	r0, [sp, #16]
 8009682:	4658      	mov	r0, fp
 8009684:	f000 fb48 	bl	8009d18 <_Bfree>
 8009688:	9b04      	ldr	r3, [sp, #16]
 800968a:	4699      	mov	r9, r3
 800968c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800968e:	1b1a      	subs	r2, r3, r4
 8009690:	d004      	beq.n	800969c <_dtoa_r+0x78c>
 8009692:	4649      	mov	r1, r9
 8009694:	4658      	mov	r0, fp
 8009696:	f000 fcb3 	bl	800a000 <__pow5mult>
 800969a:	4681      	mov	r9, r0
 800969c:	2101      	movs	r1, #1
 800969e:	4658      	mov	r0, fp
 80096a0:	f000 fbee 	bl	8009e80 <__i2b>
 80096a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096a6:	4604      	mov	r4, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 81cf 	beq.w	8009a4c <_dtoa_r+0xb3c>
 80096ae:	461a      	mov	r2, r3
 80096b0:	4601      	mov	r1, r0
 80096b2:	4658      	mov	r0, fp
 80096b4:	f000 fca4 	bl	800a000 <__pow5mult>
 80096b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	4604      	mov	r4, r0
 80096be:	f300 8095 	bgt.w	80097ec <_dtoa_r+0x8dc>
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f040 8087 	bne.w	80097d8 <_dtoa_r+0x8c8>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 8089 	bne.w	80097e8 <_dtoa_r+0x8d8>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096dc:	0d1b      	lsrs	r3, r3, #20
 80096de:	051b      	lsls	r3, r3, #20
 80096e0:	b12b      	cbz	r3, 80096ee <_dtoa_r+0x7de>
 80096e2:	9b08      	ldr	r3, [sp, #32]
 80096e4:	3301      	adds	r3, #1
 80096e6:	9308      	str	r3, [sp, #32]
 80096e8:	f108 0801 	add.w	r8, r8, #1
 80096ec:	2301      	movs	r3, #1
 80096ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 81b0 	beq.w	8009a58 <_dtoa_r+0xb48>
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096fe:	6918      	ldr	r0, [r3, #16]
 8009700:	f000 fb72 	bl	8009de8 <__hi0bits>
 8009704:	f1c0 0020 	rsb	r0, r0, #32
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	4418      	add	r0, r3
 800970c:	f010 001f 	ands.w	r0, r0, #31
 8009710:	d077      	beq.n	8009802 <_dtoa_r+0x8f2>
 8009712:	f1c0 0320 	rsb	r3, r0, #32
 8009716:	2b04      	cmp	r3, #4
 8009718:	dd6b      	ble.n	80097f2 <_dtoa_r+0x8e2>
 800971a:	9b08      	ldr	r3, [sp, #32]
 800971c:	f1c0 001c 	rsb	r0, r0, #28
 8009720:	4403      	add	r3, r0
 8009722:	4480      	add	r8, r0
 8009724:	4406      	add	r6, r0
 8009726:	9308      	str	r3, [sp, #32]
 8009728:	f1b8 0f00 	cmp.w	r8, #0
 800972c:	dd05      	ble.n	800973a <_dtoa_r+0x82a>
 800972e:	4649      	mov	r1, r9
 8009730:	4642      	mov	r2, r8
 8009732:	4658      	mov	r0, fp
 8009734:	f000 fcbe 	bl	800a0b4 <__lshift>
 8009738:	4681      	mov	r9, r0
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd05      	ble.n	800974c <_dtoa_r+0x83c>
 8009740:	4621      	mov	r1, r4
 8009742:	461a      	mov	r2, r3
 8009744:	4658      	mov	r0, fp
 8009746:	f000 fcb5 	bl	800a0b4 <__lshift>
 800974a:	4604      	mov	r4, r0
 800974c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800974e:	2b00      	cmp	r3, #0
 8009750:	d059      	beq.n	8009806 <_dtoa_r+0x8f6>
 8009752:	4621      	mov	r1, r4
 8009754:	4648      	mov	r0, r9
 8009756:	f000 fd19 	bl	800a18c <__mcmp>
 800975a:	2800      	cmp	r0, #0
 800975c:	da53      	bge.n	8009806 <_dtoa_r+0x8f6>
 800975e:	1e7b      	subs	r3, r7, #1
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	4649      	mov	r1, r9
 8009764:	2300      	movs	r3, #0
 8009766:	220a      	movs	r2, #10
 8009768:	4658      	mov	r0, fp
 800976a:	f000 faf7 	bl	8009d5c <__multadd>
 800976e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009770:	4681      	mov	r9, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8172 	beq.w	8009a5c <_dtoa_r+0xb4c>
 8009778:	2300      	movs	r3, #0
 800977a:	4629      	mov	r1, r5
 800977c:	220a      	movs	r2, #10
 800977e:	4658      	mov	r0, fp
 8009780:	f000 faec 	bl	8009d5c <__multadd>
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	4605      	mov	r5, r0
 800978a:	dc67      	bgt.n	800985c <_dtoa_r+0x94c>
 800978c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978e:	2b02      	cmp	r3, #2
 8009790:	dc41      	bgt.n	8009816 <_dtoa_r+0x906>
 8009792:	e063      	b.n	800985c <_dtoa_r+0x94c>
 8009794:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009796:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800979a:	e746      	b.n	800962a <_dtoa_r+0x71a>
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	1e5c      	subs	r4, r3, #1
 80097a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097a2:	42a3      	cmp	r3, r4
 80097a4:	bfbf      	itttt	lt
 80097a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80097a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80097aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80097ac:	1ae3      	sublt	r3, r4, r3
 80097ae:	bfb4      	ite	lt
 80097b0:	18d2      	addlt	r2, r2, r3
 80097b2:	1b1c      	subge	r4, r3, r4
 80097b4:	9b07      	ldr	r3, [sp, #28]
 80097b6:	bfbc      	itt	lt
 80097b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80097ba:	2400      	movlt	r4, #0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bfb5      	itete	lt
 80097c0:	eba8 0603 	sublt.w	r6, r8, r3
 80097c4:	9b07      	ldrge	r3, [sp, #28]
 80097c6:	2300      	movlt	r3, #0
 80097c8:	4646      	movge	r6, r8
 80097ca:	e730      	b.n	800962e <_dtoa_r+0x71e>
 80097cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80097d0:	4646      	mov	r6, r8
 80097d2:	e735      	b.n	8009640 <_dtoa_r+0x730>
 80097d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097d6:	e75c      	b.n	8009692 <_dtoa_r+0x782>
 80097d8:	2300      	movs	r3, #0
 80097da:	e788      	b.n	80096ee <_dtoa_r+0x7de>
 80097dc:	3fe00000 	.word	0x3fe00000
 80097e0:	40240000 	.word	0x40240000
 80097e4:	40140000 	.word	0x40140000
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	e780      	b.n	80096ee <_dtoa_r+0x7de>
 80097ec:	2300      	movs	r3, #0
 80097ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f0:	e782      	b.n	80096f8 <_dtoa_r+0x7e8>
 80097f2:	d099      	beq.n	8009728 <_dtoa_r+0x818>
 80097f4:	9a08      	ldr	r2, [sp, #32]
 80097f6:	331c      	adds	r3, #28
 80097f8:	441a      	add	r2, r3
 80097fa:	4498      	add	r8, r3
 80097fc:	441e      	add	r6, r3
 80097fe:	9208      	str	r2, [sp, #32]
 8009800:	e792      	b.n	8009728 <_dtoa_r+0x818>
 8009802:	4603      	mov	r3, r0
 8009804:	e7f6      	b.n	80097f4 <_dtoa_r+0x8e4>
 8009806:	9b07      	ldr	r3, [sp, #28]
 8009808:	9704      	str	r7, [sp, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dc20      	bgt.n	8009850 <_dtoa_r+0x940>
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009812:	2b02      	cmp	r3, #2
 8009814:	dd1e      	ble.n	8009854 <_dtoa_r+0x944>
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	f47f aec0 	bne.w	800959e <_dtoa_r+0x68e>
 800981e:	4621      	mov	r1, r4
 8009820:	2205      	movs	r2, #5
 8009822:	4658      	mov	r0, fp
 8009824:	f000 fa9a 	bl	8009d5c <__multadd>
 8009828:	4601      	mov	r1, r0
 800982a:	4604      	mov	r4, r0
 800982c:	4648      	mov	r0, r9
 800982e:	f000 fcad 	bl	800a18c <__mcmp>
 8009832:	2800      	cmp	r0, #0
 8009834:	f77f aeb3 	ble.w	800959e <_dtoa_r+0x68e>
 8009838:	4656      	mov	r6, sl
 800983a:	2331      	movs	r3, #49	@ 0x31
 800983c:	f806 3b01 	strb.w	r3, [r6], #1
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	3301      	adds	r3, #1
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	e6ae      	b.n	80095a6 <_dtoa_r+0x696>
 8009848:	9c07      	ldr	r4, [sp, #28]
 800984a:	9704      	str	r7, [sp, #16]
 800984c:	4625      	mov	r5, r4
 800984e:	e7f3      	b.n	8009838 <_dtoa_r+0x928>
 8009850:	9b07      	ldr	r3, [sp, #28]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 8104 	beq.w	8009a64 <_dtoa_r+0xb54>
 800985c:	2e00      	cmp	r6, #0
 800985e:	dd05      	ble.n	800986c <_dtoa_r+0x95c>
 8009860:	4629      	mov	r1, r5
 8009862:	4632      	mov	r2, r6
 8009864:	4658      	mov	r0, fp
 8009866:	f000 fc25 	bl	800a0b4 <__lshift>
 800986a:	4605      	mov	r5, r0
 800986c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800986e:	2b00      	cmp	r3, #0
 8009870:	d05a      	beq.n	8009928 <_dtoa_r+0xa18>
 8009872:	6869      	ldr	r1, [r5, #4]
 8009874:	4658      	mov	r0, fp
 8009876:	f000 fa0f 	bl	8009c98 <_Balloc>
 800987a:	4606      	mov	r6, r0
 800987c:	b928      	cbnz	r0, 800988a <_dtoa_r+0x97a>
 800987e:	4b84      	ldr	r3, [pc, #528]	@ (8009a90 <_dtoa_r+0xb80>)
 8009880:	4602      	mov	r2, r0
 8009882:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009886:	f7ff bb5a 	b.w	8008f3e <_dtoa_r+0x2e>
 800988a:	692a      	ldr	r2, [r5, #16]
 800988c:	3202      	adds	r2, #2
 800988e:	0092      	lsls	r2, r2, #2
 8009890:	f105 010c 	add.w	r1, r5, #12
 8009894:	300c      	adds	r0, #12
 8009896:	f000 ffaf 	bl	800a7f8 <memcpy>
 800989a:	2201      	movs	r2, #1
 800989c:	4631      	mov	r1, r6
 800989e:	4658      	mov	r0, fp
 80098a0:	f000 fc08 	bl	800a0b4 <__lshift>
 80098a4:	f10a 0301 	add.w	r3, sl, #1
 80098a8:	9307      	str	r3, [sp, #28]
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	4453      	add	r3, sl
 80098ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	462f      	mov	r7, r5
 80098b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80098ba:	4605      	mov	r5, r0
 80098bc:	9b07      	ldr	r3, [sp, #28]
 80098be:	4621      	mov	r1, r4
 80098c0:	3b01      	subs	r3, #1
 80098c2:	4648      	mov	r0, r9
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	f7ff fa98 	bl	8008dfa <quorem>
 80098ca:	4639      	mov	r1, r7
 80098cc:	9002      	str	r0, [sp, #8]
 80098ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098d2:	4648      	mov	r0, r9
 80098d4:	f000 fc5a 	bl	800a18c <__mcmp>
 80098d8:	462a      	mov	r2, r5
 80098da:	9008      	str	r0, [sp, #32]
 80098dc:	4621      	mov	r1, r4
 80098de:	4658      	mov	r0, fp
 80098e0:	f000 fc70 	bl	800a1c4 <__mdiff>
 80098e4:	68c2      	ldr	r2, [r0, #12]
 80098e6:	4606      	mov	r6, r0
 80098e8:	bb02      	cbnz	r2, 800992c <_dtoa_r+0xa1c>
 80098ea:	4601      	mov	r1, r0
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fc4d 	bl	800a18c <__mcmp>
 80098f2:	4602      	mov	r2, r0
 80098f4:	4631      	mov	r1, r6
 80098f6:	4658      	mov	r0, fp
 80098f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80098fa:	f000 fa0d 	bl	8009d18 <_Bfree>
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009902:	9e07      	ldr	r6, [sp, #28]
 8009904:	ea43 0102 	orr.w	r1, r3, r2
 8009908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990a:	4319      	orrs	r1, r3
 800990c:	d110      	bne.n	8009930 <_dtoa_r+0xa20>
 800990e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009912:	d029      	beq.n	8009968 <_dtoa_r+0xa58>
 8009914:	9b08      	ldr	r3, [sp, #32]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dd02      	ble.n	8009920 <_dtoa_r+0xa10>
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009920:	9b00      	ldr	r3, [sp, #0]
 8009922:	f883 8000 	strb.w	r8, [r3]
 8009926:	e63f      	b.n	80095a8 <_dtoa_r+0x698>
 8009928:	4628      	mov	r0, r5
 800992a:	e7bb      	b.n	80098a4 <_dtoa_r+0x994>
 800992c:	2201      	movs	r2, #1
 800992e:	e7e1      	b.n	80098f4 <_dtoa_r+0x9e4>
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	2b00      	cmp	r3, #0
 8009934:	db04      	blt.n	8009940 <_dtoa_r+0xa30>
 8009936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009938:	430b      	orrs	r3, r1
 800993a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800993c:	430b      	orrs	r3, r1
 800993e:	d120      	bne.n	8009982 <_dtoa_r+0xa72>
 8009940:	2a00      	cmp	r2, #0
 8009942:	dded      	ble.n	8009920 <_dtoa_r+0xa10>
 8009944:	4649      	mov	r1, r9
 8009946:	2201      	movs	r2, #1
 8009948:	4658      	mov	r0, fp
 800994a:	f000 fbb3 	bl	800a0b4 <__lshift>
 800994e:	4621      	mov	r1, r4
 8009950:	4681      	mov	r9, r0
 8009952:	f000 fc1b 	bl	800a18c <__mcmp>
 8009956:	2800      	cmp	r0, #0
 8009958:	dc03      	bgt.n	8009962 <_dtoa_r+0xa52>
 800995a:	d1e1      	bne.n	8009920 <_dtoa_r+0xa10>
 800995c:	f018 0f01 	tst.w	r8, #1
 8009960:	d0de      	beq.n	8009920 <_dtoa_r+0xa10>
 8009962:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009966:	d1d8      	bne.n	800991a <_dtoa_r+0xa0a>
 8009968:	9a00      	ldr	r2, [sp, #0]
 800996a:	2339      	movs	r3, #57	@ 0x39
 800996c:	7013      	strb	r3, [r2, #0]
 800996e:	4633      	mov	r3, r6
 8009970:	461e      	mov	r6, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009978:	2a39      	cmp	r2, #57	@ 0x39
 800997a:	d052      	beq.n	8009a22 <_dtoa_r+0xb12>
 800997c:	3201      	adds	r2, #1
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e612      	b.n	80095a8 <_dtoa_r+0x698>
 8009982:	2a00      	cmp	r2, #0
 8009984:	dd07      	ble.n	8009996 <_dtoa_r+0xa86>
 8009986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800998a:	d0ed      	beq.n	8009968 <_dtoa_r+0xa58>
 800998c:	9a00      	ldr	r2, [sp, #0]
 800998e:	f108 0301 	add.w	r3, r8, #1
 8009992:	7013      	strb	r3, [r2, #0]
 8009994:	e608      	b.n	80095a8 <_dtoa_r+0x698>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	9a07      	ldr	r2, [sp, #28]
 800999a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800999e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d028      	beq.n	80099f6 <_dtoa_r+0xae6>
 80099a4:	4649      	mov	r1, r9
 80099a6:	2300      	movs	r3, #0
 80099a8:	220a      	movs	r2, #10
 80099aa:	4658      	mov	r0, fp
 80099ac:	f000 f9d6 	bl	8009d5c <__multadd>
 80099b0:	42af      	cmp	r7, r5
 80099b2:	4681      	mov	r9, r0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	f04f 020a 	mov.w	r2, #10
 80099bc:	4639      	mov	r1, r7
 80099be:	4658      	mov	r0, fp
 80099c0:	d107      	bne.n	80099d2 <_dtoa_r+0xac2>
 80099c2:	f000 f9cb 	bl	8009d5c <__multadd>
 80099c6:	4607      	mov	r7, r0
 80099c8:	4605      	mov	r5, r0
 80099ca:	9b07      	ldr	r3, [sp, #28]
 80099cc:	3301      	adds	r3, #1
 80099ce:	9307      	str	r3, [sp, #28]
 80099d0:	e774      	b.n	80098bc <_dtoa_r+0x9ac>
 80099d2:	f000 f9c3 	bl	8009d5c <__multadd>
 80099d6:	4629      	mov	r1, r5
 80099d8:	4607      	mov	r7, r0
 80099da:	2300      	movs	r3, #0
 80099dc:	220a      	movs	r2, #10
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 f9bc 	bl	8009d5c <__multadd>
 80099e4:	4605      	mov	r5, r0
 80099e6:	e7f0      	b.n	80099ca <_dtoa_r+0xaba>
 80099e8:	9b00      	ldr	r3, [sp, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bfcc      	ite	gt
 80099ee:	461e      	movgt	r6, r3
 80099f0:	2601      	movle	r6, #1
 80099f2:	4456      	add	r6, sl
 80099f4:	2700      	movs	r7, #0
 80099f6:	4649      	mov	r1, r9
 80099f8:	2201      	movs	r2, #1
 80099fa:	4658      	mov	r0, fp
 80099fc:	f000 fb5a 	bl	800a0b4 <__lshift>
 8009a00:	4621      	mov	r1, r4
 8009a02:	4681      	mov	r9, r0
 8009a04:	f000 fbc2 	bl	800a18c <__mcmp>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	dcb0      	bgt.n	800996e <_dtoa_r+0xa5e>
 8009a0c:	d102      	bne.n	8009a14 <_dtoa_r+0xb04>
 8009a0e:	f018 0f01 	tst.w	r8, #1
 8009a12:	d1ac      	bne.n	800996e <_dtoa_r+0xa5e>
 8009a14:	4633      	mov	r3, r6
 8009a16:	461e      	mov	r6, r3
 8009a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a1c:	2a30      	cmp	r2, #48	@ 0x30
 8009a1e:	d0fa      	beq.n	8009a16 <_dtoa_r+0xb06>
 8009a20:	e5c2      	b.n	80095a8 <_dtoa_r+0x698>
 8009a22:	459a      	cmp	sl, r3
 8009a24:	d1a4      	bne.n	8009970 <_dtoa_r+0xa60>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	2331      	movs	r3, #49	@ 0x31
 8009a2e:	f88a 3000 	strb.w	r3, [sl]
 8009a32:	e5b9      	b.n	80095a8 <_dtoa_r+0x698>
 8009a34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a94 <_dtoa_r+0xb84>
 8009a3a:	b11b      	cbz	r3, 8009a44 <_dtoa_r+0xb34>
 8009a3c:	f10a 0308 	add.w	r3, sl, #8
 8009a40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	4650      	mov	r0, sl
 8009a46:	b019      	add	sp, #100	@ 0x64
 8009a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	f77f ae37 	ble.w	80096c2 <_dtoa_r+0x7b2>
 8009a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a58:	2001      	movs	r0, #1
 8009a5a:	e655      	b.n	8009708 <_dtoa_r+0x7f8>
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f77f aed6 	ble.w	8009810 <_dtoa_r+0x900>
 8009a64:	4656      	mov	r6, sl
 8009a66:	4621      	mov	r1, r4
 8009a68:	4648      	mov	r0, r9
 8009a6a:	f7ff f9c6 	bl	8008dfa <quorem>
 8009a6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a72:	f806 8b01 	strb.w	r8, [r6], #1
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	eba6 020a 	sub.w	r2, r6, sl
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	ddb3      	ble.n	80099e8 <_dtoa_r+0xad8>
 8009a80:	4649      	mov	r1, r9
 8009a82:	2300      	movs	r3, #0
 8009a84:	220a      	movs	r2, #10
 8009a86:	4658      	mov	r0, fp
 8009a88:	f000 f968 	bl	8009d5c <__multadd>
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	e7ea      	b.n	8009a66 <_dtoa_r+0xb56>
 8009a90:	0800c228 	.word	0x0800c228
 8009a94:	0800c1ac 	.word	0x0800c1ac

08009a98 <_free_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d041      	beq.n	8009b24 <_free_r+0x8c>
 8009aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa4:	1f0c      	subs	r4, r1, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfb8      	it	lt
 8009aaa:	18e4      	addlt	r4, r4, r3
 8009aac:	f000 f8e8 	bl	8009c80 <__malloc_lock>
 8009ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b28 <_free_r+0x90>)
 8009ab2:	6813      	ldr	r3, [r2, #0]
 8009ab4:	b933      	cbnz	r3, 8009ac4 <_free_r+0x2c>
 8009ab6:	6063      	str	r3, [r4, #4]
 8009ab8:	6014      	str	r4, [r2, #0]
 8009aba:	4628      	mov	r0, r5
 8009abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac0:	f000 b8e4 	b.w	8009c8c <__malloc_unlock>
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	d908      	bls.n	8009ada <_free_r+0x42>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	1821      	adds	r1, r4, r0
 8009acc:	428b      	cmp	r3, r1
 8009ace:	bf01      	itttt	eq
 8009ad0:	6819      	ldreq	r1, [r3, #0]
 8009ad2:	685b      	ldreq	r3, [r3, #4]
 8009ad4:	1809      	addeq	r1, r1, r0
 8009ad6:	6021      	streq	r1, [r4, #0]
 8009ad8:	e7ed      	b.n	8009ab6 <_free_r+0x1e>
 8009ada:	461a      	mov	r2, r3
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	b10b      	cbz	r3, 8009ae4 <_free_r+0x4c>
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d9fa      	bls.n	8009ada <_free_r+0x42>
 8009ae4:	6811      	ldr	r1, [r2, #0]
 8009ae6:	1850      	adds	r0, r2, r1
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	d10b      	bne.n	8009b04 <_free_r+0x6c>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	4401      	add	r1, r0
 8009af0:	1850      	adds	r0, r2, r1
 8009af2:	4283      	cmp	r3, r0
 8009af4:	6011      	str	r1, [r2, #0]
 8009af6:	d1e0      	bne.n	8009aba <_free_r+0x22>
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	6053      	str	r3, [r2, #4]
 8009afe:	4408      	add	r0, r1
 8009b00:	6010      	str	r0, [r2, #0]
 8009b02:	e7da      	b.n	8009aba <_free_r+0x22>
 8009b04:	d902      	bls.n	8009b0c <_free_r+0x74>
 8009b06:	230c      	movs	r3, #12
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	e7d6      	b.n	8009aba <_free_r+0x22>
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	1821      	adds	r1, r4, r0
 8009b10:	428b      	cmp	r3, r1
 8009b12:	bf04      	itt	eq
 8009b14:	6819      	ldreq	r1, [r3, #0]
 8009b16:	685b      	ldreq	r3, [r3, #4]
 8009b18:	6063      	str	r3, [r4, #4]
 8009b1a:	bf04      	itt	eq
 8009b1c:	1809      	addeq	r1, r1, r0
 8009b1e:	6021      	streq	r1, [r4, #0]
 8009b20:	6054      	str	r4, [r2, #4]
 8009b22:	e7ca      	b.n	8009aba <_free_r+0x22>
 8009b24:	bd38      	pop	{r3, r4, r5, pc}
 8009b26:	bf00      	nop
 8009b28:	20000a98 	.word	0x20000a98

08009b2c <malloc>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	@ (8009b38 <malloc+0xc>)
 8009b2e:	4601      	mov	r1, r0
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	f000 b825 	b.w	8009b80 <_malloc_r>
 8009b36:	bf00      	nop
 8009b38:	200000b0 	.word	0x200000b0

08009b3c <sbrk_aligned>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009b7c <sbrk_aligned+0x40>)
 8009b40:	460c      	mov	r4, r1
 8009b42:	6831      	ldr	r1, [r6, #0]
 8009b44:	4605      	mov	r5, r0
 8009b46:	b911      	cbnz	r1, 8009b4e <sbrk_aligned+0x12>
 8009b48:	f000 fe46 	bl	800a7d8 <_sbrk_r>
 8009b4c:	6030      	str	r0, [r6, #0]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 fe41 	bl	800a7d8 <_sbrk_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d103      	bne.n	8009b62 <sbrk_aligned+0x26>
 8009b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b5e:	4620      	mov	r0, r4
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	1cc4      	adds	r4, r0, #3
 8009b64:	f024 0403 	bic.w	r4, r4, #3
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	d0f8      	beq.n	8009b5e <sbrk_aligned+0x22>
 8009b6c:	1a21      	subs	r1, r4, r0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fe32 	bl	800a7d8 <_sbrk_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d1f2      	bne.n	8009b5e <sbrk_aligned+0x22>
 8009b78:	e7ef      	b.n	8009b5a <sbrk_aligned+0x1e>
 8009b7a:	bf00      	nop
 8009b7c:	20000a94 	.word	0x20000a94

08009b80 <_malloc_r>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	1ccd      	adds	r5, r1, #3
 8009b86:	f025 0503 	bic.w	r5, r5, #3
 8009b8a:	3508      	adds	r5, #8
 8009b8c:	2d0c      	cmp	r5, #12
 8009b8e:	bf38      	it	cc
 8009b90:	250c      	movcc	r5, #12
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	4606      	mov	r6, r0
 8009b96:	db01      	blt.n	8009b9c <_malloc_r+0x1c>
 8009b98:	42a9      	cmp	r1, r5
 8009b9a:	d904      	bls.n	8009ba6 <_malloc_r+0x26>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c7c <_malloc_r+0xfc>
 8009baa:	f000 f869 	bl	8009c80 <__malloc_lock>
 8009bae:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb2:	461c      	mov	r4, r3
 8009bb4:	bb44      	cbnz	r4, 8009c08 <_malloc_r+0x88>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff ffbf 	bl	8009b3c <sbrk_aligned>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	d158      	bne.n	8009c76 <_malloc_r+0xf6>
 8009bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8009bc8:	4627      	mov	r7, r4
 8009bca:	2f00      	cmp	r7, #0
 8009bcc:	d143      	bne.n	8009c56 <_malloc_r+0xd6>
 8009bce:	2c00      	cmp	r4, #0
 8009bd0:	d04b      	beq.n	8009c6a <_malloc_r+0xea>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	eb04 0903 	add.w	r9, r4, r3
 8009bdc:	f000 fdfc 	bl	800a7d8 <_sbrk_r>
 8009be0:	4581      	cmp	r9, r0
 8009be2:	d142      	bne.n	8009c6a <_malloc_r+0xea>
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	1a6d      	subs	r5, r5, r1
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffa6 	bl	8009b3c <sbrk_aligned>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d03a      	beq.n	8009c6a <_malloc_r+0xea>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	442b      	add	r3, r5
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	bb62      	cbnz	r2, 8009c5c <_malloc_r+0xdc>
 8009c02:	f8c8 7000 	str.w	r7, [r8]
 8009c06:	e00f      	b.n	8009c28 <_malloc_r+0xa8>
 8009c08:	6822      	ldr	r2, [r4, #0]
 8009c0a:	1b52      	subs	r2, r2, r5
 8009c0c:	d420      	bmi.n	8009c50 <_malloc_r+0xd0>
 8009c0e:	2a0b      	cmp	r2, #11
 8009c10:	d917      	bls.n	8009c42 <_malloc_r+0xc2>
 8009c12:	1961      	adds	r1, r4, r5
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	6025      	str	r5, [r4, #0]
 8009c18:	bf18      	it	ne
 8009c1a:	6059      	strne	r1, [r3, #4]
 8009c1c:	6863      	ldr	r3, [r4, #4]
 8009c1e:	bf08      	it	eq
 8009c20:	f8c8 1000 	streq.w	r1, [r8]
 8009c24:	5162      	str	r2, [r4, r5]
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 f82f 	bl	8009c8c <__malloc_unlock>
 8009c2e:	f104 000b 	add.w	r0, r4, #11
 8009c32:	1d23      	adds	r3, r4, #4
 8009c34:	f020 0007 	bic.w	r0, r0, #7
 8009c38:	1ac2      	subs	r2, r0, r3
 8009c3a:	bf1c      	itt	ne
 8009c3c:	1a1b      	subne	r3, r3, r0
 8009c3e:	50a3      	strne	r3, [r4, r2]
 8009c40:	e7af      	b.n	8009ba2 <_malloc_r+0x22>
 8009c42:	6862      	ldr	r2, [r4, #4]
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	bf0c      	ite	eq
 8009c48:	f8c8 2000 	streq.w	r2, [r8]
 8009c4c:	605a      	strne	r2, [r3, #4]
 8009c4e:	e7eb      	b.n	8009c28 <_malloc_r+0xa8>
 8009c50:	4623      	mov	r3, r4
 8009c52:	6864      	ldr	r4, [r4, #4]
 8009c54:	e7ae      	b.n	8009bb4 <_malloc_r+0x34>
 8009c56:	463c      	mov	r4, r7
 8009c58:	687f      	ldr	r7, [r7, #4]
 8009c5a:	e7b6      	b.n	8009bca <_malloc_r+0x4a>
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d1fb      	bne.n	8009c5c <_malloc_r+0xdc>
 8009c64:	2300      	movs	r3, #0
 8009c66:	6053      	str	r3, [r2, #4]
 8009c68:	e7de      	b.n	8009c28 <_malloc_r+0xa8>
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	6033      	str	r3, [r6, #0]
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f000 f80c 	bl	8009c8c <__malloc_unlock>
 8009c74:	e794      	b.n	8009ba0 <_malloc_r+0x20>
 8009c76:	6005      	str	r5, [r0, #0]
 8009c78:	e7d6      	b.n	8009c28 <_malloc_r+0xa8>
 8009c7a:	bf00      	nop
 8009c7c:	20000a98 	.word	0x20000a98

08009c80 <__malloc_lock>:
 8009c80:	4801      	ldr	r0, [pc, #4]	@ (8009c88 <__malloc_lock+0x8>)
 8009c82:	f7ff b8b8 	b.w	8008df6 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	20000a90 	.word	0x20000a90

08009c8c <__malloc_unlock>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	@ (8009c94 <__malloc_unlock+0x8>)
 8009c8e:	f7ff b8b3 	b.w	8008df8 <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	20000a90 	.word	0x20000a90

08009c98 <_Balloc>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	69c6      	ldr	r6, [r0, #28]
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	b976      	cbnz	r6, 8009cc0 <_Balloc+0x28>
 8009ca2:	2010      	movs	r0, #16
 8009ca4:	f7ff ff42 	bl	8009b2c <malloc>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	61e0      	str	r0, [r4, #28]
 8009cac:	b920      	cbnz	r0, 8009cb8 <_Balloc+0x20>
 8009cae:	4b18      	ldr	r3, [pc, #96]	@ (8009d10 <_Balloc+0x78>)
 8009cb0:	4818      	ldr	r0, [pc, #96]	@ (8009d14 <_Balloc+0x7c>)
 8009cb2:	216b      	movs	r1, #107	@ 0x6b
 8009cb4:	f000 fdae 	bl	800a814 <__assert_func>
 8009cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cbc:	6006      	str	r6, [r0, #0]
 8009cbe:	60c6      	str	r6, [r0, #12]
 8009cc0:	69e6      	ldr	r6, [r4, #28]
 8009cc2:	68f3      	ldr	r3, [r6, #12]
 8009cc4:	b183      	cbz	r3, 8009ce8 <_Balloc+0x50>
 8009cc6:	69e3      	ldr	r3, [r4, #28]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cce:	b9b8      	cbnz	r0, 8009d00 <_Balloc+0x68>
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8009cd6:	1d72      	adds	r2, r6, #5
 8009cd8:	0092      	lsls	r2, r2, #2
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 fdb8 	bl	800a850 <_calloc_r>
 8009ce0:	b160      	cbz	r0, 8009cfc <_Balloc+0x64>
 8009ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ce6:	e00e      	b.n	8009d06 <_Balloc+0x6e>
 8009ce8:	2221      	movs	r2, #33	@ 0x21
 8009cea:	2104      	movs	r1, #4
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 fdaf 	bl	800a850 <_calloc_r>
 8009cf2:	69e3      	ldr	r3, [r4, #28]
 8009cf4:	60f0      	str	r0, [r6, #12]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e4      	bne.n	8009cc6 <_Balloc+0x2e>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	6802      	ldr	r2, [r0, #0]
 8009d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d06:	2300      	movs	r3, #0
 8009d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d0c:	e7f7      	b.n	8009cfe <_Balloc+0x66>
 8009d0e:	bf00      	nop
 8009d10:	0800c1b9 	.word	0x0800c1b9
 8009d14:	0800c239 	.word	0x0800c239

08009d18 <_Bfree>:
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	69c6      	ldr	r6, [r0, #28]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	b976      	cbnz	r6, 8009d40 <_Bfree+0x28>
 8009d22:	2010      	movs	r0, #16
 8009d24:	f7ff ff02 	bl	8009b2c <malloc>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	61e8      	str	r0, [r5, #28]
 8009d2c:	b920      	cbnz	r0, 8009d38 <_Bfree+0x20>
 8009d2e:	4b09      	ldr	r3, [pc, #36]	@ (8009d54 <_Bfree+0x3c>)
 8009d30:	4809      	ldr	r0, [pc, #36]	@ (8009d58 <_Bfree+0x40>)
 8009d32:	218f      	movs	r1, #143	@ 0x8f
 8009d34:	f000 fd6e 	bl	800a814 <__assert_func>
 8009d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d3c:	6006      	str	r6, [r0, #0]
 8009d3e:	60c6      	str	r6, [r0, #12]
 8009d40:	b13c      	cbz	r4, 8009d52 <_Bfree+0x3a>
 8009d42:	69eb      	ldr	r3, [r5, #28]
 8009d44:	6862      	ldr	r2, [r4, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d4c:	6021      	str	r1, [r4, #0]
 8009d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	0800c1b9 	.word	0x0800c1b9
 8009d58:	0800c239 	.word	0x0800c239

08009d5c <__multadd>:
 8009d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	690d      	ldr	r5, [r1, #16]
 8009d62:	4607      	mov	r7, r0
 8009d64:	460c      	mov	r4, r1
 8009d66:	461e      	mov	r6, r3
 8009d68:	f101 0c14 	add.w	ip, r1, #20
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009d72:	b299      	uxth	r1, r3
 8009d74:	fb02 6101 	mla	r1, r2, r1, r6
 8009d78:	0c1e      	lsrs	r6, r3, #16
 8009d7a:	0c0b      	lsrs	r3, r1, #16
 8009d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8009d80:	b289      	uxth	r1, r1
 8009d82:	3001      	adds	r0, #1
 8009d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d88:	4285      	cmp	r5, r0
 8009d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8009d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d92:	dcec      	bgt.n	8009d6e <__multadd+0x12>
 8009d94:	b30e      	cbz	r6, 8009dda <__multadd+0x7e>
 8009d96:	68a3      	ldr	r3, [r4, #8]
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc19      	bgt.n	8009dd0 <__multadd+0x74>
 8009d9c:	6861      	ldr	r1, [r4, #4]
 8009d9e:	4638      	mov	r0, r7
 8009da0:	3101      	adds	r1, #1
 8009da2:	f7ff ff79 	bl	8009c98 <_Balloc>
 8009da6:	4680      	mov	r8, r0
 8009da8:	b928      	cbnz	r0, 8009db6 <__multadd+0x5a>
 8009daa:	4602      	mov	r2, r0
 8009dac:	4b0c      	ldr	r3, [pc, #48]	@ (8009de0 <__multadd+0x84>)
 8009dae:	480d      	ldr	r0, [pc, #52]	@ (8009de4 <__multadd+0x88>)
 8009db0:	21ba      	movs	r1, #186	@ 0xba
 8009db2:	f000 fd2f 	bl	800a814 <__assert_func>
 8009db6:	6922      	ldr	r2, [r4, #16]
 8009db8:	3202      	adds	r2, #2
 8009dba:	f104 010c 	add.w	r1, r4, #12
 8009dbe:	0092      	lsls	r2, r2, #2
 8009dc0:	300c      	adds	r0, #12
 8009dc2:	f000 fd19 	bl	800a7f8 <memcpy>
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f7ff ffa5 	bl	8009d18 <_Bfree>
 8009dce:	4644      	mov	r4, r8
 8009dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	615e      	str	r6, [r3, #20]
 8009dd8:	6125      	str	r5, [r4, #16]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de0:	0800c228 	.word	0x0800c228
 8009de4:	0800c239 	.word	0x0800c239

08009de8 <__hi0bits>:
 8009de8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009dec:	4603      	mov	r3, r0
 8009dee:	bf36      	itet	cc
 8009df0:	0403      	lslcc	r3, r0, #16
 8009df2:	2000      	movcs	r0, #0
 8009df4:	2010      	movcc	r0, #16
 8009df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009dfa:	bf3c      	itt	cc
 8009dfc:	021b      	lslcc	r3, r3, #8
 8009dfe:	3008      	addcc	r0, #8
 8009e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e04:	bf3c      	itt	cc
 8009e06:	011b      	lslcc	r3, r3, #4
 8009e08:	3004      	addcc	r0, #4
 8009e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e0e:	bf3c      	itt	cc
 8009e10:	009b      	lslcc	r3, r3, #2
 8009e12:	3002      	addcc	r0, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	db05      	blt.n	8009e24 <__hi0bits+0x3c>
 8009e18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009e1c:	f100 0001 	add.w	r0, r0, #1
 8009e20:	bf08      	it	eq
 8009e22:	2020      	moveq	r0, #32
 8009e24:	4770      	bx	lr

08009e26 <__lo0bits>:
 8009e26:	6803      	ldr	r3, [r0, #0]
 8009e28:	4602      	mov	r2, r0
 8009e2a:	f013 0007 	ands.w	r0, r3, #7
 8009e2e:	d00b      	beq.n	8009e48 <__lo0bits+0x22>
 8009e30:	07d9      	lsls	r1, r3, #31
 8009e32:	d421      	bmi.n	8009e78 <__lo0bits+0x52>
 8009e34:	0798      	lsls	r0, r3, #30
 8009e36:	bf49      	itett	mi
 8009e38:	085b      	lsrmi	r3, r3, #1
 8009e3a:	089b      	lsrpl	r3, r3, #2
 8009e3c:	2001      	movmi	r0, #1
 8009e3e:	6013      	strmi	r3, [r2, #0]
 8009e40:	bf5c      	itt	pl
 8009e42:	6013      	strpl	r3, [r2, #0]
 8009e44:	2002      	movpl	r0, #2
 8009e46:	4770      	bx	lr
 8009e48:	b299      	uxth	r1, r3
 8009e4a:	b909      	cbnz	r1, 8009e50 <__lo0bits+0x2a>
 8009e4c:	0c1b      	lsrs	r3, r3, #16
 8009e4e:	2010      	movs	r0, #16
 8009e50:	b2d9      	uxtb	r1, r3
 8009e52:	b909      	cbnz	r1, 8009e58 <__lo0bits+0x32>
 8009e54:	3008      	adds	r0, #8
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	0719      	lsls	r1, r3, #28
 8009e5a:	bf04      	itt	eq
 8009e5c:	091b      	lsreq	r3, r3, #4
 8009e5e:	3004      	addeq	r0, #4
 8009e60:	0799      	lsls	r1, r3, #30
 8009e62:	bf04      	itt	eq
 8009e64:	089b      	lsreq	r3, r3, #2
 8009e66:	3002      	addeq	r0, #2
 8009e68:	07d9      	lsls	r1, r3, #31
 8009e6a:	d403      	bmi.n	8009e74 <__lo0bits+0x4e>
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	f100 0001 	add.w	r0, r0, #1
 8009e72:	d003      	beq.n	8009e7c <__lo0bits+0x56>
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	4770      	bx	lr
 8009e78:	2000      	movs	r0, #0
 8009e7a:	4770      	bx	lr
 8009e7c:	2020      	movs	r0, #32
 8009e7e:	4770      	bx	lr

08009e80 <__i2b>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	460c      	mov	r4, r1
 8009e84:	2101      	movs	r1, #1
 8009e86:	f7ff ff07 	bl	8009c98 <_Balloc>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	b928      	cbnz	r0, 8009e9a <__i2b+0x1a>
 8009e8e:	4b05      	ldr	r3, [pc, #20]	@ (8009ea4 <__i2b+0x24>)
 8009e90:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <__i2b+0x28>)
 8009e92:	f240 1145 	movw	r1, #325	@ 0x145
 8009e96:	f000 fcbd 	bl	800a814 <__assert_func>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	6144      	str	r4, [r0, #20]
 8009e9e:	6103      	str	r3, [r0, #16]
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	bf00      	nop
 8009ea4:	0800c228 	.word	0x0800c228
 8009ea8:	0800c239 	.word	0x0800c239

08009eac <__multiply>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	690a      	ldr	r2, [r1, #16]
 8009eb4:	6923      	ldr	r3, [r4, #16]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	bfa8      	it	ge
 8009eba:	4623      	movge	r3, r4
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	bfa4      	itt	ge
 8009ec0:	460c      	movge	r4, r1
 8009ec2:	461f      	movge	r7, r3
 8009ec4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ec8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ecc:	68a3      	ldr	r3, [r4, #8]
 8009ece:	6861      	ldr	r1, [r4, #4]
 8009ed0:	eb0a 0609 	add.w	r6, sl, r9
 8009ed4:	42b3      	cmp	r3, r6
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	bfb8      	it	lt
 8009eda:	3101      	addlt	r1, #1
 8009edc:	f7ff fedc 	bl	8009c98 <_Balloc>
 8009ee0:	b930      	cbnz	r0, 8009ef0 <__multiply+0x44>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	4b44      	ldr	r3, [pc, #272]	@ (8009ff8 <__multiply+0x14c>)
 8009ee6:	4845      	ldr	r0, [pc, #276]	@ (8009ffc <__multiply+0x150>)
 8009ee8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009eec:	f000 fc92 	bl	800a814 <__assert_func>
 8009ef0:	f100 0514 	add.w	r5, r0, #20
 8009ef4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ef8:	462b      	mov	r3, r5
 8009efa:	2200      	movs	r2, #0
 8009efc:	4543      	cmp	r3, r8
 8009efe:	d321      	bcc.n	8009f44 <__multiply+0x98>
 8009f00:	f107 0114 	add.w	r1, r7, #20
 8009f04:	f104 0214 	add.w	r2, r4, #20
 8009f08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009f0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009f10:	9302      	str	r3, [sp, #8]
 8009f12:	1b13      	subs	r3, r2, r4
 8009f14:	3b15      	subs	r3, #21
 8009f16:	f023 0303 	bic.w	r3, r3, #3
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	f104 0715 	add.w	r7, r4, #21
 8009f20:	42ba      	cmp	r2, r7
 8009f22:	bf38      	it	cc
 8009f24:	2304      	movcc	r3, #4
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	9b02      	ldr	r3, [sp, #8]
 8009f2a:	9103      	str	r1, [sp, #12]
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	d80c      	bhi.n	8009f4a <__multiply+0x9e>
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	dd03      	ble.n	8009f3c <__multiply+0x90>
 8009f34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d05b      	beq.n	8009ff4 <__multiply+0x148>
 8009f3c:	6106      	str	r6, [r0, #16]
 8009f3e:	b005      	add	sp, #20
 8009f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	f843 2b04 	str.w	r2, [r3], #4
 8009f48:	e7d8      	b.n	8009efc <__multiply+0x50>
 8009f4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009f4e:	f1ba 0f00 	cmp.w	sl, #0
 8009f52:	d024      	beq.n	8009f9e <__multiply+0xf2>
 8009f54:	f104 0e14 	add.w	lr, r4, #20
 8009f58:	46a9      	mov	r9, r5
 8009f5a:	f04f 0c00 	mov.w	ip, #0
 8009f5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f62:	f8d9 3000 	ldr.w	r3, [r9]
 8009f66:	fa1f fb87 	uxth.w	fp, r7
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009f70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009f74:	f8d9 7000 	ldr.w	r7, [r9]
 8009f78:	4463      	add	r3, ip
 8009f7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009f82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f8c:	4572      	cmp	r2, lr
 8009f8e:	f849 3b04 	str.w	r3, [r9], #4
 8009f92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009f96:	d8e2      	bhi.n	8009f5e <__multiply+0xb2>
 8009f98:	9b01      	ldr	r3, [sp, #4]
 8009f9a:	f845 c003 	str.w	ip, [r5, r3]
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009fa4:	3104      	adds	r1, #4
 8009fa6:	f1b9 0f00 	cmp.w	r9, #0
 8009faa:	d021      	beq.n	8009ff0 <__multiply+0x144>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	f104 0c14 	add.w	ip, r4, #20
 8009fb2:	46ae      	mov	lr, r5
 8009fb4:	f04f 0a00 	mov.w	sl, #0
 8009fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8009fbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009fc0:	fb09 770b 	mla	r7, r9, fp, r7
 8009fc4:	4457      	add	r7, sl
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009fcc:	f84e 3b04 	str.w	r3, [lr], #4
 8009fd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009fd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fd8:	f8be 3000 	ldrh.w	r3, [lr]
 8009fdc:	fb09 330a 	mla	r3, r9, sl, r3
 8009fe0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009fe4:	4562      	cmp	r2, ip
 8009fe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009fea:	d8e5      	bhi.n	8009fb8 <__multiply+0x10c>
 8009fec:	9f01      	ldr	r7, [sp, #4]
 8009fee:	51eb      	str	r3, [r5, r7]
 8009ff0:	3504      	adds	r5, #4
 8009ff2:	e799      	b.n	8009f28 <__multiply+0x7c>
 8009ff4:	3e01      	subs	r6, #1
 8009ff6:	e79b      	b.n	8009f30 <__multiply+0x84>
 8009ff8:	0800c228 	.word	0x0800c228
 8009ffc:	0800c239 	.word	0x0800c239

0800a000 <__pow5mult>:
 800a000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a004:	4615      	mov	r5, r2
 800a006:	f012 0203 	ands.w	r2, r2, #3
 800a00a:	4607      	mov	r7, r0
 800a00c:	460e      	mov	r6, r1
 800a00e:	d007      	beq.n	800a020 <__pow5mult+0x20>
 800a010:	4c25      	ldr	r4, [pc, #148]	@ (800a0a8 <__pow5mult+0xa8>)
 800a012:	3a01      	subs	r2, #1
 800a014:	2300      	movs	r3, #0
 800a016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a01a:	f7ff fe9f 	bl	8009d5c <__multadd>
 800a01e:	4606      	mov	r6, r0
 800a020:	10ad      	asrs	r5, r5, #2
 800a022:	d03d      	beq.n	800a0a0 <__pow5mult+0xa0>
 800a024:	69fc      	ldr	r4, [r7, #28]
 800a026:	b97c      	cbnz	r4, 800a048 <__pow5mult+0x48>
 800a028:	2010      	movs	r0, #16
 800a02a:	f7ff fd7f 	bl	8009b2c <malloc>
 800a02e:	4602      	mov	r2, r0
 800a030:	61f8      	str	r0, [r7, #28]
 800a032:	b928      	cbnz	r0, 800a040 <__pow5mult+0x40>
 800a034:	4b1d      	ldr	r3, [pc, #116]	@ (800a0ac <__pow5mult+0xac>)
 800a036:	481e      	ldr	r0, [pc, #120]	@ (800a0b0 <__pow5mult+0xb0>)
 800a038:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a03c:	f000 fbea 	bl	800a814 <__assert_func>
 800a040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a044:	6004      	str	r4, [r0, #0]
 800a046:	60c4      	str	r4, [r0, #12]
 800a048:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a04c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a050:	b94c      	cbnz	r4, 800a066 <__pow5mult+0x66>
 800a052:	f240 2171 	movw	r1, #625	@ 0x271
 800a056:	4638      	mov	r0, r7
 800a058:	f7ff ff12 	bl	8009e80 <__i2b>
 800a05c:	2300      	movs	r3, #0
 800a05e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a062:	4604      	mov	r4, r0
 800a064:	6003      	str	r3, [r0, #0]
 800a066:	f04f 0900 	mov.w	r9, #0
 800a06a:	07eb      	lsls	r3, r5, #31
 800a06c:	d50a      	bpl.n	800a084 <__pow5mult+0x84>
 800a06e:	4631      	mov	r1, r6
 800a070:	4622      	mov	r2, r4
 800a072:	4638      	mov	r0, r7
 800a074:	f7ff ff1a 	bl	8009eac <__multiply>
 800a078:	4631      	mov	r1, r6
 800a07a:	4680      	mov	r8, r0
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7ff fe4b 	bl	8009d18 <_Bfree>
 800a082:	4646      	mov	r6, r8
 800a084:	106d      	asrs	r5, r5, #1
 800a086:	d00b      	beq.n	800a0a0 <__pow5mult+0xa0>
 800a088:	6820      	ldr	r0, [r4, #0]
 800a08a:	b938      	cbnz	r0, 800a09c <__pow5mult+0x9c>
 800a08c:	4622      	mov	r2, r4
 800a08e:	4621      	mov	r1, r4
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff ff0b 	bl	8009eac <__multiply>
 800a096:	6020      	str	r0, [r4, #0]
 800a098:	f8c0 9000 	str.w	r9, [r0]
 800a09c:	4604      	mov	r4, r0
 800a09e:	e7e4      	b.n	800a06a <__pow5mult+0x6a>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a6:	bf00      	nop
 800a0a8:	0800c294 	.word	0x0800c294
 800a0ac:	0800c1b9 	.word	0x0800c1b9
 800a0b0:	0800c239 	.word	0x0800c239

0800a0b4 <__lshift>:
 800a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	6849      	ldr	r1, [r1, #4]
 800a0bc:	6923      	ldr	r3, [r4, #16]
 800a0be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	4691      	mov	r9, r2
 800a0c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0cc:	f108 0601 	add.w	r6, r8, #1
 800a0d0:	42b3      	cmp	r3, r6
 800a0d2:	db0b      	blt.n	800a0ec <__lshift+0x38>
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	f7ff fddf 	bl	8009c98 <_Balloc>
 800a0da:	4605      	mov	r5, r0
 800a0dc:	b948      	cbnz	r0, 800a0f2 <__lshift+0x3e>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4b28      	ldr	r3, [pc, #160]	@ (800a184 <__lshift+0xd0>)
 800a0e2:	4829      	ldr	r0, [pc, #164]	@ (800a188 <__lshift+0xd4>)
 800a0e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a0e8:	f000 fb94 	bl	800a814 <__assert_func>
 800a0ec:	3101      	adds	r1, #1
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	e7ee      	b.n	800a0d0 <__lshift+0x1c>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f100 0114 	add.w	r1, r0, #20
 800a0f8:	f100 0210 	add.w	r2, r0, #16
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	4553      	cmp	r3, sl
 800a100:	db33      	blt.n	800a16a <__lshift+0xb6>
 800a102:	6920      	ldr	r0, [r4, #16]
 800a104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a108:	f104 0314 	add.w	r3, r4, #20
 800a10c:	f019 091f 	ands.w	r9, r9, #31
 800a110:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a114:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a118:	d02b      	beq.n	800a172 <__lshift+0xbe>
 800a11a:	f1c9 0e20 	rsb	lr, r9, #32
 800a11e:	468a      	mov	sl, r1
 800a120:	2200      	movs	r2, #0
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	fa00 f009 	lsl.w	r0, r0, r9
 800a128:	4310      	orrs	r0, r2
 800a12a:	f84a 0b04 	str.w	r0, [sl], #4
 800a12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a132:	459c      	cmp	ip, r3
 800a134:	fa22 f20e 	lsr.w	r2, r2, lr
 800a138:	d8f3      	bhi.n	800a122 <__lshift+0x6e>
 800a13a:	ebac 0304 	sub.w	r3, ip, r4
 800a13e:	3b15      	subs	r3, #21
 800a140:	f023 0303 	bic.w	r3, r3, #3
 800a144:	3304      	adds	r3, #4
 800a146:	f104 0015 	add.w	r0, r4, #21
 800a14a:	4584      	cmp	ip, r0
 800a14c:	bf38      	it	cc
 800a14e:	2304      	movcc	r3, #4
 800a150:	50ca      	str	r2, [r1, r3]
 800a152:	b10a      	cbz	r2, 800a158 <__lshift+0xa4>
 800a154:	f108 0602 	add.w	r6, r8, #2
 800a158:	3e01      	subs	r6, #1
 800a15a:	4638      	mov	r0, r7
 800a15c:	612e      	str	r6, [r5, #16]
 800a15e:	4621      	mov	r1, r4
 800a160:	f7ff fdda 	bl	8009d18 <_Bfree>
 800a164:	4628      	mov	r0, r5
 800a166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a16e:	3301      	adds	r3, #1
 800a170:	e7c5      	b.n	800a0fe <__lshift+0x4a>
 800a172:	3904      	subs	r1, #4
 800a174:	f853 2b04 	ldr.w	r2, [r3], #4
 800a178:	f841 2f04 	str.w	r2, [r1, #4]!
 800a17c:	459c      	cmp	ip, r3
 800a17e:	d8f9      	bhi.n	800a174 <__lshift+0xc0>
 800a180:	e7ea      	b.n	800a158 <__lshift+0xa4>
 800a182:	bf00      	nop
 800a184:	0800c228 	.word	0x0800c228
 800a188:	0800c239 	.word	0x0800c239

0800a18c <__mcmp>:
 800a18c:	690a      	ldr	r2, [r1, #16]
 800a18e:	4603      	mov	r3, r0
 800a190:	6900      	ldr	r0, [r0, #16]
 800a192:	1a80      	subs	r0, r0, r2
 800a194:	b530      	push	{r4, r5, lr}
 800a196:	d10e      	bne.n	800a1b6 <__mcmp+0x2a>
 800a198:	3314      	adds	r3, #20
 800a19a:	3114      	adds	r1, #20
 800a19c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a1a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a1a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1ac:	4295      	cmp	r5, r2
 800a1ae:	d003      	beq.n	800a1b8 <__mcmp+0x2c>
 800a1b0:	d205      	bcs.n	800a1be <__mcmp+0x32>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	bd30      	pop	{r4, r5, pc}
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d3f3      	bcc.n	800a1a4 <__mcmp+0x18>
 800a1bc:	e7fb      	b.n	800a1b6 <__mcmp+0x2a>
 800a1be:	2001      	movs	r0, #1
 800a1c0:	e7f9      	b.n	800a1b6 <__mcmp+0x2a>
	...

0800a1c4 <__mdiff>:
 800a1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	4689      	mov	r9, r1
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	4611      	mov	r1, r2
 800a1ce:	4648      	mov	r0, r9
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	f7ff ffdb 	bl	800a18c <__mcmp>
 800a1d6:	1e05      	subs	r5, r0, #0
 800a1d8:	d112      	bne.n	800a200 <__mdiff+0x3c>
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff fd5b 	bl	8009c98 <_Balloc>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	b928      	cbnz	r0, 800a1f2 <__mdiff+0x2e>
 800a1e6:	4b3f      	ldr	r3, [pc, #252]	@ (800a2e4 <__mdiff+0x120>)
 800a1e8:	f240 2137 	movw	r1, #567	@ 0x237
 800a1ec:	483e      	ldr	r0, [pc, #248]	@ (800a2e8 <__mdiff+0x124>)
 800a1ee:	f000 fb11 	bl	800a814 <__assert_func>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	b003      	add	sp, #12
 800a1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a200:	bfbc      	itt	lt
 800a202:	464b      	movlt	r3, r9
 800a204:	46a1      	movlt	r9, r4
 800a206:	4630      	mov	r0, r6
 800a208:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a20c:	bfba      	itte	lt
 800a20e:	461c      	movlt	r4, r3
 800a210:	2501      	movlt	r5, #1
 800a212:	2500      	movge	r5, #0
 800a214:	f7ff fd40 	bl	8009c98 <_Balloc>
 800a218:	4602      	mov	r2, r0
 800a21a:	b918      	cbnz	r0, 800a224 <__mdiff+0x60>
 800a21c:	4b31      	ldr	r3, [pc, #196]	@ (800a2e4 <__mdiff+0x120>)
 800a21e:	f240 2145 	movw	r1, #581	@ 0x245
 800a222:	e7e3      	b.n	800a1ec <__mdiff+0x28>
 800a224:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a228:	6926      	ldr	r6, [r4, #16]
 800a22a:	60c5      	str	r5, [r0, #12]
 800a22c:	f109 0310 	add.w	r3, r9, #16
 800a230:	f109 0514 	add.w	r5, r9, #20
 800a234:	f104 0e14 	add.w	lr, r4, #20
 800a238:	f100 0b14 	add.w	fp, r0, #20
 800a23c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a240:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	46d9      	mov	r9, fp
 800a248:	f04f 0c00 	mov.w	ip, #0
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a252:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	fa1f f38a 	uxth.w	r3, sl
 800a25c:	4619      	mov	r1, r3
 800a25e:	b283      	uxth	r3, r0
 800a260:	1acb      	subs	r3, r1, r3
 800a262:	0c00      	lsrs	r0, r0, #16
 800a264:	4463      	add	r3, ip
 800a266:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a26a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a26e:	b29b      	uxth	r3, r3
 800a270:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a274:	4576      	cmp	r6, lr
 800a276:	f849 3b04 	str.w	r3, [r9], #4
 800a27a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a27e:	d8e5      	bhi.n	800a24c <__mdiff+0x88>
 800a280:	1b33      	subs	r3, r6, r4
 800a282:	3b15      	subs	r3, #21
 800a284:	f023 0303 	bic.w	r3, r3, #3
 800a288:	3415      	adds	r4, #21
 800a28a:	3304      	adds	r3, #4
 800a28c:	42a6      	cmp	r6, r4
 800a28e:	bf38      	it	cc
 800a290:	2304      	movcc	r3, #4
 800a292:	441d      	add	r5, r3
 800a294:	445b      	add	r3, fp
 800a296:	461e      	mov	r6, r3
 800a298:	462c      	mov	r4, r5
 800a29a:	4544      	cmp	r4, r8
 800a29c:	d30e      	bcc.n	800a2bc <__mdiff+0xf8>
 800a29e:	f108 0103 	add.w	r1, r8, #3
 800a2a2:	1b49      	subs	r1, r1, r5
 800a2a4:	f021 0103 	bic.w	r1, r1, #3
 800a2a8:	3d03      	subs	r5, #3
 800a2aa:	45a8      	cmp	r8, r5
 800a2ac:	bf38      	it	cc
 800a2ae:	2100      	movcc	r1, #0
 800a2b0:	440b      	add	r3, r1
 800a2b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2b6:	b191      	cbz	r1, 800a2de <__mdiff+0x11a>
 800a2b8:	6117      	str	r7, [r2, #16]
 800a2ba:	e79d      	b.n	800a1f8 <__mdiff+0x34>
 800a2bc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a2c0:	46e6      	mov	lr, ip
 800a2c2:	0c08      	lsrs	r0, r1, #16
 800a2c4:	fa1c fc81 	uxtah	ip, ip, r1
 800a2c8:	4471      	add	r1, lr
 800a2ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a2ce:	b289      	uxth	r1, r1
 800a2d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a2d4:	f846 1b04 	str.w	r1, [r6], #4
 800a2d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2dc:	e7dd      	b.n	800a29a <__mdiff+0xd6>
 800a2de:	3f01      	subs	r7, #1
 800a2e0:	e7e7      	b.n	800a2b2 <__mdiff+0xee>
 800a2e2:	bf00      	nop
 800a2e4:	0800c228 	.word	0x0800c228
 800a2e8:	0800c239 	.word	0x0800c239

0800a2ec <__d2b>:
 800a2ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	ec59 8b10 	vmov	r8, r9, d0
 800a2f8:	4616      	mov	r6, r2
 800a2fa:	f7ff fccd 	bl	8009c98 <_Balloc>
 800a2fe:	4604      	mov	r4, r0
 800a300:	b930      	cbnz	r0, 800a310 <__d2b+0x24>
 800a302:	4602      	mov	r2, r0
 800a304:	4b23      	ldr	r3, [pc, #140]	@ (800a394 <__d2b+0xa8>)
 800a306:	4824      	ldr	r0, [pc, #144]	@ (800a398 <__d2b+0xac>)
 800a308:	f240 310f 	movw	r1, #783	@ 0x30f
 800a30c:	f000 fa82 	bl	800a814 <__assert_func>
 800a310:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a314:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a318:	b10d      	cbz	r5, 800a31e <__d2b+0x32>
 800a31a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	f1b8 0300 	subs.w	r3, r8, #0
 800a324:	d023      	beq.n	800a36e <__d2b+0x82>
 800a326:	4668      	mov	r0, sp
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	f7ff fd7c 	bl	8009e26 <__lo0bits>
 800a32e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a332:	b1d0      	cbz	r0, 800a36a <__d2b+0x7e>
 800a334:	f1c0 0320 	rsb	r3, r0, #32
 800a338:	fa02 f303 	lsl.w	r3, r2, r3
 800a33c:	430b      	orrs	r3, r1
 800a33e:	40c2      	lsrs	r2, r0
 800a340:	6163      	str	r3, [r4, #20]
 800a342:	9201      	str	r2, [sp, #4]
 800a344:	9b01      	ldr	r3, [sp, #4]
 800a346:	61a3      	str	r3, [r4, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	bf0c      	ite	eq
 800a34c:	2201      	moveq	r2, #1
 800a34e:	2202      	movne	r2, #2
 800a350:	6122      	str	r2, [r4, #16]
 800a352:	b1a5      	cbz	r5, 800a37e <__d2b+0x92>
 800a354:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a358:	4405      	add	r5, r0
 800a35a:	603d      	str	r5, [r7, #0]
 800a35c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a360:	6030      	str	r0, [r6, #0]
 800a362:	4620      	mov	r0, r4
 800a364:	b003      	add	sp, #12
 800a366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a36a:	6161      	str	r1, [r4, #20]
 800a36c:	e7ea      	b.n	800a344 <__d2b+0x58>
 800a36e:	a801      	add	r0, sp, #4
 800a370:	f7ff fd59 	bl	8009e26 <__lo0bits>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	3020      	adds	r0, #32
 800a37a:	2201      	movs	r2, #1
 800a37c:	e7e8      	b.n	800a350 <__d2b+0x64>
 800a37e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a382:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a386:	6038      	str	r0, [r7, #0]
 800a388:	6918      	ldr	r0, [r3, #16]
 800a38a:	f7ff fd2d 	bl	8009de8 <__hi0bits>
 800a38e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a392:	e7e5      	b.n	800a360 <__d2b+0x74>
 800a394:	0800c228 	.word	0x0800c228
 800a398:	0800c239 	.word	0x0800c239

0800a39c <__ssputs_r>:
 800a39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a0:	688e      	ldr	r6, [r1, #8]
 800a3a2:	461f      	mov	r7, r3
 800a3a4:	42be      	cmp	r6, r7
 800a3a6:	680b      	ldr	r3, [r1, #0]
 800a3a8:	4682      	mov	sl, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	4690      	mov	r8, r2
 800a3ae:	d82d      	bhi.n	800a40c <__ssputs_r+0x70>
 800a3b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3b8:	d026      	beq.n	800a408 <__ssputs_r+0x6c>
 800a3ba:	6965      	ldr	r5, [r4, #20]
 800a3bc:	6909      	ldr	r1, [r1, #16]
 800a3be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c2:	eba3 0901 	sub.w	r9, r3, r1
 800a3c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ca:	1c7b      	adds	r3, r7, #1
 800a3cc:	444b      	add	r3, r9
 800a3ce:	106d      	asrs	r5, r5, #1
 800a3d0:	429d      	cmp	r5, r3
 800a3d2:	bf38      	it	cc
 800a3d4:	461d      	movcc	r5, r3
 800a3d6:	0553      	lsls	r3, r2, #21
 800a3d8:	d527      	bpl.n	800a42a <__ssputs_r+0x8e>
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7ff fbd0 	bl	8009b80 <_malloc_r>
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	b360      	cbz	r0, 800a43e <__ssputs_r+0xa2>
 800a3e4:	6921      	ldr	r1, [r4, #16]
 800a3e6:	464a      	mov	r2, r9
 800a3e8:	f000 fa06 	bl	800a7f8 <memcpy>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3f6:	81a3      	strh	r3, [r4, #12]
 800a3f8:	6126      	str	r6, [r4, #16]
 800a3fa:	6165      	str	r5, [r4, #20]
 800a3fc:	444e      	add	r6, r9
 800a3fe:	eba5 0509 	sub.w	r5, r5, r9
 800a402:	6026      	str	r6, [r4, #0]
 800a404:	60a5      	str	r5, [r4, #8]
 800a406:	463e      	mov	r6, r7
 800a408:	42be      	cmp	r6, r7
 800a40a:	d900      	bls.n	800a40e <__ssputs_r+0x72>
 800a40c:	463e      	mov	r6, r7
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	4632      	mov	r2, r6
 800a412:	4641      	mov	r1, r8
 800a414:	f000 f9c6 	bl	800a7a4 <memmove>
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	1b9b      	subs	r3, r3, r6
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	4433      	add	r3, r6
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	2000      	movs	r0, #0
 800a426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a42a:	462a      	mov	r2, r5
 800a42c:	f000 fa36 	bl	800a89c <_realloc_r>
 800a430:	4606      	mov	r6, r0
 800a432:	2800      	cmp	r0, #0
 800a434:	d1e0      	bne.n	800a3f8 <__ssputs_r+0x5c>
 800a436:	6921      	ldr	r1, [r4, #16]
 800a438:	4650      	mov	r0, sl
 800a43a:	f7ff fb2d 	bl	8009a98 <_free_r>
 800a43e:	230c      	movs	r3, #12
 800a440:	f8ca 3000 	str.w	r3, [sl]
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e7e9      	b.n	800a426 <__ssputs_r+0x8a>
	...

0800a454 <_svfiprintf_r>:
 800a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a458:	4698      	mov	r8, r3
 800a45a:	898b      	ldrh	r3, [r1, #12]
 800a45c:	061b      	lsls	r3, r3, #24
 800a45e:	b09d      	sub	sp, #116	@ 0x74
 800a460:	4607      	mov	r7, r0
 800a462:	460d      	mov	r5, r1
 800a464:	4614      	mov	r4, r2
 800a466:	d510      	bpl.n	800a48a <_svfiprintf_r+0x36>
 800a468:	690b      	ldr	r3, [r1, #16]
 800a46a:	b973      	cbnz	r3, 800a48a <_svfiprintf_r+0x36>
 800a46c:	2140      	movs	r1, #64	@ 0x40
 800a46e:	f7ff fb87 	bl	8009b80 <_malloc_r>
 800a472:	6028      	str	r0, [r5, #0]
 800a474:	6128      	str	r0, [r5, #16]
 800a476:	b930      	cbnz	r0, 800a486 <_svfiprintf_r+0x32>
 800a478:	230c      	movs	r3, #12
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	b01d      	add	sp, #116	@ 0x74
 800a482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a486:	2340      	movs	r3, #64	@ 0x40
 800a488:	616b      	str	r3, [r5, #20]
 800a48a:	2300      	movs	r3, #0
 800a48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a48e:	2320      	movs	r3, #32
 800a490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a494:	f8cd 800c 	str.w	r8, [sp, #12]
 800a498:	2330      	movs	r3, #48	@ 0x30
 800a49a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a638 <_svfiprintf_r+0x1e4>
 800a49e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4a2:	f04f 0901 	mov.w	r9, #1
 800a4a6:	4623      	mov	r3, r4
 800a4a8:	469a      	mov	sl, r3
 800a4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ae:	b10a      	cbz	r2, 800a4b4 <_svfiprintf_r+0x60>
 800a4b0:	2a25      	cmp	r2, #37	@ 0x25
 800a4b2:	d1f9      	bne.n	800a4a8 <_svfiprintf_r+0x54>
 800a4b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4b8:	d00b      	beq.n	800a4d2 <_svfiprintf_r+0x7e>
 800a4ba:	465b      	mov	r3, fp
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7ff ff6b 	bl	800a39c <__ssputs_r>
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	f000 80a7 	beq.w	800a61a <_svfiprintf_r+0x1c6>
 800a4cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ce:	445a      	add	r2, fp
 800a4d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 809f 	beq.w	800a61a <_svfiprintf_r+0x1c6>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	9307      	str	r3, [sp, #28]
 800a4ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4f4:	4654      	mov	r4, sl
 800a4f6:	2205      	movs	r2, #5
 800a4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fc:	484e      	ldr	r0, [pc, #312]	@ (800a638 <_svfiprintf_r+0x1e4>)
 800a4fe:	f7f5 fe87 	bl	8000210 <memchr>
 800a502:	9a04      	ldr	r2, [sp, #16]
 800a504:	b9d8      	cbnz	r0, 800a53e <_svfiprintf_r+0xea>
 800a506:	06d0      	lsls	r0, r2, #27
 800a508:	bf44      	itt	mi
 800a50a:	2320      	movmi	r3, #32
 800a50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a510:	0711      	lsls	r1, r2, #28
 800a512:	bf44      	itt	mi
 800a514:	232b      	movmi	r3, #43	@ 0x2b
 800a516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a51a:	f89a 3000 	ldrb.w	r3, [sl]
 800a51e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a520:	d015      	beq.n	800a54e <_svfiprintf_r+0xfa>
 800a522:	9a07      	ldr	r2, [sp, #28]
 800a524:	4654      	mov	r4, sl
 800a526:	2000      	movs	r0, #0
 800a528:	f04f 0c0a 	mov.w	ip, #10
 800a52c:	4621      	mov	r1, r4
 800a52e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a532:	3b30      	subs	r3, #48	@ 0x30
 800a534:	2b09      	cmp	r3, #9
 800a536:	d94b      	bls.n	800a5d0 <_svfiprintf_r+0x17c>
 800a538:	b1b0      	cbz	r0, 800a568 <_svfiprintf_r+0x114>
 800a53a:	9207      	str	r2, [sp, #28]
 800a53c:	e014      	b.n	800a568 <_svfiprintf_r+0x114>
 800a53e:	eba0 0308 	sub.w	r3, r0, r8
 800a542:	fa09 f303 	lsl.w	r3, r9, r3
 800a546:	4313      	orrs	r3, r2
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	46a2      	mov	sl, r4
 800a54c:	e7d2      	b.n	800a4f4 <_svfiprintf_r+0xa0>
 800a54e:	9b03      	ldr	r3, [sp, #12]
 800a550:	1d19      	adds	r1, r3, #4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	9103      	str	r1, [sp, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	bfbb      	ittet	lt
 800a55a:	425b      	neglt	r3, r3
 800a55c:	f042 0202 	orrlt.w	r2, r2, #2
 800a560:	9307      	strge	r3, [sp, #28]
 800a562:	9307      	strlt	r3, [sp, #28]
 800a564:	bfb8      	it	lt
 800a566:	9204      	strlt	r2, [sp, #16]
 800a568:	7823      	ldrb	r3, [r4, #0]
 800a56a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a56c:	d10a      	bne.n	800a584 <_svfiprintf_r+0x130>
 800a56e:	7863      	ldrb	r3, [r4, #1]
 800a570:	2b2a      	cmp	r3, #42	@ 0x2a
 800a572:	d132      	bne.n	800a5da <_svfiprintf_r+0x186>
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	1d1a      	adds	r2, r3, #4
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	9203      	str	r2, [sp, #12]
 800a57c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a580:	3402      	adds	r4, #2
 800a582:	9305      	str	r3, [sp, #20]
 800a584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a648 <_svfiprintf_r+0x1f4>
 800a588:	7821      	ldrb	r1, [r4, #0]
 800a58a:	2203      	movs	r2, #3
 800a58c:	4650      	mov	r0, sl
 800a58e:	f7f5 fe3f 	bl	8000210 <memchr>
 800a592:	b138      	cbz	r0, 800a5a4 <_svfiprintf_r+0x150>
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	eba0 000a 	sub.w	r0, r0, sl
 800a59a:	2240      	movs	r2, #64	@ 0x40
 800a59c:	4082      	lsls	r2, r0
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	3401      	adds	r4, #1
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a8:	4824      	ldr	r0, [pc, #144]	@ (800a63c <_svfiprintf_r+0x1e8>)
 800a5aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5ae:	2206      	movs	r2, #6
 800a5b0:	f7f5 fe2e 	bl	8000210 <memchr>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d036      	beq.n	800a626 <_svfiprintf_r+0x1d2>
 800a5b8:	4b21      	ldr	r3, [pc, #132]	@ (800a640 <_svfiprintf_r+0x1ec>)
 800a5ba:	bb1b      	cbnz	r3, 800a604 <_svfiprintf_r+0x1b0>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	3307      	adds	r3, #7
 800a5c0:	f023 0307 	bic.w	r3, r3, #7
 800a5c4:	3308      	adds	r3, #8
 800a5c6:	9303      	str	r3, [sp, #12]
 800a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ca:	4433      	add	r3, r6
 800a5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ce:	e76a      	b.n	800a4a6 <_svfiprintf_r+0x52>
 800a5d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	e7a8      	b.n	800a52c <_svfiprintf_r+0xd8>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	3401      	adds	r4, #1
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	f04f 0c0a 	mov.w	ip, #10
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5ec:	3a30      	subs	r2, #48	@ 0x30
 800a5ee:	2a09      	cmp	r2, #9
 800a5f0:	d903      	bls.n	800a5fa <_svfiprintf_r+0x1a6>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d0c6      	beq.n	800a584 <_svfiprintf_r+0x130>
 800a5f6:	9105      	str	r1, [sp, #20]
 800a5f8:	e7c4      	b.n	800a584 <_svfiprintf_r+0x130>
 800a5fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5fe:	4604      	mov	r4, r0
 800a600:	2301      	movs	r3, #1
 800a602:	e7f0      	b.n	800a5e6 <_svfiprintf_r+0x192>
 800a604:	ab03      	add	r3, sp, #12
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	462a      	mov	r2, r5
 800a60a:	4b0e      	ldr	r3, [pc, #56]	@ (800a644 <_svfiprintf_r+0x1f0>)
 800a60c:	a904      	add	r1, sp, #16
 800a60e:	4638      	mov	r0, r7
 800a610:	f7fd fe96 	bl	8008340 <_printf_float>
 800a614:	1c42      	adds	r2, r0, #1
 800a616:	4606      	mov	r6, r0
 800a618:	d1d6      	bne.n	800a5c8 <_svfiprintf_r+0x174>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	065b      	lsls	r3, r3, #25
 800a61e:	f53f af2d 	bmi.w	800a47c <_svfiprintf_r+0x28>
 800a622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a624:	e72c      	b.n	800a480 <_svfiprintf_r+0x2c>
 800a626:	ab03      	add	r3, sp, #12
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	462a      	mov	r2, r5
 800a62c:	4b05      	ldr	r3, [pc, #20]	@ (800a644 <_svfiprintf_r+0x1f0>)
 800a62e:	a904      	add	r1, sp, #16
 800a630:	4638      	mov	r0, r7
 800a632:	f7fe f91d 	bl	8008870 <_printf_i>
 800a636:	e7ed      	b.n	800a614 <_svfiprintf_r+0x1c0>
 800a638:	0800c390 	.word	0x0800c390
 800a63c:	0800c39a 	.word	0x0800c39a
 800a640:	08008341 	.word	0x08008341
 800a644:	0800a39d 	.word	0x0800a39d
 800a648:	0800c396 	.word	0x0800c396

0800a64c <__sflush_r>:
 800a64c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a654:	0716      	lsls	r6, r2, #28
 800a656:	4605      	mov	r5, r0
 800a658:	460c      	mov	r4, r1
 800a65a:	d454      	bmi.n	800a706 <__sflush_r+0xba>
 800a65c:	684b      	ldr	r3, [r1, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dc02      	bgt.n	800a668 <__sflush_r+0x1c>
 800a662:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd48      	ble.n	800a6fa <__sflush_r+0xae>
 800a668:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a66a:	2e00      	cmp	r6, #0
 800a66c:	d045      	beq.n	800a6fa <__sflush_r+0xae>
 800a66e:	2300      	movs	r3, #0
 800a670:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a674:	682f      	ldr	r7, [r5, #0]
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	d030      	beq.n	800a6de <__sflush_r+0x92>
 800a67c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	0759      	lsls	r1, r3, #29
 800a682:	d505      	bpl.n	800a690 <__sflush_r+0x44>
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	1ad2      	subs	r2, r2, r3
 800a688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a68a:	b10b      	cbz	r3, 800a690 <__sflush_r+0x44>
 800a68c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	2300      	movs	r3, #0
 800a692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a694:	6a21      	ldr	r1, [r4, #32]
 800a696:	4628      	mov	r0, r5
 800a698:	47b0      	blx	r6
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	d106      	bne.n	800a6ae <__sflush_r+0x62>
 800a6a0:	6829      	ldr	r1, [r5, #0]
 800a6a2:	291d      	cmp	r1, #29
 800a6a4:	d82b      	bhi.n	800a6fe <__sflush_r+0xb2>
 800a6a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a750 <__sflush_r+0x104>)
 800a6a8:	410a      	asrs	r2, r1
 800a6aa:	07d6      	lsls	r6, r2, #31
 800a6ac:	d427      	bmi.n	800a6fe <__sflush_r+0xb2>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	6062      	str	r2, [r4, #4]
 800a6b2:	04d9      	lsls	r1, r3, #19
 800a6b4:	6922      	ldr	r2, [r4, #16]
 800a6b6:	6022      	str	r2, [r4, #0]
 800a6b8:	d504      	bpl.n	800a6c4 <__sflush_r+0x78>
 800a6ba:	1c42      	adds	r2, r0, #1
 800a6bc:	d101      	bne.n	800a6c2 <__sflush_r+0x76>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	b903      	cbnz	r3, 800a6c4 <__sflush_r+0x78>
 800a6c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6c6:	602f      	str	r7, [r5, #0]
 800a6c8:	b1b9      	cbz	r1, 800a6fa <__sflush_r+0xae>
 800a6ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6ce:	4299      	cmp	r1, r3
 800a6d0:	d002      	beq.n	800a6d8 <__sflush_r+0x8c>
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f7ff f9e0 	bl	8009a98 <_free_r>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6dc:	e00d      	b.n	800a6fa <__sflush_r+0xae>
 800a6de:	2301      	movs	r3, #1
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b0      	blx	r6
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	1c50      	adds	r0, r2, #1
 800a6e8:	d1c9      	bne.n	800a67e <__sflush_r+0x32>
 800a6ea:	682b      	ldr	r3, [r5, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0c6      	beq.n	800a67e <__sflush_r+0x32>
 800a6f0:	2b1d      	cmp	r3, #29
 800a6f2:	d001      	beq.n	800a6f8 <__sflush_r+0xac>
 800a6f4:	2b16      	cmp	r3, #22
 800a6f6:	d11e      	bne.n	800a736 <__sflush_r+0xea>
 800a6f8:	602f      	str	r7, [r5, #0]
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	e022      	b.n	800a744 <__sflush_r+0xf8>
 800a6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a702:	b21b      	sxth	r3, r3
 800a704:	e01b      	b.n	800a73e <__sflush_r+0xf2>
 800a706:	690f      	ldr	r7, [r1, #16]
 800a708:	2f00      	cmp	r7, #0
 800a70a:	d0f6      	beq.n	800a6fa <__sflush_r+0xae>
 800a70c:	0793      	lsls	r3, r2, #30
 800a70e:	680e      	ldr	r6, [r1, #0]
 800a710:	bf08      	it	eq
 800a712:	694b      	ldreq	r3, [r1, #20]
 800a714:	600f      	str	r7, [r1, #0]
 800a716:	bf18      	it	ne
 800a718:	2300      	movne	r3, #0
 800a71a:	eba6 0807 	sub.w	r8, r6, r7
 800a71e:	608b      	str	r3, [r1, #8]
 800a720:	f1b8 0f00 	cmp.w	r8, #0
 800a724:	dde9      	ble.n	800a6fa <__sflush_r+0xae>
 800a726:	6a21      	ldr	r1, [r4, #32]
 800a728:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a72a:	4643      	mov	r3, r8
 800a72c:	463a      	mov	r2, r7
 800a72e:	4628      	mov	r0, r5
 800a730:	47b0      	blx	r6
 800a732:	2800      	cmp	r0, #0
 800a734:	dc08      	bgt.n	800a748 <__sflush_r+0xfc>
 800a736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	4407      	add	r7, r0
 800a74a:	eba8 0800 	sub.w	r8, r8, r0
 800a74e:	e7e7      	b.n	800a720 <__sflush_r+0xd4>
 800a750:	dfbffffe 	.word	0xdfbffffe

0800a754 <_fflush_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	690b      	ldr	r3, [r1, #16]
 800a758:	4605      	mov	r5, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	b913      	cbnz	r3, 800a764 <_fflush_r+0x10>
 800a75e:	2500      	movs	r5, #0
 800a760:	4628      	mov	r0, r5
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	b118      	cbz	r0, 800a76e <_fflush_r+0x1a>
 800a766:	6a03      	ldr	r3, [r0, #32]
 800a768:	b90b      	cbnz	r3, 800a76e <_fflush_r+0x1a>
 800a76a:	f7fe fa2d 	bl	8008bc8 <__sinit>
 800a76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0f3      	beq.n	800a75e <_fflush_r+0xa>
 800a776:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a778:	07d0      	lsls	r0, r2, #31
 800a77a:	d404      	bmi.n	800a786 <_fflush_r+0x32>
 800a77c:	0599      	lsls	r1, r3, #22
 800a77e:	d402      	bmi.n	800a786 <_fflush_r+0x32>
 800a780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a782:	f7fe fb38 	bl	8008df6 <__retarget_lock_acquire_recursive>
 800a786:	4628      	mov	r0, r5
 800a788:	4621      	mov	r1, r4
 800a78a:	f7ff ff5f 	bl	800a64c <__sflush_r>
 800a78e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a790:	07da      	lsls	r2, r3, #31
 800a792:	4605      	mov	r5, r0
 800a794:	d4e4      	bmi.n	800a760 <_fflush_r+0xc>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	059b      	lsls	r3, r3, #22
 800a79a:	d4e1      	bmi.n	800a760 <_fflush_r+0xc>
 800a79c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a79e:	f7fe fb2b 	bl	8008df8 <__retarget_lock_release_recursive>
 800a7a2:	e7dd      	b.n	800a760 <_fflush_r+0xc>

0800a7a4 <memmove>:
 800a7a4:	4288      	cmp	r0, r1
 800a7a6:	b510      	push	{r4, lr}
 800a7a8:	eb01 0402 	add.w	r4, r1, r2
 800a7ac:	d902      	bls.n	800a7b4 <memmove+0x10>
 800a7ae:	4284      	cmp	r4, r0
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	d807      	bhi.n	800a7c4 <memmove+0x20>
 800a7b4:	1e43      	subs	r3, r0, #1
 800a7b6:	42a1      	cmp	r1, r4
 800a7b8:	d008      	beq.n	800a7cc <memmove+0x28>
 800a7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7c2:	e7f8      	b.n	800a7b6 <memmove+0x12>
 800a7c4:	4402      	add	r2, r0
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	428a      	cmp	r2, r1
 800a7ca:	d100      	bne.n	800a7ce <memmove+0x2a>
 800a7cc:	bd10      	pop	{r4, pc}
 800a7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7d6:	e7f7      	b.n	800a7c8 <memmove+0x24>

0800a7d8 <_sbrk_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d06      	ldr	r5, [pc, #24]	@ (800a7f4 <_sbrk_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	f7f7 fd90 	bl	8002308 <_sbrk>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_sbrk_r+0x1a>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_sbrk_r+0x1a>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20000a8c 	.word	0x20000a8c

0800a7f8 <memcpy>:
 800a7f8:	440a      	add	r2, r1
 800a7fa:	4291      	cmp	r1, r2
 800a7fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a800:	d100      	bne.n	800a804 <memcpy+0xc>
 800a802:	4770      	bx	lr
 800a804:	b510      	push	{r4, lr}
 800a806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80e:	4291      	cmp	r1, r2
 800a810:	d1f9      	bne.n	800a806 <memcpy+0xe>
 800a812:	bd10      	pop	{r4, pc}

0800a814 <__assert_func>:
 800a814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a816:	4614      	mov	r4, r2
 800a818:	461a      	mov	r2, r3
 800a81a:	4b09      	ldr	r3, [pc, #36]	@ (800a840 <__assert_func+0x2c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4605      	mov	r5, r0
 800a820:	68d8      	ldr	r0, [r3, #12]
 800a822:	b954      	cbnz	r4, 800a83a <__assert_func+0x26>
 800a824:	4b07      	ldr	r3, [pc, #28]	@ (800a844 <__assert_func+0x30>)
 800a826:	461c      	mov	r4, r3
 800a828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a82c:	9100      	str	r1, [sp, #0]
 800a82e:	462b      	mov	r3, r5
 800a830:	4905      	ldr	r1, [pc, #20]	@ (800a848 <__assert_func+0x34>)
 800a832:	f000 f86f 	bl	800a914 <fiprintf>
 800a836:	f000 f87f 	bl	800a938 <abort>
 800a83a:	4b04      	ldr	r3, [pc, #16]	@ (800a84c <__assert_func+0x38>)
 800a83c:	e7f4      	b.n	800a828 <__assert_func+0x14>
 800a83e:	bf00      	nop
 800a840:	200000b0 	.word	0x200000b0
 800a844:	0800c3e6 	.word	0x0800c3e6
 800a848:	0800c3b8 	.word	0x0800c3b8
 800a84c:	0800c3ab 	.word	0x0800c3ab

0800a850 <_calloc_r>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	fba1 5402 	umull	r5, r4, r1, r2
 800a856:	b93c      	cbnz	r4, 800a868 <_calloc_r+0x18>
 800a858:	4629      	mov	r1, r5
 800a85a:	f7ff f991 	bl	8009b80 <_malloc_r>
 800a85e:	4606      	mov	r6, r0
 800a860:	b928      	cbnz	r0, 800a86e <_calloc_r+0x1e>
 800a862:	2600      	movs	r6, #0
 800a864:	4630      	mov	r0, r6
 800a866:	bd70      	pop	{r4, r5, r6, pc}
 800a868:	220c      	movs	r2, #12
 800a86a:	6002      	str	r2, [r0, #0]
 800a86c:	e7f9      	b.n	800a862 <_calloc_r+0x12>
 800a86e:	462a      	mov	r2, r5
 800a870:	4621      	mov	r1, r4
 800a872:	f7fe fa42 	bl	8008cfa <memset>
 800a876:	e7f5      	b.n	800a864 <_calloc_r+0x14>

0800a878 <__ascii_mbtowc>:
 800a878:	b082      	sub	sp, #8
 800a87a:	b901      	cbnz	r1, 800a87e <__ascii_mbtowc+0x6>
 800a87c:	a901      	add	r1, sp, #4
 800a87e:	b142      	cbz	r2, 800a892 <__ascii_mbtowc+0x1a>
 800a880:	b14b      	cbz	r3, 800a896 <__ascii_mbtowc+0x1e>
 800a882:	7813      	ldrb	r3, [r2, #0]
 800a884:	600b      	str	r3, [r1, #0]
 800a886:	7812      	ldrb	r2, [r2, #0]
 800a888:	1e10      	subs	r0, r2, #0
 800a88a:	bf18      	it	ne
 800a88c:	2001      	movne	r0, #1
 800a88e:	b002      	add	sp, #8
 800a890:	4770      	bx	lr
 800a892:	4610      	mov	r0, r2
 800a894:	e7fb      	b.n	800a88e <__ascii_mbtowc+0x16>
 800a896:	f06f 0001 	mvn.w	r0, #1
 800a89a:	e7f8      	b.n	800a88e <__ascii_mbtowc+0x16>

0800a89c <_realloc_r>:
 800a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	4615      	mov	r5, r2
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	b921      	cbnz	r1, 800a8b2 <_realloc_r+0x16>
 800a8a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	f7ff b967 	b.w	8009b80 <_malloc_r>
 800a8b2:	b92a      	cbnz	r2, 800a8c0 <_realloc_r+0x24>
 800a8b4:	f7ff f8f0 	bl	8009a98 <_free_r>
 800a8b8:	2400      	movs	r4, #0
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	f000 f841 	bl	800a946 <_malloc_usable_size_r>
 800a8c4:	4285      	cmp	r5, r0
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	d802      	bhi.n	800a8d0 <_realloc_r+0x34>
 800a8ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8ce:	d8f4      	bhi.n	800a8ba <_realloc_r+0x1e>
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	f7ff f954 	bl	8009b80 <_malloc_r>
 800a8d8:	4607      	mov	r7, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d0ec      	beq.n	800a8b8 <_realloc_r+0x1c>
 800a8de:	42b5      	cmp	r5, r6
 800a8e0:	462a      	mov	r2, r5
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	bf28      	it	cs
 800a8e6:	4632      	movcs	r2, r6
 800a8e8:	f7ff ff86 	bl	800a7f8 <memcpy>
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff f8d2 	bl	8009a98 <_free_r>
 800a8f4:	463c      	mov	r4, r7
 800a8f6:	e7e0      	b.n	800a8ba <_realloc_r+0x1e>

0800a8f8 <__ascii_wctomb>:
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4608      	mov	r0, r1
 800a8fc:	b141      	cbz	r1, 800a910 <__ascii_wctomb+0x18>
 800a8fe:	2aff      	cmp	r2, #255	@ 0xff
 800a900:	d904      	bls.n	800a90c <__ascii_wctomb+0x14>
 800a902:	228a      	movs	r2, #138	@ 0x8a
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	f04f 30ff 	mov.w	r0, #4294967295
 800a90a:	4770      	bx	lr
 800a90c:	700a      	strb	r2, [r1, #0]
 800a90e:	2001      	movs	r0, #1
 800a910:	4770      	bx	lr
	...

0800a914 <fiprintf>:
 800a914:	b40e      	push	{r1, r2, r3}
 800a916:	b503      	push	{r0, r1, lr}
 800a918:	4601      	mov	r1, r0
 800a91a:	ab03      	add	r3, sp, #12
 800a91c:	4805      	ldr	r0, [pc, #20]	@ (800a934 <fiprintf+0x20>)
 800a91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	f000 f83f 	bl	800a9a8 <_vfiprintf_r>
 800a92a:	b002      	add	sp, #8
 800a92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a930:	b003      	add	sp, #12
 800a932:	4770      	bx	lr
 800a934:	200000b0 	.word	0x200000b0

0800a938 <abort>:
 800a938:	b508      	push	{r3, lr}
 800a93a:	2006      	movs	r0, #6
 800a93c:	f000 fa08 	bl	800ad50 <raise>
 800a940:	2001      	movs	r0, #1
 800a942:	f7f7 fc69 	bl	8002218 <_exit>

0800a946 <_malloc_usable_size_r>:
 800a946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94a:	1f18      	subs	r0, r3, #4
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bfbc      	itt	lt
 800a950:	580b      	ldrlt	r3, [r1, r0]
 800a952:	18c0      	addlt	r0, r0, r3
 800a954:	4770      	bx	lr

0800a956 <__sfputc_r>:
 800a956:	6893      	ldr	r3, [r2, #8]
 800a958:	3b01      	subs	r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	b410      	push	{r4}
 800a95e:	6093      	str	r3, [r2, #8]
 800a960:	da08      	bge.n	800a974 <__sfputc_r+0x1e>
 800a962:	6994      	ldr	r4, [r2, #24]
 800a964:	42a3      	cmp	r3, r4
 800a966:	db01      	blt.n	800a96c <__sfputc_r+0x16>
 800a968:	290a      	cmp	r1, #10
 800a96a:	d103      	bne.n	800a974 <__sfputc_r+0x1e>
 800a96c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a970:	f000 b932 	b.w	800abd8 <__swbuf_r>
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	1c58      	adds	r0, r3, #1
 800a978:	6010      	str	r0, [r2, #0]
 800a97a:	7019      	strb	r1, [r3, #0]
 800a97c:	4608      	mov	r0, r1
 800a97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <__sfputs_r>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	4606      	mov	r6, r0
 800a988:	460f      	mov	r7, r1
 800a98a:	4614      	mov	r4, r2
 800a98c:	18d5      	adds	r5, r2, r3
 800a98e:	42ac      	cmp	r4, r5
 800a990:	d101      	bne.n	800a996 <__sfputs_r+0x12>
 800a992:	2000      	movs	r0, #0
 800a994:	e007      	b.n	800a9a6 <__sfputs_r+0x22>
 800a996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99a:	463a      	mov	r2, r7
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7ff ffda 	bl	800a956 <__sfputc_r>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d1f3      	bne.n	800a98e <__sfputs_r+0xa>
 800a9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9a8 <_vfiprintf_r>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	b09d      	sub	sp, #116	@ 0x74
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	4698      	mov	r8, r3
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	b118      	cbz	r0, 800a9c0 <_vfiprintf_r+0x18>
 800a9b8:	6a03      	ldr	r3, [r0, #32]
 800a9ba:	b90b      	cbnz	r3, 800a9c0 <_vfiprintf_r+0x18>
 800a9bc:	f7fe f904 	bl	8008bc8 <__sinit>
 800a9c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9c2:	07d9      	lsls	r1, r3, #31
 800a9c4:	d405      	bmi.n	800a9d2 <_vfiprintf_r+0x2a>
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	059a      	lsls	r2, r3, #22
 800a9ca:	d402      	bmi.n	800a9d2 <_vfiprintf_r+0x2a>
 800a9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ce:	f7fe fa12 	bl	8008df6 <__retarget_lock_acquire_recursive>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	071b      	lsls	r3, r3, #28
 800a9d6:	d501      	bpl.n	800a9dc <_vfiprintf_r+0x34>
 800a9d8:	692b      	ldr	r3, [r5, #16]
 800a9da:	b99b      	cbnz	r3, 800aa04 <_vfiprintf_r+0x5c>
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 f938 	bl	800ac54 <__swsetup_r>
 800a9e4:	b170      	cbz	r0, 800aa04 <_vfiprintf_r+0x5c>
 800a9e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9e8:	07dc      	lsls	r4, r3, #31
 800a9ea:	d504      	bpl.n	800a9f6 <_vfiprintf_r+0x4e>
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	b01d      	add	sp, #116	@ 0x74
 800a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	0598      	lsls	r0, r3, #22
 800a9fa:	d4f7      	bmi.n	800a9ec <_vfiprintf_r+0x44>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fe:	f7fe f9fb 	bl	8008df8 <__retarget_lock_release_recursive>
 800aa02:	e7f3      	b.n	800a9ec <_vfiprintf_r+0x44>
 800aa04:	2300      	movs	r3, #0
 800aa06:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa08:	2320      	movs	r3, #32
 800aa0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa12:	2330      	movs	r3, #48	@ 0x30
 800aa14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abc4 <_vfiprintf_r+0x21c>
 800aa18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa1c:	f04f 0901 	mov.w	r9, #1
 800aa20:	4623      	mov	r3, r4
 800aa22:	469a      	mov	sl, r3
 800aa24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa28:	b10a      	cbz	r2, 800aa2e <_vfiprintf_r+0x86>
 800aa2a:	2a25      	cmp	r2, #37	@ 0x25
 800aa2c:	d1f9      	bne.n	800aa22 <_vfiprintf_r+0x7a>
 800aa2e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa32:	d00b      	beq.n	800aa4c <_vfiprintf_r+0xa4>
 800aa34:	465b      	mov	r3, fp
 800aa36:	4622      	mov	r2, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7ff ffa2 	bl	800a984 <__sfputs_r>
 800aa40:	3001      	adds	r0, #1
 800aa42:	f000 80a7 	beq.w	800ab94 <_vfiprintf_r+0x1ec>
 800aa46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa48:	445a      	add	r2, fp
 800aa4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa4c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 809f 	beq.w	800ab94 <_vfiprintf_r+0x1ec>
 800aa56:	2300      	movs	r3, #0
 800aa58:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa60:	f10a 0a01 	add.w	sl, sl, #1
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	9307      	str	r3, [sp, #28]
 800aa68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa6e:	4654      	mov	r4, sl
 800aa70:	2205      	movs	r2, #5
 800aa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa76:	4853      	ldr	r0, [pc, #332]	@ (800abc4 <_vfiprintf_r+0x21c>)
 800aa78:	f7f5 fbca 	bl	8000210 <memchr>
 800aa7c:	9a04      	ldr	r2, [sp, #16]
 800aa7e:	b9d8      	cbnz	r0, 800aab8 <_vfiprintf_r+0x110>
 800aa80:	06d1      	lsls	r1, r2, #27
 800aa82:	bf44      	itt	mi
 800aa84:	2320      	movmi	r3, #32
 800aa86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa8a:	0713      	lsls	r3, r2, #28
 800aa8c:	bf44      	itt	mi
 800aa8e:	232b      	movmi	r3, #43	@ 0x2b
 800aa90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa94:	f89a 3000 	ldrb.w	r3, [sl]
 800aa98:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa9a:	d015      	beq.n	800aac8 <_vfiprintf_r+0x120>
 800aa9c:	9a07      	ldr	r2, [sp, #28]
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	f04f 0c0a 	mov.w	ip, #10
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaac:	3b30      	subs	r3, #48	@ 0x30
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	d94b      	bls.n	800ab4a <_vfiprintf_r+0x1a2>
 800aab2:	b1b0      	cbz	r0, 800aae2 <_vfiprintf_r+0x13a>
 800aab4:	9207      	str	r2, [sp, #28]
 800aab6:	e014      	b.n	800aae2 <_vfiprintf_r+0x13a>
 800aab8:	eba0 0308 	sub.w	r3, r0, r8
 800aabc:	fa09 f303 	lsl.w	r3, r9, r3
 800aac0:	4313      	orrs	r3, r2
 800aac2:	9304      	str	r3, [sp, #16]
 800aac4:	46a2      	mov	sl, r4
 800aac6:	e7d2      	b.n	800aa6e <_vfiprintf_r+0xc6>
 800aac8:	9b03      	ldr	r3, [sp, #12]
 800aaca:	1d19      	adds	r1, r3, #4
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	9103      	str	r1, [sp, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	bfbb      	ittet	lt
 800aad4:	425b      	neglt	r3, r3
 800aad6:	f042 0202 	orrlt.w	r2, r2, #2
 800aada:	9307      	strge	r3, [sp, #28]
 800aadc:	9307      	strlt	r3, [sp, #28]
 800aade:	bfb8      	it	lt
 800aae0:	9204      	strlt	r2, [sp, #16]
 800aae2:	7823      	ldrb	r3, [r4, #0]
 800aae4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aae6:	d10a      	bne.n	800aafe <_vfiprintf_r+0x156>
 800aae8:	7863      	ldrb	r3, [r4, #1]
 800aaea:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaec:	d132      	bne.n	800ab54 <_vfiprintf_r+0x1ac>
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	1d1a      	adds	r2, r3, #4
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	9203      	str	r2, [sp, #12]
 800aaf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aafa:	3402      	adds	r4, #2
 800aafc:	9305      	str	r3, [sp, #20]
 800aafe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abd4 <_vfiprintf_r+0x22c>
 800ab02:	7821      	ldrb	r1, [r4, #0]
 800ab04:	2203      	movs	r2, #3
 800ab06:	4650      	mov	r0, sl
 800ab08:	f7f5 fb82 	bl	8000210 <memchr>
 800ab0c:	b138      	cbz	r0, 800ab1e <_vfiprintf_r+0x176>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	eba0 000a 	sub.w	r0, r0, sl
 800ab14:	2240      	movs	r2, #64	@ 0x40
 800ab16:	4082      	lsls	r2, r0
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	3401      	adds	r4, #1
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab22:	4829      	ldr	r0, [pc, #164]	@ (800abc8 <_vfiprintf_r+0x220>)
 800ab24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab28:	2206      	movs	r2, #6
 800ab2a:	f7f5 fb71 	bl	8000210 <memchr>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d03f      	beq.n	800abb2 <_vfiprintf_r+0x20a>
 800ab32:	4b26      	ldr	r3, [pc, #152]	@ (800abcc <_vfiprintf_r+0x224>)
 800ab34:	bb1b      	cbnz	r3, 800ab7e <_vfiprintf_r+0x1d6>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	3307      	adds	r3, #7
 800ab3a:	f023 0307 	bic.w	r3, r3, #7
 800ab3e:	3308      	adds	r3, #8
 800ab40:	9303      	str	r3, [sp, #12]
 800ab42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab44:	443b      	add	r3, r7
 800ab46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab48:	e76a      	b.n	800aa20 <_vfiprintf_r+0x78>
 800ab4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab4e:	460c      	mov	r4, r1
 800ab50:	2001      	movs	r0, #1
 800ab52:	e7a8      	b.n	800aaa6 <_vfiprintf_r+0xfe>
 800ab54:	2300      	movs	r3, #0
 800ab56:	3401      	adds	r4, #1
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f04f 0c0a 	mov.w	ip, #10
 800ab60:	4620      	mov	r0, r4
 800ab62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab66:	3a30      	subs	r2, #48	@ 0x30
 800ab68:	2a09      	cmp	r2, #9
 800ab6a:	d903      	bls.n	800ab74 <_vfiprintf_r+0x1cc>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0c6      	beq.n	800aafe <_vfiprintf_r+0x156>
 800ab70:	9105      	str	r1, [sp, #20]
 800ab72:	e7c4      	b.n	800aafe <_vfiprintf_r+0x156>
 800ab74:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab78:	4604      	mov	r4, r0
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e7f0      	b.n	800ab60 <_vfiprintf_r+0x1b8>
 800ab7e:	ab03      	add	r3, sp, #12
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	462a      	mov	r2, r5
 800ab84:	4b12      	ldr	r3, [pc, #72]	@ (800abd0 <_vfiprintf_r+0x228>)
 800ab86:	a904      	add	r1, sp, #16
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7fd fbd9 	bl	8008340 <_printf_float>
 800ab8e:	4607      	mov	r7, r0
 800ab90:	1c78      	adds	r0, r7, #1
 800ab92:	d1d6      	bne.n	800ab42 <_vfiprintf_r+0x19a>
 800ab94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab96:	07d9      	lsls	r1, r3, #31
 800ab98:	d405      	bmi.n	800aba6 <_vfiprintf_r+0x1fe>
 800ab9a:	89ab      	ldrh	r3, [r5, #12]
 800ab9c:	059a      	lsls	r2, r3, #22
 800ab9e:	d402      	bmi.n	800aba6 <_vfiprintf_r+0x1fe>
 800aba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aba2:	f7fe f929 	bl	8008df8 <__retarget_lock_release_recursive>
 800aba6:	89ab      	ldrh	r3, [r5, #12]
 800aba8:	065b      	lsls	r3, r3, #25
 800abaa:	f53f af1f 	bmi.w	800a9ec <_vfiprintf_r+0x44>
 800abae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abb0:	e71e      	b.n	800a9f0 <_vfiprintf_r+0x48>
 800abb2:	ab03      	add	r3, sp, #12
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	462a      	mov	r2, r5
 800abb8:	4b05      	ldr	r3, [pc, #20]	@ (800abd0 <_vfiprintf_r+0x228>)
 800abba:	a904      	add	r1, sp, #16
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7fd fe57 	bl	8008870 <_printf_i>
 800abc2:	e7e4      	b.n	800ab8e <_vfiprintf_r+0x1e6>
 800abc4:	0800c390 	.word	0x0800c390
 800abc8:	0800c39a 	.word	0x0800c39a
 800abcc:	08008341 	.word	0x08008341
 800abd0:	0800a985 	.word	0x0800a985
 800abd4:	0800c396 	.word	0x0800c396

0800abd8 <__swbuf_r>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	460e      	mov	r6, r1
 800abdc:	4614      	mov	r4, r2
 800abde:	4605      	mov	r5, r0
 800abe0:	b118      	cbz	r0, 800abea <__swbuf_r+0x12>
 800abe2:	6a03      	ldr	r3, [r0, #32]
 800abe4:	b90b      	cbnz	r3, 800abea <__swbuf_r+0x12>
 800abe6:	f7fd ffef 	bl	8008bc8 <__sinit>
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	071a      	lsls	r2, r3, #28
 800abf2:	d501      	bpl.n	800abf8 <__swbuf_r+0x20>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	b943      	cbnz	r3, 800ac0a <__swbuf_r+0x32>
 800abf8:	4621      	mov	r1, r4
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 f82a 	bl	800ac54 <__swsetup_r>
 800ac00:	b118      	cbz	r0, 800ac0a <__swbuf_r+0x32>
 800ac02:	f04f 37ff 	mov.w	r7, #4294967295
 800ac06:	4638      	mov	r0, r7
 800ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	6922      	ldr	r2, [r4, #16]
 800ac0e:	1a98      	subs	r0, r3, r2
 800ac10:	6963      	ldr	r3, [r4, #20]
 800ac12:	b2f6      	uxtb	r6, r6
 800ac14:	4283      	cmp	r3, r0
 800ac16:	4637      	mov	r7, r6
 800ac18:	dc05      	bgt.n	800ac26 <__swbuf_r+0x4e>
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	f7ff fd99 	bl	800a754 <_fflush_r>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d1ed      	bne.n	800ac02 <__swbuf_r+0x2a>
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	60a3      	str	r3, [r4, #8]
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	1c5a      	adds	r2, r3, #1
 800ac30:	6022      	str	r2, [r4, #0]
 800ac32:	701e      	strb	r6, [r3, #0]
 800ac34:	6962      	ldr	r2, [r4, #20]
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d004      	beq.n	800ac46 <__swbuf_r+0x6e>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	07db      	lsls	r3, r3, #31
 800ac40:	d5e1      	bpl.n	800ac06 <__swbuf_r+0x2e>
 800ac42:	2e0a      	cmp	r6, #10
 800ac44:	d1df      	bne.n	800ac06 <__swbuf_r+0x2e>
 800ac46:	4621      	mov	r1, r4
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f7ff fd83 	bl	800a754 <_fflush_r>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d0d9      	beq.n	800ac06 <__swbuf_r+0x2e>
 800ac52:	e7d6      	b.n	800ac02 <__swbuf_r+0x2a>

0800ac54 <__swsetup_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4b29      	ldr	r3, [pc, #164]	@ (800acfc <__swsetup_r+0xa8>)
 800ac58:	4605      	mov	r5, r0
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	b118      	cbz	r0, 800ac68 <__swsetup_r+0x14>
 800ac60:	6a03      	ldr	r3, [r0, #32]
 800ac62:	b90b      	cbnz	r3, 800ac68 <__swsetup_r+0x14>
 800ac64:	f7fd ffb0 	bl	8008bc8 <__sinit>
 800ac68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6c:	0719      	lsls	r1, r3, #28
 800ac6e:	d422      	bmi.n	800acb6 <__swsetup_r+0x62>
 800ac70:	06da      	lsls	r2, r3, #27
 800ac72:	d407      	bmi.n	800ac84 <__swsetup_r+0x30>
 800ac74:	2209      	movs	r2, #9
 800ac76:	602a      	str	r2, [r5, #0]
 800ac78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac7c:	81a3      	strh	r3, [r4, #12]
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac82:	e033      	b.n	800acec <__swsetup_r+0x98>
 800ac84:	0758      	lsls	r0, r3, #29
 800ac86:	d512      	bpl.n	800acae <__swsetup_r+0x5a>
 800ac88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac8a:	b141      	cbz	r1, 800ac9e <__swsetup_r+0x4a>
 800ac8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac90:	4299      	cmp	r1, r3
 800ac92:	d002      	beq.n	800ac9a <__swsetup_r+0x46>
 800ac94:	4628      	mov	r0, r5
 800ac96:	f7fe feff 	bl	8009a98 <_free_r>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	2300      	movs	r3, #0
 800aca8:	6063      	str	r3, [r4, #4]
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f043 0308 	orr.w	r3, r3, #8
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	b94b      	cbnz	r3, 800acce <__swsetup_r+0x7a>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acc4:	d003      	beq.n	800acce <__swsetup_r+0x7a>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f000 f883 	bl	800add4 <__smakebuf_r>
 800acce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd2:	f013 0201 	ands.w	r2, r3, #1
 800acd6:	d00a      	beq.n	800acee <__swsetup_r+0x9a>
 800acd8:	2200      	movs	r2, #0
 800acda:	60a2      	str	r2, [r4, #8]
 800acdc:	6962      	ldr	r2, [r4, #20]
 800acde:	4252      	negs	r2, r2
 800ace0:	61a2      	str	r2, [r4, #24]
 800ace2:	6922      	ldr	r2, [r4, #16]
 800ace4:	b942      	cbnz	r2, 800acf8 <__swsetup_r+0xa4>
 800ace6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acea:	d1c5      	bne.n	800ac78 <__swsetup_r+0x24>
 800acec:	bd38      	pop	{r3, r4, r5, pc}
 800acee:	0799      	lsls	r1, r3, #30
 800acf0:	bf58      	it	pl
 800acf2:	6962      	ldrpl	r2, [r4, #20]
 800acf4:	60a2      	str	r2, [r4, #8]
 800acf6:	e7f4      	b.n	800ace2 <__swsetup_r+0x8e>
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7f7      	b.n	800acec <__swsetup_r+0x98>
 800acfc:	200000b0 	.word	0x200000b0

0800ad00 <_raise_r>:
 800ad00:	291f      	cmp	r1, #31
 800ad02:	b538      	push	{r3, r4, r5, lr}
 800ad04:	4605      	mov	r5, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	d904      	bls.n	800ad14 <_raise_r+0x14>
 800ad0a:	2316      	movs	r3, #22
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad16:	b112      	cbz	r2, 800ad1e <_raise_r+0x1e>
 800ad18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad1c:	b94b      	cbnz	r3, 800ad32 <_raise_r+0x32>
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 f830 	bl	800ad84 <_getpid_r>
 800ad24:	4622      	mov	r2, r4
 800ad26:	4601      	mov	r1, r0
 800ad28:	4628      	mov	r0, r5
 800ad2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad2e:	f000 b817 	b.w	800ad60 <_kill_r>
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d00a      	beq.n	800ad4c <_raise_r+0x4c>
 800ad36:	1c59      	adds	r1, r3, #1
 800ad38:	d103      	bne.n	800ad42 <_raise_r+0x42>
 800ad3a:	2316      	movs	r3, #22
 800ad3c:	6003      	str	r3, [r0, #0]
 800ad3e:	2001      	movs	r0, #1
 800ad40:	e7e7      	b.n	800ad12 <_raise_r+0x12>
 800ad42:	2100      	movs	r1, #0
 800ad44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad48:	4620      	mov	r0, r4
 800ad4a:	4798      	blx	r3
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	e7e0      	b.n	800ad12 <_raise_r+0x12>

0800ad50 <raise>:
 800ad50:	4b02      	ldr	r3, [pc, #8]	@ (800ad5c <raise+0xc>)
 800ad52:	4601      	mov	r1, r0
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	f7ff bfd3 	b.w	800ad00 <_raise_r>
 800ad5a:	bf00      	nop
 800ad5c:	200000b0 	.word	0x200000b0

0800ad60 <_kill_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d07      	ldr	r5, [pc, #28]	@ (800ad80 <_kill_r+0x20>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	602b      	str	r3, [r5, #0]
 800ad6e:	f7f7 fa43 	bl	80021f8 <_kill>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d102      	bne.n	800ad7c <_kill_r+0x1c>
 800ad76:	682b      	ldr	r3, [r5, #0]
 800ad78:	b103      	cbz	r3, 800ad7c <_kill_r+0x1c>
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	bd38      	pop	{r3, r4, r5, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000a8c 	.word	0x20000a8c

0800ad84 <_getpid_r>:
 800ad84:	f7f7 ba30 	b.w	80021e8 <_getpid>

0800ad88 <__swhatbuf_r>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad90:	2900      	cmp	r1, #0
 800ad92:	b096      	sub	sp, #88	@ 0x58
 800ad94:	4615      	mov	r5, r2
 800ad96:	461e      	mov	r6, r3
 800ad98:	da0d      	bge.n	800adb6 <__swhatbuf_r+0x2e>
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ada0:	f04f 0100 	mov.w	r1, #0
 800ada4:	bf14      	ite	ne
 800ada6:	2340      	movne	r3, #64	@ 0x40
 800ada8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adac:	2000      	movs	r0, #0
 800adae:	6031      	str	r1, [r6, #0]
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	b016      	add	sp, #88	@ 0x58
 800adb4:	bd70      	pop	{r4, r5, r6, pc}
 800adb6:	466a      	mov	r2, sp
 800adb8:	f000 f848 	bl	800ae4c <_fstat_r>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	dbec      	blt.n	800ad9a <__swhatbuf_r+0x12>
 800adc0:	9901      	ldr	r1, [sp, #4]
 800adc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adca:	4259      	negs	r1, r3
 800adcc:	4159      	adcs	r1, r3
 800adce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800add2:	e7eb      	b.n	800adac <__swhatbuf_r+0x24>

0800add4 <__smakebuf_r>:
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800add8:	079d      	lsls	r5, r3, #30
 800adda:	4606      	mov	r6, r0
 800addc:	460c      	mov	r4, r1
 800adde:	d507      	bpl.n	800adf0 <__smakebuf_r+0x1c>
 800ade0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	6123      	str	r3, [r4, #16]
 800ade8:	2301      	movs	r3, #1
 800adea:	6163      	str	r3, [r4, #20]
 800adec:	b003      	add	sp, #12
 800adee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf0:	ab01      	add	r3, sp, #4
 800adf2:	466a      	mov	r2, sp
 800adf4:	f7ff ffc8 	bl	800ad88 <__swhatbuf_r>
 800adf8:	9f00      	ldr	r7, [sp, #0]
 800adfa:	4605      	mov	r5, r0
 800adfc:	4639      	mov	r1, r7
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7fe febe 	bl	8009b80 <_malloc_r>
 800ae04:	b948      	cbnz	r0, 800ae1a <__smakebuf_r+0x46>
 800ae06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae0a:	059a      	lsls	r2, r3, #22
 800ae0c:	d4ee      	bmi.n	800adec <__smakebuf_r+0x18>
 800ae0e:	f023 0303 	bic.w	r3, r3, #3
 800ae12:	f043 0302 	orr.w	r3, r3, #2
 800ae16:	81a3      	strh	r3, [r4, #12]
 800ae18:	e7e2      	b.n	800ade0 <__smakebuf_r+0xc>
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	6020      	str	r0, [r4, #0]
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	9b01      	ldr	r3, [sp, #4]
 800ae26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae2a:	b15b      	cbz	r3, 800ae44 <__smakebuf_r+0x70>
 800ae2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae30:	4630      	mov	r0, r6
 800ae32:	f000 f81d 	bl	800ae70 <_isatty_r>
 800ae36:	b128      	cbz	r0, 800ae44 <__smakebuf_r+0x70>
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	f023 0303 	bic.w	r3, r3, #3
 800ae3e:	f043 0301 	orr.w	r3, r3, #1
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	431d      	orrs	r5, r3
 800ae48:	81a5      	strh	r5, [r4, #12]
 800ae4a:	e7cf      	b.n	800adec <__smakebuf_r+0x18>

0800ae4c <_fstat_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	@ (800ae6c <_fstat_r+0x20>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	4611      	mov	r1, r2
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	f7f7 fa2d 	bl	80022b8 <_fstat>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d102      	bne.n	800ae68 <_fstat_r+0x1c>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b103      	cbz	r3, 800ae68 <_fstat_r+0x1c>
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000a8c 	.word	0x20000a8c

0800ae70 <_isatty_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	@ (800ae8c <_isatty_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f7 fa2c 	bl	80022d8 <_isatty>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_isatty_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_isatty_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20000a8c 	.word	0x20000a8c

0800ae90 <atan2>:
 800ae90:	f000 baaa 	b.w	800b3e8 <__ieee754_atan2>

0800ae94 <sqrt>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	ed2d 8b02 	vpush	{d8}
 800ae9a:	ec55 4b10 	vmov	r4, r5, d0
 800ae9e:	f000 f9c7 	bl	800b230 <__ieee754_sqrt>
 800aea2:	4622      	mov	r2, r4
 800aea4:	462b      	mov	r3, r5
 800aea6:	4620      	mov	r0, r4
 800aea8:	4629      	mov	r1, r5
 800aeaa:	eeb0 8a40 	vmov.f32	s16, s0
 800aeae:	eef0 8a60 	vmov.f32	s17, s1
 800aeb2:	f7f5 fe5b 	bl	8000b6c <__aeabi_dcmpun>
 800aeb6:	b990      	cbnz	r0, 800aede <sqrt+0x4a>
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2300      	movs	r3, #0
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 800aec4:	b158      	cbz	r0, 800aede <sqrt+0x4a>
 800aec6:	f7fd ff6b 	bl	8008da0 <__errno>
 800aeca:	2321      	movs	r3, #33	@ 0x21
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	2200      	movs	r2, #0
 800aed0:	2300      	movs	r3, #0
 800aed2:	4610      	mov	r0, r2
 800aed4:	4619      	mov	r1, r3
 800aed6:	f7f5 fcd9 	bl	800088c <__aeabi_ddiv>
 800aeda:	ec41 0b18 	vmov	d8, r0, r1
 800aede:	eeb0 0a48 	vmov.f32	s0, s16
 800aee2:	eef0 0a68 	vmov.f32	s1, s17
 800aee6:	ecbd 8b02 	vpop	{d8}
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	0000      	movs	r0, r0
	...

0800aef0 <atan>:
 800aef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	ec55 4b10 	vmov	r4, r5, d0
 800aef8:	4bbf      	ldr	r3, [pc, #764]	@ (800b1f8 <atan+0x308>)
 800aefa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800aefe:	429e      	cmp	r6, r3
 800af00:	46ab      	mov	fp, r5
 800af02:	d918      	bls.n	800af36 <atan+0x46>
 800af04:	4bbd      	ldr	r3, [pc, #756]	@ (800b1fc <atan+0x30c>)
 800af06:	429e      	cmp	r6, r3
 800af08:	d801      	bhi.n	800af0e <atan+0x1e>
 800af0a:	d109      	bne.n	800af20 <atan+0x30>
 800af0c:	b144      	cbz	r4, 800af20 <atan+0x30>
 800af0e:	4622      	mov	r2, r4
 800af10:	462b      	mov	r3, r5
 800af12:	4620      	mov	r0, r4
 800af14:	4629      	mov	r1, r5
 800af16:	f7f5 f9d9 	bl	80002cc <__adddf3>
 800af1a:	4604      	mov	r4, r0
 800af1c:	460d      	mov	r5, r1
 800af1e:	e006      	b.n	800af2e <atan+0x3e>
 800af20:	f1bb 0f00 	cmp.w	fp, #0
 800af24:	f340 812b 	ble.w	800b17e <atan+0x28e>
 800af28:	a597      	add	r5, pc, #604	@ (adr r5, 800b188 <atan+0x298>)
 800af2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af2e:	ec45 4b10 	vmov	d0, r4, r5
 800af32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	4bb2      	ldr	r3, [pc, #712]	@ (800b200 <atan+0x310>)
 800af38:	429e      	cmp	r6, r3
 800af3a:	d813      	bhi.n	800af64 <atan+0x74>
 800af3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800af40:	429e      	cmp	r6, r3
 800af42:	d80c      	bhi.n	800af5e <atan+0x6e>
 800af44:	a392      	add	r3, pc, #584	@ (adr r3, 800b190 <atan+0x2a0>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	f7f5 f9bd 	bl	80002cc <__adddf3>
 800af52:	4bac      	ldr	r3, [pc, #688]	@ (800b204 <atan+0x314>)
 800af54:	2200      	movs	r2, #0
 800af56:	f7f5 fdff 	bl	8000b58 <__aeabi_dcmpgt>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d1e7      	bne.n	800af2e <atan+0x3e>
 800af5e:	f04f 3aff 	mov.w	sl, #4294967295
 800af62:	e029      	b.n	800afb8 <atan+0xc8>
 800af64:	f000 f95c 	bl	800b220 <fabs>
 800af68:	4ba7      	ldr	r3, [pc, #668]	@ (800b208 <atan+0x318>)
 800af6a:	429e      	cmp	r6, r3
 800af6c:	ec55 4b10 	vmov	r4, r5, d0
 800af70:	f200 80bc 	bhi.w	800b0ec <atan+0x1fc>
 800af74:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800af78:	429e      	cmp	r6, r3
 800af7a:	f200 809e 	bhi.w	800b0ba <atan+0x1ca>
 800af7e:	4622      	mov	r2, r4
 800af80:	462b      	mov	r3, r5
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 f9a1 	bl	80002cc <__adddf3>
 800af8a:	4b9e      	ldr	r3, [pc, #632]	@ (800b204 <atan+0x314>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	f7f5 f99b 	bl	80002c8 <__aeabi_dsub>
 800af92:	2200      	movs	r2, #0
 800af94:	4606      	mov	r6, r0
 800af96:	460f      	mov	r7, r1
 800af98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 f994 	bl	80002cc <__adddf3>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4630      	mov	r0, r6
 800afaa:	4639      	mov	r1, r7
 800afac:	f7f5 fc6e 	bl	800088c <__aeabi_ddiv>
 800afb0:	f04f 0a00 	mov.w	sl, #0
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	4622      	mov	r2, r4
 800afba:	462b      	mov	r3, r5
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f7f5 fb3a 	bl	8000638 <__aeabi_dmul>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4680      	mov	r8, r0
 800afca:	4689      	mov	r9, r1
 800afcc:	f7f5 fb34 	bl	8000638 <__aeabi_dmul>
 800afd0:	a371      	add	r3, pc, #452	@ (adr r3, 800b198 <atan+0x2a8>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	4606      	mov	r6, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	f7f5 fb2d 	bl	8000638 <__aeabi_dmul>
 800afde:	a370      	add	r3, pc, #448	@ (adr r3, 800b1a0 <atan+0x2b0>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 f972 	bl	80002cc <__adddf3>
 800afe8:	4632      	mov	r2, r6
 800afea:	463b      	mov	r3, r7
 800afec:	f7f5 fb24 	bl	8000638 <__aeabi_dmul>
 800aff0:	a36d      	add	r3, pc, #436	@ (adr r3, 800b1a8 <atan+0x2b8>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 f969 	bl	80002cc <__adddf3>
 800affa:	4632      	mov	r2, r6
 800affc:	463b      	mov	r3, r7
 800affe:	f7f5 fb1b 	bl	8000638 <__aeabi_dmul>
 800b002:	a36b      	add	r3, pc, #428	@ (adr r3, 800b1b0 <atan+0x2c0>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 f960 	bl	80002cc <__adddf3>
 800b00c:	4632      	mov	r2, r6
 800b00e:	463b      	mov	r3, r7
 800b010:	f7f5 fb12 	bl	8000638 <__aeabi_dmul>
 800b014:	a368      	add	r3, pc, #416	@ (adr r3, 800b1b8 <atan+0x2c8>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 f957 	bl	80002cc <__adddf3>
 800b01e:	4632      	mov	r2, r6
 800b020:	463b      	mov	r3, r7
 800b022:	f7f5 fb09 	bl	8000638 <__aeabi_dmul>
 800b026:	a366      	add	r3, pc, #408	@ (adr r3, 800b1c0 <atan+0x2d0>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 f94e 	bl	80002cc <__adddf3>
 800b030:	4642      	mov	r2, r8
 800b032:	464b      	mov	r3, r9
 800b034:	f7f5 fb00 	bl	8000638 <__aeabi_dmul>
 800b038:	a363      	add	r3, pc, #396	@ (adr r3, 800b1c8 <atan+0x2d8>)
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	4680      	mov	r8, r0
 800b040:	4689      	mov	r9, r1
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 faf7 	bl	8000638 <__aeabi_dmul>
 800b04a:	a361      	add	r3, pc, #388	@ (adr r3, 800b1d0 <atan+0x2e0>)
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	f7f5 f93a 	bl	80002c8 <__aeabi_dsub>
 800b054:	4632      	mov	r2, r6
 800b056:	463b      	mov	r3, r7
 800b058:	f7f5 faee 	bl	8000638 <__aeabi_dmul>
 800b05c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b1d8 <atan+0x2e8>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 f931 	bl	80002c8 <__aeabi_dsub>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 fae5 	bl	8000638 <__aeabi_dmul>
 800b06e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b1e0 <atan+0x2f0>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f928 	bl	80002c8 <__aeabi_dsub>
 800b078:	4632      	mov	r2, r6
 800b07a:	463b      	mov	r3, r7
 800b07c:	f7f5 fadc 	bl	8000638 <__aeabi_dmul>
 800b080:	a359      	add	r3, pc, #356	@ (adr r3, 800b1e8 <atan+0x2f8>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 f91f 	bl	80002c8 <__aeabi_dsub>
 800b08a:	4632      	mov	r2, r6
 800b08c:	463b      	mov	r3, r7
 800b08e:	f7f5 fad3 	bl	8000638 <__aeabi_dmul>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4640      	mov	r0, r8
 800b098:	4649      	mov	r1, r9
 800b09a:	f7f5 f917 	bl	80002cc <__adddf3>
 800b09e:	4622      	mov	r2, r4
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	f7f5 fac9 	bl	8000638 <__aeabi_dmul>
 800b0a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	d148      	bne.n	800b142 <atan+0x252>
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	f7f5 f908 	bl	80002c8 <__aeabi_dsub>
 800b0b8:	e72f      	b.n	800af1a <atan+0x2a>
 800b0ba:	4b52      	ldr	r3, [pc, #328]	@ (800b204 <atan+0x314>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 f901 	bl	80002c8 <__aeabi_dsub>
 800b0c6:	4b4f      	ldr	r3, [pc, #316]	@ (800b204 <atan+0x314>)
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	460f      	mov	r7, r1
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	f7f5 f8fb 	bl	80002cc <__adddf3>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4630      	mov	r0, r6
 800b0dc:	4639      	mov	r1, r7
 800b0de:	f7f5 fbd5 	bl	800088c <__aeabi_ddiv>
 800b0e2:	f04f 0a01 	mov.w	sl, #1
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	e765      	b.n	800afb8 <atan+0xc8>
 800b0ec:	4b47      	ldr	r3, [pc, #284]	@ (800b20c <atan+0x31c>)
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	d21c      	bcs.n	800b12c <atan+0x23c>
 800b0f2:	4b47      	ldr	r3, [pc, #284]	@ (800b210 <atan+0x320>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7f5 f8e5 	bl	80002c8 <__aeabi_dsub>
 800b0fe:	4b44      	ldr	r3, [pc, #272]	@ (800b210 <atan+0x320>)
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	2200      	movs	r2, #0
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 fa95 	bl	8000638 <__aeabi_dmul>
 800b10e:	4b3d      	ldr	r3, [pc, #244]	@ (800b204 <atan+0x314>)
 800b110:	2200      	movs	r2, #0
 800b112:	f7f5 f8db 	bl	80002cc <__adddf3>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4630      	mov	r0, r6
 800b11c:	4639      	mov	r1, r7
 800b11e:	f7f5 fbb5 	bl	800088c <__aeabi_ddiv>
 800b122:	f04f 0a02 	mov.w	sl, #2
 800b126:	4604      	mov	r4, r0
 800b128:	460d      	mov	r5, r1
 800b12a:	e745      	b.n	800afb8 <atan+0xc8>
 800b12c:	4622      	mov	r2, r4
 800b12e:	462b      	mov	r3, r5
 800b130:	4938      	ldr	r1, [pc, #224]	@ (800b214 <atan+0x324>)
 800b132:	2000      	movs	r0, #0
 800b134:	f7f5 fbaa 	bl	800088c <__aeabi_ddiv>
 800b138:	f04f 0a03 	mov.w	sl, #3
 800b13c:	4604      	mov	r4, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	e73a      	b.n	800afb8 <atan+0xc8>
 800b142:	4b35      	ldr	r3, [pc, #212]	@ (800b218 <atan+0x328>)
 800b144:	4e35      	ldr	r6, [pc, #212]	@ (800b21c <atan+0x32c>)
 800b146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f7f5 f8bb 	bl	80002c8 <__aeabi_dsub>
 800b152:	4622      	mov	r2, r4
 800b154:	462b      	mov	r3, r5
 800b156:	f7f5 f8b7 	bl	80002c8 <__aeabi_dsub>
 800b15a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b166:	f7f5 f8af 	bl	80002c8 <__aeabi_dsub>
 800b16a:	f1bb 0f00 	cmp.w	fp, #0
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	f6bf aedc 	bge.w	800af2e <atan+0x3e>
 800b176:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b17a:	461d      	mov	r5, r3
 800b17c:	e6d7      	b.n	800af2e <atan+0x3e>
 800b17e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b1f0 <atan+0x300>)
 800b180:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b184:	e6d3      	b.n	800af2e <atan+0x3e>
 800b186:	bf00      	nop
 800b188:	54442d18 	.word	0x54442d18
 800b18c:	3ff921fb 	.word	0x3ff921fb
 800b190:	8800759c 	.word	0x8800759c
 800b194:	7e37e43c 	.word	0x7e37e43c
 800b198:	e322da11 	.word	0xe322da11
 800b19c:	3f90ad3a 	.word	0x3f90ad3a
 800b1a0:	24760deb 	.word	0x24760deb
 800b1a4:	3fa97b4b 	.word	0x3fa97b4b
 800b1a8:	a0d03d51 	.word	0xa0d03d51
 800b1ac:	3fb10d66 	.word	0x3fb10d66
 800b1b0:	c54c206e 	.word	0xc54c206e
 800b1b4:	3fb745cd 	.word	0x3fb745cd
 800b1b8:	920083ff 	.word	0x920083ff
 800b1bc:	3fc24924 	.word	0x3fc24924
 800b1c0:	5555550d 	.word	0x5555550d
 800b1c4:	3fd55555 	.word	0x3fd55555
 800b1c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b1cc:	bfa2b444 	.word	0xbfa2b444
 800b1d0:	52defd9a 	.word	0x52defd9a
 800b1d4:	3fadde2d 	.word	0x3fadde2d
 800b1d8:	af749a6d 	.word	0xaf749a6d
 800b1dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b1e0:	fe231671 	.word	0xfe231671
 800b1e4:	3fbc71c6 	.word	0x3fbc71c6
 800b1e8:	9998ebc4 	.word	0x9998ebc4
 800b1ec:	3fc99999 	.word	0x3fc99999
 800b1f0:	54442d18 	.word	0x54442d18
 800b1f4:	bff921fb 	.word	0xbff921fb
 800b1f8:	440fffff 	.word	0x440fffff
 800b1fc:	7ff00000 	.word	0x7ff00000
 800b200:	3fdbffff 	.word	0x3fdbffff
 800b204:	3ff00000 	.word	0x3ff00000
 800b208:	3ff2ffff 	.word	0x3ff2ffff
 800b20c:	40038000 	.word	0x40038000
 800b210:	3ff80000 	.word	0x3ff80000
 800b214:	bff00000 	.word	0xbff00000
 800b218:	0800c4e8 	.word	0x0800c4e8
 800b21c:	0800c508 	.word	0x0800c508

0800b220 <fabs>:
 800b220:	ec51 0b10 	vmov	r0, r1, d0
 800b224:	4602      	mov	r2, r0
 800b226:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b22a:	ec43 2b10 	vmov	d0, r2, r3
 800b22e:	4770      	bx	lr

0800b230 <__ieee754_sqrt>:
 800b230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4a68      	ldr	r2, [pc, #416]	@ (800b3d8 <__ieee754_sqrt+0x1a8>)
 800b236:	ec55 4b10 	vmov	r4, r5, d0
 800b23a:	43aa      	bics	r2, r5
 800b23c:	462b      	mov	r3, r5
 800b23e:	4621      	mov	r1, r4
 800b240:	d110      	bne.n	800b264 <__ieee754_sqrt+0x34>
 800b242:	4622      	mov	r2, r4
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 f9f6 	bl	8000638 <__aeabi_dmul>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4620      	mov	r0, r4
 800b252:	4629      	mov	r1, r5
 800b254:	f7f5 f83a 	bl	80002cc <__adddf3>
 800b258:	4604      	mov	r4, r0
 800b25a:	460d      	mov	r5, r1
 800b25c:	ec45 4b10 	vmov	d0, r4, r5
 800b260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	2d00      	cmp	r5, #0
 800b266:	dc0e      	bgt.n	800b286 <__ieee754_sqrt+0x56>
 800b268:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b26c:	4322      	orrs	r2, r4
 800b26e:	d0f5      	beq.n	800b25c <__ieee754_sqrt+0x2c>
 800b270:	b19d      	cbz	r5, 800b29a <__ieee754_sqrt+0x6a>
 800b272:	4622      	mov	r2, r4
 800b274:	4620      	mov	r0, r4
 800b276:	4629      	mov	r1, r5
 800b278:	f7f5 f826 	bl	80002c8 <__aeabi_dsub>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	f7f5 fb04 	bl	800088c <__aeabi_ddiv>
 800b284:	e7e8      	b.n	800b258 <__ieee754_sqrt+0x28>
 800b286:	152a      	asrs	r2, r5, #20
 800b288:	d115      	bne.n	800b2b6 <__ieee754_sqrt+0x86>
 800b28a:	2000      	movs	r0, #0
 800b28c:	e009      	b.n	800b2a2 <__ieee754_sqrt+0x72>
 800b28e:	0acb      	lsrs	r3, r1, #11
 800b290:	3a15      	subs	r2, #21
 800b292:	0549      	lsls	r1, r1, #21
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0fa      	beq.n	800b28e <__ieee754_sqrt+0x5e>
 800b298:	e7f7      	b.n	800b28a <__ieee754_sqrt+0x5a>
 800b29a:	462a      	mov	r2, r5
 800b29c:	e7fa      	b.n	800b294 <__ieee754_sqrt+0x64>
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	02dc      	lsls	r4, r3, #11
 800b2a4:	d5fb      	bpl.n	800b29e <__ieee754_sqrt+0x6e>
 800b2a6:	1e44      	subs	r4, r0, #1
 800b2a8:	1b12      	subs	r2, r2, r4
 800b2aa:	f1c0 0420 	rsb	r4, r0, #32
 800b2ae:	fa21 f404 	lsr.w	r4, r1, r4
 800b2b2:	4323      	orrs	r3, r4
 800b2b4:	4081      	lsls	r1, r0
 800b2b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2c2:	07d2      	lsls	r2, r2, #31
 800b2c4:	bf5c      	itt	pl
 800b2c6:	005b      	lslpl	r3, r3, #1
 800b2c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b2cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b2d0:	bf58      	it	pl
 800b2d2:	0049      	lslpl	r1, r1, #1
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b2da:	106d      	asrs	r5, r5, #1
 800b2dc:	0049      	lsls	r1, r1, #1
 800b2de:	2016      	movs	r0, #22
 800b2e0:	4632      	mov	r2, r6
 800b2e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b2e6:	1917      	adds	r7, r2, r4
 800b2e8:	429f      	cmp	r7, r3
 800b2ea:	bfde      	ittt	le
 800b2ec:	193a      	addle	r2, r7, r4
 800b2ee:	1bdb      	suble	r3, r3, r7
 800b2f0:	1936      	addle	r6, r6, r4
 800b2f2:	0fcf      	lsrs	r7, r1, #31
 800b2f4:	3801      	subs	r0, #1
 800b2f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b2fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b2fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b302:	d1f0      	bne.n	800b2e6 <__ieee754_sqrt+0xb6>
 800b304:	4604      	mov	r4, r0
 800b306:	2720      	movs	r7, #32
 800b308:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b30c:	429a      	cmp	r2, r3
 800b30e:	eb00 0e0c 	add.w	lr, r0, ip
 800b312:	db02      	blt.n	800b31a <__ieee754_sqrt+0xea>
 800b314:	d113      	bne.n	800b33e <__ieee754_sqrt+0x10e>
 800b316:	458e      	cmp	lr, r1
 800b318:	d811      	bhi.n	800b33e <__ieee754_sqrt+0x10e>
 800b31a:	f1be 0f00 	cmp.w	lr, #0
 800b31e:	eb0e 000c 	add.w	r0, lr, ip
 800b322:	da42      	bge.n	800b3aa <__ieee754_sqrt+0x17a>
 800b324:	2800      	cmp	r0, #0
 800b326:	db40      	blt.n	800b3aa <__ieee754_sqrt+0x17a>
 800b328:	f102 0801 	add.w	r8, r2, #1
 800b32c:	1a9b      	subs	r3, r3, r2
 800b32e:	458e      	cmp	lr, r1
 800b330:	bf88      	it	hi
 800b332:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b336:	eba1 010e 	sub.w	r1, r1, lr
 800b33a:	4464      	add	r4, ip
 800b33c:	4642      	mov	r2, r8
 800b33e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b342:	3f01      	subs	r7, #1
 800b344:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b348:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b34c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b350:	d1dc      	bne.n	800b30c <__ieee754_sqrt+0xdc>
 800b352:	4319      	orrs	r1, r3
 800b354:	d01b      	beq.n	800b38e <__ieee754_sqrt+0x15e>
 800b356:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b3dc <__ieee754_sqrt+0x1ac>
 800b35a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b3e0 <__ieee754_sqrt+0x1b0>
 800b35e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b362:	e9db 2300 	ldrd	r2, r3, [fp]
 800b366:	f7f4 ffaf 	bl	80002c8 <__aeabi_dsub>
 800b36a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b36e:	4602      	mov	r2, r0
 800b370:	460b      	mov	r3, r1
 800b372:	4640      	mov	r0, r8
 800b374:	4649      	mov	r1, r9
 800b376:	f7f5 fbdb 	bl	8000b30 <__aeabi_dcmple>
 800b37a:	b140      	cbz	r0, 800b38e <__ieee754_sqrt+0x15e>
 800b37c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b380:	e9da 0100 	ldrd	r0, r1, [sl]
 800b384:	e9db 2300 	ldrd	r2, r3, [fp]
 800b388:	d111      	bne.n	800b3ae <__ieee754_sqrt+0x17e>
 800b38a:	3601      	adds	r6, #1
 800b38c:	463c      	mov	r4, r7
 800b38e:	1072      	asrs	r2, r6, #1
 800b390:	0863      	lsrs	r3, r4, #1
 800b392:	07f1      	lsls	r1, r6, #31
 800b394:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b398:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b39c:	bf48      	it	mi
 800b39e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b3a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	e756      	b.n	800b258 <__ieee754_sqrt+0x28>
 800b3aa:	4690      	mov	r8, r2
 800b3ac:	e7be      	b.n	800b32c <__ieee754_sqrt+0xfc>
 800b3ae:	f7f4 ff8d 	bl	80002cc <__adddf3>
 800b3b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	f7f5 fbad 	bl	8000b1c <__aeabi_dcmplt>
 800b3c2:	b120      	cbz	r0, 800b3ce <__ieee754_sqrt+0x19e>
 800b3c4:	1ca0      	adds	r0, r4, #2
 800b3c6:	bf08      	it	eq
 800b3c8:	3601      	addeq	r6, #1
 800b3ca:	3402      	adds	r4, #2
 800b3cc:	e7df      	b.n	800b38e <__ieee754_sqrt+0x15e>
 800b3ce:	1c63      	adds	r3, r4, #1
 800b3d0:	f023 0401 	bic.w	r4, r3, #1
 800b3d4:	e7db      	b.n	800b38e <__ieee754_sqrt+0x15e>
 800b3d6:	bf00      	nop
 800b3d8:	7ff00000 	.word	0x7ff00000
 800b3dc:	20000278 	.word	0x20000278
 800b3e0:	20000270 	.word	0x20000270
 800b3e4:	00000000 	.word	0x00000000

0800b3e8 <__ieee754_atan2>:
 800b3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ec:	ec57 6b11 	vmov	r6, r7, d1
 800b3f0:	4273      	negs	r3, r6
 800b3f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b570 <__ieee754_atan2+0x188>
 800b3f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b3fa:	4333      	orrs	r3, r6
 800b3fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b400:	4543      	cmp	r3, r8
 800b402:	ec51 0b10 	vmov	r0, r1, d0
 800b406:	4635      	mov	r5, r6
 800b408:	d809      	bhi.n	800b41e <__ieee754_atan2+0x36>
 800b40a:	4244      	negs	r4, r0
 800b40c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b410:	4304      	orrs	r4, r0
 800b412:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b416:	4544      	cmp	r4, r8
 800b418:	468e      	mov	lr, r1
 800b41a:	4681      	mov	r9, r0
 800b41c:	d907      	bls.n	800b42e <__ieee754_atan2+0x46>
 800b41e:	4632      	mov	r2, r6
 800b420:	463b      	mov	r3, r7
 800b422:	f7f4 ff53 	bl	80002cc <__adddf3>
 800b426:	ec41 0b10 	vmov	d0, r0, r1
 800b42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b432:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b436:	4334      	orrs	r4, r6
 800b438:	d103      	bne.n	800b442 <__ieee754_atan2+0x5a>
 800b43a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b43e:	f7ff bd57 	b.w	800aef0 <atan>
 800b442:	17bc      	asrs	r4, r7, #30
 800b444:	f004 0402 	and.w	r4, r4, #2
 800b448:	ea53 0909 	orrs.w	r9, r3, r9
 800b44c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b450:	d107      	bne.n	800b462 <__ieee754_atan2+0x7a>
 800b452:	2c02      	cmp	r4, #2
 800b454:	d05f      	beq.n	800b516 <__ieee754_atan2+0x12e>
 800b456:	2c03      	cmp	r4, #3
 800b458:	d1e5      	bne.n	800b426 <__ieee754_atan2+0x3e>
 800b45a:	a141      	add	r1, pc, #260	@ (adr r1, 800b560 <__ieee754_atan2+0x178>)
 800b45c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b460:	e7e1      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b462:	4315      	orrs	r5, r2
 800b464:	d106      	bne.n	800b474 <__ieee754_atan2+0x8c>
 800b466:	f1be 0f00 	cmp.w	lr, #0
 800b46a:	da5f      	bge.n	800b52c <__ieee754_atan2+0x144>
 800b46c:	a13e      	add	r1, pc, #248	@ (adr r1, 800b568 <__ieee754_atan2+0x180>)
 800b46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b472:	e7d8      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b474:	4542      	cmp	r2, r8
 800b476:	d10f      	bne.n	800b498 <__ieee754_atan2+0xb0>
 800b478:	4293      	cmp	r3, r2
 800b47a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b47e:	d107      	bne.n	800b490 <__ieee754_atan2+0xa8>
 800b480:	2c02      	cmp	r4, #2
 800b482:	d84c      	bhi.n	800b51e <__ieee754_atan2+0x136>
 800b484:	4b34      	ldr	r3, [pc, #208]	@ (800b558 <__ieee754_atan2+0x170>)
 800b486:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b48a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b48e:	e7ca      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b490:	2c02      	cmp	r4, #2
 800b492:	d848      	bhi.n	800b526 <__ieee754_atan2+0x13e>
 800b494:	4b31      	ldr	r3, [pc, #196]	@ (800b55c <__ieee754_atan2+0x174>)
 800b496:	e7f6      	b.n	800b486 <__ieee754_atan2+0x9e>
 800b498:	4543      	cmp	r3, r8
 800b49a:	d0e4      	beq.n	800b466 <__ieee754_atan2+0x7e>
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b4a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4a6:	da1e      	bge.n	800b4e6 <__ieee754_atan2+0xfe>
 800b4a8:	2f00      	cmp	r7, #0
 800b4aa:	da01      	bge.n	800b4b0 <__ieee754_atan2+0xc8>
 800b4ac:	323c      	adds	r2, #60	@ 0x3c
 800b4ae:	db1e      	blt.n	800b4ee <__ieee754_atan2+0x106>
 800b4b0:	4632      	mov	r2, r6
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	f7f5 f9ea 	bl	800088c <__aeabi_ddiv>
 800b4b8:	ec41 0b10 	vmov	d0, r0, r1
 800b4bc:	f7ff feb0 	bl	800b220 <fabs>
 800b4c0:	f7ff fd16 	bl	800aef0 <atan>
 800b4c4:	ec51 0b10 	vmov	r0, r1, d0
 800b4c8:	2c01      	cmp	r4, #1
 800b4ca:	d013      	beq.n	800b4f4 <__ieee754_atan2+0x10c>
 800b4cc:	2c02      	cmp	r4, #2
 800b4ce:	d015      	beq.n	800b4fc <__ieee754_atan2+0x114>
 800b4d0:	2c00      	cmp	r4, #0
 800b4d2:	d0a8      	beq.n	800b426 <__ieee754_atan2+0x3e>
 800b4d4:	a318      	add	r3, pc, #96	@ (adr r3, 800b538 <__ieee754_atan2+0x150>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f4 fef5 	bl	80002c8 <__aeabi_dsub>
 800b4de:	a318      	add	r3, pc, #96	@ (adr r3, 800b540 <__ieee754_atan2+0x158>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	e014      	b.n	800b510 <__ieee754_atan2+0x128>
 800b4e6:	a118      	add	r1, pc, #96	@ (adr r1, 800b548 <__ieee754_atan2+0x160>)
 800b4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4ec:	e7ec      	b.n	800b4c8 <__ieee754_atan2+0xe0>
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	e7e9      	b.n	800b4c8 <__ieee754_atan2+0xe0>
 800b4f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	e794      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b4fc:	a30e      	add	r3, pc, #56	@ (adr r3, 800b538 <__ieee754_atan2+0x150>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f7f4 fee1 	bl	80002c8 <__aeabi_dsub>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	a10d      	add	r1, pc, #52	@ (adr r1, 800b540 <__ieee754_atan2+0x158>)
 800b50c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b510:	f7f4 feda 	bl	80002c8 <__aeabi_dsub>
 800b514:	e787      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b516:	a10a      	add	r1, pc, #40	@ (adr r1, 800b540 <__ieee754_atan2+0x158>)
 800b518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51c:	e783      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b51e:	a10c      	add	r1, pc, #48	@ (adr r1, 800b550 <__ieee754_atan2+0x168>)
 800b520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b524:	e77f      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b526:	2000      	movs	r0, #0
 800b528:	2100      	movs	r1, #0
 800b52a:	e77c      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b52c:	a106      	add	r1, pc, #24	@ (adr r1, 800b548 <__ieee754_atan2+0x160>)
 800b52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b532:	e778      	b.n	800b426 <__ieee754_atan2+0x3e>
 800b534:	f3af 8000 	nop.w
 800b538:	33145c07 	.word	0x33145c07
 800b53c:	3ca1a626 	.word	0x3ca1a626
 800b540:	54442d18 	.word	0x54442d18
 800b544:	400921fb 	.word	0x400921fb
 800b548:	54442d18 	.word	0x54442d18
 800b54c:	3ff921fb 	.word	0x3ff921fb
 800b550:	54442d18 	.word	0x54442d18
 800b554:	3fe921fb 	.word	0x3fe921fb
 800b558:	0800c540 	.word	0x0800c540
 800b55c:	0800c528 	.word	0x0800c528
 800b560:	54442d18 	.word	0x54442d18
 800b564:	c00921fb 	.word	0xc00921fb
 800b568:	54442d18 	.word	0x54442d18
 800b56c:	bff921fb 	.word	0xbff921fb
 800b570:	7ff00000 	.word	0x7ff00000

0800b574 <_init>:
 800b574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b576:	bf00      	nop
 800b578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b57a:	bc08      	pop	{r3}
 800b57c:	469e      	mov	lr, r3
 800b57e:	4770      	bx	lr

0800b580 <_fini>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	bf00      	nop
 800b584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b586:	bc08      	pop	{r3}
 800b588:	469e      	mov	lr, r3
 800b58a:	4770      	bx	lr
